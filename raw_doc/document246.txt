



next →
← prev

Python seek() Method
Python seek() method is used for changing the current location of the file handle. The file handle is like a cursor, which is used for defining the location of the data which has to be read or written in the file.
Syntax:

fi.seek(offset, from_where), where fi is the file pointer

Parameters:
Offset: This is used for defining the number of positions to move forward.
from_where: This is used for defining the point of reference.
NOTE: The seek() method in Python does not return any value.
The from_where argument is used for selecting the reference point. It can accept three values:

0: The 0 value is used for setting the whence argument at the beginning of the file.
1: The 1 value is used for setting the whence argument at the current position of the file.
2: The 2 value is used for setting the whence argument at the end of the file.

The from_where argument is set to 0 by default. Therefore, the reference point cannot be set to the current position or end position, in the text mode, except when the offset is equal to 0.
Example1: (The user has to read the text file, which contains the following text:
"This is the sentence I am Writing to show the example of the seek() method working in Python."

fi = open("text.txt", "r")
# the second parameter of the seek method is by default 0
fi.seek(30)
# now, we will print the current position
print(fi.tell())
 
print(fi.readline())
fi.close()

Output:
30
ing to show the example of the seek() method working in Python.

Sample Text File -

# let's assuming the text file has following 5 lines
# line 1: This is the sentence I am Writing to show the example of the seek() 
# method working in Python.
# line 2: The line no. 2 for showing the second method of writing the seek() 
# method is python
# Line 3: the line no. 3 for showing the second method 
# Line 4: the line no. 4 for showing the second method 
# Line 5: the line no. 5 for showing the second method 

Example 2: (method 2)

fi = open ("text.txt", "r+")
print ("Name of the file: ", fi.name)

line_1 = fi.readline()
print ("Read Line: %s" % (line_1))

# Again, set the pointer to the beginning
fi.seek (0, 1)
line_2 = fi.readline()
print ("Read Line: %s" % (line_2))

# Close opend file
fi.close()

Output:
Name of the file:  text.txt
Read Line: This is the sentence I am Writing to show the example of the seek() method working in Python.

Read Line: The line no. 2 for showing the second method of writing the seek() method is python

The seek() method can also work with the negative offset, but only when the file is opened in binary mode.
Example 3: (negative offset)

fi = open ("text.txt", "rb")
 
# the user is setting the reference point to thirtieth position to the left from 
# end
fi.seek (-70, 2)
 
# now print the current position
print (fi.tell())
 
# now the user will Convert the binary to string 
print (fi.readline().decode('utf-8'))
 
fi.close()

Output:
25
 Writing to show the example of the seek() method working in Python.



Next TopicTernary Operator in Python




← prev
next →




