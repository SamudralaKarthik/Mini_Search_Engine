



next →
← prev

Python Program to Print Pascal Triangle
In this tutorial, we will discuss how we can print the Pascal triangle using the Python program. But first, let's understand what the Pascal triangle is.
Introduction
Pascal triangle is an exciting concept of mathematics where a triangular array is formed by summing adjacent elements in the preceding row. In simple words, every number is generated by taking up the sum of the adjacent row, and the outside edges of a triangle are always 1. It is named after the famous French mathematician Blaise Pascal. Below is the representation of the Pascal triangle.

In the above image, the first line is 1. The second line contains 2 one, and the third line has 1 2 1, which is formed by taking up the sum of the above line. So it follows the alternate pattern in an entire triangle and so on.
Algorithm to Print Pascal's Triangle in Python
Below are the step used to print the Pascal triangle.
Step - 1: Taking input from the user to get the number of rows.
Step - 2: Declare an empty list that will store the values.
Step - 3: Using for loop, which will iterate through 0 to n - 1, append the sub-lists to the list.
Step - 4: Now append 1 to the list.
Step - 5: Now, use for loop to define the value of the number inside the triangle adjacent row.
Step - 6: Print Pascal triangle according to the format.
Step - 7: Exit
Let's understand the following implementation of algorithm into Python program.
Program

num = int(input("Enter the number: "))
list1 = [] #an empty list
for i in range(num):
  list1.append([])
  list1[i].append(1)
  for j in range(1, i):
    list1[i].append(list1[i - 1][j - 1] + list1[i - 1][j])
  if(num != 0):
    list1[i].append(1)
for i in range(num):
  print(" " * (num - i), end = " ", sep = " ")
  for j in range(0, i + 1):
    print('{0:6}'.format(list1[i][j]), end = " ", sep = " ")
  print()

Output:
Case - 1
Enter the number: 4
          1 
      1      1 
  1      2      1 
1      3      3      1

We run the program one more time.
Case - 2:
Enter the number: 10
                1 
            1      1 
        1      2      1 
    1      3      3      1 
1      4      6      4     
1      5     10     10      5      1 
 1      6     15     20     15      6      1 
 1      7     21     35     35     21      7      1 
 1      8     28     56     70     56     28      8      1 
 1      9     36     84    126    126     84     36      9      1

Explanation -
In the above program, we have taken several rows from the user as input. We have declared an empty list. Then we used for loop, which appended the sub-list into an empty list. The next one is appended to all sub-lists. The inner for loop defined the number inside the triangle is the sum of the above adjacent row. In the end, we have used for loop to print Pascal's triangle according to a format.
Method - 2:
We can use another method by the following the binomial coefficient, all the line starts with 1 and the ith entry in a row number line is Binomial Coefficient C(line, i). The formula is given below.

C(line, i) = C(line, i-1) * (line - i + 1) / i

Example -

# input n
n = int(input("Enter the number of rows:"))

for i in range(1, n+1):
   for j in range(0, n-i+1):
      print(' ', end='')

   # first element is always 1
   C = 1
   for j in range(1, i+1):

      # first value in a line is always 1
      print(' ', C, sep='', end='')

      # using Binomial Coefficient
      C = C * (i - j) // j
   print()

The above method's time complexity is 0(N2).
Method - 3
This method is optimized way of printing Pascal triangle. This method is based on the power of 11.

11**0 = 1
11**1 = 11
11**2 = 121
11**3 = 1331

Example -

# input n
n = int(input("Enter the number of rows:"))

# iterarte upto n
for i in range(n):
   # adjust space
   print(' '*(n-i), end='')

   # compute power of 11
   print(' '.join(map(str, str(11**i))))

Output:
Case - 1:
Enter the number of rows: 5
     1
    1 1
   1 2 1
  1 3 3 1
 1 4 6 4 1

Case - 2:
Enter the number of rows: 6  
       1
      1 1
     1 2 1
    1 3 3 1
   1 4 6 4 1
  1 6 1 0 5 1

As we can see in the above code when we enter the number of rows five. It gave the wrong output. That means it works upto n< = 5 only. It takes less time to execute 0(N).


Next TopicNamedTuple in Python




← prev
next →




