



next →
← prev

Python del Statement
Introduction
In Python, the del keyword is generally used to delete an object. Since everything in Python represents some kind of object, the del keyword can also be used to delete lists, variables, parts of a list, etc. The del statement does not return any type of value.
Syntax of del statement

del obj_name

Note: del is a keyword, and obj_name can be lists, dictionaries, user-defined objects, variables, etc.
Examples of del Statement
Let's look at some examples of del statements and try to delete some items.
Example 1: In this program we will delete a variable using del statement

a = 13
b = 5
c = a + b + 13 - 1 + 5
print(c)

# delete the c variables
del c

# print c variable after delete
print(c)

Output:
35

Traceback (most recent call last):
  File "", line 10, in 
NameError: name 'c' is not defined
>



Example 2: In this program we will delete a list and slice list using del keyword

items_1 = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
items_2 =["a", "b", "c", "d", "e", "f"]

# print the items_1 and items_2
print(items_1)
print(items_2)

# delete the 3rd element of items_1
del items_1[2]

# check if the 3rd element in items_1 is deleted or not
print(items_1)

# slice items_1 from index 4 to 9
del items_1[4:9]

# check if the elements from index 4 to 9 in items_1 is deleted or not
print(items_1)

# delete the 2nd element of items_2
del items_2[1]

# check if the 2nd element in items_2 is deleted or not
print(items_2)

# delete items_2
del items_2

# check if items_2 exists
print(items_2)

Output:
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
['a', 'b', 'c', 'd', 'e', 'f']
[0, 1, 3, 4, 5, 6, 7, 8, 9]
[0, 1, 3, 4]
['a', 'c', 'd', 'e', 'f']

Traceback (most recent call last):
  File "", line 30, in 
NameError: name 'items_2' is not defined
>



Example 3: In this program, we will use the del statement to delete dictionaries and key-value pairs

dictionary_1 = {"up": "down", "forward": "backward", "small": "down"}
dictionary_2 = {"short": "long", "you": "me", "Jack": "John"}

# check if dictionary_1 and dictionary_2 exists
print(dictionary_1)
print(dictionary_2)

# delete key-value pair with key "up" from dictionary_1
del dictionary_1["up"]

# check if the key-value pair with key "up" from dictionary_1 is deleted
print(dictionary_1)

# delete dictionary_2
del dictionary_2

# check if dictionary_2 exists
print(dictionary_2)

Output:
{'up': 'down', 'forward': 'backward', 'small': 'down'}
{'short': 'long', 'you': 'me', 'Jack': 'John'}
{'forward': 'backward', 'small': 'down'}

Traceback (most recent call last):
   File "", line 18, in 
NameError: name 'dictionary_2' is not defined
>



Example 4: Delete a User-Defined Object

# defining a class
class employee:
    name = "John wik"
    age = 26
    address = "C-26, London"
    phone_no = 61562347  

# declaring the object to the employee class
emp = employee()

# print the employee data
print("Name: ", emp.name)
print("Age: ", emp.age)
print("Address: ", emp.address)
print("Phone No: ", emp.phone_no)

# deleting the object 
del emp

# printing values - will generate NameError
print("Name: ", emp.name)
print("Age: ", emp.age)
print("Address: ", emp.address)
print("Phone No: ", emp.phone_no)

Output:
Name:  John wik
Age:  26
Address:  C-26, London
Phone No:  61562347
Traceback (most recent call last):
   File "", line 21, in 
NameError: name 'emp' is not defined
>





Next TopicLooping technique in Python




← prev
next →




