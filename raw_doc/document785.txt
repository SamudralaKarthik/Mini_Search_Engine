



next →
← prev

3D Scatter Plotting in Python using Matplotlib
What is Matplotlib?
Matplotlib is a library in Python which is used to create static and dynamic animation and plots with its inbuilt functions. It has a lot of inbuilt features and built-in analysis tools for analyzing any figure or graph.
If we want to plot any three-dimensional figure then we can use the Matplotlib library. When we have a huge dataset of three-dimensional variables, and we plot its figure then it looks very scattered, and this is called a 3D scatter plot. We will use Matplotlib's matplot3d toolkit to draw the three-dimensional figure.
There is an ax.scatterd3D() function which accepts the dataset of coordinates X, Y and Z.
It takes many more arguments based on attributes we want to give to our three-dimensional plot.
When Matplotlib was first created, only two-dimensional plotting was considered. A practical (albeit rather constrained) collection of tools for three-dimensional data visualization was created around the time of the 1.0 release by layering some three-dimensional charting utilities on top of Matplotlib's two-dimensional display. By importing the mplot3d toolkit, which is part of the basic Matplotlib installation, three-dimensional charts are made possible.
The simplest three-dimensional plot is a scatter plot made up of lines or clusters of (x, y, z) triples. These can be produced using the ax.plot3D and ax.scatter3D functions, much like the more typical two-dimensional chart that were previously presented. These have a call signature that is remarkably similar to their two-dimensional counterparts.
To create the illusion of depth on the page, the scatter points' transparency has been altered.
Example 1:

# importing the necessary libraries
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits import mplot3d

# generating  random dataset
z = np.random.randint(80, size =(55))
x = np.random.randint(60, size =(55))
y = np.random.randint(64, size =(55))

# Creating figures for the plot
fig = plt.figure(figsize = (10, 7))
ax = plt.axes(projection ="3d")

# Creating a plot using the random datasets 
ax.scatter3D(x, y, z, color = "red")
plt.title("3D scatter plot")

# display the  plot
plt.show()

Output:

Explanation:
In the above example, we have created the three-dimensional plot using the ax.scatter() function. We have initially imported all the libraries we required, like numpy,matplotlib and mpl_toolkits. Then, we have created the datasets for x,y and z coordinates of random numbers using the randInt() function. After that we have used the ax.scatter3D() function and put x,y and z coordinates, and we took red color for the points. At the end, we display the plot using the show() function.
Example 2:

# importing the necessary libraries
from mpl_toolkits import mplot3d
import matplotlib.pyplot as plt
import numpy as np


# Creating random dataset
z = 4 * np.tan(np.random.randint(10, size =(500))) + np.random.randint(100, size =(500))
x = 4 * np.cos(z) + np.random.normal(size = 500)
y = 4 * np.sin(z) + 4 * np.random.normal(size = 500)

# Creating figure
fig = plt.figure(figsize = (16, 12))
ax = plt.axes(projection ="3d")

# Add x, and y gridlines for the figure
ax.grid(b = True, color ='blue',linestyle ='-.', linewidth = 0.5,alpha = 0.3)


# Creating the color map for the plot
my_cmap = plt.get_cmap('hsv')

# Creating the 3D plot
sctt = ax.scatter3D(x, y, z,alpha = 0.8,c = (x + y + z),cmap = my_cmap,marker ='^')

plt.title("3D scatter plot in Python")
ax.set_xlabel('X-axis', fontweight ='bold')
ax.set_ylabel('Y-axis', fontweight ='bold')
ax.set_zlabel('Z-axis', fontweight ='bold')
fig.colorbar(sctt, ax = ax, shrink = 0.6, aspect = 5)

# display the plot
plt.show()

Output:

Explanation:
In the above code, we have plotted the three-dimensional plot with the function ax.scatter3D() function. We have generated the random datasets for the x,y and z coordinates and plotted them using marker '^'. We use the set_label function to give the labels to respective axes.
Example 3:

import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D


fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')

x1 =[1,2,3,4,5,6,7,8,9,10]
y1 =[5,6,2,3,13,4,1,2,4,8]
z1 =[2,3,3,3,5,7,9,11,9,10]

x2 =[-1,-2,-3,-4,-5,-6,-7,8,-9,-10]
y2 =[-5,-6,-2,-3,-13,-4,-1,2,-4,-8]
z2 =[-2,-3,-3,-3,-5,-7,9,-11,-9,-10]

ax.scatter(x2, y1, z1, c='r', marker='^')
ax.scatter(x2, y2, z2, c='b', marker='o')

ax.set_xlabel('X Axis')
ax.set_ylabel('Y Axis')
ax.set_zlabel('Z Axis')

plt.show()

Output:

Explanation:
In the above example, we have plotted the two 3-D dimensional datasets simultaneously in the same code. For the first three-dimensional plot, we have chosen the blue color for the points and '^' as the marker for the points in the figure.
In the same way for the second plot, we have chosen the red color for the points and 'o' as the marker of the points in the figure.


Next TopicFunction Annotations in Python




← prev
next →




