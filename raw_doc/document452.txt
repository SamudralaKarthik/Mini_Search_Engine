



next →
← prev

Ping Pong Game Using Turtle in Python
The ping pong game is one of the most famous games of arcadia, which is quite similar to table tennis. The rules of this game are simple:

There are two players.
Both have control over the paddle of their side.
They can move the paddle on vertical sides from up to down and down to up.

Players can strike back and forth on the ball by using the paddle.
Turtle: The turtle is a built-in module in Python which is used for graphical illustrations. The users can use it as a pen and panel to illustrate the graphics.
The following are the steps used for illustrating Ping Pong game:

Step 1: The user has to create two Paddles for the "Left Side" and "Right Side" of the screen.
Step 2: The user then has to create the ball.
Step 3: Then, create an event for moving the paddles vertically by pressing the particular keys, that is, for "Left Paddle": "R" for "Up" and "C" for "Down", for "Right Paddle": "Up key ()" for "Up" and "Down key ()" for "Down".
Step 4: At last, create the function for updating the score after each player misses the strike on the ball.

Code 1: For Creating Illustrating the Ball and Paddle:

import os
import turtle
 
# First, we will create screen
screen_1 = turtle.Screen()
screen_1.title("Ping-Pong Game")
screen_1.bgcolor("Yellow")
screen_1.setup(width = 1050, height = 650)
 
 
# Left paddle
left_paddle = turtle.Turtle()
left_paddle.speed(0)
left_paddle.shape("square")
left_paddle.color("Red")
left_paddle.shapesize(stretch_wid = 6, stretch_len = 2)
left_paddle.penup()
left_paddle.goto(-400, 0)
 
 
# Right paddle
right_paddle = turtle.Turtle()
right_paddle.speed(0)
right_paddle.shape("square")
right_paddle.color("Blue")
right_paddle.shapesize(stretch_wid = 6, stretch_len = 2)
right_paddle.penup()
right_paddle.goto(400, 0)
 
 
# Ball of circle shape
hit_ball = turtle.Turtle()
hit_ball.speed(45)
hit_ball.shape("circle")
hit_ball.color("White")
hit_ball.penup()
hit_ball.goto(0, 0)
hit_ball.dx = 5
hit_ball.dy = -5

Output:

Explanation:
First, we imported the turtle library. Then we wrote the code for the background screen by using turtle.Screen() function. We created the Left and Right paddle by using the turtle.Turtle() function and positioned them by using goto() function. at last, we created the ball by using a turtle.Turtle() function and mentioned its moving speed on screen by using speed() function and other required parameters. The illustration of the ball and paddle on the screen is ready.
Code 2: The Complete Code for Illustrating the Ping Pong Game with Two Players.

import os
import turtle
 
# First, we will create screen
screen_1 = turtle.Screen()
screen_1.title("Ping-Pong Game")
screen_1.bgcolor("Yellow")
screen_1.setup(width = 1050, height = 650)
 
 
# Left paddle
left_paddle = turtle.Turtle()
left_paddle.speed(0)
left_paddle.shape("square")
left_paddle.color("Red")
left_paddle.shapesize(stretch_wid = 6, stretch_len = 2)
left_paddle.penup()
left_paddle.goto(-400, 0)
 
 
# Right paddle
right_paddle = turtle.Turtle()
right_paddle.speed(0)
right_paddle.shape("square")
right_paddle.color("Blue")
right_paddle.shapesize(stretch_wid = 6, stretch_len = 2)
right_paddle.penup()
right_paddle.goto(400, 0)
 
 
# Ball of circle shape
hit_ball = turtle.Turtle()
hit_ball.speed(45)
hit_ball.shape("circle")
hit_ball.color("Black")
hit_ball.penup()
hit_ball.goto(0, 0)
hit_ball.dx = 5
hit_ball.dy = -5
 
 
# Now, we will initialize the score
left_player = 0
right_player = 0
 
 
# Displaying of the score
sketch_1 = turtle.Turtle()
sketch_1.speed(0)
sketch_1.color("blue")
sketch_1.penup()
sketch_1.hideturtle()
sketch_1.goto(0, 260)
sketch_1.write("Left Player : 0    Right Player: 0",
             align = "center", font = ("Courier", 24, "normal"))
 
 
# Implementing the functions for moving paddle vertically
def paddle_L_up():
    y = left_paddle.ycor()
    y += 20
    left_paddle.sety(y)
 
 
def paddle_L_down():
    y = left_paddle.ycor()
    y -= 20
    left_paddle.sety(y)
 
 
def paddle_R_up():
    y = right_paddle.ycor()
    y += 20
    right_paddle.sety(y)
 
 
def paddle_R_down():
    y = right_paddle.ycor()
    y -= 20
    right_paddle.sety(y)
 
 
# Then, binding the keys for moving the paddles up and down. 
screen_1.listen()
screen_1.onkeypress(paddle_L_up, "r")
screen_1.onkeypress(paddle_L_down, "c")
screen_1.onkeypress(paddle_R_up, "Up")
screen_1.onkeypress(paddle_R_down, "Down")
 
 
while True:
    screen_1.update()
 
    hit_ball.setx(hit_ball.xcor() + hit_ball.dx)
    hit_ball.sety(hit_ball.ycor() + hit_ball.dy)
 
    # Check all the borders
    if hit_ball.ycor() > 280:
        hit_ball.sety(280)
        hit_ball.dy *= -1
 
    if hit_ball.ycor() < -280:
        hit_ball.sety(-280)
        hit_ball.dy *= -1
 
    if hit_ball.xcor() > 500:
        hit_ball.goto(0, 0)
        hit_ball.dy *= -1
        left_player += 1
        sketch_1.clear()
        sketch_1.write("Left_player : {}    Right_player: {}".format(
                      left_player, right_player), align = "center",
                      font = ("Courier", 24, "normal"))
 
    if hit_ball.xcor() < -500:
        hit_ball.goto(0, 0)
        hit_ball.dy *= -1
        right_player += 1
        sketch_1.clear()
        sketch_1.write("Left_player : {}    Right_player: {}".format(
                                 left_player, right_player), align = "center",
                                 font = ("Courier", 24, "normal"))
 
    # Collision of ball and paddles
    if (hit_ball.xcor() > 360 and
                        hit_ball.xcor() < 370) and (hit_ball.ycor() < right_paddle.ycor() + 40 and
                        hit_ball.ycor() > right_paddle.ycor() - 40):
        				hit_ball.setx(360)
        				hit_ball.dx *= -1
        
    if (hit_ball.xcor() < -360 and
                       hit_ball.xcor() > -370) and (hit_ball.ycor() < left_paddle.ycor() + 40 and
                       hit_ball.ycor() > left_paddle.ycor() - 40):
                       hit_ball.setx(-360)
                       hit_ball.dx *= -1

Output:

Explanation:
In the above code, after illustrating the outlook of the screen with paddles and ball, we will first initialize the score of both the players, that is, Zero. Then, we will display the score on the screen, which will increase with the opposite player missing the strike. We will then implement the functions for moving the paddle vertically. We will bind the keys for each function, that is, for "Left Paddle": "R" for "Up" and "C" for "Down", for "Right Paddle": "Up key" for "Up" and "Down key" for "Down". Then, we will initiate how the ball and striking of the paddle will work, as if the ball hit the paddle, it will go for the opposite player, but if the paddle missed the ball, then the ball will hit the border, and the opposite player will get the score. If the code is correct and no error is found, the screen of Ping Pong Game will pop up after running the code, and the players can play. The ball will first go for the right player.
Conclusion
In this tutorial, we have created a simple illustration of a ping pong game on the screen by using the built-in library of Python, that is, Turtle. The user can create different moving illustrations by using the turtle library and its different functions.


Next TopicPython Function to Display Calendar




← prev
next →




