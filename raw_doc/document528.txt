



next →
← prev

Create a Real Time Voice Translator using Python
In this tutorial, we're going to develop a real time voice translator using Python.
Required Modules:
Following are the libraries or modules we will need for creating the real time translator:

playsound: This module plays sounds in Python


!pip3 install playsound


Googletrans: The "Googletrans" module can be used for free and is an unlimited Python library that implements the Google Translate API


!pip3 install googletrans


Speech Recognition Module: It is a library which can be used by Python for recognizing the commands provided. The pip is the preferred method to perform Speech Recognition.


!pip3 install SpeechRecognition


PyAudio: This module is used for taking the command from the user


pip install PyAudio-0.2.11-cp39-cp39-win_amd64.whl


gTTs: The gTTs API supports various languages, such as English, Hindi, Tamil, French, German, and many more.


!pip3 install gTTs
!pip3 install gTTS-token

Basic Idea:
A real-time translator that can translate human language voice inputs and generates the output voice translation in the required language. It is built using Google's googleTrans API and the speech_recognition library in Python. The program will convert the texts from one language into another language and save them as an audio file in mp3 format. The playsound module will used to play the created mp3 format file. Following that, the created MP3 file is removed by using the OS module.
Step By Step Implementation
Step 1: Import all the required Modules

from playsound import playsound as PS
import speech_recognition as s_r 
from googletrans import Translator as Trans 
from gtts import gTTS 
import os
import pyaudio

Step 2: Creating a tuple of all the languages mapped with their code







Step 3: Taking the voice commands from the user end.

# First, we will capture the user's Voice command
# It will take the command through built-in microphone of the device
def take_command():
    r1 = s_r.Recognizer()
    with s_r.Microphone() as source:
        print ("listening to the voice...")
        r1.pause_threshold = 1
        audio1 = r1.listen(source)
  
    try:
        print ("Recognizing the voice...")
        query_1 = r1.recognize_google(audio, language = 'en-in')
        print (f" user said? {query_1}\n")
    except Exception as ep:
# just in case it didn't recognise the voice or language properly
        print ("The user is requested to please say that again...")
        return "None"
    return query_1

Step 4: Taking the voice input from the user end.

# Here, we will take the user's voice input from the user end
query_1 = take_command()
while (query_1 == "None"):
    query_1 = take_command()

Step 5: Implementing the input destination language from the user end, and Map user input with the language code.

def destination_language():
    print("Please enter the language in which you want to convert the above input \
    : Ex. English, Hindi, German, French etc.")
    print()
  
    # Now, we will implement the input destination language in which the user
# wants to translate the voice command:
    to_language = take_command()
    while (to_language == "None"):
        to_language = take_command()
    to_language = to_language.lower()
    return to_language
  
to_language = destination_language()
  
# Now, we will map the input destination language with the code
while (to_language not in dic_language):
    print ("The language in which the user wants to convertthe voice command\ is currently not available, the user is requested to input some other language")
    print()
    to_language = destination_language()
  
to_language = dic_language[dic_language.index(to_language)+1]

Step 6: Now we will invoke the Translator.

# Here, we will invoke the Google Translator
translator1 = Trans()

Step 7: Now, we will translate from src to dest

# Now we will translate from src to dest
text_to_translate_1 = translator1.translate1(query_1, dest = to_language)
text1 = text_to_translate_1.text

Step 8: Now, Save the Translated files and delete them after playing.

# We will be using the Google-Text-to-Speech i.e., gTTS() function of the gtts
# module for speaking the translated text into the input destination language
# selected by the user which is stored in to_language.
# We have also given third argument as False because it speaks very slowly by # default
speak = gTTS(text = text1, language = to_language, slow = False)
  
# We will be using the save() function for saving the translated speech in #captured_JTP_voice.mp3 file
speak.save("captured_JTP_voice.mp3")
  
# Now at last, we will be using the OS module for running the translated voice.
PS('captured_JTP_voice.mp3')
os.remove('captured_JTP_voice.mp3')
print(text)

Full Implementation of Code:

from playsound import playsound as PS
import speech_recognition as s_r 
from googletrans import Translator as Trans 
from gtts import gTTS 
import os
import pyaudio









# First, we will capture the user's Voice command
# It will take the command through built-in microphone of the device
def take_command():
    r1 = s_r.Recognizer()
    with s_r.Microphone() as source:
        print ("listening to the voice...")
        r1.pause_threshold = 1
        audio1 = r1.listen(source)
  
    try:
        print ("Recognizing the voice...")
        query_1 = r1.recognize_google(audio, language = 'en-in')
        print (f" user said? {query_1}\n")
    except Exception as ep:
# just in case it didn't recognise the voice or language properly
        print ("The user is requested to please say that again...")
        return "None"
    return query_1
# Here, we will take the user's voice input from the user end
query_1 = take_command()
while (query_1 == "None"):
    query_1 = take_command()

def destination_language():
    print("Please enter the language in which you want to convert the above input \
    : Ex. English, Hindi, German, French etc.")
    print()
  
    # Now, we will implement the input destination language in which the user
# wants to translate the voice command:
    to_language = take_command()
    while (to_language == "None"):
        to_language = take_command()
    to_language = to_language.lower()
    return to_language
  
to_language = destination_language()
  
# Now, we will map the input destination language with the code
while (to_language not in dic_language):
    print ("The language in which the user wants to convertthe voice command\ is currently not available, the user is requested to input some other language")
    print()
    to_language = destination_language()
  
to_language = dic_language[dic_language.index(to_language)+1]
# Here, we will invoke the Google Translator
translator1 = Trans()
# Now we will translate from src to dest
text_to_translate_1 = translator1.translate1(query_1, dest = to_language)
text1 = text_to_translate_1.text
# We will be using the Google-Text-to-Speech i.e., gTTS() function of the gtts
# module for speaking the translated text into the input destination language
# selected by the user which is stored in to_language.
# We have also given third argument as False because it speaks very slowly by # default
speak = gTTS(text = text1, language = to_language, slow = False)
  
# We will be using the save() function for saving the translated speech in #captured_JTP_voice.mp3 file
speak.save("captured_JTP_voice.mp3")
  
# Now at last, we will be using the OS module for running the translated voice.
PS('captured_JTP_voice.mp3')
os.remove('captured_JTP_voice.mp3')
print(text)

Output:



Next TopicHow to Sort Tuple in Python




← prev
next →




