



next →
← prev

Loan Calculator using PyQt5 in Python
This article will demonstrate how to use PyQt5 to develop a loan calculator.
A complete set of Python bindings for Qt v5 is available as PyQt5. Cross-platform GUI toolkit PyQt5 is a collection of Python bindings for Qt version 5. The capabilities and simplicity offered by this toolkit make it quite simple to create an interactive desktop application. On all platforms that are supported, including iOS and Android, it enables Python to be used as an alternative to C++ for application development. It is implemented as more than 35 extension modules.
This post is mainly about building a loan calculator using the Python library called PyQt5. A loan is a legal agreement between a borrower and a lender whereby the borrower gets a sum of money (the principle) that they must later repay. And, to calculate this value, we use Loan Calculator. This Loan Calculator will be built using the PyQt5 library.
So, we will start with the basic instructions to be followed.
Steps for implementing a GUI :

Make a heading label with the name of the calculator.
Make a label and line edit pair for the interest rate, with the label indicating what the user must write and the line edit allowing text entry.
Create a pair in a similar manner for the amount and the year.
Construct a calculator push button.
Design a label that displays the estimated monthly payment.
Make a label to display the total amount computed.

Implementation steps on the back end :

Change the line edit to only take numbers as input;
Add a push button action.
Within the push button action, retrieve the line edits' text.
Determine if the line edit text is empty or zero, and then return to prevent continued execution of the procedure.
Change the value of the text to an integer.
Determine the monthly sum and add it to the label.
Add up the monthly amounts to get the total, then label the result.

Walking through the code :

# import the required modules
from PyQt5.QtWidgets import *
from PyQt5 import QtCore, QtGui
from PyQt5.QtGui import *
from PyQt5.QtCore import *

import sys

First of all, to begin with, we imported all the required modules into our program. The files we imported include QtWidgets, QtCore, QtGui and sys.

# creating a window class
class Window(QMainWindow):
	
	# using a constructor
	def __init__(self):
		super().__init__()

		# setting the title of the window
		self.setWindowTitle("Python ")

		# setting the width of the window
		self.wd_width = 400

		# setting the height of the window
		self.wd_height = 500

		# setting geometry
		self.setGeometry(100, 100, self.wd_width, self.wd_height)

		# calling the function
		self.UiComponents()

		# displaying all the widgets
		self.show()

Then, we created a new class which contains the constructor to initialise our function. Next, we set the title, width and height of the window. Also, we defined the window's geometry. Then, we displayed all the widgets present.

# function for inserting components
	def UiComponents(self):
		# defining a new heading label
		heading = QLabel("Loan Calculator", self)

		# Mentioning the geometry for the heading
		heading.setGeometry(0, 10, 400, 60)

		# setting the font
		font = QFont('Times', 15)
		font.setBold(True)
		font.setItalic(True)
		font.setUnderline(True)

		# Mentioning font for the heading
		heading.setFont(font)

		# Giving the alignment for the heading
		heading.setAlignment(Qt.AlignCenter)

		# Mentioning the color effect for the heading
		color = QGraphicsColorizeEffect(self)
		color.setColor(Qt.darkCyan)
		heading.setGraphicsEffect(color)

Then we defined another function in which we will be creating the heading and various labels and setting their properties. Next, we set the heading for the loan calculator and set its position and geometry along with the font properties and colour effects.

# Defining a new interest label
		int_label = QLabel("Annual Interest", self)

		# Mentioning the properties for the interest label
		int_label.setAlignment(Qt.AlignCenter)
		int_label.setGeometry(20, 100, 170, 40)
		int_label.setStyleSheet("QLabel"
							"{"
							"border : 2px solid black;"
							"background : rgba(70, 70, 70, 35);"
							"}")
		int_label.setFont(QFont('Times', 9))

		# Mentioning a QLineEdit object for getting the interest
		self.rate = QLineEdit(self)

		# taking in only the numbers as input
		intOnly = QIntValidator()
		self.rate.setValidator(intOnly)

		# Mentioning properties for the rate line edit
		self.rate.setGeometry(200, 100, 180, 40)
		self.rate.setAlignment(Qt.AlignCenter)
		self.rate.setFont(QFont('Times', 9))


		# Defining a label for the number of years
		num_label = QLabel("Years ", self)

		# Adding properties for the years label
		num_label.setAlignment(Qt.AlignCenter)
		num_label.setGeometry(20, 150, 170, 40)
		num_label.setStyleSheet("QLabel"
							"{"
							"border : 2px solid black;"
							"background : rgba(70, 70, 70, 35);"
							"}")
		num_label.setFont(QFont('Times', 9))

		# Defining a new QLineEdit object to get the years
		self.years = QLineEdit(self)

		# taking input as the numbers only
		intOnly = QIntValidator()
		self.years.setValidator(intOnly)

		# Mentioning the properties for the rate line edit
		self.years.setGeometry(200, 150, 180, 40)
		self.years.setAlignment(Qt.AlignCenter)
		self.years.setFont(QFont('Times', 9))

		# Defining a new loan amount label
		amt_label = QLabel("Amount", self)

		# Mentioning the properties for the amount label
		amt_label.setAlignment(Qt.AlignCenter)
		amt_label.setGeometry(20, 200, 170, 40)
		amt_label.setStyleSheet("QLabel"
							"{"
							"border : 2px solid black;"
							"background : rgba(70, 70, 70, 35);"
							"}")
		amt_label.setFont(QFont('Times', 9))

		# Defining a new QLineEdit object for getting the amount
		self.amount = QLineEdit(self)

		# Taking input as numbers only
		intOnly = QIntValidator()
		self.amount.setValidator(intOnly)

		# Adding properties for the rate line edit
		self.amount.setGeometry(200, 200, 180, 40)
		self.amount.setAlignment(Qt.AlignCenter)
		self.amount.setFont(QFont('Times', 9))

Then, we created various labels and set their properties. The labels were annual interest, years and amount. They were first created, then we defined their properties and set their positions. Then we also defined their font styles and sizes for displaying. Along with these labels, we also created simultaneous labels for the text to be entered or displayed, i.e. textareas.

	# Defining a new push button
		calc = QPushButton("Compute Payment", self)

		# Mentioning the geometry  for the push button
		calc.setGeometry(125, 270, 150, 40)

		# Inserting action to the calc button
		calc.clicked.connect(self.calc_action)

		# Defining a new label to display monthly payment
		self.mp_payment = QLabel(self)

		# Adding properties to the m payment label
		self.mp_payment.setAlignment(Qt.AlignCenter)
		self.mp_payment.setGeometry(50, 340, 300, 60)
		self.mp_payment.setStyleSheet("QLabel"
									"{"
									"border : 3px solid black;"
									"background : white;"
									"}")
		self.mp_payment.setFont(QFont('Arial', 11))

		# Defining a new label to display monthly payment
		self.yp_payment = QLabel(self)

		# Adding some properties to the y payment label
		self.yp_payment.setAlignment(Qt.AlignCenter)
		self.yp_payment.setGeometry(50, 410, 300, 60)
		self.yp_payment.setStyleSheet("QLabel"
									"{"
									"border : 3px solid black;"
									"background : white;"
									"}")
		self.yp_payment.setFont(QFont('Arial', 11))

Then we created a push button and payment labels. For the button, we first created it, then set its geometry and then added functionality to it in order to perform a function on being clicked. Then we created a monthly payment label and defined its properties and font. Similarly, we created a yearly payment label and defined its properties and fonts too.

# function for calculating the monthly
# and the annual payments
	def calc_action(self):

		# displaying the annual interest rate
		annualIntrstRate = self.rate.text()

		# condition for when there is no number entered
		if len(annualIntrstRate) == 0 or annualIntrstRate == '0':
			return

		# Showing the number of years
		numOfYrs = self.years.text()

		# condition for when there is no number entered
		if len(numOfYrs) == 0 or numOfYrs == '0':
			return

		# taking the loan amount
		loanAmt = self.amount.text()

		# if there is no number is entered
		if len(loanAmt) == 0 or loanAmt == '0':
			return

		# converting the text to integers
		annualIntrstRate = int(annualIntrstRate)
		numOfYrs = int(numOfYrs)
		loanAmt = int(loanAmt)

		# getting the monthly rate for interest
		mnthlyIntrstRate = annualIntrstRate / 1200

		# Analysing the monthly payemnt
		mnthlyPaymnt = loanAmt * mnthlyIntrstRate / (1 - 1 / (1 + mnthlyIntrstRate) ** (numOfYrs * 12))

		# Defining the formatting
		mnthlyPaymnt = "{:.2f}".format(mnthlyPaymnt)

		# setting text to the label
		self.mp_payment.setText("Monthly Payment : " + str(mnthlyPaymnt))

		# getting the total payment
		ttlPayment = float(mnthlyPaymnt) * 12 * numOfYrs
		ttlPayment = "{:.2f}".format(ttlPayment)

		# Mentioning the text for the label
		self.yp_payment.setText("Total Payment : " + str(ttlPayment))

Then, we created a function to calculate monthly and yearly payments. The entire result was based also on the annual interest rate variable's value and the no. of months value and the values which were not in numerical form were converted to integers from text. And after the final calculation the value was derived by a certain mentioned formula and was stored in total payment variable.

# creating the pyqt5 application
base = QApplication(sys.argv)

# creating an instance of the Window
window = Window()

# starting the application
sys.exit(base.exec())

Finally, we created the instance of the window for displaying the application and then executed the application by calling the exit() method from the system.
Complete Code :

# Python program to create a Loan Calculator using PyQt5 in Python

# import the required modules
from PyQt5.QtWidgets import *
from PyQt5 import QtCore, QtGui
from PyQt5.QtGui import *
from PyQt5.QtCore import *

import sys

# creating a window class
class Window(QMainWindow):
	
	# using a constructor
	def __init__(self):
		super().__init__()

		# setting the title of the window
		self.setWindowTitle("Python ")

		# setting the width of the window
		self.wd_width = 400

		# setting the height of the window
		self.wd_height = 500

		# setting geometry
		self.setGeometry(100, 100, self.wd_width, self.wd_height)

		# calling the function
		self.UiComponents()

		# displaying all the widgets
		self.show()

	# function for inserting components
	def UiComponents(self):
		# defining a new heading label
		heading = QLabel("Loan Calculator", self)

		# Mentioning the geometry for the heading
		heading.setGeometry(0, 10, 400, 60)

		# setting the font
		font = QFont('Times', 15)
		font.setBold(True)
		font.setItalic(True)
		font.setUnderline(True)

		# Mentioning font for the heading
		heading.setFont(font)

		# Giving the alignment for the heading
		heading.setAlignment(Qt.AlignCenter)

		# Mentioning the color effect for the heading
		color = QGraphicsColorizeEffect(self)
		color.setColor(Qt.darkCyan)
		heading.setGraphicsEffect(color)

		# Defining a new interest label
		int_label = QLabel("Annual Interest", self)

		# Mentioning the properties for the interest label
		int_label.setAlignment(Qt.AlignCenter)
		int_label.setGeometry(20, 100, 170, 40)
		int_label.setStyleSheet("QLabel"
							"{"
							"border : 2px solid black;"
							"background : rgba(70, 70, 70, 35);"
							"}")
		int_label.setFont(QFont('Times', 9))

		# Mentioning a QLineEdit object for getting the interest
		self.rate = QLineEdit(self)

		# taking in only the numbers as input
		intOnly = QIntValidator()
		self.rate.setValidator(intOnly)

		# Mentioning properties for the rate line edit
		self.rate.setGeometry(200, 100, 180, 40)
		self.rate.setAlignment(Qt.AlignCenter)
		self.rate.setFont(QFont('Times', 9))


		# Defining a label for the number of years
		num_label = QLabel("Years ", self)

		# Adding properties for the years label
		num_label.setAlignment(Qt.AlignCenter)
		num_label.setGeometry(20, 150, 170, 40)
		num_label.setStyleSheet("QLabel"
							"{"
							"border : 2px solid black;"
							"background : rgba(70, 70, 70, 35);"
							"}")
		num_label.setFont(QFont('Times', 9))

		# Defining a new QLineEdit object to get the years
		self.years = QLineEdit(self)

		# taking input as the numbers only
		intOnly = QIntValidator()
		self.years.setValidator(intOnly)

		# Mentioning the properties for the rate line edit
		self.years.setGeometry(200, 150, 180, 40)
		self.years.setAlignment(Qt.AlignCenter)
		self.years.setFont(QFont('Times', 9))

		# Defining a new loan amount label
		amt_label = QLabel("Amount", self)

		# Mentioning the properties for the amount label
		amt_label.setAlignment(Qt.AlignCenter)
		amt_label.setGeometry(20, 200, 170, 40)
		amt_label.setStyleSheet("QLabel"
							"{"
							"border : 2px solid black;"
							"background : rgba(70, 70, 70, 35);"
							"}")
		amt_label.setFont(QFont('Times', 9))

		# Defining a new QLineEdit object for getting the amount
		self.amount = QLineEdit(self)

		# Taking input as numbers only
		intOnly = QIntValidator()
		self.amount.setValidator(intOnly)

		# Adding properties for the rate line edit
		self.amount.setGeometry(200, 200, 180, 40)
		self.amount.setAlignment(Qt.AlignCenter)
		self.amount.setFont(QFont('Times', 9))


		# Defining a new push button
		calc = QPushButton("Compute Payment", self)

		# Mentioning the geometry  for the push button
		calc.setGeometry(125, 270, 150, 40)

		# Inserting action to the calc button
		calc.clicked.connect(self.calc_action)

		# Defining a new label to display monthly payment
		self.mp_payment = QLabel(self)

		# Adding properties to the m payment label
		self.mp_payment.setAlignment(Qt.AlignCenter)
		self.mp_payment.setGeometry(50, 340, 300, 60)
		self.mp_payment.setStyleSheet("QLabel"
									"{"
									"border : 3px solid black;"
									"background : white;"
									"}")
		self.mp_payment.setFont(QFont('Arial', 11))

		# Defining a new label to display monthly payment
		self.yp_payment = QLabel(self)

		# Adding some properties to the y payment label
		self.yp_payment.setAlignment(Qt.AlignCenter)
		self.yp_payment.setGeometry(50, 410, 300, 60)
		self.yp_payment.setStyleSheet("QLabel"
									"{"
									"border : 3px solid black;"
									"background : white;"
									"}")
		self.yp_payment.setFont(QFont('Arial', 11))

	# function for calculating the monthly
	# and the annual payments
	def calc_action(self):

		# displaying the annual interest rate
		annualIntrstRate = self.rate.text()

		# condition for when there is no number entered
		if len(annualIntrstRate) == 0 or annualIntrstRate == '0':
			return

		# Showing the number of years
		numOfYrs = self.years.text()

		# condition for when there is no number entered
		if len(numOfYrs) == 0 or numOfYrs == '0':
			return

		# taking the loan amount
		loanAmt = self.amount.text()

		# if there is no number is entered
		if len(loanAmt) == 0 or loanAmt == '0':
			return

		# converting the text to integers
		annualIntrstRate = int(annualIntrstRate)
		numOfYrs = int(numOfYrs)
		loanAmt = int(loanAmt)

		# getting the monthly rate for interest
		mnthlyIntrstRate = annualIntrstRate / 1200

		# Analysing the monthly payemnt
		mnthlyPaymnt = loanAmt * mnthlyIntrstRate / (1 - 1 / (1 + mnthlyIntrstRate) ** (numOfYrs * 12))

		# Defining the formatting
		mnthlyPaymnt = "{:.2f}".format(mnthlyPaymnt)

		# setting text to the label
		self.mp_payment.setText("Monthly Payment : " + str(mnthlyPaymnt))

		# getting the total payment
		ttlPayment = float(mnthlyPaymnt) * 12 * numOfYrs
		ttlPayment = "{:.2f}".format(ttlPayment)

		# Mentioning the text for the label
		self.yp_payment.setText("Total Payment : " + str(ttlPayment))



# creating the pyqt5 application
base = QApplication(sys.argv)

# creating an instance of the Window
window = Window()

# starting the application
sys.exit(base.exec())

Output:
The output of the above-mentioned code is attached below as a screenshot.



Next TopicFlappy Bird Game using PyGame in Python




← prev
next →




