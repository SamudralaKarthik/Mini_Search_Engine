



next →
← prev

Types of inheritance Python
Inheritance is the capacity of a particular class to obtain or inherit properties from another class and then use them when required. Inheritance has the following characteristics:

It is an excellent representation of relationships in the real world.
It allows code reuse. It doesn't require us to create the same code repeatedly and again. It also allows us to add options to an existing class without having to modify the existing code.
It is a transitive nature, meaning that if B is inherited from another class A, all the subclasses belonging to B will inherit directly from class A.

Example:

# Python program for demonstrating inheritance
# Here, we will create the base class or the Parent class
class Child1:

	# here, we are apply the Constructor
	def __init__(self, name):
		self.name = name

	# now, we will creat a class To get name
	def getName1(self):
		return self.name

	# Now, we will create a class for checking 
    #if this person is student or not
	def isStudent1(self):
		return False

# here, we will create the derived class or the child class
class Student1(Child1):

	# if the child is student, it will return true
	def isStudent1(self):
		return True


# Driver code
# An Object of Child
std = Child1("Jackie")
print(std.getName1(), std.isStudent1())

# An Object of Student
std = Student1("johnny")
print(std.getName1(), std.isStudent1())

Output:
Jackie False
johnny True

Types of Inheritance in Python
The types of inheritance depend on the number of children and parents involved. There are four kinds of inheritance available in Python:
Single Inheritance Single inheritance allows a derivate class to inherit properties of one parent class, and this allows code reuse and the introduction of additional features in existing code.

Example:

# Python program for demonstrating single inheritance

# Here, we will create the base class or the Parent class
class Parent1:
	def func_1(self):
		print ("This function is defined inside the parent class.")

# now, we will create the Derived class
class Child1(Parent1):
	def func_2(self):
		print ("This function is defined inside the child class.")

# Driver's code
object = Child1()
object.func_1()
object.func_2()

Output:
This function is defined inside the parent class.
This function is defined inside the child class.

Multiple Inheritance If a class is able to be created from multiple base classes, this kind of Inheritance is known as multiple Inheritance. When there is multiple Inheritance, each of the attributes that are present in the classes of the base has been passed on to the class that is derived from it.

Example:

# Python program for demonstrating multiple inheritance


# Here, we will create the Base class 1
class Mother1:
	mothername1 = ""
	def mother1(self):
		print(self.mothername1)

# Here, we will create the Base class 2
class Father1:
	fathername1 = ""
	def father1(self):
		print(self.fathername1)

# now, we will create the Derived class
class Son1(Mother1, Father1):
	def parents1(self):
		print ("Father name is :", self.fathername1)
		print ("Mother name is :", self.mothername1)

# Driver's code
s1 = Son1()
s1.fathername1 = "Rajesh"
s1.mothername1 = "Shreya"
s1.parents1()

Output:
Father name is : Rajesh
Mother name is : Shreya

Multilevel inheritance, the features that are part of the original class, as well as the class that is derived from it, are passed on to the new class. It is similar to a relationship involving grandparents and children.

Example:

# Python program for demonstrating multilevel inheritance

# Here, we will create the Base class 
class Grandfather1:

	def __init__(self, grandfathername1):
		self.grandfathername1 = grandfathername1

# here, we will create the Intermediate class
class Father1(Grandfather1):
	def __init__(self, fathername1, grandfathername1):
		self.fathername1 = fathername1

		# here, we will invoke the constructor of Grandfather class
		Grandfather1.__init__(self, grandfathername1)

# here, we will create the Derived class
class Son1(Father1):
	def __init__(self,sonname1, fathername1, grandfathername1):
		self.sonname1 = sonname1

		# here, we will invoke the constructor of Father class
		Father1.__init__(self, fathername1, grandfathername1)

	def print_name(self):
		print('Grandfather name is :', self.grandfathername1)
		print("Father name is :", self.fathername1)
		print("Son name is :", self.sonname1)

# Driver code
s1 = Son1('John', 'John Jr', 'John Jr Jr')
print (s1.grandfathername1)
s1.print_name()

Output:
John Jr Jr
Grandfather name is : John Jr Jr
Father name is : John Jr
Son name is : John

Hierarchical Inheritance If multiple derived classes are created from the same base, this kind of Inheritance is known as hierarchical inheritance. In this instance, we have two base classes as a parent (base) class as well as two children (derived) classes.

Example:

# Python program for demonstrating Hierarchical inheritance

# Here, we will create the Base class 
class Parent1:
	def func_1(self):
		print ("This function is defined inside the parent class.")

# Derived class1
class Child_1(Parent1):
	def func_2(self):
		print ("This function is defined inside the child 1.")

# Derivied class2
class Child_2(Parent1):
	def func_3(self):
		print ("This function is defined inside the child 2.")

# Driver's code
object1 = Child_1()
object2 = Child_2()
object1.func_1()
object1.func_2()
object2.func_1()
object2.func_3()

Output:
This function is defined inside the parent class.
This function is defined inside the child 1.
This function is defined inside the parent class.
This function is defined inside the child 2.



Next TopicPython For Mechanical Engineers




← prev
next →




