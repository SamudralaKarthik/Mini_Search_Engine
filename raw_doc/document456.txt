



next →
← prev

The randint() Function in Python
In this tutorial, we will learn about the "randint()" function in Python.
The "randint()" is a built-in function of the random module in Python. The random module is used for getting access to various functions like generating random numbers by using the randint() function.
First, we have to import the random module in Python to use the randint() function. This function is basically used for creating pseudo-randomness.
Syntax:

randint(start_range, end_range)

Parameters:
(start_range, end_range): Both the parameters must be integer type values.
Parameters:
It will return the random integer in the range [start_range, end_range], including both starting and ending numbers. 
Errors and Exceptions:
ValueError: Returns a ValueError when the user passes floating point as parameters.
TypeError: Returns a TypeError when the user passes anything other than integer value as parameters.
Example 1:
To get the random number between the given range of two positive numbers, two negative numbers, and one positive and one negative number.

import random as rnd
# First, we will generate the random number between any positive number range
random_1 = rnd.randint(55, 75)
print ("The any random number between 55 and 75 is % s" % (random_1))
  
# Then, we will generate the random number between two given negative number range
random_2 = rnd.randint(-40, -20)
print ("The any random number between -40 and -20 is % s" % (random_2))
  
# We will now, generate the random number between a positive number and a negative number range
random_3 = rnd.randint(-20, 20)
print ("The any random number between -20 and 20 is % s" % (random_3))

Output:
1#
The any random number between 55 and 75 is 74
The any random number between -40 and -20 is -40
The any random number between -20 and 20 is -12

2#
The any random number between 55 and 75 is 74
The any random number between -40 and -20 is -29
The any random number between -20 and 20 is -2

Example 2:
In this example, we will see how the users can get the ValueError in the Python program while using the randint() function.

# First, we will import the random module
import random as rnd
  
# If the user passes any floating point values as the parameters in the randint() # function.
  
random_1 = rnd.randint(2.543, 12.786)
print (random_1)

Output:
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
 in 
      4 # If the user passes any floating point values as the parameters in the randint() function.
      5 
----> 6 random_1 = rnd.randint(2.543, 12.786)
      7 print(random_1)

c:\users\User Name\appdata\local\programs\python\python39\lib\random.py in randint(self, a, b)
    336         """
    337 
--> 338         return self.randrange(a, b+1)
    339 
    340 

c:\users\user name\appdata\local\programs\python\python39\lib\random.py in randrange(self, start, stop, step)
    300         istart = int(start)
    301         if istart != start:
--> 302             raise ValueError("non-integer arg 1 for randrange()")
    303         if stop is None:
    304             if istart > 0:

ValueError: non-integer arg 1 for randrange()

Example 3:
In this example, we will see how the user can get the TypeError in Python while using the randint() function.

# First, we will import the random module
import random as rnd
  
# If the user passes any string or character value as the parameters in the 
# randint() function
  
random_2 = rnd.randint('String', 'Character')
print (random_2)

Output:
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
 in 
      4 # If the user passes any string or character value as the parameters in the randint() function
      5 
----> 6 random_2 = rnd.randint('String', 'Character')
      7 print (random_2)

c:\users\user name\appdata\local\programs\python\python39\lib\random.py in randint(self, a, b)
    336         """
    337 
--> 338         return self.randrange(a, b+1)
    339 
    340 

TypeError: can only concatenate str (not "int") to str

Applications:
The users can use the randint() function for simulating a lucky draw game.
Suppose we have participated in a lucky draw game such as "Casino Game". The player will get three chances to guess the number between 1 to 36. If we have guessed the number correctly, we will win, else we will lose the game.
Example: code for application

# First, we will import the randint function
# from the random module in Python
from random import randint as rdt
  
# We will create a function which can generate a new 
# random number everytime the code will execute
def generator_1():
    return rdt(1, 36)
      
# Now, we will create a function which takes the input from the user and returns
# true or false depending whether the
# user has guessed the correct number and wins the lucky draw or not. 
def random_guess():
  
    # The calls generator_1() which returns a
    # random integer between 1 and 36
    random_number_1 = generator_1()
      
    # here, we will define the number of
    # guesses the user will get
    guess_left_1 = 3
  
    # now, we will set the flag variable for checking
    # the win-condition for the user
    flag_1 = 0
  
    # Then, we will loop the number of times
    # the user will get the chances
    while guess_left_1 > 0:
  
        # Here, we will take a input from the user.
        guess_1 = int (input ("Please select your number to "
                      "enter the lucky draw game \n"))
  
        # then, we will check whether the guess of the user 
        # matched the generated win-condition or not.
        if guess_1 == random_number_1:
  
            # Then, we will set the flag as 1 if the user have guessed
            # the correct number and then loop will broke
            flag_1 = 1
            break
          
        else:
              
            # If the guess of the user does not matched
            # the win-condition then it will print
            print ("You have guessed Wrong Number!!")
  
        # then, we will decrease the number of 
        # guesses left by 1 
        guess_left_1 -= 1
  
    # If the condition of winning is satisfied then,
    # the function random_guess will return "True"
    if flag_1 == 1:
        return True
  
    # Otherwise, the function will return "False"
    else:
        return False
  
# Driver code
if __name__ == '__main__':
    if random_guess() == True:
        print ("Congratulation!! You have Won the game.")
    else :
        print ("Sorry, You have Lost the game!")

Output:
1#
Please select your number to enter the lucky draw game 
 3
You have guessed Wrong Number!!
Please select your number to enter the lucky draw game 
 2
You have guessed Wrong Number!!
Please select your number to enter the lucky draw game 
 34
You have guessed Wrong Number!!
Sorry, you have Lost the game!

2#
Please select your number to enter the lucky draw game 
 14
You have guessed Wrong Number!!
Please select your number to enter the lucky draw game 
 12
You have guessed Wrong Number!!
Please select your number to enter the lucky draw game 
 3
Congratulation!! You have Won the game.
 
Conclusion
In this tutorial, we have discussed the randint() function of Python's random module. We have shown the types of errors the user can get while using the randint() function. We have also discussed how the randint() function is used for creating an application of lucky draw games.


Next TopicVisualize Tiff File using Matplotlib and GDAL in Python




← prev
next →




