



next →
← prev

Return two values from a function in Python
Sometimes web application requires displaying two values in a function using Python language. It is necessary for complicated functionality, mathematical operations, and the display of database information. There are multiple ways provided by Python to return two values.

Using object
Using Tuple
Using list
Using data class
Using dictionary

Use Object
It is like C++ as well as Java language that we can make a class that can hold two or more than one value. The values are returned as an object of that class.
Examples
The following examples return two similar and different data types values. The Python language uses an object method in a function.
Example1: the following example shows two numbers as an output using the python function. Here, we use integer values to return as an output.

print ("using Class/Object method")
class Displays:
	def __init__(self):
		self.disp_y = 91
		self.disp_x = 22
# Function shows an object of class
def fun():
	return Displays()	
# Display two values to test the above method
Displays_var = fun()
print(Displays_var.disp_y, "---" ,Displays_var.disp_x)

Output
The output values show two data using the python function.

Example2: the following example shows two values as an output using the python function. Here, we use integer and string values as input data.

print ("using Class/Objet method")
class Displays:
	def __init__(self):
		self.disp_str = "python"
		self.disp_x = 22
# Function shows an object of class
def fun():
	return Displays()	
# Display two values to test the above method
Displays_var = fun()
print(Displays_var.disp_str, "---" ,Displays_var.disp_x)

Output
The output values show two data using the python function.

Use Tuple
A tuple shows values that are separated by commas. It is made whether or not with () sign. In Python, a tuple value can't be changed after providing it as input.
Examples
The following examples return two similar and different data types values. The python language uses the tuple method in a function.
Example1: the following example shows two numbers as an output using the python function.

# define the python function
print ("using Tuple method")
def fun_Displays():
    yy = 15
    xy   = 20
    # Return two values using the Tuple method
    return yy, xy;  
# Displays two values to test the above method
yy, xy = fun_Displays() # Assign returned tuple
print(yy, "------" ,xy)

Output
The output values show two data using the python function.

Example2: the following example shows two values as an output using the python function with one string and one integer value.

print ("using Tuple method")
# define the python function
def fun_Displays():
    yy = "python"
    xy   = 20
    # Return two values using the Tuple method
    return yy, xy;  
# Displays two values to test the above method
yy, xy = fun_Displays() # Assign returned tuple
print(yy, "------" ,xy)

Output
The output values show two data using the python function.

Use list
A list is a group of items that are put together with square brackets. They're different from arrays because they can hold different kinds of items. Lists are not the same as tuples because they can be changed.
Examples
The following examples return two similar and different data types values using the list method in Python.
Example1: the following example shows two numbers as an output using the python function.

print ("using List method")
def fun_Displays():
    yy = 15
    xy   = 20
    # Return two values using the list method
    return [yy, xy];  
# Displays two values to test the above method
List_var = fun_Displays() # Assign returned tuple
print(List_var)

Output
The output values show two data using the python function.

Example2: the following example shows two values as an output using the python function.

print ("using List method")
def fun_Displays():
    yy = "python"
    xy   = 20
    # Return two values using the list method
    return [yy, xy];  
# Displays two values to test the above method
List_var = fun_Displays() # Assign returned tuple
print(List_var)

Output
The output values show two data using the python function.

Use Dictionary
In other languages, a dictionary is like a hash or a map. Here is more about the dictionary.
Examples
The following examples return two similar and different data types values using the dictionary method in Python.
Example1:

print ("using Dictonary")
# define the python function
def fun_Displays():
    dic_var = dict();
    dic_var['yy'] = 15
    dic_var['xy']   = 20
    # Return two values using the dictionary method
    return dic_var;  
# Displays two values to test the above method
dic_var = fun_Displays() # Assign returned tuple
print(dic_var)

Output
The output values show two data using the python function.

Example2:

print ("using Dictonary")
# define the python function
def fun_Displays():
    dic_var = dict();
    dic_var['yy'] = "python"
    dic_var['xy']   = 20
    # Return two values using the dictionary method
    return dic_var;  
# Displays two values to test the above method
dic_var = fun_Displays() # Assign returned tuple
print(dic_var)

Output
The output values show two data using the python function.

Using the Data Class
If you are using Python 3.7 or later, you can use the Data Class to return a class that has automatically added unique methods. The Data Class module has a decorator and functions that automatically add special methods like __init_() & __repr_() to user-defined classes.
Examples
The following examples return two similar and different data types values using data class in Python.
Example1: the following example shows two numbers as an output using the python function. Here, we use the same data type's values.

print ("using Data Class")
# define the python function
from dataclasses import dataclass
@dataclass
class data_list:
	cost: int = 0
	available: int = 0
data = data_list(300, 3)
# print data details using the data class method
print(data)

Output
The output values show two data using the python function.

Example2: the following example shows two values as an output using the python function. Here, we use two different data types' values.

print ("using Data class")
# define the python function
from dataclasses import dataclass
@dataclass
class data_list:
	technology: str
	student: int = 0
data = data_list("Python", 270)
# print data details using the data class method
print(data)

Output
The output values show two data using the python function.

Conclusion
The python language provides functions and different methods to return two or more than one value. The method uses convenience, requirement, and input value. It displays output in minimum Python coding for the developer and displays output easily to the user.


Next TopicComplete roadmap to learn Python




← prev
next →




