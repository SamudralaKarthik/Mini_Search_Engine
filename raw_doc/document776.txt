



next →
← prev

Simple GUI calculator using PyQt5 in Python
A calculator is something used for performing mathematical calculations, particularly a compact electronic device having a keyboard and a visual display. In this post, we'll look at how to make one using PyQt5.
Steps for implementing a GUI :

Create a label, specify its shape and display the numbers and output on it.
Increase the font size and align the label text from the right side.
Make push buttons for the numerals 0 through 9 and arrange their geometries in the correct sequence.
Make an example of an operator push button for addition, subtraction, etc.
To draw attention to the equals button, give it a colour effect.

Back-end implementation procedure :

Give each button a function.
Add the label's text with the appropriate number or operator within each button's actions, with the exception of the equals to action.
Get the label's text from within the equals to action and begin the try except block.
Use the eval method on the label text inside the try block to obtain the response and set the answer to the label.
Set the text "Wrong Input" within the unless block.
Make the label's final character disappear for the delete action, and leave the entire text blank for the clear action.

Understanding the code step by step :

# import the required libraries
from PyQt5.QtWidgets import *
from PyQt5 import QtCore, QtGui
from PyQt5.QtGui import *
from PyQt5.QtCore import *

import sys

First of all, we will import all the modules needed by our program like the PyQt5 and sys modules.

class Window(QMainWindow):

	def __init__(element):
		super().__init__()

		# set the title
		element.setWindowTitle("Python ")

		# set the geometry
		element.setGeometry(105, 100, 360, 350)

		# call the function
		element.UiCompnts()

		# displaying all present widgets
		element.show()

Then, we will set the title and dimensions of the window and will call the UI components function to display all the widgets.

	# function for the widgets
	def UiCompnts(element):

		# create a new label
		element.label = QLabel(element)

		# set the geometry of the label
		element.label.setGeometry(10, 5, 350, 70)

		# create another new label multiple line
		element.label.setWordWrap(True)

		# Setting the styles to the style sheet to the label
		element.label.setStyleSheet("QLabel"
								"{"
								"border : 4px solid   
                                            Black ; "
								"background : white ; "
								"}")

		# Adjusting the alignments of the diff labels
		element.label.setAlignment(Qt.AlignRight)

		# set the font style for the label
		element.label.setFont(QFont('Arial', 14))

Then, we call the UI components function for creating an element label and setting the stylesheet for Labels including the alignment and fonts.

# Addition of the numerical buttons on the screen
		# create a new push button
		push001 = QPushButton("1", element)

		# set the geometry
		push001.setGeometry(10, 150, 80, 40)

		# create a new push button
		push002 = QPushButton("2", element)

		# set the geometry
		push002.setGeometry(100, 150, 80, 40)

		# create a new push button
		push003 = QPushButton("3", element)

		# set the geometry
		push003.setGeometry(190, 150, 80, 40)

		# create a new push button
		push004 = QPushButton("4", element)

		# set the geometry
		push004.setGeometry(10, 200, 80, 40)

		# create a new push button
		push005 = QPushButton("5", element)

		# set the geometry
		push005.setGeometry(100, 200, 80, 40)

		# create a new push button
		push006 = QPushButton("5", element)

		# set the geometry
		push006.setGeometry(190, 200, 80, 40)

		# create a new push button
		push007 = QPushButton("7", element)

		# set the geometry
		push007.setGeometry(10, 250, 80, 40)

		# create a new push button
		push008 = QPushButton("8", element)

		# set the geometry
		push008.setGeometry(100, 250, 80, 40)

		# create a new push button
		push009 = QPushButton("9", element)

		# set the geometry
		push009.setGeometry(190, 250, 80, 40)

		# create a new push button
		push00 = QPushButton("0", element)

		# set the geometry
		push00.setGeometry(10, 300, 80, 40)

Then, we will create push buttons for all the numbers from 0-9 and set their geometry and size.

# Creating and introducing the operator push button
		# create a new push button for = operator
		push_equalsto = QPushButton("=", element)

		# set the geometry
		push_equalsto.setGeometry(280, 300, 80, 40)

		# adding a color effect to the equal button
		clr_effect = QGraphicsColorizeEffect()
		clr_effect.setColor(Qt.blue)
		push_equalsto.setGraphicsEffect(clr_effect)

		# create a new push button for + operator
		push_addtn = QPushButton("+", element)

		# set the geometry
		push_addtn.setGeometry(280, 250, 80, 40)

		# create a new push button for - operator
		push_subtrct = QPushButton("-", element)

		# set the geometry
		push_subtrct.setGeometry(280, 200, 80, 40)

		# create a new push button for * operator
		push_multiply = QPushButton("*", element)

		# set the geometry
		push_multiply.setGeometry(280, 150, 80, 40)

		# create a new push button for / operator
		push_divide = QPushButton("/", element)

		# set the geometry
		push_divide.setGeometry(190, 300, 80, 40)

		# create a new push button for . operator
		push_pnt = QPushButton(".", element)

		# set the geometry
		push_pnt.setGeometry(100, 300, 80, 40)


		# create a new clear button
		push_clr = QPushButton("Clear", element)
		push_clr.setGeometry(10, 100, 200, 40)

		# deleting the current-char button
		push_delete = QPushButton("Del", element)
		push_delete.setGeometry(215, 100, 145, 40)

Then, we will create push buttons for all the mathematical operators and clear, equal & delete keywords along with setting their geometry and size. The equal button was given special emphasis by adding different colour effect to it.

# adding respective actions to each one of the buttons
		push_subtrct.clicked.connect(element.action_subtrct)
		push_equalsto.clicked.connect(element.action_equalsto)
		push00.clicked.connect(element.action00)
		push001.clicked.connect(element.action001)
		push002.clicked.connect(element.action002)
		push003.clicked.connect(element.action003)
		push004.clicked.connect(element.action004)
		push005.clicked.connect(element.action005)
		push006.clicked.connect(element.action006)
		push007.clicked.connect(element.action007)
		push008.clicked.connect(element.action008)
		push009.clicked.connect(element.action009)
		push_divide.clicked.connect(element.action_divide)
		push_multiply.clicked.connect(element.action_multiply)
		push_addtn.clicked.connect(element.action_addtn)
		push_pnt.clicked.connect(element.action_pnt)
		push_clr.clicked.connect(element.action_clr)
		push_delete.clicked.connect(element.action_delete)

Then, we added actions to all these push buttons by attaching event calling functions.

def action_equalsto(element):

		# getting the text of the label
		equation = element.label.text()

		try:
			# getting the solution
			sol = eval(equation)

			# setting new text for the label
			element.label.setText(str(sol))

		except:
			# setting new text for the label
			element.label.setText("Wrong Input")

	def action_addtn(element):
		# appending text of the label
		text = element.label.text()
		element.label.setText(text + " + ")

	def action_subtrct(element):
		# appending text of the label
		text = element.label.text()
		element.label.setText(text + " - ")

	def action_divide(element):
		# appending text of the label
		text = element.label.text()
		element.label.setText(text + " / ")

	def action_multiply(element):
		# appending label text
		text = element.label.text()
		element.label.setText(text + " * ")

	def action_pnt(element):
		# appending text of the label
		text = element.label.text()
		element.label.setText(text + ".")

	def action00(element):
		# appending text of the label
		text = element.label.text()
		element.label.setText(text + "0")

	def action001(element):
		# appending text of the label
		text = element.label.text()
		element.label.setText(text + "1")

	def action002(element):
		# appending text of the label
		text = element.label.text()
		element.label.setText(text + "2")

	def action003(element):
		# appending text of the label
		text = element.label.text()
		element.label.setText(text + "3")

	def action004(element):
		# appending text of the label
		text = element.label.text()
		element.label.setText(text + "4")

	def action005(element):
		# appending text of the label
		text = element.label.text()
		element.label.setText(text + "5")

	def action006(element):
		# appending text of the label
		text = element.label.text()
		element.label.setText(text + "6")

	def action007(element):
		# appending text of the label
		text = element.label.text()
		element.label.setText(text + "7")

	def action008(element):
		# appending text of the label
		text = element.label.text()
		element.label.setText(text + "8")

	def action009(element):
		# appending text of the label
		text = element.label.text()
		element.label.setText(text + "9")

Then, the event calling functions that that were added to each push button were defined. The functions were created for all the number from 0-9. These functions on being called proceeded in such a way that if some text is present then that text would be added/ subtracted/ multiplied/ divided/ equated by the next number pressed. And, till the equals to operator button was not pressed, all the results are stored temporarily in a variable, which is displayed after getting the final answer.

def action_clr(element):
		# clearing text of the label
		element.label.setText("")

	def action_delete(element):
		# clearing only a single digit
		text = element.label.text()
		print(text[:len(text)-1])
		element.label.setText(text[:len(text)-1])

The clear button's corresponding function is used to clear all the text in the text area and the delete button's corresponding function is used to delete only one current character in the text area.

# creating the PyQt5 application
root = QApplication(sys.argv)

# creating an instance of the Window
window = Window()

# starting the application
sys.exit(root.exec())

Finally, we will create the PyQt5 application by creating an instance of the window and then executed the application's code.
Complete Code :

# Python program to create a simple GUI Calculator using PyQt5
# import the required libraries
from PyQt5.QtWidgets import *
from PyQt5 import QtCore, QtGui
from PyQt5.QtGui import *
from PyQt5.QtCore import *

import sys


class Window(QMainWindow):

	def __init__(element):
		super().__init__()

		# set the title
		element.setWindowTitle("Python ")

		# set the geometry
		element.setGeometry(105, 100, 360, 350)

		# call the function
		element.UiCompnts()

		# displaying all present widgets
		element.show()

		# function for the widgets
	def UiCompnts(element):

		# create a new label
		element.label = QLabel(element)

		# set the geometry of the label
		element.label.setGeometry(10, 5, 350, 70)

		# create another new label multiple line
		element.label.setWordWrap(True)

		# Setting the styles to the style sheet to the label
		element.label.setStyleSheet("QLabel"
								"{"
								"border : 3px solid   
                                            Black ; "
								"background : white ; "
								"}")

		# Adjusting the alignments of the diff labels
		element.label.setAlignment(Qt.AlignRight)

		# set the font style for the label
		element.label.setFont(QFont('Arial', 14))


		# Addition of the numerical buttons on the screen
		# create a new push button
		push001 = QPushButton("1", element)

		# set the geometry
		push001.setGeometry(10, 150, 80, 40)

		# create a new push button
		push002 = QPushButton("2", element)

		# set the geometry
		push002.setGeometry(100, 150, 80, 40)

		# create a new push button
		push003 = QPushButton("3", element)

		# set the geometry
		push003.setGeometry(190, 150, 80, 40)

		# create a new push button
		push004 = QPushButton("4", element)

		# set the geometry
		push004.setGeometry(10, 200, 80, 40)

		# create a new push button
		push005 = QPushButton("5", element)

		# set the geometry
		push005.setGeometry(100, 200, 80, 40)

		# create a new push button
		push006 = QPushButton("5", element)

		# set the geometry
		push006.setGeometry(190, 200, 80, 40)

		# create a new push button
		push007 = QPushButton("7", element)

		# set the geometry
		push007.setGeometry(10, 250, 80, 40)

		# create a new push button
		push008 = QPushButton("8", element)

		# set the geometry
		push008.setGeometry(100, 250, 80, 40)

		# create a new push button
		push009 = QPushButton("9", element)

		# set the geometry
		push009.setGeometry(190, 250, 80, 40)

		# create a new push button
		push00 = QPushButton("0", element)

		# set the geometry
		push00.setGeometry(10, 300, 80, 40)

		# Creating and introducing the operator push button
		# create a new push button for = operator
		push_equalsto = QPushButton("=", element)

		# set the geometry
		push_equalsto.setGeometry(280, 300, 80, 40)

		# adding a color effect to the equal button
		clr_effect = QGraphicsColorizeEffect()
		clr_effect.setColor(Qt.blue)
		push_equalsto.setGraphicsEffect(clr_effect)

		# create a new push button for + operator
		push_addtn = QPushButton("+", element)

		# set the geometry
		push_addtn.setGeometry(280, 250, 80, 40)

		# create a new push button for - operator
		push_subtrct = QPushButton("-", element)

		# set the geometry
		push_subtrct.setGeometry(280, 200, 80, 40)

		# create a new push button for * operator
		push_multiply = QPushButton("*", element)

		# set the geometry
		push_multiply.setGeometry(280, 150, 80, 40)

		# create a new push button for / operator
		push_divide = QPushButton("/", element)

		# set the geometry
		push_divide.setGeometry(190, 300, 80, 40)

		# create a new push button for . operator
		push_pnt = QPushButton(".", element)

		# set the geometry
		push_pnt.setGeometry(100, 300, 80, 40)


		# create a new clear button
		push_clr = QPushButton("Clear", element)
		push_clr.setGeometry(10, 100, 200, 40)

		# deleting the current-char button
		push_delete = QPushButton("Del", element)
		push_delete.setGeometry(215, 100, 145, 40)

		# adding respective actions to each one of the buttons
		push_subtrct.clicked.connect(element.action_subtrct)
		push_equalsto.clicked.connect(element.action_equalsto)
		push00.clicked.connect(element.action00)
		push001.clicked.connect(element.action001)
		push002.clicked.connect(element.action002)
		push003.clicked.connect(element.action003)
		push004.clicked.connect(element.action004)
		push005.clicked.connect(element.action005)
		push006.clicked.connect(element.action006)
		push007.clicked.connect(element.action007)
		push008.clicked.connect(element.action008)
		push009.clicked.connect(element.action009)
		push_divide.clicked.connect(element.action_divide)
		push_multiply.clicked.connect(element.action_multiply)
		push_addtn.clicked.connect(element.action_addtn)
		push_pnt.clicked.connect(element.action_pnt)
		push_clr.clicked.connect(element.action_clr)
		push_delete.clicked.connect(element.action_delete)


	def action_equalsto(element):

		# getting the text of the label
		equation = element.label.text()

		try:
			# getting the solution
			sol = eval(equation)

			# setting new text for the label
			element.label.setText(str(sol))

		except:
			# setting new text for the label
			element.label.setText("Wrong Input")

	def action_addtn(element):
		# appending text of the label
		text = element.label.text()
		element.label.setText(text + " + ")

	def action_subtrct(element):
		# appending text of the label
		text = element.label.text()
		element.label.setText(text + " - ")

	def action_divide(element):
		# appending text of the label
		text = element.label.text()
		element.label.setText(text + " / ")

	def action_multiply(element):
		# appending label text
		text = element.label.text()
		element.label.setText(text + " * ")

	def action_pnt(element):
		# appending text of the label
		text = element.label.text()
		element.label.setText(text + ".")

	def action00(element):
		# appending text of the label
		text = element.label.text()
		element.label.setText(text + "0")

	def action001(element):
		# appending text of the label
		text = element.label.text()
		element.label.setText(text + "1")

	def action002(element):
		# appending text of the label
		text = element.label.text()
		element.label.setText(text + "2")

	def action003(element):
		# appending text of the label
		text = element.label.text()
		element.label.setText(text + "3")

	def action004(element):
		# appending text of the label
		text = element.label.text()
		element.label.setText(text + "4")

	def action005(element):
		# appending text of the label
		text = element.label.text()
		element.label.setText(text + "5")

	def action006(element):
		# appending text of the label
		text = element.label.text()
		element.label.setText(text + "6")

	def action007(element):
		# appending text of the label
		text = element.label.text()
		element.label.setText(text + "7")

	def action008(element):
		# appending text of the label
		text = element.label.text()
		element.label.setText(text + "8")

	def action009(element):
		# appending text of the label
		text = element.label.text()
		element.label.setText(text + "9")

	def action_clr(element):
		# clearing text of the label
		element.label.setText("")

	def action_delete(element):
		# clearing only a single digit
		text = element.label.text()
		print(text[:len(text)-1])
		element.label.setText(text[:len(text)-1])


# creating the PyQt5 application
root = QApplication(sys.argv)

# creating an instance of the Window
window = Window()

# starting the application
sys.exit(root.exec())

Output:







Next TopicBest Resources to Learn NumPy and Pandas




← prev
next →




