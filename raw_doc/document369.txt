



next →
← prev

Difference between module and function in Python
Python is a programming language that is considered to be progressive and known for its optimization capabilities. Python skims down redundant characteristics of programming and makes the tools rich in utilization. In the following tutorial, we will discuss the difference between module and function in the Python programming language.
What is a Module?
A module is simply a Python file with a .py extension that a programmer can import inside another Python program.
The name of the Python file becomes the name of the module.
The module consists of definitions and implementation of -

Classes
Variables
Functions

That can be utilized within another program.
Benefits of modules

Reusability:Working with modules makes the code reusable.
Simplicity:The module targets a small proportion of the problem rather than aiming at the complete problem.
Scoping:A Module defines a distinct namespace that supports avoiding collisions between identifiers.

What is a Function?
A function is a block of organized and reusable code that we can perform a single, associated activity. The functions are classified into different types -

User-defined functions
Built-in functions
Lambda functions
Recursive functions

User-defined functions:
Functions that are defined by us in order to perform a particular activity are termed User-defined functions. 
Benefits of User-defined functions

We can use the User-defined functions to decompose a large program into small segments, which makes the program easy to understand, maintain and debug.
Suppose repeated code occurs in a program. We can use the function to include those codes and execute when required by calling that function.

Built-in functions:
Python has different functions that are readily available for use. These functions are known as Built-in functions.
List of Built-in functions

abs(), delattr(), hash(), memoryview(), set(), all(), dict(), help(), min(), setattr(), any(), dir(), hex(), next(), slice(), ascii(), divmod(), id(), object(), sorted(), bin(), enumerate(), input(), oct(), staticmethod(), bool(), eval(), int(), open(), str(), breakpoint(), exec(), isinstance(), ord(), sum(), bytearray(), filter(), issubclass(), pow(),super(), bytes(), float(), iter(), print(), tuple(), callable(), format(), len(), property(), type(), chr(), frozenset(), list(), range(), vars(), classmethod(), getattr(), locals(), repr(), zip(), compile(), globals(), map(), reversed(), __import__(), complex(), hasattr(), max(), round()

Lambda functions:
Lambda functions are known as Anonymous functions that are defined without a name.
While we can define normal functions using the def keyword in Python, we can define anonymous functions with the help of the lambda keyword.
Use of Lambda function in Python:
To need a nameless function for a short period of time. In Python, we usually use it as a parameter to a higher-order function (a function that accepts other functions as parameters).
Lambda functions are utilized along with built-in functions such as filter(), map(), and a lot more.

filter()\: As the name suggests, it is used to filter the iterables as per the requirements. The filter() function filters the original iterable and passes the elements that return TRUE for the function given to the filter.
map()\: The map() function executes all the requirements of a function on the elements in the iterable and allows us to apply a function on it and then passes it to the result, which can have identical as well as different values.

Recursion functions:
A Recursive function is a function defined in terms of itself through self-referential expressions. This means that the function will continue to call itself and repeat its behavior until some requirements are met to return an output.
Defining and Using a Module in Python
In the following section, we will understand how we can define and use a module in Python.
In order to begin, we will create a Python program file with a .py extension and save it in the local repository. Now we can utilize this program file to import it into the application to involve the functionality of the module in the application.
We can use the import command in order to include multiple modules.
Syntax:

import module_1, module_2, ...

Note: As soon as we have included the module in the program code, we have executed the code without calling any function. That is because we have defined and called the functions in the file. Therefore, the entire file is executed first treated as a larger scale function, being executed while being called.
Let us consider the following example.
Example:

# importing a module
import math

We can delete the calls of the function from the module we created and access the functions attributes, classes, and all the other valuables using the dot (.) operator.
Syntax:

module_1.func_1()
module_2.name

Let us consider the following example for the same.
Example:

# importing a module
import math

# using the sqrt() function of the math module
print("Square root of 16:", math.sqrt(16))

Output:
Square root of 16: 4.0

Explanation:
In the above snippet of code, we have imported the math module. We have then used the sqrt() function of the math module to find the square root of 16 and printed the value for the users.
Defining and Calling a Function in Python
In the following section, we will understand how we can define and call a function in Python.
Let us consider the following example in order to understand the definition and calling of a function.
Example:

# defining a function
def my_func():
    print("Greetings User! Welcome to Javatpoint.")

# calling the function
my_func()

Output:
Greetings User! Welcome to Javatpoint.

Explanation:
In the above snippet of code, we have defined a simple function that prints a string and terminates. The code of this function can also be altered in order to make it quite more useful.
We can pass a parameter to the function and make the above block of code more reusable by not hard coding the string.
Let us consider the following example for the same.
Example:

# defining a function
def my_func(name):
    print("Greetings " + name + ", Welcome to Javatpoint.")

# calling the function
my_func("Daniel")
my_func("Michelle")
my_func("Chris")
my_func("Dana")

Output:
Greetings Daniel, Welcome to Javatpoint.
Greetings Michelle, Welcome to Javatpoint.
Greetings Chris, Welcome to Javatpoint.
Greetings Dana, Welcome to Javatpoint.

Explanation:
In the above snippet of code, we have defined a function that accepts a parameter as 'name' and printed a statement including that parameter. We have then called the function by specifying the value of the name parameter and printed different statements from one function.
As we can observe, we do not have to rewrite the function or define it repeatedly for different strings. We can call this function multiple times in the whole application.
Conclusion
Modules and functions may appear similar to their purpose, which is reusability. However, modules are on a larger scale because of their use in different classes, functions, and attributes to fulfil larger functionalities. At the same time, functions are more particular to specific activities on a smaller scale.


Next TopicReverse a tuple in Python




← prev
next →




