



next →
← prev

Code Template for Creating Objects in Python
Python is an "object-oriented programming language". This statement signifies that most of the code is implemented with the help of a special construct known as classes. Programmers utilize classes in order to keep associated things together. We can accomplish this with the help of the keyword "class", which is a grouping of the object-oriented constructs.
In the following tutorial, we will cover the following topics:

What is a class?
How to create a class?
What is a method?
How to do object instantiation?
How to create instance attributes in Python?

So, let's get started.
Understanding a Class
A class is considered a code template used for creating objects. Objects consist of member variables and have behaviour related to them. In a programming language like Python, we can create a class using the keyword "class".
We can create an object with the help of the constructor of the class. This object will then be recognized as the instance of the class. In Python, we can create instances using the following syntax:
Syntax:

Instance = class(arguments)

Creating a class in Python
We can create a class using the class keyword as we read earlier. Let us now consider an example demonstrating the creation of a simple, empty class with no functionalities.
Example:

# defining a class
class College:
    pass
# instantiating the class
student = College()
# printing the object of the class
print(student)

Output:
<__main__.College object at 0x000002B6142BD490>    

Explanation:
In the above snippet of code, we have defined an empty class as "College". We have then instantiated the class using the student as an object and print the object for the users.
Understanding the Attributes and Methods in class
A class by itself is of no utilization until there are some functionalities linked with it. We can define these functionalities by setting attributes, which act as containers for data and functions associated with those attributes. We call these functions methods.
Attributes
We can define the following class with the name College. This class will have an attribute student_name.
Example:

# defining a class
class College:
    student_name = "Alex" # setting an attribute 'student_name' of the class
...

Explanation:
In the above snippet of code, we have defined a class as "College". We have then defined an attribute as "student_name" within the class.
Now, let us try assigning the class to a variable. This is known as Object Instantiation. We will then be able to access the attributes available within the class with the help of the dot . operator. Let us consider the following example illustrating the same:
Example:

# defining a class
class College:
    student_name = "Alex" # setting an attribute 'student_name' of the class
# instantiating the class
student = College()
# printing the object of the class
print(student.student_name)

Output:
Alex  

Explanation:
In the above snippet of code, we have followed the same procedure from the previous example. However, we have now instantiated the class and printed the value of the attribute using the object.
Methods:
Once we have defined the attributes belonging to the class, we can now define several functions in order to access the class attribute(s). These functions are known as the methods. Whenever we define a method, it is necessary to always provide the first argument to the method with a keyword called "self".
Let us consider the following example demonstrating the same.
Example:

# defining a class
class College:
    student_name = "Alex" # setting an attribute 'student_name' of the class
    def change_std_name(self, new_std_name):
        self.student_name = new_std_name
# instantiating the class
student = College()
# printing the object of the class
print("Name of the student:", student.student_name)
# changing the name of the student using the change_std_name() method
student.change_std_name("David")
# printing the object of the class
print("New name of the student:", student.student_name)

Output:
 Name of the student: Alex
New name of the student: David   

Explanation:
In the above snippet of code, we have defined a class and defined its attribute. We have then defined a method as change_std_name to change the previous value of the attribute to another one. We have then instantiated the class and print the required outputs for the users. As a result, we can observe the value of the attribute to another one.


Next TopicPython program to calculate the best time to buy and sell stock




← prev
next →




