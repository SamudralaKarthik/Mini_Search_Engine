



next →
← prev

Data Visualization in Python using Bokeh Library
Bokeh is a Python library which is used for data visualization through high-performance interactive charts and plots. It creates its plots using HTML and JavaScript languages. The output of the bokeh library can be generated on several platforms such as browser, HTML, server, and notebook. It is also possible to create the bokeh plots in Django and flask applications.
The bokeh library provides two visualization interfaces to the users:

models: it is a low-level interface which provides high flexibility to the application developers.
plotting: it is a high-level interface which is used for creating visual glyphs.

In this tutorial, we will learn how to create different types of data visualization graphs and charts using the bokeh library in Python.
Installation:
To install the bokeh library, we can use the following command:

!pip3 install bokeh

Code 1: To Create Scatter Circle Markers
We can create Scatter Circle Markers on the Plot by using the bokeh library. For this, we will use the circle() function.
Example:

# First, we will import the required modules
from bokeh.plotting import figure as fig
from bokeh.plotting import output_notebook as ON
from bokeh.plotting import show
  
# output to the notebook
ON()
  
# creating figure
plot1 = fig(plot_width = 500, plot_height = 500, title = "Scatter Markers")
  
# adding a circle renderer with size, color and alpha
plot1.circle([1, 2, 3, 4, 5, 6], [2, 1, 6, 8, 0], 
         size = 12, color = "green", alpha = 1)
  
# show the results
show(plot1)

Output:

Code 2: To Create a Single Line
We can create a single line by using the bokeh library in Python. For this, we will use the line() function.
Example:

# First, we will import the required modules
from bokeh.plotting import figure as fig
from bokeh.plotting import output_notebook as ON
from bokeh.plotting import show
  
# output to the notebook
ON()
  
# creating figure
plot1 = fig(plot_width = 500, plot_height = 500, title = "Scatter Markers")
   
# adding a line renderer
plot1.line([1, 2, 3, 4, 5, 6], [2, 1, 6, 8, 0], 
        line_width = 4, color = "red")
  
# show the results
show(plot1)

Output:

Code 3: To Create a Bar chart
Bar charts are used for representing the categorical data with rectangular bars. The length of the bar is proportional to the values they are representing.
Example: Vertical Bar Chart

# First, we will import the required modules
from bokeh.plotting import figure as fig
from bokeh.plotting import output_file as OF
from bokeh.plotting import show
   
# file to save the model
output_file("jtp.html")
       
# Now, instantiate the figure object
graph1 = fig(title = "Bokeh Bar Graph")
   
# x-coordinates to be plotted
x = [1, 2, 3, 4, 5, 6, 7, 8]
   
# y-coordinates of the top edges
top1 = [5, 1, 4, 3, 2, 7, 6, 8]
   
# width / thickness of the bars 
width1 = 0.7
   
# plot the graph
graph1.vbar(x,
           top = top1,
           width = width1,
           color = "green")
   
# display the model
show(graph1)

Output:

Example 2: Horizontal Bar Chart

# First, we will import the required modules
from bokeh.plotting import figure as fig
from bokeh.plotting import output_file as OF
from bokeh.plotting import show
   
# file to save the model
output_file("jtp.html")
       
# Now, instantiate the figure object
graph1 = fig(title = "Bokeh Bar Graph")
   
# x-coordinates to be plotted
x = [1, 2, 3, 4, 5, 6, 7, 8]
   
# y-coordinates of the top edges
right1 = [5, 1, 4, 3, 2, 7, 6, 8]
   
# width / thickness of the bars 
height1 = 0.7
   
# plot the graph
graph1.hbar(x,
           right = right1,
           height = height1,
           color = "green")
   
# display the model
show(graph1)

Output:
Output:

Code 4: To Create Box Plot
Box plot is used for representing the statistical data on the plots, and it is helpful for summarizing the statistical properties of several groups present in the dataset.
Example:

import numpy as nmp
import pandas as pnd

from bokeh.plotting import figure as fig
from bokeh.plotting import show

# generate some time series for six different categories
cats_1 = list("xyzprq")
y_y = nmp.random.randn(2000)
g_1 = nmp.random.choice(cats_1, 2000)
for K, J in enumerate(cats_1):
    y_y[g_1 == l] += K // 2
data_frame = pnd.DataFrame(dict(score = y_y, group = g_1))

# now, we will find the quartiles and IQR for each category
groups1 = data_frame.groupby('group')
q_1 = groups1.quantile(q = 0.25)
q_2 = groups1.quantile(q = 0.5)
q_3 = groups1.quantile(q = 0.75)
iqr = q3 - q1
upper = q3 + 1.5 * iqr
lower = q1 - 1.5 * iqr

# now we will find the outliers for each category
def outliers(group2):
    cat_2 = group2.name
    return group2[(group2.score > upper.loc[cat_2]['score']) | (group2.score < lower.loc[cat_2]['score'])]['score']
out = groups.apply(outliers).dropna()

# here, we will prepare outlier data to plot, we would be needing coordinates for every outlier.
if not out.empty:
    out_x = list(out.index.get_level_values(0))
    out_y = list(out.values)

plot1 = fig(tools = "", background_fill_color = "#efefef", x_range = cats_1, toolbar_location = None)

# if no outliers, we will shrink the lengths of stems to be no longer than the minimums or maximums
q_min = groups1.quantile(q = 0.00)
q_max = groups1.quantile(q = 1.00)
upper.score = [min([x,y]) for (x,y) in zip(list(q_max.loc[:, 'score']), upper.score)]
lower.score = [max([x,y]) for (x,y) in zip(list(q_min.loc[:, 'score']), lower.score)]

# stems
plot1.segment(cats_1, upper.score, cats_1, q_3.score, line_color = "black")
plot1.segment(cats_1, lower.score, cats_1, q_1.score, line_color = "black")

# boxes
plot1.vbar(cats_1, 0.7, q_2.score, q_3.score, fill_color = "#E08E79", line_color = "black")
plot1.vbar(cats_1, 0.7, q_1.score, q_2.score, fill_color = "#3B8686", line_color = "black")

# whiskers (almost-0 height rects simpler than segments)
plot1.rect(cats_1, lower.score, 0.2, 0.01, line_color = "black")
plot1.rect(cats_1, upper.score, 0.2, 0.01, line_color = "black")

# outliers
if not out.empty:
    plot1.circle(outx, outy, size = 6, color = "#F38630", fill_alpha = 0.6)

plot1.xgrid.grid_line_color = None
plot1.ygrid.grid_line_color = "white"
plot1.grid.grid_line_width = 2
plot1.xaxis.major_label_text_font_size = "16px"

show(plot1)

Output:

Code 5: To Create Scatter Plot
A Scatter plot is used for plotting values of two variables in a dataset. It is helpful in finding the correlation between the two variables which are selected.
Example:

# First, we will import the required modules
from bokeh.plotting import figure as fig
from bokeh.plotting import output_file as OF
from bokeh.plotting import show
   
# file for saving the model
OF("jtp.html")
        
# instantiate the figure object
graph1 = fig(title = "Bokeh Scatter Graph")
      
# the points to be plotted on Scatter Plot
x1 = [1.4, 5.1, 5.9, 2.3, 5.6, 8.6, 4.5, 2.1, 3.1, 4.3, 5.5, 4.4, 6.9, 2.1, 4, 5.2, 6.3, 7.2, 7.9, 2]
y1 = [3.4, 2.1, 5.7, 8.5, 4.3, 4.2, 5.7, 6.5, 8.9, 9.1, 1.5, 2.1, 6.8, 1, 6, 5.2, 4.5, 7.4, 7.5, 6.3]
     
# plott the graph
graph1.scatter(x1, y1)
      
# display the model
show(graph1)

Output:

Conclusion
In this tutorial, we have discussed various types of data visualization, namely Bar chart, Box plot, Scatter Markers, Scatter Plots, and Single lines, which can be created using the bokeh library in Python.


Next TopicHow to Plot glyphs over a Google Map by using Bokeh Library in Python




← prev
next →




