



next →
← prev

Nested Dictionary in Python
In the Python programming language, we have the concept of dictionaries. The dictionaries are mutable, and we can easily add and delete the items from the dictionary. It is a collection of unordered data items.

A dictionary is consists of two parts and the first is the data set and the second one of its corresponding key value.
It also does not allow duplicates in it.
Here nested dictionary refers to the dictionary inside a dictionary.
In simple words, it refers to the dictionary, which consists of a set of multiple dictionaries.
It is used to store the data values in key-value pairs.
Nesting Dictionary means putting a dictionary inside another dictionary. Nesting is of great use as the kind of information we can model in programs is expanded greatly.
A nested dictionary contains an unordered collection of various dictionaries.
Compared with a normal dictionary, it also contains the key and its value pairs.
We can access the dictionary using its key.
A Nested dictionary can be created in Python by placing the comma-separated dictionaries enclosed within braces.
Slicing Nested Dictionary is not possible.
We can shrink or grow nested dictionaries as needed.

Syntax of Nested dictionary for adding the various dictionaries into a particular one:
Adding elements to a nested Dictionary can be done in multiple ways. One way to add a dictionary in the Nested dictionary is to add values one be one, Nesteddict[dict][key] = 'value'. Another way is to add the whole dictionary in one go, Nesteddict[dict] = { 'key': 'value'}.
Examples of Nested Dictionary
Let us understand with the help of some examples:
Example 1:

# Let us first create a normal dictionary that contains data items with their 
# corresponding key-value pairs in a python programming language.
# It contains an integer key with the corresponding string values
dict = {1: 'Rina', 2: 'Gita', 3: 'Sita'}
print("\n Printing the dictionary that contains integer keys with their corresponding values")
print(dict)

Explanation:
In the above example, we created a dictionary containing the integer key values with the corresponding string values. Here we have symbolized with the student's data in the class having roll number with the corresponding name of each student. Further, we will perform the nested operation inside this dictionary.
The Output of the following Program
Printing the dictionary that contains integer keys with their corresponding values
{1: 'Rina', 2: 'Gita', 3: 'Sita'}

Example 2:

# In the example we will create a simple empty dictionary using python 
# programming language
dict = {}
print("Simple empty Dictionary: ")
print(dict)

Explanation:
We have created a dictionary that does not contain any of the keys with the corresponding values. Further, we will perform the nested operation inside this dictionary.
The Output of the following Program
Simple empty dictionary:
{ }

Example 3:

# Python program to print Empty nested dictionary
dict = { 'dict1': { },                              # Nested dictionary syntax
		'dict2': { }, 'dict3': { }}
print("Nested dictionary are as follows -")
print(dict)

Explanation:
We have created a nested dictionary, which contains the empty data set, or an empty dictionary that does not contain any data item with their corresponding key values.
The Output of the following Program
Nested dictionary are as follows -
{'dict1': {}, 'dict2': {}, 'dict3': {}}

Example 4:

# Let us first create a normal dictionary that contains data items with their 
# corresponding key value pairs in python programming language.
# It contains string key with the corresponding key values
dict = {'A': 1, 'B': 2, 'C': 3, 'D':4, 'E':5}
print("\n Printing the dictionary that contains string keys with their corresponding integer values")
print(dict)

Explanation:
In the above example, we created a dictionary containing the string key values and corresponding integer values. Here we have symbolized with the student's data in the class having Grade with the corresponding roll number of each student. Further, we will perform the nested operation inside this dictionary.
The Output of the following Program
Printing the dictionary that contains string keys with their corresponding integer values
{'A': 1, 'B': 2, 'C': 3, 'D': 4, 'E': 5}

Example 5:

# Let us first create a normal dictionary that contains data items with their 
# corresponding key-value pairs in a python programming language.
# Here, each item has formed a pair 
Dict = dict([(1, 'silk'), (2, 'one')])
print("\nDictionary with each item as a pair: ")
print(Dict)

Explanation:
We have created a dictionary containing the data items in the form of pairs. We have created a list of paired items and made them a dictionary.
The Output of the following Program
Dictionary with each item as a pair: 
{1: 'silk', 2: 'one'}

Example 6:

# Let us first create a dictionary that contains data items with their corresponding 
# key value pairs, and here we would assign the values to the keys separately in 
# python programming language.

Dict={}
Dict[1] = 'Java'
Dict[2] = 'Tpoint'
Dict[3] = 1
print("\nDictionary after adding 3 elements: ")
print(Dict)

Explanation:
We have created three separate dictionaries and assigned the elements at the corresponding key values one by one. This dictionary contains the integer key values with the corresponding string values. Still, we have created it separately, and after that, we have added these dictionaries. Thus, we can perform the addition operation in the dictionary. We will also perform the nested operation inside this dictionary.
The Output of the following Program
Dictionary after adding 3 elements: 
{1: 'Java', 2: 'Tpoint', 3: 1}

Example 7:

# Let us first create a dictionary that contains data items with their corresponding 
# key value pairs in a python programming language.
# Here, we would perform the addition and update operation in the nested dictionary
# to a single Key
Dict['Value'] = 5, 3, 6
print("\nDictionary after adding 3 elements: ")
print(Dict)

# Updating existing Key's Value
Dict[2] = 'JavaTpoint'
print("\nUpdated key value: ")
print(Dict)

# Adding Nested Key value to Dictionary
Dict[5] = {'Nested' :{'5' : 'Java', '3' : 'T'}}
print("\n Adding a Nested Key: ")
print(Dict)

Explanation:
We have created a dictionary, which contains the integer key values with the corresponding string values. Here, we have performed the update and the adding operation in the dictionary. We have also made some changes in it and converted it into a nested dictionary.
The Output of the following Program
Dictionary after adding 3 elements: 
{'Name': 'JavaTpoint', 1: [11, 12, 13], 'Value': (5, 3, 6)}
Updated key value: 
{'Name': 'JavaTpoint', 1: [11, 12, 13], 'Value': (5, 3, 6), 2: 'JavaTpoint'}
Adding a Nested Key: 
{'Name': 'JavaTpoint', 1: [11, 12, 13], 'Value': (5, 3, 6), 2: 'JavaTpoint', 5: {'Nested': {'5': 'Java', '3': 'T'}}}

Example 8:

# Let us first create a nested dictionary that contains data items with their 
# corresponding key-value pairs in a python programming language.
# Nested dictionary having the mixed keys 
Dict = {'Name': 'JavaTpoint', 1: [11, 12, 13]}
print("\nDictionary with the use of Mixed Keys: ")
print(Dict)

Explanation:
We have created a nested dictionary that contains the key values with the corresponding values. Here, we have used the concept of mixed keys, in which keys are not the same. We will extend it and make a nested dictionary with the same keys but different values.
The Output of the following Program
Dictionary with the use of Mixed Keys: 
{'Name': 'JavaTpoint', 1: [11, 12, 13]}

Example 9:

# Let us first create a nested dictionary that contains data items with their 
# corresponding key-value pairs in a python programming language.
# Nested dictionary having the same keys 
Dict = { 'Dict1': {'Name': 'Reena', 'age': '22'},
		'Dict2': {'Name': 'Jatin', 'age': '19'}}
print("\n Nested dictionary 2-")
print(Dict)

Explanation:
In the above example, we have created a nested dictionary that contains the key values with the corresponding values, here we have used the concept of the same keys, in which keys are the same, but the corresponding data values are different.
The Output of the following Program
Nested dictionary 2-
{'Dict1': {'Name': 'Reena', 'age': '22'}, 'Dict2': {'Name': 'Jatin', 'age': '19'}}

Example 10:

# Let us first create a nested dictionary that contains data items with their 
# corresponding key-value pairs in a python programming language.
# Nested dictionary having the mixed keys 
Dict = { 'Dict1': {1: 'J', 2: 'T', 3: 'P'},
		'Dict2': {'Name': 'JTP', 1: [1, 2]} }
print("\n Nested dictionary 3-")
print(Dict)
Dict3 = { }
print("Initial nested dictionary:-")
print(Dict3)

Dict3['Dict1'] = {}

# Adding elements one at a time
Dict3['Dict1']['name'] = 'Boby'
Dict3['Dict1']['age'] = 21
print("\n After adding dictionary Dict1")
print(Dict3)

Explanation:
We have created a nested dictionary that contains the integer key values with the corresponding string values. Here, we have first printed the nested dictionary and an empty nested dictionary. We have made some changes and placed the nested dictionary inside the empty dictionary. We have also added the two nested dictionaries.
The Output of the following Program
Nested dictionary 3-
{'Dict1': {1: 'J', 2: 'T', 3: 'P'}, 'Dict2': {'Name': 'JTP', 1: [1, 2]}}
Initial nested dictionary:-
{}
After adding dictionary Dict1
{'Dict1': {'name': 'Boby', 'age': 21}}

Let us take a fix example and then see some variations in it, so that we can easily understand it easily:
Example 11:

# creating a nested dictionary named as student
student = {1: {'name': 'Shivam', 'age': '22', 'Id': 10023},
          2: {'name': 'Anjali', 'age': '20', 'Id': 10024}}

print(student)

Explanation:
Here we have created a simple nested dictionary; further, we will make some changes.
The Output of the following Program
{1: {'name': 'Shivam', 'age': '22', 'Id': 10023}, 2: {'name': 'Anjali', 'age': '20', 'Id': 10024}}

Example 12:

# creating a nested dictionary named as student and accesing the elements using [] syntax
student = {1: {'name': 'Shivam', 'age': '22', 'Id': 10023},
          2: {'name': 'Anjali', 'age': '20', 'Id': 10024}}

print(student[1]['name'])
print(student[1]['age'])
print(student[1]['Id'])

Explanation:
Here we have created a nested dictionary and use the [ ] syntax to access the elements from the dictionary, here it is used when we supply the name of the dictionary than in this [ ] square brackets position of the element you want to fetch, and after than in additional [ ] square brackets supply the attribute or the key value that you want to fetch for the particular element.
The Output of the following Program
Shivam
22
10023

Example 13:

# creating a nested dictionary named as student and here we are adding one more 
# element in the dictionary
student = {1: {'name': 'Shivam', 'age': '22', 'Id': 10053},
          2: {'name': 'Anjali', 'age': '20', 'Id': 10004}}

student[3] = {}

student[3]['name'] = 'Tina'
student[3]['age'] = '19'
student[3]['Id'] = '10034'

print(student[3])

Explanation:
Here we have created a nested dictionary, and we want to add more elements to that dictionary. It is all done by using [ ] square brackets syntax, firstly we have created an empty set at position 3 in the dictionary, after than one by one we have filled the data into it, here it is used when we supply the name of the dictionary then in this [ ] square brackets position of the element you want to add and after than in additional [ ] square brackets supply the attribute or the key value that you want to assign for the particular element using the equals to sign.
The Output of the following Program
{'name': 'Tina', 'age': '19', 'Id': '10034'}

Example 14:

# creating a nested dictionary named as student and here we are adding one more  
# element in the dictionary, after than we want to perform delete operation into it 
# for deleting particular elements from a particular dictionary indide the nested 
# dictionary.
student = {1: {'name': 'Shivam', 'age': '22', 'Id': 10053},
          2: {'name': 'Anjali', 'age': '20', 'Id': 10004}}

student[3] = {}

student[3]['name'] = 'Tina'
student[3]['age'] = '19'
student[3]['Id'] = '10034'

print(student[3])
del student[3][ 'Id']
print(student[3])

Explanation:
Here we have created a nested dictionary, and we want to add more elements to that dictionary. It is all done by using [ ] square brackets syntax. At first, we have created an empty set at position 3 in the dictionary, after that one by one we have filled the data into it.
Here, it is used when we supply the name of the dictionary then in this [ ] square brackets position of the element you want to add and after than in additional [ ] square brackets supply the attribute or the key value that you want to assign for the particular element using the equals to sign.
Now for deleting the particular element, let say the id of student 3 from the nested dictionary; we have to use the ' del ' keyword in it; by using it, we can easily delete the particular value that we want.
The Output of the following Program
{'name': 'Tina', 'age': '19', 'Id': '10034'}
{'name': 'Tina', 'age': '19'}

Example 15:

# creating a nested dictionary named as student and here we are adding one more  
# element in the dictionary, after than we want to perform delete operation into it 
# for deleting particular elements from a particular dictionary inside the nested 
# dictionary.
student = {1: {'name': 'Shivam', 'age': '22', 'Id': 10053},
          2: {'name': 'Anjali', 'age': '20', 'Id': 10004}}

student[3] = {}

student[3]['name'] = 'Tina'
student[3]['age'] = '19'
student[3]['Id'] = '10034'

print(student[3])
del student[3]
print(student)

Explanation:
Here we have created a nested dictionary, and we want to add more elements to that dictionary. It is all done by using [ ] square brackets syntax. At first, we have created an empty set at position 3 in the dictionary, after that one by one we have filled the data into it, here it is used when we supply the name of the dictionary then in this [ ] square brackets position of the element you want to add and after than in additional [ ] square brackets supply the attribute or the key value that you want to assign for the particular element using the equals to sign.
For deleting the particular dictionary inside the nested dictionary, we have used the ' del ' keyword and deleted the whole dictionary of student 3 from the student nested dictionary.
The Output of the following Program
{'name': 'Tina', 'age': '19', 'Id': '10034'}
{1: {'name': 'Shivam', 'age': '22', 'Id': 10053}, 2: {'name': 'Anjali', 'age': '20', 'Id': 10004}}



Next TopicCollections.UserString in Python




← prev
next →




