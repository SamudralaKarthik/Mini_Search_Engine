



next →
← prev

Random Uniform Python
In this tutorial, we will discuss the uniform() method present in the random module of Python and also how it can be used by importing NumPy.
The uniform() returns a floating-point number or a range of numbers between the specified limits.
The syntax for using uniform() is-

random.uniform(a,b)

Here, "a" represents the upper bound & b represents the lower bound.
Let us have a look at some examples that demonstrates its usage in Python programs.
The following program illustrates how it can be used in a python program-

# Import the random module
import random
# Initialize the upper and lower limits
x = 8
y = 12
# Displaying the random number
print ("The random number between 8 and 12 is : ", end = " ")
#using random.uniform()
print(random.uniform(x,y))

Output:
The random number between 8 and 12 is:  10.14646142251812

Explanation-
Let's understand what happened in the above program-

Since we have to use the method uniform(), we have imported the random module.
After this, we have initialized the upper bound and the lower bound which are 8 and 12.
Finally, we have passed these two values as the parameters in uniform().
On executing this program, the expected output is displayed.

Let us have a glance at one more program where we have followed the same approach but provided the float values as upper and lower bounds.

# Import the random module
import random
# Initialize the upper and lower limits
x = 9.7
y = 14.3
# Displaying the random number
print("The random number between 9.7 and 14.3 is: ", end = " ")
#using random.uniform()
print(random.uniform(x,y))

Output:
The random number between 9.7 and 14.3 is :  11.521121715281813

Explanation-
The procedure is the same as the previous program but here we can observe it displays the required output even when we provide decimal values.
We all know that the NumPy module is used in Python to carry out different mathematical operations and because of the kind of in-built functions this module provides, our code becomes less complex and more efficient.
Let us see how we can use uniform() here,
Consider the program given below,

# Importing the NumPy module
import numpy as np
np.random.seed(55)
# Creating an array of size four
num_arr = np.random.uniform(size = 4, low = 0, high = 1)
# Displaying the values of array
print("The resultant array is: ", num_arr)

Output:
The resultant array is:  [0.09310829 0.97165592 0.48385998 0.2425227 ]

Explanation-
It's time to know the explanation of the above program-

Since we have to use the method uniform(), this time we have imported the NumPy module.
The next step is to provide a value in random.seed() since it is used to initialize the random number generator.
After this, we have initialized the values of size of the array, upper bound and the lower bound which are 4,0 and 1 respectively inside np.random.uniform().
We have declared num_arr using np.random.uniform() because we are generating an array here.
On executing this program, the expected output is displayed which is an array consisting of three values.

Now, let's check out another program-

# Importing the numpy module
import numpy as np
np.random.seed(0)
# Creating an array of size four
num_arr = np.random.uniform(size = (3, 3), low = 0, high = 1)
#Displaying the values of array
print("The resultant array is: ", num_arr)
# Displaying the type of num_arr
print(type(num_arr))

Output:
The resultant array is:  [[0.5488135  0.71518937 0.60276338]
 [0.54488318 0.4236548  0.64589411]
 [0.43758721 0.891773   0.96366276]]
<class 'numpy.ndarray'>

Explanation-
Let's understand what happened here,

Since we have to use the method uniform(), this time we have imported the NumPy module.
The next step is to provide a value in random.seed() since it is used to initialize the random number generator.
After this, we have initialized the values of size of the array(this time we have created a two-dimensional array), upper bound and the lower bound which are (3,3), 0 and 1 respectively inside np.random.uniform().
We have declared num_arr using np.random.uniform() because we are generating an array here.
On executing this program, the expected output is displayed which is an array consisting of three values and also the type of num_arr.

Finally, it's time to discuss the last program of this article,

#Importing the numpy module
import numpy as np
np.random.seed(0)
#Creating an array of size five
num_arr=np.random.uniform(size = 5, low = 42, high = 63)
#Displaying the values of array
print("The resultant array is: ", num_arr)
#Displaying the type of num_arr
print(type(num_arr))

Output:
The resultant array is:  [53.52508358 57.01897669 54.6580309  53.44254684 50.89675079]
<class 'numpy.ndarray'>

Explanation-

Since we have to use the method uniform(), this time we have imported the NumPy module.
The next step is to provide a value in random.seed() since it is used to initialize the random number generator.
After this, we have initialized the values of size of the array, upper bound, and the lower bound which are 5, 42, and 63(this time we have taken a definite range) respectively inside np.random.uniform().
We have declared num_arr using np.random.uniform() because we are generating an array here.
On executing this program, the expected output is displayed which is an array consisting of three values and also the type of num_arr.

Conclusion
In this tutorial, we learned what is uniform() and how it can be used in various python programs.


Next TopicRelational Operators in Python




← prev
next →




