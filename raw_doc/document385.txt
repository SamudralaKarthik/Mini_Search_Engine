



next →
← prev

Python Emoji Module
For the past several years, we have seen a huge digital transformation in almost every field and aspect of our life. We can easily observe that how we are now more dependent on technologies than we were ever before. We can see this in every part of our daily life and observe it in daily routines. One part of our life where we can see the huge impact of digital transformation and the role of technology is communication. Technologies have created a bridge, or we can say, filled the gap so that now we are more comfortable and find it more convenient to communicate with anyone. With the help of technology, we can communicate with anyone and from any part of the world.
One important change we can see in the communication process after the digital transformation is the use of messages (text messages, emails etc.) is increased so much. We can now see that messages have been an important part of our life, and if we have to communicate or pass a piece of information to someone or publish an important notice, the most common way we choose to do it is through messages. It can be text messages, messages on a particular application, emails etc., but the one thing that has become much common in all of these is, use of emojis in every messaging application and even in emails & in text messages too.
Emojis: Emojis are very small digital images used to express an idea or emotion of the sender. Thus, Emojis are very helpful in saving time and making the sender elaborate their mood easily. Emojis are also very helpful for receivers as, with the help of emojis, they can easily understand with what mood the sender has sent the message.
Emojis have become so important that they have also been introduced in programming languages and used by developers for so long. We are going to study the Python Emoji module in this tutorial, and we will learn how we can use this module to print emojis through a Python program.
Python Emoji Module
The use of Emojis in Python has also become very common, and we have many ways by which we can use & print emojis through a Python program. We can print emojis through their CLDR names, Unicode or using the emoji module. Using Emoji Module is the most common way of all the mentioned ones, and we are going to use the Emoji Module in a Python program to print emojis. But first, we will learn in brief about the Python Emoji Module and its installation process.
Emoji Module: Introduction
Emoji Module is a Python package that allows us to use and print emojis through a Python program, and we can even use this module to use emojis inside an application we are creating using Python. Emoji library in Python is the most common through which we can print Emojis using a Python program, and we should note that Emoji Module is not an in-built module in Python. Using Emoji Module is very simple, and we just have to remember the name of the emoji we want to print in the output.
Emoji Module: Installation
Since Emoji Module is not an in-built library of Python, therefore we have to install this module in our system first in order to use it in a Python program to print emojis. There are many ways to install the Emoji Module on our device, but we will install Emoji Module in our system through the pip installer. We will use the pip installer from the command prompt terminal of our system, and from there, we will install the Python Emoji Module.
First, we have to open the command prompt terminal shell in the system, and then we have to use the following pip command to install Python Emoji Module through a pip installer:

pip install emoji

After writing the above-given command in the terminal, we have to press the enter key, and when we press the enter key, the pip installer will start installing the Emoji Module in our system.

As we can see that, the installation process for Python Emoji Module is now completed, and this module is successfully installed in our system. Now, we can use functions of the Emoji Module by importing it into a Python program to print emojis in the output.
Emoji Module: Implementation
With the help of the Emoji Module, we cannot just implement emojis in Python but also convert emojis passed into its short names. We have the following two different functions in Emoji Module for these two different tasks:

emojize() function
demojize() function

Now, we will learn about both of these functions given above and use each of them inside a Python program to better understand their implementation and functioning.
emojize() function:
While using the emojize() function in a Python program, we have to pass the CLDR short names of the emoji as a parameter, and then this function will convert the CLDR short names into an emoji. The resultant emoji/s produced by the emojize() function will be printed in the program's output.
Example 1: We will use emojize() function with the short CLDR names of Emojis in the following example program to print emojis:

# Import the Emoji Module
import emoji
print("Following are emojis or small digital images of different expressions printed in Python: ")
# Print different type of Emojis 
print("Emoji with grinning faces: ", emoji.emojize(":grinning_face_with_big_eyes:"))
print(emoji.emojize(":grinning_squinting_face:"))
print(emoji.emojize(":grinning_face_with_smiling_eyes:"))
print(emoji.emojize(":grinning_face_with_sweat:"))
print("Emoji with beaming face: ", emoji.emojize(":beaming_face_with_smiling_eyes:"))
# More popular Emojis
print("More Emoji with popular faces: ")
print(emoji.emojize(":grinning_face:"))
print(emoji.emojize(":upside-down_face:"))
print(emoji.emojize(":zany_face:"))
print(emoji.emojize(":shushing_face:"))

Output:
Following are emojis or small digital images of different expressions printed in Python: 
Emoji with grinning faces:  ?
?
? 
? 
Emoji with beaming face:  ?
More Emoji with popular faces: 
?
?
?
?

Explanation:
We have first imported the Emoji Module into the program so that we can use the emojize() module to print modules. Then, we used the emojize() module inside the print statement and printed multiple emojis with this function by passing CLDR short names of emojis as an argument inside the function. We have used CLDR short names of multiple emojis to print multiple emojis with different expressions in the output.
As we can see in the output, multiple emojis with different expressions have been printed according to CLDR short name argument we have passed inside the emojize() function.
Note: Now, many of us wondering that how we will get these CLDR short names of emojis so that we can print emojis in Python with their help. If we want CLDR names of emojis, we can refer to the official website of Unicode CLDR names, and for convenience, we are providing here CLDR names of some famous emojis.
Following are the CLDR short names of some famous emojis:


S. No.
CLDR short name for Emoji


1
beaming face with smiling eyes


2
grinning face


3
face with tears of joy


4
smiling face with halo


5
face blowing a kiss


6
kissing face with smiling eyes


7
zany face


8
face with hand over mouth


9
face with raised eyebrow


10
smirking face


11
lying face


12
drooling face


13
nauseated face


14
grinning face with big eyes


15
grinning face with sweat


16
upside-down face


17
smiling face with 3 hearts


18
kissing face


19
face savouring food


20
squinting face with tongue


If we want to see how these all emojis look like, we can use these CLDR short names as an argument inside the emojize() function, and the corresponding emoji with that CLDR short name will be printed in the output.
demojize function:
When we are given an emoji and want to find out its CLDR short name, we can use the demojize function to do this. We have to pass the emoji as an argument inside the demojize() function, and its CLDR short name will be printed in the output, and that's how we will find out its short name using the demojize function.
Example 2: 
Printing CLDR short names of emoji by using emoji as an argument inside the demojize function in a Python program:

# Import the Emoji Module
import emoji
# Printing CLDR short names of Emojis
print("CLDR short names of various emojis:")
print(emoji.demojize('?'))
print(emoji.demojize('?'))
print(emoji.demojize('?'))
print(emoji.demojize('?'))
print(emoji.demojize('?'))
print(emoji.demojize('?'))
print(emoji.demojize('?'))
print(emoji.demojize('?'))
print(emoji.demojize('?')

Output:
CLDR short names of various emojis:
:shushing_face:
:zany_face:
:upside-down_face:
:grinning_face:
:beaming_face_with_smiling_eyes:
:grinning_face_with_sweat:
:grinning_face_with_smiling_eyes:
:grinning_squinting_face:
:grinning_face_with_big_eyes:

As we can see, the CLDR short name of emojis that we have used in the demojize() function in the program is printed in the output once the program is executed.


Next TopicPython Nmap Module




← prev
next →




