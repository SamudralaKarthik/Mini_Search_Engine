



next →
← prev

Conditional Expressions in Python
Python's conditional statements carry out various calculations or operations according to whether a particular Boolean condition is evaluated as true or false. In Python, IF statements deal with conditional statements.
We'll learn how to use conditional statements in Python in this tutorial.
What is Python If Statement?
To make decisions, utilize the if statement in Python. It has a body of instructions that only executes whenever the if statement's condition is met. The additional else statement, which includes some instructions for the else statement, runs if the if condition is false.
Python's if-else statement is used when you wish to satisfy one statement while the other is false.
Python Syntax of the if Statement:

if <conditional expression>
 Statement
else
 Statement

Code

# Python program to execute if statement

a, b = 6, 5

# Initializing the if condition
if a > b:
    code = "a is greater than b"
    print(code)

Output:
a is greater than b

How to Use the else Condition?
The "else condition" is usually used when judging one statement based on another. If the condition mentioned in the if code block is wrong, then the interpreter will execute the else code block.
Code

# Python program to execute if-else statement

a, b = 6, 5

# Initializing the if-else condition
if a < b:
    code = "a is less than b"
    print(code)
else:
    print("a is greater than b")

Output:
a is greater than b

When the else Statement does not Work
There could be a lot of situations where your "otherwise condition" doesn't produce the desired outcome. Due to a flaw in the program's logic, it will print the incorrect result. This typically occurs when there are more than two statements or conditions in a program.
An illustration will make this notion easier for you to grasp.
Since both variables, in this case, are identical (9, 9), the program's output that "x is greater than y" is FALSE. This is because it evaluates the first condition, or the if expression in Python, then prints the next condition (the else statement) by default if the first condition fails. The following step will examine how to fix this mistake.
Code

# Python program when else condition does not work

a, b = 9, 9

# Initializing the if-else condition
if a < b:
    code = "a is less than b"
else:
    code = "a is greater than b"

print(code)

Output:
a is greater than b

How to use the elif Condition?
We can employ the "elif" clause to fix the issue caused by the "else condition" made earlier. You can instruct the software to print the third condition or alternative when the first two conditions fail or are erroneous by using the "elif" condition.
Code

# Python program to show how to use elif condition

a, b = 9, 9

# Initializing the if-else condition
if a < b:
    code = "a is less than b"
elif a == b:
    code = "a is equal to b"
else:
    code = "a is greater than b"

print(code)

Output:
a is equal to b

Python Nested if Statement
The following example demonstrates nested if Statement Python
Code

# Python program to show the nested if-else conditions

A = 100
B = 200
C = 300

# Initializing the if-else conditions
if B > A:
    if B > C:
        print("B is the largest number")
    else:
        if A > B:
            if A > C:
               
print("A is the largest number")
        elif C > A:
            if C > B:
               
print("C is the largest number")
        else:
           
print("All numbers are equal")
        
if B % C == 0:
    if A % C == 0:
        print("C is a common factor of A and B")

Output:
C is the largest number



Next TopicHow to Print a List Without Brackets in Python




← prev
next →




