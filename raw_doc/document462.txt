



next →
← prev

Snake Game in Python using Turtle Module
The snake is an arcade maze game that was created in the company of Gremlin Industries and published by Sega in the month of October 1976. It is considered an excellent game and has been gaining popularity with the public for many generations. The Snake game can be controlled with the four direction buttons in relation to the direction it's heading into. The goal of playing the game is to score maximum points by grabbing food or fruits. The player is out of luck if the snake strikes the wall or itself.
For beginners in Python and those seeking to create something simpler in their field can test this program. The module called Turtle was specifically designed to be used for beginners to play with and submit a program of the project. This project is written using Python 3.0.
Therefore, we will create a game that is based on Python with these modules.

Turtle: This is an installed Python library that allows users to draw patterns and images by providing the user with a virtual canvas.
Time: It is used in order to calculate the number of seconds since the date of the event.
Random: This is a function utilized to create random numbers in Python through the use of the random module.

Support
The code below can work easily by using the Sublime Text application that is specifically designed to work with Python programs.
Additionally, VSCode can be used to use this program. Install Python3 by utilizing extensions of VSCode. Then, save the Python3 program in the format of your_filename.py.
Here is the step-by-step method to make the Snake Game using the Turtle module:
Step 1. Adding modules to the program and then giving an initial value for each game.

import turtle as ttl
import time
import random as rdm
 
delay = 0.1
score = 0
high_score = 0

Step 2: We will create the display of this game, i.e., the screen of the game, where we'll create the snake's head and food items for the snake to eat during the game and display the score at the top in the game.

# Here we will creating a window screen
w_n = ttl.Screen()
w_n.title("Snake Game JavaTpoint")
w_n.bgcolor("black")
 
# The width and height can be put as user's choice
w_n.setup(width = 650, height = 650)
w_n.tracer(0)
 
 
# Here, we will create the head of the snake
head1 = ttl.Turtle()
head1.shape("circle")
head1.color("white")
head1.penup()
head1.goto(0, 0)
head1.direction = "Stop"
 
 
# Here, we will create the food in the game
food1 = ttl.Turtle()
colors = rdm.choice(['pink', 'yellow', 'blue'])
shapes = rdm.choice(['triangle', 'square', 'circle'])
food1.speed(0)
food1.shape(shapes)
food1.color(colors)
food1.penup()
food1.goto(0, 100)
 
 
pen1 = ttl.Turtle()
pen1.speed(0)
pen1.shape("square")
pen1.color("white")
pen1.penup()
pen1.hideturtle()
pen1.goto(0, 250)
pen1.write("Score: 0  High Score: 0", align ="center",
          font = ("Consolas", 22, "bold"))

Output:

Step 3: We'll verify the key that controls the snake's movement. When we click on the terms commonly used in gaming, such as "e", "s", "f", and "v", we will be able to control the snake's movement around the screen.

# Here, we will assign the key directions
def group1():
    if head1.direction != "down":
        head1.direction = "up"
 
 
def go_down():
    if head1.direction != "up":
        head1.direction = "down"
 
 
def go_left():
    if head1.direction != "right":
        head1.direction = "left"
 
 
def go_right():
    if head1.direction != "left":
        head1.direction = "right"
 
 
def move1():
    if head1.direction == "up":
        y1 = head1.ycor()
        head1.sety(y1 + 20)
    if head1.direction == "down":
        y1 = head1.ycor()
        head1.sety(y1 - 20)
    if head1.direction == "left":
        x1 = head1.xcor()
        head1.setx(x1 - 20)
    if head1.direction == "right":
        x1 = head1.xcor()
        head1.setx(x1 + 20)
 
 
w_n.listen()
w_n.onkeypress(group1, "e")
w_n.onkeypress(go_down, "v")
w_n.onkeypress(go_left, "s")
w_n.onkeypress(go_right, "f")

Step 4: We will design the game in which the following things will be occurring:

The snake's body will expand body after eating the fruits.
Colouring the snake's tail.
When the fruit has been eaten, The score will then be recorded.
Examining the snake's head for collides with body or side of the screen.
The game will automatically restart immediately following the collision.
A new design and shape of this fruit are revealed each time the window is opened.
Scores will then be reset to zero, and the highest score will be kept until the window has not shut.


# Code for main gameplay
while True:
    w_n.update()
    if head1.xcor() > 295 or head1.xcor() < -295 or head1.ycor() > 290 or head1.ycor() < -295:
        time.sleep(1)
        head1.goto(0, 0)
        head1.direction = "Stop"
        colors = rdm.choice(['pink', 'blue', 'yellow'])
        shapes = rdm.choice(['square', 'circle'])
        for segment1 in segments1:
            segment1.goto(1050, 1050)
        segments1.clear()
        score = 0
        delay = 0.1
        pen1.clear()
        pen1.write("Score : {} High Score : {} ".format(
            score, high_score), align = "center", font = ("Consoles", 22, "bold"))
    if head1.distance(food1) < 20:
        x = rdm.randint(-275, 275)
        y = rdm.randint(-275, 275)
        food1.goto(x, y)
 
        # Here, we are adding segment
        new_segment1 = ttl.Turtle()
        new_segment1.speed(0)
        new_segment1.shape("square")
        new_segment1.color("orange")  # tail colour
        new_segment1.penup()
        segments.append(new_segment1)
        delay -= 0.001
        score += 10
        if score > high_score:
            high_score = score
        pen1.clear()
        pen1.write("Score: {} High Score: {} ".format(
            score, high_score), align = "center", font = ("Consoles", 22, "bold"))
    # Checking for head collisions with body segments
    for index in range(len(segments1)-1, 0, -1):
        x = segments1[index-1].xcor()
        y = segments1[index-1].ycor()
        segments1[index].goto(x, y)
    if len(segments1) > 0:
        x1 = head1.xcor()
        y1 = head1.ycor()
        segments1[0].goto(x1, y1)
    move()
    for segment1 in segments1:
        if segment1.distance(head1) < 20:
            time.sleep(1)
            head1.goto(0, 0)
            head1.direction = "stop"
            colors = rdm.choice(['pink', 'blue', 'yellow'])
            shapes = rdm.choice(['square', 'triangle'])
            for segment1 in segments1:
                segment1.goto(1050, 1050)
            segment1.clear()
 
            score = 0
            delay = 0.1
            pen1.clear()
            pen1.write("Score: {} High Score: {} ".format(
                score, high_score), align = "center", font = ("Consoles", 22, "bold"))
    time.sleep(delay)
 
w_n.mainloop()

Below is the Full Implementation of Code for Snake Game

import turtle as ttl
import time
import random as rdm
 
delay = 0.1
score = 0
high_score = 0

# Here we will be creating a window screen
w_n = ttl.Screen()
w_n.title("Snake Game JavaTpoint")
w_n.bgcolor("black")
 
# The width and height can be put as user's choice
w_n.setup(width = 650, height = 650)
w_n.tracer(0)
 
 
# Here, we will create the head of the snake
head1 = ttl.Turtle()
head1.shape("circle")
head1.color("white")
head1.penup()
head1.goto(0, 0)
head1.direction = "Stop"
 
 
# Here, we will create the food in the game
food1 = ttl.Turtle()
colors = rdm.choice(['pink', 'yellow', 'blue'])
shapes = rdm.choice(['triangle', 'square', 'circle'])
food1.speed(0)
food1.shape(shapes)
food1.color(colors)
food1.penup()
food1.goto(0, 100)
 
 
pen1 = ttl.Turtle()
pen1.speed(0)
pen1.shape("square")
pen1.color("white")
pen1.penup()
pen1.hideturtle()
pen1.goto(0, 250)
pen1.write("Score: 0, High Score: 0", align = "center",
          font = ("Consoles", 22, "bold"))
# Here, we will assign the key directions
def group1():
    if head1.direction != "down":
        head1.direction = "up"
 
 
def go_down():
    if head1.direction != "up":
        head1.direction = "down"
 
 
def go_left():
    if head1.direction != "right":
        head1.direction = "left"
 
 
def go_right():
    if head1.direction != "left":
        head1.direction = "right"
 
 
def move():
    if head1.direction == "up":
        y1 = head1.ycor()
        head1.sety(y1 + 20)
    if head1.direction == "down":
        y1 = head1.ycor()
        head1.sety(y1 - 20)
    if head1.direction == "left":
        x1 = head1.xcor()
        head1.setx(x1 - 20)
    if head1.direction == "right":
        x1 = head1.xcor()
        head1.setx(x1 + 20)
 
 
w_n.listen()
w_n.onkeypress(group1, "e")
w_n.onkeypress(go_down, "v")
w_n.onkeypress(go_left, "s")
w_n.onkeypress(go_right, "f")

segments1 = []
 
# Code for main gameplay
while True:
    w_n.update()
    if head1.xcor() > 290 or head1.xcor() < -290 or head1.ycor() > 290 or head1.ycor() < -290:
        time.sleep(1)
        head1.goto(0, 0)
        head1.direction = "Stop"
        colors = rdm.choice(['pink', 'blue', 'yellow'])
        shapes = rdm.choice(['square', 'triangle'])
        for segment1 in segments1:
            segment1.goto(1050, 1050)
        segments1.clear()
        score = 0
        delay = 0.1
        pen1.clear()
        pen1.write("Score: {} High Score: {} ".format(
            score, high_score), align = "center", font = ("candara", 24, "bold"))
    if head1.distance(food1) < 20:
        x1 = rdm.randint(-275, 275)
        y1 = rdm.randint(-275, 275)
        food1.goto(x1, y1)
 
        # Here, we are adding segment
        new_segment1 = ttl.Turtle()
        new_segment1.speed(0)
        new_segment1.shape("square")
        new_segment1.color("orange")  # tail colour
        new_segment1.penup()
        segments1.append(new_segment1)
        delay -= 0.001
        score += 10
        if score > high_score:
            high_score = score
        pen1.clear()
        pen1.write("Score : {} High Score : {} ".format(
            score, high_score), align = "center", font = ("Consoles", 22, "bold"))
    # Checking for head collisions with body segments
    for index in range(len(segments1)-1, 0, -1):
        x1 = segments1[index - 1].xcor()
        y1 = segments1[index - 1].ycor()
        segments1[index].goto(x1, y1)
    if len(segments1) > 0:
        x1 = head1.xcor()
        y1 = head1.ycor()
        segments1[0].goto(x1, y1)
    move()
    for segment1 in segments1:
        if segment1.distance(head1) < 20:
            time.sleep(1)
            head1.goto(0, 0)
            head1.direction = "stop"
            colors = rdm.choice(['pink', 'blue', 'yellow'])
            shapes = rdm.choice(['square', 'triangle'])
            for segment1 in segments1:
                segment1.goto(1050, 1050)
            segment1.clear()
 
            score = 0
            delay = 0.1
            pen1.clear()
            pen1.write("Score: {} High Score: {} ".format(
                score, high_score), align = "center", font = ("Consoles", 22, "bold"))
    time.sleep(delay)
 
w_n.mainloop()

Output:



Next TopicHow to Find Armstrong Numbers between two given Integers




← prev
next →




