



next →
← prev

New Features in Python 3.10
Python has gained so much popularity and has become the highly demanded programming language in the industry. There are many reasons developers show their love for this programming language, such as versatile, rich libraries, friendly syntax, ease of learning, and many others. And another interesting reason is that Python comes with exciting and useful features its newly released versions.
Python Software Developer Foundation (PSF) maintains, develops the language and is always working on new ways to improve it. The more recent version of Python is 3.10, which was released on October 4, 2021. PSF is working on Python 3.11, and it is available for testing. However, in this tutorial, we will discuss the unique features of Python 3.10 and see how they differ from the previous one. If you want to learn about the Python programming language, then visit our Python tutorial.
Let's learn about the new features of Python 3.10.
1. Better Error Tracking
Errors are an integral part of software development, and we encounter errors daily. Every programmer knows how frustrating it is to get a syntax error. However, Python has a straightforward syntax, so after some practice, we get the idea of fixing it. Python returns the proper error messages that help us to locate the error more efficiently and save time on debugging.
Python 3.10 comes with better error messages and precise line numbers for debugging. Let's understand the following example where we create a dictionary and a function. We skip to close the parentheses; now, let's see what we get in return.
Example -

student = {1: "Arun", 2: 'Tusar', 3: 'Himanshu', 4: 'Abhinay'
a = some_function()
print(student)

When we run the above code, it will give the following error. In the previous version of Python, error messages are shown as below.
Output:
a = some_function()
    ^
SyntaxError: invalid syntax

However, if we use Python 3.10, the error message and line numbering improvement, the message will have the complete information such as exact types of error and their precise line number.
Output:
File "example_code.py", line 1
   student = {1: "Arun", 2: 'Tusar', 3: 'Himanshu', 4: 'Abhinay'
                     
SyntaxError: '{' was never closed

Suppose we are working on a project with enormous numbers of line code. With this type of message, we can quickly locate and correct the errors, making debugging much faster and decreasing frustration for people just learning Python.
2. New Type Union Operator
One of the reasons for the popularity of Python is its dynamic nature. Though, there are several ways to make some portion of the Python dynamic. In the previous version of Python, we can specify the type of attributes inside the function. Let's understand the following example -
Example -

def func(num: int) -> int:
   return num + 5

But, if the a function is not limited to take only one type of argument; we can use the union keyword to specify the multi-type of attributes. Let's understand the following example.
Example -

def func(num: Union[int, float]) -> Union[int, float]:
   return num + 5

However, the newer version of Python allows us to use the | operator instead of union to choose between two data types.
Example -

def func(num: int | float) -> int | float:
   return num + 5

3. Automatic Text Encoding
Many times we heard that this code is working perfectly on my machine, but why not on yours? There can be many reasons, like text encoding. In the older version of Python, if you don't explicitly state an encoding type, the preferred local encoding may cause a failure on the other machine.
Python 3.10 shows the warning message if the user opens a text file without a specific encoding type. Python provides the charade library to detect and convert into a standard encoding.
4. Asynchronous Iteration
Asynchronous programming is a valuable and powerful programming paradigm, and it has been a part of Python since version 3.5. However, Python 3.10 comes with two additional methods aiter() and anext(), to make it more useful. Python is an essential programming language to inspire the younger generation to pursue a career in tech. Apart from being an easy language or how fast developers can start to implement it, it is continuously evolving, and Python Software Foundation works to keep it relevant.
5. Stricter Zipping
The zip() function of Python is unique and valuable. This built-in function allows us to combine and iterate over elements from several sequences. In the previous version of Python 3.10, we can combine the sequences of different lengths. But Python 3.10 introduced the new parameter strict that checks if all iterables passed to the zip functions, are the same size.
6. Structural Pattern Matching
If you have ever worked with other programming languages like C++, you may wish that Python should have the switch statement so that you can omit the long if, elif, elif, ....., else statement. Python 3.10 has the additional feature of structural pattern matching, otherwise known as the switch case statement. The syntax is given below.
Syntax -

match subject:
   case <patt1>:
       <act1>
   case <patt2>:
       <act2>
   case <patt3>:
       <act3>
   case _:
       <action_default>

7. Atomic Grouping and speedups for regex
As we know, Python provides the re module that works with the regular expression. It has lacked a few features in other implementations of the regular expressions, and that is atomic grouping. The atomic grouping is widely supported in the different programming language but not in Python. Python 3.10 supports this pattern using the standard syntax for atomic grouping (as an example ? >.....)).
The re module's pattern matching engine has also been rewritten and runs about 100% faster.
Conclusion
This tutorial included the features of the Python 3.10 version. We have explored some essential and useful features, including strict zipping, structural pattern matching, asynchronous iteration, a new type of union operator, etc. It also has some other features, but we have explained a few important ones.


Next TopicTypes of Constant in Python




← prev
next →




