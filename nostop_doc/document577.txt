next prev Rock Paper Scissors Game Python Python programming language that serve different purposes, anything with Python also utilized developing games. Developing game great learn code program. following tutorial, will learn create simple "Rock Paper Scissors" game without using external game libraries like PyGame Python programming language. before started, briefly understand what "Rock Paper Scissors" game What "Rock Paper Scissors" game? Most have played rock paper scissors before. Rock Paper Scissors often used fair selection method between people more order settle dispute make unbiased group decision. This method similar flipping coin, drawing straws, throwing dice. someone unfamiliar, rock paper scissors game considered hand game between more players. Participants "Rock, Paper, Scissors!" then form their hands into shape rock fist), piece paper (palm facing downward), pair scissors (two fingers extended) simultaneous manner. rules this game simple: Rule Rock smashes scissors, rock wins Rule Paper covers rock, paper wins Rule Scissors paper, scissors that have understood what rock paper scissors game rule, begin thinking about these rules might translate Python code. following Python project, players will select anyone from rock, paper, scissors. Then they will click play button display game's result. Prerequisites Project will fundamental concept Python programming language with Tkinter library random module order implement rock paper scissors project. Tkinter library: Tkinter library standard Graphical User Interface (GUI) library which among easiest methods build application. random module: random module allows programmers generate random numbers. install these libraries using Python installer command command prompt terminal shown below: Syntax: install tkinter install random Structure Python project following steps that will follow build fully functional Rock Paper Scissors game with using Python: Step Importing required libraries Step Creating application Step Writing code user selection Step Writing code computer selection Step Defining functions Step Defining buttons will discuss these steps detail. let's started. Importing required libraries first step every project import libraries modules will need throughout project. this case, will require import Tkinter library random module. consider following snippet code illustrating same: File: rockPaperScissors.py importing required libraries modules from tkinter import import random Explanation: above snippet code, have imported Tkinter library along with random module. Creating application Once done importing required libraries modules, will initialize window using Tk() class Tkinter library provide some details this window. consider following snippet code demonstrating same: File: rockPaperScissors.py creating application guiWindow Tk() guiWindow.title("The Rock Paper Scissors Game") guiWindow.geometry("480x480") guiWindow.config(bg "#87BDD8") guiWindow.resizable(width False, height False) Explanation: above snippet code, have initialized window with help Tk() class Tkinter library. have then used title() method title window. have also used geometry() method width height window. have then specified window's background colour parameter config() method. last, have fixed size window setting width height parameters False resizable() method. Now, will label window using Label() widget class. following snippet code implementation Label() widget. File: rockPaperScissors.py adding label window using Label() widget heading Label( guiWindow, text 'Let\'s play Rock Paper Scissors', font 'arial bold', '#588C7E', 'white' ).pack() Explanation: above snippet code, have used Label() widget order display text that users cannot change. Within this widget, have specified name window, i.e., guiWindow. have also defined text displayed label title that label. have also provided font which style text should written. have also specified background color using argument foreground color using argument. have then used pack function organize widget form block. Creating Column User Selection that have created window successfully, time create column where player input their selection. consider following snippet code demonstrating same: File: rockPaperScissors.py creating column user selection userInput StringVar() subHeading Label( guiWindow, text 'Select from rock, paper, scissors', font 'calibri bold', '#96ceb4' ).place( Entry( guiWindow, font 'calibri 14', textvariable userInput, '#FBEFCC' ).place( 110, Explanation: above snippet code, have used StringVar() class store player's selection userInput variable. have then created label display some texts player. last, have used Entry() widget create input text field. Within this widget, have used textvariable parameter order retrieve text Entry() widget. have also used place() function place widgets specific coordinates. Code Computer selection will randint() function random module computer choose preference. consider following snippet code demonstrating same. File: rockPaperScissors.py code computer selection compSelection random.randint(1, compSelection compSelection 'rock' elif compSelection compSelection 'paper' else: compSelection 'scissors' Explanation: above snippet code, have used randint() function random module randomly pick number from given range. have then used if-elif-else conditional statements play rock paper scissors. computer picks rock will compSelection variable. computer picks paper will compSelection variable. computer picks scissors will compSelection variable. Creating function begin Game Once values from user's selection computer's choice, will write function start Game. This function will check value from userSelection variable compare with value from compSelection variable return required statements. File: rockPaperScissors.py creating function begin game StringVar() letsPlay(): userSelection userInput.get() userSelection compSelection: res.set("It's Tie! made same choice computer.") elif userSelection 'rock' compSelection 'paper': res.set("Oops! Lose. Computer selected Paper.") elif userSelection 'rock' compSelection 'scissors': res.set("Congrats! Win. Computer selected Scissors.") elif userSelection 'paper' compSelection 'scissors': res.set("Oops! Lose. Computer selected Scissors.") elif userSelection 'paper' compSelection 'rock': res.set("Congrats! Win. Computer selected Rock.") elif userSelection 'scissors' compSelection 'rock': res.set("Oops! Lose. Computer selected Rock.") elif userSelection 'scissors' compSelection 'paper': res.set("Congrats! Win. Computer selected Paper.") else: res.set("Looks like invalid input! Consider selecting from rock, paper scissors") Explanation: above snippet code, have created object StringVar() class. have then defined function letsPlay(). Within this function, have used if-elif-else conditional statements compare input value from user with value selected computer used set() function store corresponding statements result comparison. this rock paper scissors game, player selects rock will over another player selects scissors lose player selects paper; player selects paper will lose player with scissors. both select same them, game will tie. Defining function Reset game will create function that will reset game. This function will variables empty string. consider following snippet code demonstrating same: File: rockPaperScissors.py defining function reset game resetGame(): res.set("") userInput.set("") Explanation: above snippet code, have defined function resetGame(). Within this function, have value variables like userInput empty strings. Defining function Exit game will define function that quit rock paper scissors program stopping execution mainloop() method. consider following snippet code demonstrating same: File: rockPaperScissors.py defining function exit game exitGame(): guiWindow.destroy() Explanation: above snippet code, have used destroy() method stop execution mainloop() method exit program. Defining Buttons window define some buttons execute processing window. These buttons will include Play, Reset, Exit. consider following snippet code illustrating definition these buttons. File: rockPaperScissors.py displayResult Label( guiWindow, textvariable res, font 'calibri bold', '#96CEB4' ).place( playButton Button( guiWindow, font 'calibri bold', text 'PLAY', padx 'white', command letsPlay ).place( 100, resetButton Button( guiWindow, font 'calibri bold', text 'RESET', padx 'white', command resetGame ).place( 200, exitButton Button( guiWindow, font 'calibri bold', text 'EXIT', padx 'white', command exitGame ).place( 300, guiWindow.mainloop() Explanation: have created label above snippet code display result. have then used Button() widget multiple times create different buttons play, reset exit game. have used command parameter within these widgets call specified function when clicking button. last, have called mainloop() method execute program. Thus, rock paper scissors game using Tkinter library Python complete. save file program works. program, type following command command-line shell terminal: Command: python rockPaperScissors.py before output, here complete project code. Complete Project Code following program file complete code 'Rock Paper Scissors game' project. File: rockPaperScissors.py importing required libraries modules from tkinter import import random creating application guiWindow Tk() guiWindow.title("The Rock Paper Scissors Game") guiWindow.geometry("480x480") guiWindow.config(bg "#588C7E") guiWindow.resizable(width False, height False) adding label window using Label() widget heading Label( guiWindow, text 'Let\'s play Rock Paper Scissors', font 'arial bold', '#588C7E', 'white' ).pack() creating column user selection userInput StringVar() subHeading Label( guiWindow, text 'Select from rock, paper, scissors', font 'calibri bold', '#96CEB4' ).place( Entry( guiWindow, font 'calibri 14', textvariable userInput, '#FBEFCC' ).place( 110, code computer selection compSelection random.randint(1, compSelection compSelection 'rock' elif compSelection compSelection 'paper' else: compSelection 'scissors' creating function begin game StringVar() letsPlay(): userSelection userInput.get() userSelection compSelection: res.set("It's Tie! made same choice computer.") elif userSelection 'rock' compSelection 'paper': res.set("Oops! Lose. Computer selected Paper.") elif userSelection 'rock' compSelection 'scissors': res.set("Congrats! Win. Computer selected Scissors.") elif userSelection 'paper' compSelection 'scissors': res.set("Oops! Lose. Computer selected Scissors.") elif userSelection 'paper' compSelection 'rock': res.set("Congrats! Win. Computer selected Rock.") elif userSelection 'scissors' compSelection 'rock': res.set("Oops! Lose. Computer selected Rock.") elif userSelection 'scissors' compSelection 'paper': res.set("Congrats! Win. Computer selected Paper.") else: res.set("Looks like invalid input! Consider selecting from rock, paper scissors") defining function reset game resetGame(): res.set("") userInput.set("") defining function exit game exitGame(): guiWindow.destroy() displayResult Label( guiWindow, textvariable res, font 'calibri bold', '#96CEB4' ).place( playButton Button( guiWindow, font 'calibri bold', text 'PLAY', padx 'white', command letsPlay ).place( 100, resetButton Button( guiWindow, font 'calibri bold', text 'RESET', padx 'white', command resetGame ).place( 200, exitButton Button( guiWindow, font 'calibri bold', text 'EXIT', padx 'white', command exitGame ).place( 300, guiWindow.mainloop() Output: Conclusion end, conclude that have successfully developed rock paper scissors game using Python programming language. utilized Tkinter library order render graphics. also made random module generate random choices. From this project, learned create different widgets like labels, text fields, buttons. have also seen call functions with help buttons. Hence, following way, were able create rock paper scissors game Python. Next TopicCheck Given Linked List Circular Linked List prev next