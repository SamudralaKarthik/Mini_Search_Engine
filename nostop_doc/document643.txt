next prev Python Operator Logical Programming mixture mathematics, logic, many more domains. solve problem mathematics, from textbook real-time, need addition, subtraction, multiplication division operators. These fundamental operators needed mathematics. similar way, perform operation variables values, Python types operators, each useful. Among these, "OR" operators Python, belongs Logical operators. Logical operators mainly deal with decision-making needs. There three operators under logical operators: Logical Logical Logical This article discusses operator with examples clear understanding. Basic: languages like Java, "||" represents operator, Python, "or" without using special symbol. Syntax: Return value: This operator either returns "True" "False", depending operands. both operands/expressions either side operator false, returns False. least operands true both true, returns True. Truth tale "OR" Operator: Expression Expression (Expression Expression returns: True True True True False True False True True False False False Need operator: Suppose need number; positive, greater than negative, less than -20. meet these conditions, write code using conditional statements: (input ("Enter number: (num -20): print ("True") elif (num 20): print ("True") else: print ("False") Output: Understanding: above code, First, check number negative less than -20. true, condition true, then don't need check next condition, print "True". true, then elif block will executed, checking number positive greater than this condition true, then prints "True". both elif false, then else block will executed print "False". Writing above code using just "OR" operator: check both conditions line. least condition true, immediately returns "True". both conditions false, returns "False". (input ("Enter number: (num 20): print ("True") else: print ("False") Output: Using "or" makes code simple, readable, decreases length code. take another example with real-time application: Suppose organizing coding competition b-tech m-tech students; student take part, should either b-tech m-tech student. person neither b.tech m.tech student allowed enter competition. need check least condition true. Code: name input ("Please enter participant's name: course input ("Please enter course participant's studying\nPlease enter name course capital letters without spaces other characters between like BTECH MTECH: (course "BTECH" course "MTECH"): print ("Congratulations!, eligible competition") else: print ("Only students B-Tech M-Tech allowed competition. Sorry! can't enroll in") Output: "or" with just numbers: what happens give decimal integers both sides "or" operator: Pre-requisite: Generally, "or" checks least operand True. number greater than represents True, represents False. num1 (input ("Enter number: num2 (input ("Enter another number: print (num1 num2) Sample outputs: Understanding: first case: Both numbers greater than True True condition. Hence, "or" returns True. condition "or" that least operand must True. Hence, after confirming that first number- (>0) true, without checking second number, returned "True" with first number. second case: first number 0-False; "or" checks second number, which (>0) False True condition. Returns third case: first number 0-False; "or" checks second number, which again False False. Returns False. "or" operator searches operands find "True". Once finds "True", immediately returns True without checking rest operands. This condition called "The short circuit" "Lazy evaluation." "or" with multiple operands: num1 (input ("Enter first value: num2 (input ("Enter second value: num3 (input ("Enter third value: print (num1 num2 num3) Sample outputs: Understanding: same having operands. "or" checks "True", finds one, returns "True", doesn't find least True, returns "False". Bitwise (|): There another "or" operator Python. bitwise operator. represent "|". Both called "or" operators. Now, difference between operators: Binary language language computer. inner mechanisms happen concerning bits. Bitwise operators operators that allow programmer perform bitwise operations integers. There bitwise operators: Bitwise Bitwise Bitwise Bitwise Bitwise right shift Bitwise left shift difference between (logical bitwise or), (logical and, bitwise and), (logical not, bitwise not) lies their names. bitwise operator, first, integer converted into binary bits, then operator will perform operation bit-by-bit. Here, represents True, represents False. After operation, binary number will converted decimal returned output. operation bitwise given integers converted into bits (binary), operator will operate every corresponding numbers. (operand (operand Return value take example: num1 num2 Performing |: perform logical we'll True will returned: num1= (input ("Enter number: num2 (input ("Enter another number: print (num1 num2) print (num1 num2) Output: These "or" operators available Python language. Logical Bitwise OR: Logical Bitwise Logical represented "or." Bitwise represented "|." defined only Boolean values; even expressions, they will evaluated True False. defined integer values well Boolean values Print (True False) True searches True value, finds one, doesn't evaluate rest expression returns "True". This phenomenon called "Lazy evaluation". Even operator finds True value, continues evaluating rest expressions. This operator mostly used decision-making truth testing. Bitwise operators designed lower-level manipulations. Every number greater than evaluated "True" every number evaluated "False" represents "True", represents "False". operator hierarchy, Bitwise operators have higher precedence than logical operators. Next TopicPython Bitwise Operator prev next