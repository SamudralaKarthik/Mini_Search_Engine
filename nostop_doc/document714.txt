next prev YouTube Video Downloader using Python Tkinter YouTube considered among most-watched video streaming website. YouTube online video platform launched 2005 that features wide variety content, including educational videos, entertainment stuff, clips, music gaming videos, many more. slow internet connection cause difficulties while streaming videos online. With help YouTube video downloader application, download videos smartphone. This way, watch videos anytime without that pesky buffering icon. following tutorial, will learn develop application download YouTube videos using Tkinter pytube libraries Python programming language. before start building project, project's prerequisites. Prerequisites Project There some libraries that will need creation YouTube Video Downloader Python. These libraries briefly described follows: Tkinter:The Tkinter library will allow provide application with graphical user interface (GUI). Pytube: pytube library lightweight, dependency-free Python library which allows download videos from web. Pillow:The Pillow library Python Imaging Library that allows image processing capabilities Python interpreter. Since Tkinter library comes preinstalled with Python, there need install externally. However, install pytube Pillow (PIL) libraries using installer typing following command command prompt terminal. Syntax: installing pytube library install pytube installing pillow library install pillow Once installation complete, verify whether pillow library installed properly creating python program file importing pytube pillow (PIL) modules. following snippet code illustrating same. File: verify.py import pytube import Now, save file following command command prompt terminal. Syntax: python verify.py libraries have been installed successfully program does return importing error. case exception raised, reinstalling libraries consider checking their official documentation. start building project. Building YouTube Video Downloader using Tkinter Python have divided complete project code creating YouTube Video Downloader Python into several steps better understanding. These steps shown below: Step Importing necessary modules Step Defining required functions download video. Step Creating main window application. Step Adding necessary widgets window setting event triggers. understand steps mentioned above more elaborate way. Importing necessary modules first, will start importing required modules, which include widgets modules from tkinter module, YouTube class from pytube library, Image ImageTk modules from library. consider following snippet code illustrating same. File: youTubeDownloader.py importing necessary modules from tkinter import importing widgets modules from tkinter from tkinter import messagebox importing messagebox module from tkinter from tkinter import filedialog importing filedialog module from tkinter from pytube import YouTube importing YouTube class from pytube from import Image, ImageTk importing Image ImageTk modules from Explanation: above snippet code, have imported widgets modules from tkinter module. have imported messagebox filedialog modules from tkinter module. then imported YouTube class from pytube module. last, have imported Image ImageTk modules from module. Defining functions manipulate data application that have successfully imported necessary modules, time define some functions. will define different functions browse folder, download video, reset entries, close application. understand implementation these functions detail. Function Browse Folder will define function order select destination folder where selected video will downloaded. this, will askdirectory() method filedialog module select directory. File: youTubeDownloader.py ------------------------- defining functions ------------------------- function browse folder browse_folder(): using askdirectory() method filedialog module select directory download_path fd.askdirectory(initialdir "D:\Downloads", title "Select folder save video") using set() method directory path entry field download_dir.set(download_path) Explanation: above snippet code, have defined function browse_folder(). Within this function, have used askdirectory() method filedialog module Tkinter library order select directory where file will downloaded. have then used set() method directory path entry field. Function download video designated path will define function that uses pytube library's YouTube class download desired video. consider following snippet code demonstrating same. File: youTubeDownloader.py function download video designated path download_video(): using get() method retrieve string from entry fields youtube_url video_url.get() download_folder download_dir.get() checking entry fields entry if(youtube_url download_folder ""): creating object YouTube class request video YouTube(youtube_url) selecting stream with file extension 'mp4', progressive 'True', itag '22' order download video 720p resolution video_stream video.streams.filter(file_extension "mp4", progressive True, "720p", type "video").get_by_itag(22) selecting download folder video_stream.download(download_folder) displaying message indicating successful download mb.showinfo("Download Complete", "Selected Video downloaded\nand saved successfully download_folder) else statement else: displaying error message indicating empty fields mb.showerror("Empty Fields", "Fields empty!") Explanation: above snippet code, have defined function download_video(). Within this function, have used get() method retrieve value stored objects StringVar class. have then used if-else conditional statement check retrieved values empty string. have then created object YouTube class using retrieved from entry field. have then used filter() method YouTube class select stream with 'mp4' file extension, progressive equals True, itag equals order download video 720p resolution. then used download() method select designated folder download video field. have then used showinfo() method messagebox module Tkinter library display message indicating successful download. entry field empty, have displayed error message indicating empty fields using showerror() method messagebox module. Function reset entries will define function reset entries filled entry fields. consider following snippet code illustrating same. File: youTubeDownloader.py function reset entries reset(): using set() method values entry fields empty string video_url.set("") download_dir.set("") using focus_set() method cursor focus first entry field url_field.focus_set() Explanation: above snippet code, have defined function reset(). Within this function, have used set() method values entry fields empty string. have then used focus_set() method cursor focus first entry field. Function close application will define function close application. consider following snippet code illustrating same. File: youTubeDownloader.py function close application exit(): using destroy() method close application gui_root.destroy() Explanation: above snippet code, have defined function exit(). Within this function, have used destroy() method along with object Tk() class order close application. Creating main window application that have defined necessary functions manipulate user data, time create main window where widgets will added. will create window using Tk() class tkinter module. will also title, size, position, background color, icon. consider following snippet code illustrating same. File: youTubeDownloader.py ------------------------- main function ------------------------- __name__ "__main__": creating object Tk() class gui_root Tk() setting title window gui_root.title("YouTube Downloader JAVATPOINT") setting size position window gui_root.geometry("580x220+700+250") disabling resizable option better gui_root.resizable(0, configuring background color window gui_root.config(bg "#FEE4E3") configuring icon window gui_root.iconbitmap("download.ico") Explanation: above snippet code, have created main window instantiating Tk() class gui_root. then used title() method title window. have also size position window using geometry() method disabled resizable option better setting values parameters resizable() method have configured background color window with help config() method. last, have used iconbitmap() method icon window. Adding necessary widgets window setting event triggers Since main window application created successfully, will necessary widgets window event triggers. These widgets include frames structure other widgets, labels display important information, entry fields insert data, buttons manipulate entered data call functions. understand addition these widgets detail. Adding Frames will start adding frames main window. These frames will help structure other widgets. These frames created using Frame() widget tkinter module. consider following snippet code demonstrating same. File: youTubeDownloader.py adding frames window using Frame() widget header_frame Frame(gui_root, "#FEE4E3") entry_frame Frame(gui_root, "#FEE4E3") button_frame Frame(gui_root, "#FEE4E3") using pack() method positions frames header_frame.pack() entry_frame.pack() button_frame.pack() Explanation: above snippet code, have used Frame() widgets frames window. have also master parameter these widgets gui_root, respectively. have configured background color setting value parameter. last, have used pack() method positions these frames. Adding widgets header_frame Frame will labels displaying heading image this frame. will Label() widget labels. will also ImageTk Image module library import image from directory make compatible Tkinter application. consider following snippet code illustrating same. File: youTubeDownloader.py ------------------------- header_frame frame ------------------------- importing Tkinter-compatible bitmap image the_image ImageTk.PhotoImage(Image.open("youtube_logo.png").resize((50, 35), Image.ANTIALIAS)) adding labels header_frame frame using Label() widget image_label Label( header_frame, image the_image, "#FEE4E3", "#FE0700", anchor header_label Label( header_frame, text "YouTube Video Downloader", font ("verdana", "14", "bold"), "#FEE4E3", anchor using grid() method position labels grid format image_label.grid(row column padx pady header_label.grid(row column padx pady Explanation: above snippet code, have used PhotoImage() method ImageTk module. Within this method, have used open() method Image module import image file from directory. have also used resize() method resize imported image convert compatible Tkinter application. have then used Label() widget create some labels display imported image heading. have master parameters these labels header_frame Frame. last, have used grid() method position these labels grid format. Adding widgets entry_frame frame will some widgets entry_frame frame. These widgets include some labels, entry fields, button. will Label() widget create labels displaying important information. will then Entry() widget create entry fields user fill asked data. will also Button() widget create button that will allow browse directory. consider following snippet code demonstrating same. File: youTubeDownloader.py ------------------------- entry_frame frame ------------------------- adding labels entry_frame frame using Label() widget url_label Label( entry_frame, text "Video URL:", font ("verdana", "10"), "#FEE4E3", "#000000", anchor des_label Label( entry_frame, text "Destination:", font ("verdana", "10"), "#FEE4E3", "#000000", anchor using grid() method position labels grid format url_label.grid(row column padx pady sticky des_label.grid(row column padx pady sticky creating objects StringVar() class video_url StringVar() download_dir StringVar() adding entry fields entry_frame frame using Entry() widget url_field Entry( entry_frame, textvariable video_url, width font ("verdana", "10"), "#FFFFFF", "#000000", relief GROOVE des_field Entry( entry_frame, textvariable download_dir, width font ("verdana", "10"), "#FFFFFF", "#000000", relief GROOVE using grid() method position entry fields grid format url_field.grid(row column padx pady columnspan des_field.grid(row column padx pady adding button entry_frame frame using Button() widget browse_button Button( entry_frame, text "Browse", width font ("verdana", "10"), "#FF9200", "#FFFFFF", activebackground "#FFE0B7", activeforeground "#000000", relief GROOVE, command browse_folder using grid() method position button grid format browse_button.grid(row column padx pady Explanation: above snippet code, have added some labels using Label() widget setting their master parameters entry_frame frame. have then used grid() method position these labels grid format window. have then used Entry() widget some entry fields their master parameters entry_frame frame. have again used grid() method position these fields grid format. last, have added button with help Button() widget setting master parameter entry_frame frame. have again used grid() method position this button grid format. Adding widgets button_frame frame will necessary buttons this frame. will Button() frame buttons application that will allow user download requested video their desired directory, reset entries, close application. consider following snippet code demonstrating same. File: youTubeDownloader.py ------------------------- button_frame frame ------------------------- adding buttons button_frame frame using Button() widget download_button Button( button_frame, text "Download", width font ("verdana", "10"), "#15EF5F", "#FFFFFF", activebackground "#97F9B8", activeforeground "#000000", relief GROOVE, command download_video reset_button Button( button_frame, text "Clear", width font ("verdana", "10"), "#23B1E6", "#FFFFFF", activebackground "#C3E6EF", activeforeground "#000000", relief GROOVE, command reset close_button Button( button_frame, text "Exit", width font ("verdana", "10"), "#F64247", "#FFFFFF", activebackground "#F7A2A5", activeforeground "#000000", relief GROOVE, command exit using grid() method position buttons grid format download_button.grid(row column padx pady reset_button.grid(row column padx pady close_button.grid(row column padx pady Explanation: above snippet code, have used Button() widget buttons application master parameter button_frame frame. have then command parameter these widgets functions defined earlier. last, have used grid() method position these buttons grid format. Running Application will mainloop() method along with object Tk() class application. consider following snippet code demonstrating same. File: youTubeDownloader.py using mainloop() method application gui_root.mainloop() Explanation: above snippet code, have used mainloop() method with gui_root, object Tk() class, application. Hence, project code complete. will save this python program file following command command prompt terminal output. Syntax: python youTubeDownloader.py before output, complete project code 'YouTube Video Downloader using Tkinter' shown below. Complete Project Code following project code 'YouTube Video Downloader using Tkinter Python'. File: youTubeDownloader.py importing necessary modules from tkinter import importing widgets modules from tkinter from tkinter import messagebox importing messagebox module from tkinter from tkinter import filedialog importing filedialog module from tkinter from pytube import YouTube importing YouTube class from pytube from import Image, ImageTk importing Image ImageTk module from ------------------------- defining functions ------------------------- function browse folder browse_folder(): using askdirectory() method filedialog module select directory download_path fd.askdirectory(initialdir "D:\Downloads", title "Select folder save video") using set() method directory path entry field download_dir.set(download_path) function download video designated path download_video(): using get() method retrieve string from entry fields youtube_url video_url.get() download_folder download_dir.get() checking entry fields entry if(youtube_url download_folder ""): creating object YouTube class request video YouTube(youtube_url) selecting stream with file extension 'mp4', progressive 'True', itag '22' order download video 720p resolution video_stream video.streams.filter(file_extension "mp4", progressive True, "720p", type "video").get_by_itag(22) selecting download folder video_stream.download(download_folder) displaying message indicating successful download mb.showinfo("Download Complete", "Selected Video downloaded\nand saved successfully download_folder) else statement else: displaying error message indicating empty fields mb.showerror("Empty Fields", "Fields empty!") function reset entries reset(): using set() method values entry fields empty string video_url.set("") download_dir.set("") using focus_set() method cursor focus first entry field url_field.focus_set() function close application exit(): using destroy() method close application gui_root.destroy() ------------------------- main function ------------------------- __name__ "__main__": creating object Tk() class gui_root Tk() setting title window gui_root.title("YouTube Downloader JAVATPOINT") setting size position window gui_root.geometry("580x220+700+250") disabling resizable option better gui_root.resizable(0, configuring background color window gui_root.config(bg "#FEE4E3") configuring icon window gui_root.iconbitmap("download.ico") adding frames window using Frame() widget header_frame Frame(gui_root, "#FEE4E3") entry_frame Frame(gui_root, "#FEE4E3") button_frame Frame(gui_root, "#FEE4E3") using pack() method positions frames header_frame.pack() entry_frame.pack() button_frame.pack() ------------------------- header_frame frame ------------------------- importing Tkinter-compatible bitmap image the_image ImageTk.PhotoImage(Image.open("youtube_logo.png").resize((50, 35), Image.ANTIALIAS)) adding labels header_frame frame using Label() widget image_label Label( header_frame, image the_image, "#FEE4E3", "#FE0700", anchor header_label Label( header_frame, text "YouTube Video Downloader", font ("verdana", "14", "bold"), "#FEE4E3", anchor using grid() method position labels grid format image_label.grid(row column padx pady header_label.grid(row column padx pady ------------------------- entry_frame frame ------------------------- adding labels entry_frame frame using Label() widget url_label Label( entry_frame, text "Video URL:", font ("verdana", "10"), "#FEE4E3", "#000000", anchor des_label Label( entry_frame, text "Destination:", font ("verdana", "10"), "#FEE4E3", "#000000", anchor using grid() method position labels grid format url_label.grid(row column padx pady sticky des_label.grid(row column padx pady sticky creating objects StringVar() class video_url StringVar() download_dir StringVar() adding entry fields entry_frame frame using Entry() widget url_field Entry( entry_frame, textvariable video_url, width font ("verdana", "10"), "#FFFFFF", "#000000", relief GROOVE des_field Entry( entry_frame, textvariable download_dir, width font ("verdana", "10"), "#FFFFFF", "#000000", relief GROOVE using grid() method position entry fields grid format url_field.grid(row column padx pady columnspan des_field.grid(row column padx pady adding button entry_frame frame using Button() widget browse_button Button( entry_frame, text "Browse", width font ("verdana", "10"), "#FF9200", "#FFFFFF", activebackground "#FFE0B7", activeforeground "#000000", relief GROOVE, command browse_folder using grid() method position button grid format browse_button.grid(row column padx pady ------------------------- button_frame frame ------------------------- adding buttons button_frame frame using Button() widget download_button Button( button_frame, text "Download", width font ("verdana", "10"), "#15EF5F", "#FFFFFF", activebackground "#97F9B8", activeforeground "#000000", relief GROOVE, command download_video reset_button Button( button_frame, text "Clear", width font ("verdana", "10"), "#23B1E6", "#FFFFFF", activebackground "#C3E6EF", activeforeground "#000000", relief GROOVE, command reset close_button Button( button_frame, text "Exit", width font ("verdana", "10"), "#F64247", "#FFFFFF", activebackground "#F7A2A5", activeforeground "#000000", relief GROOVE, command exit using grid() method position buttons grid format download_button.grid(row column padx pady reset_button.grid(row column padx pady close_button.grid(row column padx pady using mainloop() method application gui_root.mainloop() Output: Next TopicFind from Value Dictionary prev next