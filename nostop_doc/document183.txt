next prev What duck typing Python? this tutorial, will learn about duck typing. popular term Python, comes from saying, walks like duck, swims like duck, looks like duck, then probably should duck." above statement gives idea identify duck. Here don't need have genomic sequence duck. draw conclusion behavior external appearances. will discuss what exactly mean duck typing Python programming. Python follows EAFP (Easier Forgiveness than Permission) rather than LBLY (Look Before Leap) philosophy. EAFP somewhat linked "duck typing" style. Dynamic Static Typing main reason using duck typing provide support dynamic typing Python programming. Python, don't need specify variable's data type reassign different data type values same variable further code. Let's following example. Example 12000 print(type(x)) 'Dynamic Typing' print(type(x)) print(type(x)) Output: <class 'int'> <class 'str'> <class 'list'> above code, assigned integer variable making type. Then, assigned string list same variable. Python interpreter accepts changes data types same variable. This dynamic typing behavior. Many other programming languages such Java, swift static type. need declare variable with data types. below example, same thing using Swift instead Python. Example integer value assigning JavaScript Assinging string swift 'Swift language' Above code cannot compiled, because couldn't assign string Swift language. Because variable declared integer. Concept Duck Typing Earlier, have discussed that Python dynamic typed language. However, dynamic approach with custom data types. Let's understand following example. Example class VisualStudio: execute(self): print('Compiling') print('Running') print('Spell Check') print('Convention Check') class Desktop: code(self, ide): ide.execute() VisualStudio() desk Desktop() desk.code(ide) Output: Compiling Running Spell Check Convention Check above code, have created VisualStudio class that execute() method. desktop-class, have passed argument code(). object VisualStudio class. With help ide, called execute() method VisualStudio class. Let's another example. Example class Duck: swim(self): print("I'm duck, swim.") class Sparrow: swim(self): print("I'm sparrow, swim.") class Crocodile: swim_walk(self): print("I'm Crocodile, swim, quack.") duck_testing(animal): animal.swim() duck_testing(Duck()) duck_testing(Sparrow()) duck_testing(Crocodile()) Output: duck, swim. sparrow, swim. Traceback (most recent call last): File "<string>", line <module> File "<string>", line duck_testing AttributeError: 'Crocodile' object attribute 'swim' above code, Duck class's instance reflected calling duck_testing function. also happens with Sparrow class, which implements swim() function. case Crocodile class, fails duck testing evaluation because doesn't implement swim() function. duck typing supports EAFP duck typing most appropriate style EAFP because don't need focus "type" object. only need take care behavior capability. Let's following statements. When if-else blocks, then LBYL coding style. try-except blocks, then probability EAFP coder. Next TopicPEP Python prev next