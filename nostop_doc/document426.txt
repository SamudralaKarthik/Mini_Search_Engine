next prev Python Optparse Module Command-line arguments parsing input arguments important aspect programming development. command-line argument nothing argument specified system's command line after program's name. When pass values these command-line arguments, these values directly passed into program's arguments, that's value argument variable stored program's memory. command-line argument given command prompt shell system after program's name, which passing these arguments. these arguments passed inside main() function program, usually contains only following arguments: number arguments should passed program list command-line arguments passed program These categories arguments used inside main() function, second type argument taken from command line argument. Parsing argument means that command line argument passed handled program. Also, command line arguments arguments which pass inside command prompt shell handled only main() function program. These command-line arguments very helpful when have pass dynamic data when multiple values passed single time. When multiple arguments passed single command-line call, values will assigned respective variable program according data type functionality variables functions. That makes easy pass multiple values simultaneously, don't even have assign values their particular variables functions. programming languages offer different types functions command-line arguments parsing these arguments talking specifically about Python offers many in-built functions well multiple packages perform these tasks. such Python package Optparse module Python, which command line arguments parse these arguments using Python program. That's will learn about Python optparse module this tutorial, will pass command line arguments parse them using functions this module. Introduction Optparse Module Python optparse module Python very good option replace getopt package, become modern alternate option handle parse command-line arguments Python program. This module used pass command-line arguments parse them Python program using functions this module. Optparse module very good option over getopt package because many features which were available previously getopt package available this module. Many functions such automatic help generation, option callbacks, type conversion were previously available getopt package, these options available optparse module. That's optparse module becoming more popular preferable over getopt package parse command-line arguments. Other than functions previously available getopt package, optparse module introduced many features. this tutorial, will only discuss some basic functions features this module. this tutorial, will some example programs demonstrate some basic capabilities optparse module. Optparse Module Python: Advantages Following some advantages optparse module Python over other packages: optparse module makes very easy command-line arguments parse them through Python program. This module previously lacking features getopt package Python. optparse module made easy handle dynamic input data, also provides option change output according dynamic input data. Besides this, also provides with some very features which helpful smoothly handling command-line arguments. These some common advantages using optparse module Python, idea from these advantages that this module very popular preferable over other packages Python command-line arguments. Optparse Module Python: Installation optparse module in-built Python, that's don't have perform installation process work with this module. directly start working with optparse module importing this module into example Python programs. import this module Python program, following line code: Importing optparse module import optparse After this, functions this module program work with command-line arguments using this module. Working with Optparse Module Here, this part, will discuss multiple functions options available optparse module, which parse command-line arguments very easily. will also example programs this part understand implementation optparse module better way. first, will learn create option parser object because this object will parse command-line arguments passed main() function program. Creating OptionParser Object parse command-line argument optparse module through following phases: First, have create OptionParser instance program handle command-line arguments, should configured constructed with expected options values that given command-line arguments. After that, sequence options values given from command-line arguments processed program. Therefore, first, have create OptionParser instance program, this using optionparser() function optparse module. create OptionParser instance, having optionparser properties parse command-line arguments, using following line codes Python program: Importing optparse module import optparse Creating OptionParser instance opInstance opt.optionparser() see, have imported optparse module opt, after that, have used optionparser() function create instance OptionParser named 'opInstance.' optparse options used program implicitly added parser instance once OptionParser instance created. also provides information about what when defined option encountered command line. OptionParser instance also provides functions from which possible pass list options OptionParser constructor program. should noted that this form using options from OptionParser instance used frequently. Defining Options While defining options OptionParser instance program, should remember that options should added time. Each option instance defined program represents synonymous command-line option strings. define options program using add_options() function, which will implicitly added OptionParser instance. beginning argument, unnamed string arguments, which treated option instance names. create aliases option defining, i.e., have both long short forms same option have defined, simply passing multiple names have methods create option instance program with OptionParser. Following ways which program create option instances with OptionParser: Only Giving Option Argument: this method, will give option argument add_option() argument following line code create option instances: Creating option instance oiVaribale opInstance.add_option(option) Giving String Value Arguments: this method, will give value arguments attribute option function optional string add_option() while defining options instance. following line code define option instance this method: Creating option instance oiVaribale opInstance.add_option(*opt_str, attr userValue, ...) defined option instance both long short forms both these methods. want define options only short options string long option string, then have separate methods (One short options string second long option string). Thus, options defined through these methods will only take either short options string value long option string value depending function used define option. Following functions that define either short options string long option string: Defining Option only Long Option String: following method with add_option() function define option only long option string values: Option instance long option string losInstance opInstance.add_option("--foo", attr userValue, ...) see, have give "--foo" value place optional argument add_option() function define option instance long option string. Defining Option Instance Short Option String: following line codes with add_option() function define option instance short option string values: option instance short option string value sosVariable opInstance.add_option("-f", attr userValue, ...) see, have give "-f" argument place optional argument add_option() function define option instance short options string. That's define option instance specifically either long option string short options string, output produced these option instances only either long short string form depending upon method have used. Standard Actions Option Instance: option instances have defined program with OptionParser constructor have some standard action options. These standard option actions used carry several functions store specific type input value them. these option actions which type value want store these option instances depending function program expected output. Following standard option actions that available option instances: "append": This action used append option's argument this option instance list "store": "store" action used store option's argument option instance, default add_option() function "store_false": This option used store false argument option instance "store_true": This option used store true argument option instance "append_const": "append_const" action used option instance append constant value from option instance list "store_const": This option used option instance store constant value instance These standard option actions available option instances defined using add_option function with optionparser constructor. multiple them which value stored or/and appended while parsing command-line arguments. Standard Option Attributes: Option instances defined also have several attributes that define functionality working these options instances program. These attributes used value take some specific argument while parsing input commands perform some particular function program. Following standard option attributes option instances have defined using add_option() function: optionInstance.default: value used with this attribute option instance used destination this option instance when this option instance seen command line optionInstance.dest: default attribute option instance, derived from option strings provided input arguments optionInstance.type: This attribute used data type value which taken this option instance, default, "strings" optionInstance.action: This attribute used option instance what action will performed value given option instance, default, this attribute "store" action these attributes available option instance which data-type values will taken these options instances what actions will performed these values program. Optparse Module Python: Implementation this part, will understand implementation optparse module Python through some example programs where will parse command-line arguments. will understand implementation this module performing multiple functions such taking input value command line argument, using classes functions this module. will understand working these example programs through output they yield explanation them. Look following example programs understand working optparse module: Implementation Using both long short option values option instance: this implementation part, will understand working optionparser option instances defining them example program. will define options instances both long option string short option string call them while executing them from system's command shell. Look following example program understand this implementation part optparse module. Example Look following Python program where defined both long short option instances: Importing optparse module import optparse Import module import Printing argv value print('ARGV value option instances sys.argv[1:]) Creating optionparser constructor option instances opConst opt.OptionParser() Defining option instance with both short long instance opConst.add_option('-s', '--long', dest "output_filename", default "default.out", Creating another option instances with several arguments opConst.add_option('-v', '--verbose', dest "verbose", default False, action "store_true", opConst.add_option('--version', dest "version", default 1.0, type "float", Creating parser arguments options remainder instances oInstance, rInstance opConst.parse_args() Printing values output print('VERSION input string oInstance.version) print('VERBOSE input value oInstance.verbose) print('OUTPUT with respect input string oInstance.output_filename) print('REMAINING remainder function rInstance) Output: While calling with short option string argument: C:\Users\Manish\Downloads>python code.py sample3.txt ARGV value option instances ['-s', 'sample3.txt'] VERSION input string VERBOSE input value False OUTPUT with respect input string sample3.txt REMAINING remainder function While calling with long option string argument: python code.py --long sample4.txt ARGV value option instances ['--long', 'sample4.txt'] VERSION input string VERBOSE input value False OUTPUT with respect input string sample4.txt REMAINING remainder function While calling with custom argument option instance: python code.py --lon sample4.txt ARGV value option instances ['--lon', 'sample4.txt'] VERSION input string VERBOSE input value False OUTPUT with respect input string sample4.txt REMAINING remainder function see, have called both long option string short option option instance using long short keyword argument function. have also given custom argument option instances, option instance also called with custom argument, that's stores these values. That's optparse module's function create both long short option string instances. Explanation: have first imported optparse module program functions these modules. After that, have used argv function module print statement print option instance, which called from program. Then, created optionparser constructor using OptionParser() function named constructor variable 'opConst.' After that, used this variable optionparser constructor create option instances program using add_opions() function. Then, created three option instances program, these option instances, have given long short option string arguments define type option instance. After that, used parse_args() function optparse module parse command-line arguments. Lastly, used these args variables optparse module print statement print several specific information from option instances. After parsing command-line arguments, defined information category before printing this information. Implementation Passing Values Option Instances: this implementation part, will pass values arguments have defined inside option instances. After command-line arguments parsed program, these values have passed program will printed output. should remember that data type values passing should same data type defining option instance; otherwise, will produce error output. Look following example program understand this implementation part optparse module. Example Look following program where passed values option instances: Importing optparse module import optparse Creating optionparser constructor option instances opConst opt.OptionParser() Defining multiple option instances with different data types opConst.add_option('-a', action "store", type "int") opConst.add_option('-b', action "store", type "float") opConst.add_option('-c', action "store", type "long") opConst.add_option('-d', action "store", type "complex") opConst.add_option('-s', action "store", type "string") Parsing options instance show input given values parsedOptions, args opConst.parse_args() Printing input string values with respective option instances print(The data type input value first option %-16r (type(parsedOptions.a), parsedOptions.a)) print(The float data type input value second option %-16r (type(parsedOptions.b), parsedOptions.b)) print(The long data type input value third option %-16r (type(parsedOptions.c), parsedOptions.c)) print(The complex data type input value fourth option %-16r (type(parsedOptions.d), parsedOptions.d)) print(The string data type input value last option %-16r (type(parsedOptions.s), parsedOptions.s)) Output: code.py 31.26 24260000 -d 24+26j data type input value first option <class 'int'> float data type input value second option <class 'float'> 31.26 long data type input value third option <class 'int'> 24260000 complex data type input value fourth option <class 'complex'> (24+26j) string data type input value last option <class 'str'> see, after giving input values with different data types, these input values assigned respective data type option instances. That's give different data type input values parse them defined option instances using command-line shell. Explanation: After defining optionparser constructor, have defined multiple option instances program. These option instances defined with action argument "store" that given input values will stored these option instances. Also, these option instances take different data types that when particular data-type value given input, will stored that particular option instance only. Lastly, printed input values, which parsed stored particular option instance using parsedOptions constructor print statement. have also printed data-type pf value result with value. Note: should noted that while giving input values option instance give different data-type input value other than what defined option instance, error will occur, error message will displayed output. demonstrate this, will Python code give different data-type value, other than data-type option instance. Look following example program understand this concept option instances: Importing optparse module import optparse Creating optionparser constructor option instances opConst opt.OptionParser() Defining multiple option instances with different data types opConst.add_option('-a', action "store", type "int") Parsing options instance show input given values parsedOptions, args opConst.parse_args() Printing input string values with respective option instances print(The data type input value first option %-16r (type(parsedOptions.a), parsedOptions.a)) Output: code.py Usage: code.py [options] code.py: error: option -a: invalid integer value: see, error message displayed output when give different data-type input values option instance. Implementation Parsing Command-line Arguments Print Table: Till now, have understood working implementation both option instances optionparser constructor. Now, will optparse module functions print table command-line shell from input value. will loop program loop over input value and, thus, print table command shell with functions optparse module. This will help better understand working practical implementation parsing command-line arguments using optparse module. Look following example program where have printed table command shell: Example Look following Python program understand practical implementation optparse module: Importing optparse module import optparse Define function print table tablePrint(num, destCheak): Using loop print table 	for range(1,11): 		table Using check destination input given other than 		if destCheak: 			print(table)	 	return table Define main function options taking input value Main(): Create OptionParser constructor 	opConst opt.OptionParser() Adding multiple option instances with specific functions 	opConst.add_option('-m', dest 'num', 					type 'int', 					help 'specify table number print table output') Using help argument show help message case error 	opConst.add_option('-c', dest 'out', 					type 'string', 					help 'specify output file input value (Optional)') 	opConst.add_option("-b", "--all", 					action "store_true", 					dest "prin", 					default False, 					help "print numbers from print table function") Adding parsed options constructor 	(optionParsed, args) opConst.parse_args() (optionParsed.num None): 			print (opConst.usage) 			exit(0) 	else: 			number optionParsed.num	 Calling print table function 	result tablePrint(number, optionParsed.prin) Printing last term table result 	print ("This table given input value number with last term:" str(result)) Checking given input value (optionParsed.out None): Opening file append mode print table 		func open(optionParsed.out, "a")		 Writing file appended 		func.write(str(result) '\n') Driver code call main function __name__ '__main__': Calling main function 	Main() Output: python code.py This table given input value number with last term:70 see, table '7', which also input value command shell, printed output after command-line arguments parsed program. That's this optparse module Python parse command-line arguments work with them through Python program. Next Topicint object iterable prev next