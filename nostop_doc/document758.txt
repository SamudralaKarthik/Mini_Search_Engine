next prev Regular Dictionary Ordered Dictionary Python know, dictionary most important data structure Python remembers item's order (according latest update). Python Dictionary stores data values like map; holds key: value pair. Key-value provided dictionary make more optimized. problem with standard dictionary, doesn't remember insertion order key-value pair thus iterates through keys based they stored hash table. Python provides OrderDict type, which remembers insertion order (key, value) pair dictionary. this tutorial, will learn difference between regular dictionary ordered dictionary OrderDict. will create OrderedDict objects code. will also identify differences between OrderedDict dict. Getting Started with OrderDict Python's OrderDict dict subclass that stores order which key-value pairs inserted into dictionary. will items such order that they were inserted. update value existing key, order remains unchanged. remove item reinsert item will inserted dictionary. consists Python dictionary methods some additional features. Let's understand create OrderDict Python. Creating OrderDict Objects create OrderDict, need import class from collections. There various ways create OrderDict; many same regular dictionaries. Let's create ordered dict. from collections import OrderedDict numbers OrderedDict() print(numbers) numbers["one"] numbers["two"] numbers["three"] print(numbers) Output: OrderedDict() OrderedDict([('one', ('two', ('three', 3)]) above code, first import OrderDict from collections create empty dictionary instantiating OrderDict without passing argument. pass key-value pair dictionary providing square bracket ([]). items same order they were inserted into dictionary. Let's understand following example. Example from collections import OrderedDict numbers OrderedDict([("one", ("two", ("three", 3)]) print(numbers) letters OrderedDict({("a", ("b", ("c", 3)}) print(letters) Output: OrderedDict([('one', ('two', ('three', 3)]) OrderedDict([('a', ('c', ('b', 2)]) above code, have passed list OrderedDict() constructor. list tuple, resulting ordered dictionary matches original order items input sequence. However, final order items unknown with until OrdereDict created. create ordered dictionary passing keyword arguments class constructor. Example from collections import OrderedDict numbers OrderedDict(one=1, two=2, three=3) print(numbers) Output: OrderedDict([('one', ('two', ('three', 3)]) OrderedDict provides fromkeys(), which creates dictionary from iterable keys sets value common value. from collections import OrderedDict keys ["one", "two", "three"] OrderedDict.fromkeys(keys, print(val) Output: OrderedDict([('one', ('two', ('three', 0)]) this case, create ordered dictionary using list keys starting point. second arguments .fromkeys() delivers single value items dictionary. Managing Item OrderedDict perform mutation operations OrdereDict; means modify behavior OrderedDict. insert items, update remove existing items, newly added item inserted into existing ordered dictionary, item added dictionary. Let's understand following example Example from collections import OrderedDict numbers OrderedDict(one=1, two=2, three=3) numbers numbers["four"] print(numbers) Output: OrderedDict([('one', ('two', ('three', ('four', 4)]) newly added item, ('four', placed underlying dictionary. that order existing items remains unchanged. When delete insert instance same item, item added underlying dictionary. Let's following example. Example from collections import OrderedDict numbers OrderedDict(one=1, two=2, three=3) numbers["two"] print(numbers) numbers["two"] print(numbers) Output: Output: OrderedDict([('one', ('three', 3)]) OrderedDict([('one', ('three', ('two', 2)]) When update existing value, remains same assigned value place. Iterate Over OrderedDict iterate OrdereDict same regular dictionary. iterate over keys directly, built-in methods such .items(), keys(), values(). Example from collections import OrderedDict OrderedDict(one=1, two=2, three=3, four=4) num: print(key, "->", num[key]) Iterate over items using .items() key, value num.items(): print(key, "->", value) Iterate over keys using .keys() num.keys(): print(key, "->", num[key]) Iterate over values using .values() value num.values(): print(value) Output: three four three four three four Explanation above code, have iterated over keys directly used dictionary methods iterate OrderedDict. Difference between OrderedDict Dictionary previous version Python, Dictionary defined unordered data structures. Python developer requires order data, they look towards lists other data structures keep their data order. passing time, developers found dictionary keep item ordered. 2008, 372 introduced idea adding collection class that remember order items defined order which keys inserted. When Python released version, modified implementation standard dictionary. implementation comes with extensive features such less memory usage iteration efficiency, unexpected one: dict object keep their items same order they introduced. Let's understand basic difference between regular dictionary OrderedDict. Example Initializing Dictionary import collections Creating regular dictionary print('Regular dictionary:') dict1 {chr(k):k range(ord('b'), ord('h'))} key, dict1.items(): print(key, val) Creating Ordered dictionary print('\nOrderedDict:') dict1 collections.OrderedDict() [dict1.setdefault(chr(k), range(ord('a'), ord('g'))] key, dict1.items(): print(key, val) Output: Regular dictionary: OrderedDict: Deletion Updation Let's understand deletion updation re-insert both OrderedDict dictionary. Example from collections import OrderedDict print("Before deleting:\n") dict1 print("Regular dictionary:") dict1['a'] dict1['b'] dict1['c'] dict1['d'] key, value dict1.items(): 	print(key, value)	 od OrderedDict() print("\nOrdered dictionary:") od['a'] od['b'] od['c'] od['d'] key, value od.items(): 	print(key, value) print("\nAfter deleting:\n") print("Regular dictionary:") dict1.pop('c') key, dict1.items(): 	print(key, val) print("\nOrdered dictionary:") od.pop('c') key, od.items(): 	print(key, val) print("\nAfter re-inserting:\n") print("Regular dictionary:") dict1['c'] key, dict1.items(): 	print(key, val) print("\nOrdered dictionary:") od['c'] key, od.items(): 	print(key, val) Output: Before deleting: Regular dictionary: Ordered dictionary: After deleting: Regular dictionary: Ordered dictionary: After re-inserting: Regular dictionary: Ordered dictionary: Comparison between OrderDict Dictionary below comparison will help select more relevant differences features. Let's understand below comparison. Example OrderedDict Dict maintains insertion order since Python version. maintains insertion order since Python version. provides high readability intent signalling regarding order items. provides readability intent signalling regarding order items. control over order items quite high. control over order items quite low. consumes more memory. consumes less memory than OrderedDict. supports reverse iteration since Python 3.5. doesn't support reverse iteration since Python 3.5. operation performance low. operation performance high. supports merge update (|=) dictionary operators. doesn't support merge update (|=) dictionary operators. Conclusion This tutorial included difference between regular dictionary OrderedDict introduction OrderedDict. Python dictionaries couldn't remember order key, Python developers created OrderedDict, which specially designed keep items ordered. Python introduced feature that dict object remember order items. This tutorial given precise insight into both dictionaries, which would help choose appropriate your requirements. Next TopicTopology Sorting Python prev next