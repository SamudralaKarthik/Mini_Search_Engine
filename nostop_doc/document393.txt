next prev Creating Interactive forms using Python Python provides different functionalities that perform order manipulate files, have already discussed things previous tutorials handling files using Python. this tutorial, will understand create Interactive forms file using Python programming language. before started, will also discuss Python toolkit that provides accessibility create interactive form known ReportLab toolkit. Understanding ReportLab toolkit Python Python ReportLab toolkit allows programmers create forms that interactive fillable. standard usually consists rich interactive elements. ReportLab toolkit does support these elements; however, does cover most them. following section, will look following widgets: Checkbox Radio Choice Listbox Textfield stated widgets developed calling different methods canvas.acroform property. Note that only have form document. understand these widgets ReportLab toolkit. Understanding Checkbox widget checkbox widget exactly what sounds like. little that check entities shown form. Reportlab supports different styles checks checkboxes, when checkbox checked, look distinctive style that set. Now, understand simple example that illustrates these parameters behave: Example: from reportlab.pdfgen import canvas from reportlab.pdfbase import pdfform from reportlab.lib.colors import magenta, pink, blue, green createSimpleCheckboxes(): my_Canvas canvas.Canvas('checkboxes.pdf') my_Canvas.setFont("Courier", my_Canvas.drawCentredString(300, 700, 'Programming Languages') my_Canvas.setFont("Courier", form my_Canvas.acroForm my_Canvas.drawString(10, 650, 'Python:') form.checkbox( name 'cb1', tooltip 'Field cb1', 110, 645, buttonStyle 'check', borderColor magenta, fillColor pink, textColor blue, forceBorder True my_Canvas.drawString(10, 600, 'Java:') form.checkbox( name 'cb2', tooltip 'Field cb2', 110, 595, buttonStyle 'cross', borderWidth forceBorder True my_Canvas.drawString(10, 550, 'C++:') form.checkbox( name 'cb3', tooltip 'Field cb3', 110, 545, buttonStyle 'star', borderWidth forceBorder True my_Canvas.drawString(10, 500, 'C:') form.checkbox( name 'cb4', tooltip 'Field cb4', 110, 495, buttonStyle 'circle', borderWidth forceBorder True my_Canvas.drawString(10, 450, 'JavaScript:') form.checkbox( name 'cb5', tooltip 'Field cb5', 110, 445, buttonStyle 'diamond', borderWidth None, checked True, forceBorder True my_Canvas.save() __name__ '__main__': createSimpleCheckboxes() Output: Explanation: observe above snippet code, have imported different functions from different modules ReportLab library. have then name tooltip order match widget's name. have then position some other things. play around with width checkbox's border turn border off. turn off, though, checkbox become invisible, might want background color fillColor that. have buttonStyle something distinctive each checkboxes. Understanding Radio widget radio widgets similar checkboxes, despite fact that radio buttons within group where select only radio button time. Checkboxes rarely restricted allowing checkbox group. ReportLab toolkit does offer method explicitly group radio boxes altogether. toolkit only provides implicit grouping This statement implies that create series radio after other, they will grouped together. Now, understand same using simple example shown below: Example: from reportlab.pdfgen import canvas from reportlab.pdfbase import pdfform from reportlab.lib.colors import magenta, pink, blue, green createSimpleRadios(): my_canvas canvas.Canvas('radiosFile.pdf') my_canvas.setFont("Courier", my_canvas.drawCentredString(300, 700, 'Radio demo') my_canvas.setFont("Courier", form my_canvas.acroForm my_canvas.drawString(10, 650, 'Python:') form.radio( name 'radio1', tooltip 'Field radio1', value 'value1', selected False, 110, 645, buttonStyle 'check', borderStyle 'solid', shape 'square', borderColor magenta, fillColor pink, textColor blue, forceBorder True form.radio( name 'radio1', tooltip 'Field radio1', value 'value2', selected True, 110, 645, buttonStyle 'check', borderStyle 'solid', shape 'square', borderColor magenta, fillColor pink, textColor blue, forceBorder True) my_canvas.drawString(10, 600, 'Java:') form.radio( name 'radio2', tooltip 'Field radio2', value 'value1', selected True, 110, 595, buttonStyle 'cross', borderStyle 'solid', shape 'circle', borderColor green, fillColor blue, borderWidth textColor pink, forceBorder True form.radio( name 'radio2', tooltip 'Field radio2', value 'value2', selected False, 110, 595, buttonStyle 'cross', borderStyle 'solid', shape 'circle', borderColor green, fillColor=blue, borderWidth=2, textColor pink, forceBorder=True my_canvas.drawString(10, 550, 'C++:') form.radio( name 'radio3', tooltip 'Field radio3', value 'value1', selected False, 110, 545, buttonStyle 'star', borderStyle 'bevelled', shape 'square', borderColor blue, fillColor green, borderWidth textColor magenta, forceBorder False form.radio( name 'radio3', tooltip 'Field radio3', value 'value2', selected True, 110, 545, buttonStyle 'star', borderStyle 'bevelled', shape 'circle', borderColor blue, fillColor green, borderWidth textColor magenta, forceBorder True my_canvas.save() __name__ '__main__': createSimpleRadios() Output: Explanation: above snippet code, have imported required functions from different modules ReportLab toolkit. have then defined function created file. have then defined different radio buttons file saved file. last, have called function. Once execute above snippet code, observe that program only returns three radios. This because required create objects each radio button with identical names with different values sections. documentation does state reason behind assume this done support ReportLab toolkit tracking widget's "selected" state. This also allows alter appearance radio when selected deselected. Understanding Choice widget choice widget fundamentally combo that shows drop-down when user clicks This enables user pick more options from drop-down list, relying fieldFlags have set. insert edit fieldFlags, then user edit element choice widget. understand following example demonstrating choice widgets document: Example: from reportlab.pdfgen import canvas from reportlab.pdfbase import pdfform from reportlab.lib.colors import magenta, pink, blue, green, createSimpleChoices(): my_canvas canvas.Canvas('choicesFile.pdf') my_canvas.setFont("Courier", my_canvas.drawCentredString(300, 700, 'Sample Choices') my_canvas.setFont("Courier", form my_canvas.acroForm my_canvas.drawString(10, 650, 'Choose Letter:') my_options [('A', 'Av'), 'B', ('C', 'Cv'), ('D', 'Dv'), 'E',('F', ('G', 'Gv')] form.choice( name 'choice1', tooltip 'Field choice1', value 'A', 165, 645, width height borderColor magenta, fillColor pink, textColor blue, forceBorder True, options my_options) my_canvas.drawString(10, 600, 'Choose Programming language:') my_options [('Python', 'python'), ('Java', 'java'), ('C++', 'C++')] form.choice( name 'choice2', tooltip 'Field choice2', value 'Python', options my_options, 305, 595, width height borderStyle 'solid', borderWidth forceBorder True my_canvas.save() __name__ '__main__': createSimpleChoices() Output: Explanation: above snippet code, have imported required functions from different modules ReportLab toolkit. have then defined function created file. have then created choice widgets with slightly distinct styles applied saved file. Remember include value parameter function; else, program will return bizarre error that does anything associated with parameter being missing. last, have called function. Understanding Listbox widget listbox widget somewhat similar choice widget, except that listbox considered scrollable rather than combo box. fieldFlags parameter that supports user select multiple elements from list box. Now, consider following example illustrating listbox widget making interactive forms: Example: from reportlab.pdfgen import canvas from reportlab.pdfbase import pdfform from reportlab.lib.colors import magenta, pink, blue, green, createSimpleListboxes(): my_canvas canvas.Canvas('listboxesFile.pdf') my_canvas.setFont("Courier", my_canvas.drawCentredString(300, 700, 'Sample Listboxes') my_canvas.setFont("Courier", form my_canvas.acroForm my_canvas.drawString(10, 650, 'Choose letter:') my_options [('A','Av'),'B',('C','Cv'),('D','Dv'),'E',('F',),('G','Gv')] form.listbox( name 'listbox1', value 'A', 165, 590, width height borderColor magenta, fillColor pink, textColor blue, forceBorder True, options my_options, fieldFlags 'multiSelect' my_canvas.drawString(10, 500, 'Choose Programming language:') my_options [('Python', 'python'), ('Java', 'java'), ('C++', 'C++')] form.listbox( name 'choice2', tooltip 'Field choice2', value 'Python', options my_options, 165, 440, width height borderStyle 'solid', borderWidth forceBorder True my_canvas.save() __name__ '__main__': createSimpleListboxes() Output: Explanation: above snippet code, have imported required functions from different modules ReportLab toolkit. have then defined function created file. have then created listbox widgets with slightly distinct styles applied saved file. above example quite similar previous where created choice widget. main difference here appearance listbox widget versus choice widget; else, both widgets pretty much same. Understanding Textfield widget textfield text entry widget. these textfield widgets forms fill entries like name, address, more. Most parameters textfield same ones have observed earlier widgets. consider following example understand same: Example: from reportlab.pdfgen import canvas from reportlab.pdfbase import pdfform from reportlab.lib.colors import magenta, pink, blue, green createSimpleForm(): my_canvas canvas.Canvas('PDFform.pdf') my_canvas.setFont("Courier", my_canvas.drawCentredString(300, 700, 'Application Form') my_canvas.setFont("Courier", form my_canvas.acroForm my_canvas.drawString(10, 650, 'First Name:') form.textfield( name 'fname', tooltip 'First Name', 110, 635, borderStyle 'inset', borderColor magenta, fillColor pink, width 300, textColor blue, forceBorder True my_canvas.drawString(10, 600, 'Last Name:') form.textfield( name 'lname', tooltip 'Last Name', 110, 585, borderStyle 'inset', borderColor green, fillColor magenta, width 300, textColor blue, forceBorder True my_canvas.drawString(10, 550, 'Address:') form.textfield( name 'address', tooltip 'Address', 110, 535, borderStyle 'inset', width 400, forceBorder True my_canvas.drawString(10, 500, 'City:') form.textfield( name 'city', tooltip 'City', 110, 485, borderStyle 'inset', forceBorder True my_canvas.drawString(250, 500, 'State:') form.textfield( name 'state', tooltip 'State', 350, 485, borderStyle 'inset', forceBorder True my_canvas.drawString(10, 450, 'Zip Code:') form.textfield( name 'zip_code', tooltip 'Zip Code', 110, 435, borderStyle 'inset', forceBorder True my_canvas.save() __name__ '__main__': createSimpleForm() Output: Explanation: above snippet code, have imported required functions from different modules ReportLab toolkit. have then defined function created file. have then created textfield widgets with slightly distinct styles applied saved file. observe, have created series text fields with different settings applied them. Moreover, have changed border background color several fields. have then included some quite standard ones. have also utilized width argument order change width text field. Next TopicPython Newspaper Module prev next