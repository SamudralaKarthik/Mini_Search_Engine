next prev Manipulating using Python previous tutorial, have discussed various operations that perform file using different packages modules Python programming language. have learned working different Python libraries which used manipulate files. Moreover, have understood extraction text, images, tables, URLs using Python. following tutorial will cover some other operations manipulate file, including creating file, adding texts, images, tables file, more. let's started. Creating file using Python Python offers feature where programmers could also create file from code directly. insert texts, images, tables, forms from Python code directly onto file. order accomplish same, Python programming language offers library known reportlab. before start working with library, necessary install Installing reportlab library install reportlab library using following command with installer: Syntax: install reportlab Now, begin with implementation section; perform following: Example: from reportlab.lib.pagesizes import LETTER from reportlab.pdfgen.canvas import Canvas creating file my_canvas Canvas("newfile.pdf", pagesize LETTER) my_canvas.save() Explanation: above snippet code, have imported required functions from their respective modules. have then created file called newfile.pdf. Within Canvas() function, have size page LETTER size which predefined size provided reportlab library. have then saved created file using save() function. Adding Text using Python easily file with help reportlab library. consider following example understand same: Example: from reportlab.lib.pagesizes import LETTER from reportlab.lib.units import inch from reportlab.pdfgen.canvas import Canvas from reportlab.lib.colors import purple creating file my_canvas Canvas("textfile.pdf", pagesize LETTER) setting font font size my_canvas.setFont("Courier", setting color font my_canvas.setFillColor(purple) writing this text file my_canvas.drawString(2 inch, inch, "Welcome Javatpoint Python Tutorial") my_canvas.save() Output: Explanation: above snippet code, have again imported functions from their respective modules. have then created file named textfile.py. setting fonts font sizes since about write some text file. have size LETTER, fonts Courier, font size with help predefined functions reportlab. have then chosen purple color text with help setFillColor function. After this, have written some text file specifying position text page. last, have saved created file using save() function. Hence, have successfully created file. Adding Image using Python utilize Python reportlab library order insert images file well. Insertion images tedious work compared insertion texts file. Images have their unique sizes files. Thus, managing size finding optimal location images tedious job. consider following example understand addition images file: Example: from reportlab.lib.pagesizes import LETTER from reportlab.pdfgen.canvas import Canvas my_canvas Canvas("imgfile.pdf", pagesize LETTER) my_canvas.drawInlineImage("my_image.jpg", 100, 450) my_canvas.save() Output: Explanation: above snippet code, have imported required functions. have then used Canvas() function create file. have then used drawInlineImage() function order insert image created file. have specified location image directory along with position image, i.e., (100, 450) file. reportlab library considers bottom left position file accordingly manages position image similar way. letter size dimension 612x792, (100, 450) will location image file. Adding Tables using Python also tables file using reportlab library. consider following example understand addition tables file. Example: from reportlab.lib import colors from reportlab.lib.pagesizes import letter, inch from reportlab.platypus import SimpleDocTemplate, Table, TableStyle creating file tables my_doc SimpleDocTemplate("table.pdf", pagesize letter) my_obj defining Data stored table my_data ["ID", "1234"], ["Name", "Den Arthur"], ["Profession", "Software Developer"], ["Age", "28"], ["Sex", "Male"] Creating table with rows my_table Table(my_data, [1.6 inch], [0.5 inch]) setting style alignments borders grids my_table.setStyle( TableStyle( ("ALIGN", "LEFT"), ("VALIGN", (-1, -1), (-1, -1), "TOP"), ("ALIGN", (-1, -1), (-1, -1), "RIGHT"), ("VALIGN", (-1, -1), (-1, -1), "TOP"), ("INNERGRID", (-1, -1), colors.black), ("BOX", (-1, -1), colors.black), my_obj.append(my_table) my_doc.build(my_obj) Output: Explanation: above snippet code, have created file with letter size. data stored table provided list "my_data". Here, list's shape 5x2. There five rows columns. Thus, this table that will formed file. After that, defined table's margin, grid lines, their sizes, formations. have also used setStyle function. also refer official documentation reportlab library creating table. these grid lines were defined, there would just detail arranged order; however, without being separated grid lines borders. Highlighting text using Python Python also offers feature order highlight text contents file known "fitz". Fitz simplest library that perform text highlighting file. have already discussed installation procedure fitz library, let's move directly implementations fitz library order highlight texts PDF. Example: import fitz opening file my_pdf fitz.open("my_file.pdf") input text highlighted my_text "Boring" iterating through pages highlighting input phrase n_page my_pdf: matchWords n_page.search_for(my_text) word matchWords: my_highlight n_page.add_highlight_annot(word) my_highlight.update() saving file highlighted.pdf my_pdf.save("highlighted_text.pdf") Output: Explanation: above snippet code, have imported fitz library. have then used open() function order load file my_file.pdf, which highlighted. phrase that highlighted given text variable. highlighting word "Boring". have then iterated through each pages find there potential matches word. find match word, have used add_highlight_annot function from fitz order highlight them. Thus, this manner, have obtained highlighted text file. Resizing pages using Python Resizing Page another example manipulating file using Python. Sometimes, resizing might necessary pages, Python offers library known PyPDF2, using which programmers perform function page resizing. consider following example understand same: Example: import PyPDF2 myPDF "my_file.pdf" myPDF PyPDF2.PdfFileReader(myPDF) my_page myPDF.getPage(0) Resizing first page my_page.scaleBy(0.5) my_resized PyPDF2.PdfFileWriter() my_resized.addPage(my_page) with open("resizedFile.pdf", "wb+") my_resized.write(f) Output: Explanation: above snippet code, have imported required library. have then begun reading input file that resized. Then, have read pages. Here, have resized first page only, getPage function provided value which stands initial page. Now, order resize page, have used scaleBy function scaled page 0.5. Thus, first page reduced half actual dimension page. have then saved page onto file resizedFile.pdf. this manner, have successfully performed page resizing using Python. Converting file into using Python Sometimes, tabular data also present format. However, these types information cannot parsed directly. instance, cannot process file with data frame directly using pandas library, they have converted into Excel format before processing. Since this quite significant process, will understand convert file into format. begin installing Python library called tabula Installing tabula library install tabula library using following command with installer: Syntax: pip3 install tabula-py Now, understand implementation tabula library conversion file into format with help following example: Example: import tabula tabula.convert_into( "tableFile.pdf", "tableFile.csv", output_format "csv", pages "all" Explanation: following snippet code, have imported tabula library. have then used one-line function called "convert_into", specifying parameters path input file, path which file converted, format Output file, number pages wanted convert. this manner, convert file into format easily effectively. There many other functions that perform with file using programming language like Python. also refer official documentation reference. Next TopicList Functions from Python Module3 prev next