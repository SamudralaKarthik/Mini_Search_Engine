next prev Python super() Function know that, Python object-oriented programming language. Therefore, Python follows concepts OOPs, such concepts inheritance. While using inheritance concept, refer parent class with super() function inside inherited child class. super() function child class returns temporary created object superclass, that allow access method present child class. Benefits super() function: Following benefits using super() function child class: don't need remember parent's class name while using super() function. This because don't have specify name parent class access methods present super() function with single inheritance multiple inheritances. super() function Python implements code reusability modularity there need rewrite whole function again again. super() function Python known dynamical function, know that Python dynamically typed programming language. Constraints using super() function: Following three constraints that must have follow super() function Python program: arguments given super() function arguments function that have called should match. Every occurrence method that using should include super() keyword after have specify class methods present which referred super() function. Now, know that, super() function both types inheritances Python, i.e., single well multiple inheritances. Therefore, will learn about using super() function both types inheritance separately with example. Using super() function single inheritance Python this example, will animals reference single inheritance example. Cats, horses, cows, dogs, etc., part class animalia. They share some common characteristics also: They pet animals. They have four legs tail. part class animalia, they mammals well. that class cats, class horses, class dogs subclasses class animalia. This example single inheritance because subclasses (class cats, class horses, class dogs) inherited from single parent class only, i.e., class animalia. Now, look following program. Example Define parent class animalia class Animalia: define construcors parent animalia class 	def __init__(self): 		self.Legs 		self.adomestic True 		self.atail True 		self.amammals True define mammal class child class 	def aMammal(self): 		if self.amammals: 			print("The given animal mammal type define domestic class child class 	def aDomestic(self): 		if self.adomestic: 			print("The given animal domestic animal type.") define class class Dog(Animalia): 	def __init__(self): 		super().__init__() using super() function access class methods 	def isMammal(self): 		super().aMammal() using mammal class define cat class class Cat(Animalia): 	def __init__(self): 		super().__init__() 	def isMammal(self): 		super().aDomestic() using domestic class define horse class class Horse(Animalia): 	def __init__(self): 		super().__init__() 	def TailandLegs(self): using tail legs class 		if self.atail self.Legs 			print("The given animal four legs tail") Taking driver's code defined classes Tommy Dog() Tommy.aMammal() Cat() Tom.aDomestic() Burno Horse() Burno.TailandLegs() Output: given animal mammal type. given animal domestic animal type. given animal four legs tail. Explanation: above code, have defined animalia parent class inherited domestic, tail legs, mammal class from After that, have defined cat, horse, class used super function With help super() function these classes, have accessed methods animalia class cat, horse class. Using super() function multiple inheritances Python this example, will parent class, i.e., mammal class. Then, will inherit 'Can Fly' 'Can Swim' classes from mammal class. These classes will represent given mammal swim not. will define animal class after that, will inherit from both 'Can Fly' 'Can Swim' class return that given animal have defined characteristics not. that animal class using here inherited from multiple base classes, therefore, example multiple inheritances Python. Now, look following program. Example Define Mammal class parent class class aMammals(): 	def __init__(self, name): 		print(name, mammal animalia class") define child class		 class FlyCapable(aMammals): 	def __init__(self, FlyCapable_name): 		print(FlyCapable_name, capable flying") Calling Parent class Constructor 		super().__init__(FlyCapable_name) define swim child class				 class SwimCapable(aMammals): 	def __init__(self, SwimCapable_name): 		print(SwimCapable_name, capable swimming") 		super().__init__(SwimCapable_name) Inherit animalia class from both swim class		 class animalia(FlyCapable, SwimCapable): 	def __init__(self, name): 		super().__init__(name) using super() function Taking driver Code animalia class Burno animalia("Cat") Output: capable flying capable swimming mammal animalia class Explanation: above code, defined mammal parent class. After that, inherited swim classes from mammal class. used methods both swim inside animalia class with help super() function. animalia class inherited from both swim class. Next Topicmax() function Python prev next