next prev OrderedDict Python OrderedDict subclass dict object Python. difference between dict OrderedDict that OrderedDict itself maintains orders keys inserted, whereas dict, order keys important part. OrderedDict standard library class. located collections module. using user import collections standard library module. Example: import collections this article, will discuss some operations OrderedDict Dict different from OrderedDict. user some keys them with values Dict class OrderedDict class. following example, will show ordering Dict class vary, OrderedDict class, will remain fixed. Example: import collections will first create normal dict print('Dict:') user_dict user_dict['PP'] user_dict['QQ'] user_dict['RR'] user_dict['SS'] user_dict['TT'] user_dict['UU'] item user_dict.items(): print(item) print() now, will create ordered dict print('OrderedDict:') user_ordered_dict collections.OrderedDict() user_ordered_dict['PP'] user_ordered_dict['QQ'] user_ordered_dict['RR'] user_ordered_dict['SS'] user_ordered_dict['TT'] user_ordered_dict['UU'] item user_ordered_dict.items(): print(item) Output: Dict: ('PP', ('QQ', ('RR', ('SS', ('TT', ('UU', OrderedDict: ('PP', ('QQ', ('RR', ('SS', ('TT', ('UU', Changing Value Specific order keys will changed OrderedDict class after changing value specific key, Dict class, ordering change. Example: import collections will first create normal dict print('Dict:') user_dict user_dict['PP'] user_dict['QQ'] user_dict['RR'] user_dict['SS'] user_dict['TT'] user_dict['UU'] item user_dict.items(): print(item) #now, will change value user_dict['QQ'] print('After changing value specific Dict') item user_dict.items(): print(item) print() will create ordered dict print('OrderedDict:') user_ordered_dict collections.OrderedDict() user_ordered_dict['PP'] user_ordered_dict['QQ'] user_ordered_dict['RR'] user_ordered_dict['SS'] user_ordered_dict['TT'] user_ordered_dict['UU'] item user_ordered_dict.items(): print(item) now, will change value specific user_ordered_dict['QQ'] print('After changing value specific Ordered Dict') item user_ordered_dict.items(): print(item) Output: Dict: ('PP', ('QQ', ('RR', ('SS', ('TT', ('UU', After changing value specific Dict ('PP', ('QQ', 111) ('RR', ('SS', ('TT', ('UU', OrderedDict: ('PP', ('QQ', ('RR', ('SS', ('TT', ('UU', After changing value specific Ordered Dict ('PP', ('QQ', 111) ('RR', ('SS', ('TT', ('UU', Deleting Reinserting Elements OrderedDict class When delete element from OrderedDict class then perform reinserting operation that particular value, will push that back. Although, OrderedDict class maintains order during process insertion, when deletion process performed, removes information ordering treats reinserted element entry. Example: import collections will create ordered dict print('OrderedDict:') user_ordered_dict collections.OrderedDict() user_ordered_dict['PP'] user_ordered_dict['QQ'] user_ordered_dict['RR'] user_ordered_dict['SS'] user_ordered_dict['TT'] user_ordered_dict['UU'] item user_ordered_dict.items(): print(item) #First will delete item RR user_ordered_dict.pop('RR') print('After Deleting key') item user_ordered_dict.items(): print(item) #now, will re-inserte item user_ordered_dict['RR'] print('After Re-inserting value') item user_ordered_dict.items(): print(item) Output: OrderedDict: ('PP', ('QQ', ('RR', ('SS', ('TT', ('UU', After Deleting ('PP', ('QQ', ('SS', ('TT', ('UU', After Re-inserting value ('PP', ('QQ', ('SS', ('TT', ('UU', ('RR', Insert Beginning OrderedDict When user wants insert some element beginning OrderedDict class, he/she 'update' method. Example: from collections import OrderedDict user_ordered_dict OrderedDict([('Jake', '10'), ('John', '20'), ('Ross', '40')]) print("The current dictionary values print(user_ordered_dict) user_ordered_dict.update({'Ryan':'70'}) user_ordered_dict.move_to_end('Ryan', last False) print("The updated dictionary values print(user_ordered_dict) above code: First, have imported required packages. Then, have created Ordered Dictionary using OrdereDict. used 'update' method specifying value. Then, used 'move_to_end' function moving value end. required output displayed. Output: current dictionary values OrderedDict([('Jake', '10'), ('John', '20'), ('Ross', '40')]) updated dictionary values OrderedDict([('Ryan', '70'), ('Jake', '10'), ('John', '20'), ('Ross', '40')]) Check Order Character String Using OrderedDict user wants check order character string, they 'OrderedDict' method. Let's understand following example. Example: from collections import OrderedDict check_order(user_input, user_pattern): user_dict OrderedDict.fromkeys(user_input) pattern_length key,value user_dict.items(): (key user_pattern[pattern_length]): pattern_length pattern_length (pattern_length (len(user_pattern))): return 'The order pattern correct' return 'The order pattern incorrect' user_input 'Hello Jake' input_pattern 'Ja' print("The string print(user_input) print("The input pattern print(input_pattern) print(check_order(user_input,input_pattern)) user_input 'Hello Jake' input_pattern 'ke' print("The string print(user_input) print("The input pattern print(input_pattern) print(check_order(user_input,input_pattern)) above code: First, imported required packages. Then, defined 'check_order' method, which will take parameters. have then created ordered dictionary using 'fromkeys' method. have initialized length pattern equal pattern, then length pattern will incremented. But, length pattern same current length, this means order correct. Otherwise, order incorrect. Output: string Hello Jake input pattern order pattern correct string Hello Jake input pattern order pattern incorrect Conclusion this tutorial, have discussed OrderedDict different from ordinary dictionary. have also explained users delete insert elements OrderedDict rearrange them beginning dictionary order. Next TopicT-Test Python prev next