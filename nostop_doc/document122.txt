next prev Bubble Sort Python Bubble sort easy algorithm among various sorting algorithms. learn first sorting algorithm. easy learn highly intuitive. easy implement into code, which much beneficial beginner software developers. worst algorithm sorting elements every except because checks every time array sorted not. Let's understand concepts bubble sort. Concept Bubble Sort bubble sort uses straightforward logic that works repeating swapping adjacent elements they right order. compares pair time swaps first element greater than second element; otherwise, move further next pair elements comparison. Let's understand example Example creating list element, which stores integer numbers list1 Here algorithm sort elements First iteration compares first elements here 5>3 then swap with each other. list second comparison, then swapping happen third comparison, 8>6 then swap fourth comparison, 8>7 then swap fifth comparison, 8>2 then swap- Here first iteration complete largest element end. need len(list1) Second Iteration here, then swap taken place here, then swap taken place here, then swap taken place here 7>2 then swap their position. here then swap taken place. Third Iteration here, then swap taken place here, then swap taken place here, 6<2 then swap their positions here then swap taken place. here then swap their position. will iterate until list sorted. Fourth Iteration Fifth Iteration Check each element that list sorted using bubble sort technique. Implementation Python Code have already described technique bubble sort. Now, will implement logic Python code. Program Creating bubble sort function bubble_sort(list1): Outer loop traverse entire list range(0,len(list1)-1): range(len(list1)-1): if(list1[j]>list1[j+1]): temp list1[j] list1[j] list1[j+1] list1[j+1] temp return list1 list1 print("The unsorted list list1) Calling bubble sort function print("The sorted list bubble_sort(list1)) Output: unsorted list sorted list Explanation: above code, have defined bubble_sort() function which takes list1 argument. Inside function, have defined loop first loop iterates complete list second loop iterates list compare elements every outer loop iterations. loop will terminated when reaches end. have defined condition inner loop; first index value greater than second index value, swap their positions with each other. called function passed list; iterated returned sorted list. Without using temp variable also swap elements without using temp variable. Python very unique syntax. following lines code. Example bubble_sort(list1): Outer loop traverse entire list range(0,len(list1)-1): range(len(list1)-1): if(list1[j]>list1[j+1]): here using temp variable list1[j],list1[j+1] list1[j+1], list1[j] return list1 list1 print("The unsorted list list1) Calling bubble sort function print("The sorted list bubble_sort(list1)) Output: unsorted list sorted list Optimization Python Code Implementation optimize above code using techniques. swaps done; means list sorted. previous technique previous technique will evaluate complete list though doesn't seem necessary prevent unnecessary evaluation using Boolean flag checks swaps were made previous section. Example bubble_sort(list1): stop iteration once swap done has_swapped True while(has_swapped): has_swapped False range(len(list1) list1[i] list1[i+1]: Swap list1[i], list1[i+1] list1[i+1], list1[i] has_swapped True return list1 list1 print("The unsorted list list1) Calling bubble sort function print("The sorted list bubble_sort(list1)) Output: unsorted list sorted list second technique, consider fact that iteration ended when largest element list list. first time, pass largest element position using position. second time, pass through position, second largest element. each consecutive iteration, compare less element than before. More accurately, k-th iteration, only need compare first elements: Example bubble_sort(list1): has_swapped True total_iteration while(has_swapped): has_swapped False range(len(list1) total_iteration list1[i] list1[i+1]: Swap list1[i], list1[i+1] list1[i+1], list1[i] has_swapped True total_iteration print("The number iteraton: ",total_iteration) return list1 list1 print("The unsorted list list1) Calling bubble sort funtion print("The sorted list bubble_sort(list1)) Output: unsorted list number iteraton: sorted list Time Comparison Let's time comparison between above code snippets. Unoptimized Bubble Sort Takes: 0.0106407 Optimize Bubble Sort Takes: 0.0078251 Bubble Sort with Boolean flag shortened list Takes: 0.0075207 techniques useful fewer elements, list consists many elements, then second optimize technique make huge difference. Next TopicLogging Python prev next