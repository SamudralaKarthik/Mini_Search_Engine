next prev Redis with Python This tutorial will learn implement Redis using Python programming language. Redis lightning-fast in-memory value that used store anything. This tutorial will explain deep understanding Redis with Python, will understand some examples. will also learn connect Redis Python. have basic understanding Python Redis, will easily understand concepts Redis. Before diving into this tutorial, let's introduce Redis Introduction Redis acronym Remote Dictionary Server, open-source NoSQL database. widely used famous fast, in-memory key-value data store, message broker, cache, queue. initially developed Salvatore' antirez' Sanfilippo. Redis been written ANSI language works most POSIX systems, such Linux, without external dependencies. comes with wide range data support such strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyper logs geospatial index with radius queries. Let's have look Redis. Redis Features Redis's features pretty significant boost existing environment with several features. Redis some essential beneficial features used. Wide Range Data Structure Redis mainly provides five possible data support: hashes, lists, sets, strings, sorted sets. Redis stores data key-value pair offers various data structures fulfill application requirements. Data Persistence Data persistence refers data survives after producer process particular data ended. other words, saved data must available server fails. ensure data persistency, data must stored non-volatile storage. Performance Redis known performance highly efficient because in-memory nature. Redis's in-memory feature performs well compared database systems that write every change disk before considering transaction committed. High Availability Redis allows create build highly available solutions clustered topologies. primarily single-threaded server, modern version Redis uses threads different things. Simply Efficiently Lightweight Hence, written ANSI language dependencies. program works perfectly well POSIX environments. Redis does support Window platform, Redis also supports various languages such Node.js, PHP, Ruby, Python, many others. Redis tremendous dynamic community support. Caching Caching makes Redis faster where data stored temporary storage that accessed more quickly future. Redis provides caching solutions such images, files, metadata, persistence session. Installation Redis Window Redis officially supported window. However, Redis Window machine installing Window Subsystem Linux configuring install window subsystem, follow install Linux window with WSL guide. Alternately, Redis container using Docker. need install Docker window machine, need download Docker Desktop from official site. Once download completed, enter following command terminal fetch Redis image from Docker hub. below command will help build container. docker pull redis After pressing enter, start container using Redis image downloaded earlier. click download button. that redis running system. Now, have successfully started redis server system. Install Redis Ubuntu first step update repository cache Ubuntu. using following command. sudo update Now, enter following command install Redis. sudo install redis Now, check installed version installed redis using following command. redis-cli -version above command will display installed version current utility installed system. Now, let's move setup connection between redis Python. Install Redis-Py work with redis using Python, need install Redis-py library, Python-Redis client. open terminal, following command. install redis Redis Python Dictionary Redis stands Remote Dictionary Service. draw many similarities between Python dictionary working redis. redis stores value critical value format supports commands such GET, SET, DEL, well other hundred commands. Redis keys always strings. Redis's value type, such string, list, hashes, sets. Some advanced types included geospatial items stream types. Many Redis commands operate constant O(1) time, just like retrieving value from Python dict hash table. Let's create first database redis, which will mapping county: capital city, where SET key-value pairs. 127.0.0.1:6379> Bahamas Nassu 127.0.0.1:6379> Crotia Zagreb (error) ERR unknown command `Crotia`, with args beginning with: `Zagreb`, 127.0.0.1:6379> Crotia Zagreb 127.0.0.1:6379> Japan Tokio 127.0.0.1:6379> Japan "Tokio" 127.0.0.1:6379> Bahamas "Nassu" 127.0.0.1:6379> Using Redis-py perform operation using redis-py, need connect redis server, which very direct redis-py. need decode_response parameter true that response bytes format. Let's understand following example Example import redis redis.Redis(decode_responses=True) print(r.ping()) Now, have connected redis server, perform simple CRUD operations. discussed earlier, supports get, method. key-value pair, "set" function that takes value parameter. Here point remember that, only either string data types bytes. r.set('India', 'Delhi') Same dictionary, method value India. function takes return value. r.get('India') redis module provides mset method multiple key-value pair. name suggest mset multiple set. Let's following example dict_val 'India': 'Delhi', 'UK': 'London' r.mset(dict_val) r.get('UK') Output: London redis module provides sass function key-value pair where value data -type. data type stores unique values. fruits ["avocado", "strawberry", "strawberry", "mango", "orange"]r.sadd('fruits', *fruits) values fruits that just stored, "smembers" function. r.smembers('fruits') {'avocado', 'mango', 'orange', 'strawberry'} Now, will store list data types using lpush function. Let's understand following example programming_languages ['python', 'C#', 'C++', 'C++', 'javascript'] r.lpush('languages', *programming_languages) lrange function element list. helps traverse elements list. perform same operations perform list. Let's following example r.lrange('languages', ['javascript', 'C++', 'C++', 'C#', 'python'] also store deeply nested objects with different data types; serialization technique like using json pickle used. Let's understand following example Example import json personal_information 'name': 'Rahul', 'age': 'address':{ 'house_no': 189, 'flat_name': 'Golden Flower', 'area': 'Guindy' 'languages_known': ['english', 'hindi', 'tamil'] r.set('personal_information', json.dumps(personal_information)) extract information stored, directly "get" function then undo stringification performed json. json.loads(r.get('personal_information')) Output: {'name': 'Megha', 'age': 'address': {'house_no': 189, 'flat_name': 'Golden Flower', 'area': 'Guindy'}, 'languages_known': ['english', 'hindi', 'tamil']} Since memory data store, important that key-value pairs deleted rather expired make room storing data. this, Redis expiry option available. store key-value pair with expiration time. make "setex" function expiry key-value pair. accepts seconds. want milliseconds, "psetex" function. Redis Important Methods below table some crucial commands related key-value expiration. Let's following example. Method Explanation r.setx(name, time, value) This method used value critical name value that expires time seconds, where time represented Python timedelta object. r.expire(name, time) This method used expire flag name time seconds, where time represented Python timedelta object. r.psetex(name, time_ms, value) sets value name value that expires time_ms milliseconds, where time_ms represented Python timedelta object. r.expireat(name, when) sets expire flag name, where when represented indicating Unix time Python datetime object r.persist(name) removes expiration name. r.ttl(name) This method returns number seconds until name will expire. r.pttl(name) returns number milliseconds until name expires. Using Enterprise Redis Application Redis open-source, accessible, several managed database. also additional features built open-source Redis server. Amazon ElastiCache Redis This service allows host Redis server cloud, which connect from Amazon EC2 instance. Microsoft's Azure Cache Redis This another capable enterprise-grade service that lets customizable, secure Redis instance cloud. designs have some commonalities. Conclusion This tutorial includes implement Redis through Python, including installing using Redis REPL connected redis server using redis-py real time example. have learned activate Redis through intuitive Python API. have learned store data database. Some important concepts redis didn't cover this tutorial. However, through official documentation. This tutorial will help good knowledge embedded Python with redis. Next TopicAdvance Concepts Python Python Developer prev next