next prev Binary Search Python This tutorial will learn apply binary search algorithm using Python find element's index position given list. Introduction binary search algorithm find particular element list. Suppose have list thousand elements, need index position particular element. find element's index position very fast using binary search algorithm. There many searching algorithms binary search most popular among them. elements list must sorted apply binary search algorithm. elements sorted then sort them first. Let's understand concept binary search. Concept Binary Search binary search algorithm, find element position using following methods. Recursive Method Iterative Method divide conquer approach technique followed recursive method. this method, function called itself again again until found element list. statements repeated multiple times find element's index position iterative method. while loop used accomplish this task. Binary search more effective than linear search because don't need search each list index. list must sorted achieve binary search algorithm. Let's have step step implementation binary search. have sorted list elements, looking index position [12, setting pointers list. pointer used denote smaller value called second pointer used denote highest value called high. Next, calculate value middle element array. (low+high)/2 Here, high (0+7)/2 (Integer) Now, will compare searched element index value. this case, equal need further comparison find element. number searching equal mid. Then return otherwise move further comparison. number search greater than middle number, compare with middle element elements right side Otherwise, compare with middle element elements left side high high Repeat until number that searching found. Implement Binary Search Python First, implement binary search with iterative method. will repeat statements iterate every item list. will find middle value until search complete. Let's understand following program iterative method. Python Implementation Iterative Binary Search Function method Python Implementation returns index given list1 present, else returns binary_search(list1, high len(list1) while high: integer result (high low) Check present list1[mid] greater, compare right elif list1[mid] high smaller, compared left else: return element present list, return return Initial list1 list1 [12, Function call result binary_search(list1, result print("Element present index", str(result)) else: print("Element present list1") Output: Element present index Explanation: above program have created function called binary_search() function which takes arguments list sorted number searched. have declared variables store lowest highest values list. assigned initial value high len(list1) Next, have declared while loop with condition that lowest equal smaller than highest while loop will iterate number been found yet. while loop, find value compare index value number searching for. value mid-index smaller than increase value assign search moves left side. Otherwise, decrease value assign high. search moves right side. equal value then return mid. This will happen until equal smaller than high. reach function, then element present list. return calling function. Let's understand recursive method binary search. Recursive Binary Search recursion method used binary search. this, will define recursive function that keeps calling itself until meets condition. Let's understand above program using recursive function. Python Program Python program recursive binary search. Returns index position list1 present, otherwise binary_search(list1, low, high, Check base case recursive function high: (low high) element available middle itself then return index list1[mid] return element smaller than value, then search moves left sublist1 elif list1[mid] return binary_search(list1, low, Else search moves right sublist1 else: return binary_search(list1, high, else: Element available list1 return Test list1ay list1 [12, Function call binary_search(list1, len(list1)-1, print("Element present index", str(res)) else: print("Element present list1") Output: Element present index Explanation above program similar previous program. declared recursive function base condition. condition lowest value smaller equal highest value. calculate middle number last program. have used statement proceed with binary search. middle value equal number that looking for, middle value returned. middle value less than value, looking then recursive function binary_search() again increase value assign low. middle value greater than value looking then recursive function binary_search() again decrease value assign low. last part, have written main program. same previous program, only difference that have passed parameters binary_search() function. This because can't assign initial values low, high recursive function. Every time recursive called value will reset those variables. That will give wrong result. Complexity complexity binary search algorithm O(1) best case. This happen element that element looking find first comparison. O(logn) worst average case complexity binary search. This depends upon number searches conducted find element that looking for. Conclusion binary search algorithm most efficient fast search element list. skips unnecessary comparison. name suggests, search divided into parts. focuses side list, which close number that searching. have discussed both methods find index position given number. Next TopicLinear Search Python prev next