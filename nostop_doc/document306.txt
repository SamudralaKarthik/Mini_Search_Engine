next prev Best Python libraries Machine Learning Machine learning science programming computer which they learn from different types data. According machine learning's definition Arthur Samuel "Field study that gives computers ability learn without being explicitly programmed". concept machine learning basically used solving different types life problems. previous days, users used perform tasks machine learning manually coding algorithms using mathematical statistical formulas. This process time-consuming, inefficient, tiresome compared Python libraries, frameworks, modules. today's world, users Python language, which most popular productive language machine learning. Python replaced many languages vast collection libraries, makes work easier simpler. this tutorial, will discuss best libraries Python used Machine Learning: NumPy SciPy Scikit-learn Theano TensorFlow Keras PyTorch Pandas Matplotlib NumPy NumPy most popular library Python. This library used processing large multi-dimensional array matrix formation using large collection high-level mathematical functions formulas. mainly used computation fundamental science machine learning. widely used linear algebra, Fourier transformation, random number capabilities. There other High-end libraries such TensorFlow, which user NumPy internal functioning manipulation tensors. Example: import numpy Then, create arrays rank nup.array([[2, 8]]) nup.array([[1, 7]]) Then, create arrays rank nup.array([10, 12]) nup.array([9, 11]) Then, will print Inner product vectors print ("Inner product vectors: nup.dot(P, S), "\n") Then, will print Matrix Vector product print ("Matrix Vector product: nup.dot(K, P), "\n") Now, will print Matrix matrix product print ("Matrix matrix product: nup.dot(K, R)) Output: Inner product vectors: Matrix Vector product: 156] Matrix matrix product: [[22 [46 74]] SciPy SciPy popular library among Machine Learning developers contains numerous modules performing optimization, linear algebra, integration, statistics. SciPy library different from SciPy stack, SciPy library core packages which made SciPy stack. SciPy library used image manipulation tasks. Example from scipy import signal sg import numpy nup.arange(45).reshape(9, domain_1 nup.identity(3) print 'KK') print (sg.order_filter domain_1, Output: domain_1, Output: [15 [25 [30 [35 39] [40 44]] KK 3.] [10. 8.] [15. 13.] [20. 18.] [25. 23.] [30. 28.] [35. 33.] 38.]] Example from scipy.signal import chirp from scipy.signal import spectrogram import matplotlib.pyplot plot import numpy t_T nup.linspace(3, 300) w_W cp(t_T, f0 method 'linear') plot.plot(t_T, w_W) plot.title ("Linear Chirp") plot.xlabel ('Time Seconds)') plot.show() Output: Scikit-learn Scikit-learn Python library which used classical machine learning algorithms. built basic libraries Python, that NumPy SciPy. Scikit-learn popular Machine learning developers supports supervised unsupervised learning algorithms. This library also used data-analysis, data-mining process. Example: from sklearn import datasets from sklearn import metrics from sklearn.tree import DecisionTreeClassifier load iris datasets dataset_1 ds.load_iris() CART model data model_1 dtc() model_1.fit(dataset_1.data, dataset_1.target) print(model) make predictions expected_1 dataset_1.target predicted_1 model_1.predict(dataset_1.data) summarize model print (mt.classification_report(expected_1, predicted_1)) print(mt.confusion_matrix(expected_1, predicted_1)) Output: DecisionTreeClassifier() precision recall f1-score support 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 1.00 accuracy 1.00 macro 1.00 1.00 1.00 weighted 1.00 1.00 1.00 [[50 50]] Theano Theano famous library Python, which used defining, evaluating, optimizing mathematical expressions, which also efficiently involves multi-dimensional arrays. achieved optimizing utilization GPU. machine learning about mathematics statistics, Theano makes easy users perform mathematical operations. extensively used unit-testing self-verification detecting diagnosing different types errors. Theano powerful library that used large scale computationally intensive scientific project. simple approachable library, which individual their projects. Example: import theano import theano.tensor Tt Tt.dmatrix('k') Tt.exp(-k)) logistic_1 th.function([k], logistic_1([[0, [-1, -2]]) Output: array([[0.5, 0.71135838], [0.26594342, 0.11420192]]) TensorFlow TensorFlow open-source library Python which used high performance numerical computation. popular library, which developed Brain team Google. TensorFlow framework that involves defining running computations involving tensors. TensorFlow used training running deep neural networks, which used developing several Artificial Intelligence applications. Example: import tensorflow tsf Initialize constants tsf.constant([2, tsf.constant([1, Multiply result tsf.multiply(K_1, K_2) Initialize Session sess_1 tsf.Session() Print result print (sess_1.run(result)) Close session sess_1.close() Output: Keras Keras high-level neural networking API, which capable running TensorFlow, CNTK Theano libraries. very famous library Python among Machine learning developers. without glitch both GPU. makes really easy simple Machine Learning beginners designing Neural Network. also used fast prototyping. Example: import numpy from tensorflow import keras ks from tensorflow.keras import layers number_classes input_shapes (28, Here, will import data, split between train test sets (x_1_train, y_1_train), (x_2_test, y_2_test) ks.datasets.mnist.load_data() now, will Scale images range x_1_train x_1_train.astype("float32") x_2_test x_2_test.astype("float32") have make sure that images have shape (28, x_1_train nup.expand_dims(x_1_train, x_2_test nup.expand_dims(x_2_test, print ("x_train shape:", x_1_train.shape) print (x_1_train.shape[0], "Training samples") print (x_2_test.shape[0], "Testing samples") Then will convert class vectors binary class matrices y_1_train ks.utils.to_categorical(y_1_train, number_classes) y_2_test ks.utils.to_categorical(y_2_test, number_classes) model_1 ks.Sequential( ks.Input(shape input_shapes), ls.Conv2D(32, kernel_size activation "relu"), ls.MaxPooling2D(pool_size 2)), ls.Conv2D(64, kernel_size activation "relu"), ls.MaxPooling2D(pool_size 2)), ls.Flatten(), ls.Dropout(0.5), ls.Dense(number_classes, activation "softmax"), model_1.summary() Output: x_train shape: (60000, 60000 Training samples 10000 Testing samples Model: "sequential" _________________________________________________________________ Layer (type) Output Shape Param ================================================================= conv2d (Conv2D) (None, _________________________________________________________________ max_pooling2d (MaxPooling2D) (None, _________________________________________________________________ conv2d_1 (Conv2D) (None, 18496 _________________________________________________________________ max_pooling2d_1 (MaxPooling2 (None, _________________________________________________________________ flatten (Flatten) (None, 1600) _________________________________________________________________ dropout (Dropout) (None, 1600) _________________________________________________________________ dense (Dense) (None, 16010 ================================================================= Total params: 34,826 Trainable params: 34,826 Non-trainable params: _________________________________________________________________ PyTorch PyTorch also open-source Python library Machine Learning based Torch, which implemented language used Machine learning. numerous tools libraries supported computer version, Natural Language Processing (NLP) many other Machine Learning programs. This library also allows users perform computational tasks Tensor with acceleration. Example: import torch tch d_type tch.float device_1 tch.device("cpu") device tch.device("cuda:0") Here, batch size; D_in_1 input dimension; hidden dimension; D_out_1 output dimension. D_in_1 1000 D_out_1 Now, will create random input output data tch.randn(N_1, D_in_1, device device_1, dtype d_type) tch.randn(N_1, D_out_1, device device_1, dtype d_type) Then, will Randomly initialize weights tch.randn(D_in_1, H_1, device device_1, dtype d_type) tch.randn(H_1, D_out_1, device device_1, dtype d_type) learning_rate_1 1e-6 range(500): Now, will Forward pass: compute predicted h_1 K.mm(K_1) h_relu_1 h_1.clamp(min y_pred_1 h_relu_1.mm(K_2) Compute print loss loss (y_pred_1 R).pow(2).sum().item() print (Q, loss) Then will Backprop compute gradients with respect loss grad_y_pred (y_pred_1 grad_K_2 h_relu_1.t().mm(grad_y_pred) grad_h_relu grad_y_pred.mm(K_2.t()) grad_h grad_h_relu.clone() grad_h[h_1 grad_K_1 K.t().mm(grad_h) Then will Update weights using gradient descent learning_rate_1 grad_K_1 learning_rate_1 grad_K_2 Output: 35089116.0 33087792.0 42227192.0 56113208.0 61125684.0 45541204.0 21011108.0 6972017.0 2523046.5 1342124.5 950067.5625 753290.25 620475.875 519006.71875 437975.9375 372063.125 317840.8125 272874.46875 235348.421875 497 7.426088268402964e-05 498 7.348413055296987e-05 499 7.258950790856034e-05 Pandas Pandas Python library that mainly used data analysis. users have prepare dataset before using training machine learning. Pandas make easy developers developed specifically data extraction. wide variety tools analysing data detail, providing high-level data structures. Example: import pandas data_1 {"Countries": ["Bhutan", "Cape Verde", "Chad", "Estonia", "Guinea", "Kenya", "Libya", "Mexico"], "capital": ["Thimphu", "Praia", "N'Djamena", "Tallinn", "Conakry", "Nairobi", "Tripoli", "Mexico City"], "Currency": ["Ngultrum", "Cape Verdean escudo", "CFA Franc", "Estonia Kroon; Euro", "Guinean franc", "Kenya shilling", "Libyan dinar", "Mexican peso"], "population": [20.4, 143.5, 12.52, 135.7, 52.98, 76.21, 34.28, 54.32] data_1_table pad.DataFrame(data_1) print(data_1_table) Output: Countries capital Currency population Bhutan Thimphu Ngultrum 20.40 Cape Verde Praia Cape Verdean escudo 143.50 Chad N'Djamena CFA Franc 12.52 Estonia Tallinn Estonia Kroon; Euro 135.70 Guinea Conakry Guinean franc 52.98 Kenya Nairobi Kenya shilling 76.21 Libya Tripoli Libyan dinar 34.28 Mexico Mexico City Mexican peso 54.32 Matplotlib Matplotlib Python library that used data visualization. used developers when they want visualize data patterns. plotting library that used create graphs plots. module pyplot which used plotting graphs, provides different features control line styles, font properties, formatting axes many more. Matplotlib provides different types graphs plots such histograms, error charts, charts many more. Example import matplotlib.pyplot plot import numpy Prepare data nup.linspace(2, nup.linspace(5, nup.linspace(0, Plot data plot.plot(K, label 'K') plot.plot(R, label 'R') plot.plot(Q, label 'Q') legend plot.legend() Show plot plot.show() Output: Example import matplotlib.pyplot plot Creating dataset-1 R_1 [11, Creating dataset2 R_2 [16, plot.scatter(K_1, R_1, "Black", linewidths marker "s", edgecolor "Brown", plot.scatter(K_2, R_2, "Purple", linewidths marker "^", edgecolor "Grey", 200) plt.xlabel ("X-axis") plt.ylabel ("Y-axis") print ("Scatter Plot") plt.show() Output: Conclusion this tutorial, have discussed about different libraries Python which used performing Machine learning tasks. have also shown different examples each library. Next TopicPython Program Display Calendar Given Year prev next