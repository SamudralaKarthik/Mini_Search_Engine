next prev Application Search Installed Applications using Tkinter Python this tutorial, we'll develop Python scripts look installed Windows applications connect them applications. Winapps modules used manage installed programmes Windows. Running following command your terminal will help install module your system install winapps Functions from winapps module There several functions that exist winapps module which will using them like list_installed search_installed functions. lets begin. winapps module's winapps.list_installed() method allows printing installed applications. When this method will called, apps Code importing winapps module import winapps Showing applications present system using list_installed() element winapps.list_installed(): print(element) Output: InstalledApplication(name 'Asus Smart Care', version '2.1.1.639?, install_date None, install_location None, install_source None, modify_path None, publisher 'Asus Inc.', uninstall_string 'C:\\Program Files\\Asus\\ASC\\MSamrt Care\\2.1.1.639\\Uninstall.exe') InstalledApplication(name 'VS Code version 5,6,20?, version '5.6.20?, install_date datetime.date(2021, 21), install_location WindowsPath('D:/Installation_bulk/Git'), install_source None, modify_path None, publisher 'Visual Studios Inc.', uninstall_string '"D:\\Installation_bulk\\VS code\\unins0.exe"') InstalledApplication(name 'Microsoft Office en-us', version '16.2.95481.90001?, install_date None, install_location WindowsPath('C:/Program Files/Ms Office'), install_source None, modify_path '"C:\\Program Files\\Important Files\\Microsoft apps\\ClickToRun\\OfficeClickToRun.exe" scenario repair platform culture en-us', publisher 'Microsoft Corp.', uninstall_string '"C:\\Program Files\\Important Files\\Microsoft apps\\ClickToRun\\OfficeClickToRun.exe" scenario install scenariosubtype sourcetype None productstoremove OHome&StudentPremRetail.22_en-us_x-none culture en-us version.22 22.0?) InstalledApplication(name 'Microsoft edge en-us', version '22.0.131415.20306?, install_date None, install_location WindowsPath('C:/Program Files/Microsoft edge'), install_source None, modify_path '"C:\\Program Files\\Important Files\\Microsoft apps\\ClickToRun\\OfficeClickToRun.exe" scenario repair platform culture en-us', publisher 'Microsoft Corporation', uninstall_string '"C:\\Program Files\\Important Files\\Microsoft apps\\ClickToRun\\OfficeClickToRun.exe" scenario install scenariosubtype sourcetype None productstoremove OHome&StudentPremRetail.22_en-us_x-none culture en-us version.22 22.0?) InstalledApplication(name Mozilla Firefox', version '95.1.5294.213?, install_date datetime.date(2021, 21), install_location WindowsPath( 'C:/Program Files (x64)/Mozilla Files/Firefox/Application' install_source None, modify_path None, publisher 'Firefox LLC', uninstall_string "C:\\Program Files (x64)\\Mozilla Files\\Firefox\\Application\\95.1.5294.213\\Installer\\setup.exe" -uninstall -system-level -verbose-logging') InstalledApplication(name 'Screen Viewer Utility', version '1.7.2.490?, install_date None, install_location None, install_source None, modify_path None, publisher 'Asus Inc.', uninstall_string='C:\\Program Files\\Asus\\SV Utility\\1.7.2.490\\Uninstall.exe') InstalledApplication(name 'Intel(R) Core Components', version '1202.17.0.2021?, install_date None, install_location WindowsPath('C:/Program Files (x64)/Intel/Intel(R) Core Components'), install_source None, modify_path None, publisher 'Intel Corp.', uninstall_string '"C:\\ProgramData\\Intel\\Pkg Cache\\{1YIAS88J-9310-2464-200E-7SQ9H04P5021}\\Setup.exe" -uninstall') InstalledApplication(name 'Intel(Xe) Graphics Card (1)', version '192.104.10.1212?, install_date None, install_location WindowsPath('C:/Program Files (x64)/Intel/Intel(Xe) Graphics Card (1)'), install_source None, modify_path None, publisher 'Intel Graphics', uninstall_string '"C:\\Program_Data\\Intel\\Package Cache\\{1WIES76H-5487-8112-900G-5ED8F19E7030}\\Setup.exe" -uninstall') This module also offers search_installed('App name') function searching particular among installed apps. When this method will used, will asked enter name application want find results which will match particular existing will appear screen. Code element winapps.search_installed('chrome'): print(element) Output: InstalledApplication(name Mozilla Firefox', version '95.1.5294.213?, install_date datetime.date(2021, 21), install_location WindowsPath( 'C:/Program Files (x64)/Mozilla Files/Firefox/Application' install_source None, modify_path None, publisher 'Firefox LLC', uninstall_string "C:\\Program Files (x64)\\Mozilla Files\\Firefox\\Application\\95.1.5294.213\\Installer\\setup.exe" -uninstall -system-level -verbose-logging') Walking through code building search installed application importing required modules from tkinter import import winapps Firstly, imported required modules into program. modules imported were Tkinter winapps. Creating method order attach output received apps(): element winapps.search_installed(e.get()): name.set(element.name) vrsn.set(element.vrsn) Install_dt.set(element.Install_dt) publishr.set(element.publishr) uninstall_str.set(element.uninstall_str) Then, defined apps() method provide data related searched output. this method, also included various methods attain data from winapps module. used set() method data like name application, version application, installation date application, publisher application uninstalling string required application. creating instance tkinter object setting background colour grey base Tk() base.configure(bg 'light grey') Defining Variable Classes tkinter module name StringVar() vrsn StringVar() Install_dt StringVar() publishr StringVar() uninstall_str StringVar() Then, created object Tkinter module background colour screen using configure() method. Next, created various variables store details application searched. Inserting label boxes every info. names help Label widget Label(base, text "Enter name "grey").grid(row sticky Label(base, text "Name "grey").grid(row sticky Label(base, text "Version "grey").grid(row sticky Label(base, text "Install date "grey").grid(row sticky Label(base, text "publisher "grey").grid(row sticky Label(base, text "Uninstall string "grey").grid(row sticky Then, created Labels each detail entered received, using label() method. These labels were positioned using grid() method. Defining labels various class variables name help Entry widget Label(base, text="", textvariable name, "grey").grid(row column sticky Label(base, text="", textvariable vrsn, "grey").grid(row column sticky Label(base, text textvariable Install_dt, "grey").grid(row column sticky Label(base, text textvariable publishr, "grey").grid(row column sticky Label(base, text textvariable uninstall_str, "grey").grid(row column sticky Entry(base, width ent.grid(row column Then created labels details various variables displayed using label() method. also created entry using entry() method enter name. Inserting button help button widget Button(base, text "Show", command apps, "Blue") btn.grid(row column columnspan rowspan padx pady Lastly, created show button search required application. Complete code Python program build application search installed application using Tkinter importing required modules from tkinter import import winapps Creating method order attach output recieved apps(): element winapps.search_installed(e.get()): name.set(element.name) vrsn.set(element.vrsn) Install_dt.set(element.Install_dt) publishr.set(element.publishr) uninstall_str.set(element.uninstall_str) creating instance tkinter object setting background colour grey base Tk() base.configure(bg 'light grey') Defining Variable Classes tkinter module name StringVar() vrsn StringVar() Install_dt StringVar() publishr StringVar() uninstall_str StringVar() Inserting label boxes every info. names help Label widget Label(base, text "Enter name "grey").grid(row sticky Label(base, text "Name "grey").grid(row sticky Label(base, text "Version "grey").grid(row sticky Label(base, text "Install date "grey").grid(row sticky Label(base, text "publisher "grey").grid(row sticky Label(base, text "Uninstall string "grey").grid(row sticky Defining labels various class variables name help Entry widget Label(base, text="", textvariable name, "grey").grid(row column sticky Label(base, text="", textvariable vrsn, "grey").grid(row column sticky Label(base, text textvariable Install_dt, "grey").grid(row column sticky Label(base, text textvariable publishr, "grey").grid(row column sticky Label(base, text textvariable uninstall_str, "grey").grid(row column sticky Entry(base, width ent.grid(row column Inserting button help button widget Button(base, text "Show", command apps, "Blue") btn.grid(row column columnspan rowspan padx pady mainloop() Output: Next TopicSpell Corrector using Tkinter Python prev next