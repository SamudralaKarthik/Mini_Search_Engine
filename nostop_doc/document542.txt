next prev Gzip module Python This module offers simple interface compressing decompressing files, similar tools gzip gunzip. GzipFile class, well open(), compress(), decompress() convenience functions, provided gzip module. GzipFile class reads writes gzip-format files, compressing decompressing contents automatically that seems regular file object. Need gzip module: main answer question what need gzip data compression. process encoding, rearranging, otherwise changing data order minimize size known data compression. essentially entails re-encoding data with fewer bits than original representation. Compression carried program that uses functions algorithms find most efficient minimize size data. example, algorithm might represent string bits with smaller string bits converting between them using reference dictionary.' formula that inserts reference pointer string data that program already seen another example. When comes picture compression, this fantastic example. When sequence colours appears across image, such 'blue, red, red, blue,' formula convert this data string into single while preserving underlying information. Text compression commonly accomplished deleting extraneous characters, replacing smaller string with more common string, inserting single character reference string repeated characters. With right approaches, data compression reduce size text file 50%, considerably lowering total size. Compression applied content complete transmission data transport. Larger files, either alone combination with others, part archive file, transferred numerous compressed formats, such ZIP, RAR, 7z, when sent received over internet. Compression several advantages, including reduced storage hardware, data transfer time, communication bandwidth. This potential save money. Compressed files require less storage space than uncompressed ones, resulting significant savings storage costs. compressed file also takes less time transfer while using less bandwidth network. This save costs while simultaneously increasing productivity. primary downside data compression that requires more processing resources compress necessary data. result, compression vendors place premium optimizing speed resource efficiency order reduce impact intensive compression jobs. Compression several advantages, including reduced storage hardware, data transfer time, communication bandwidth. This potential save money. Compressed files require less storage space than uncompressed ones, resulting significant savings storage costs. compressed file also takes less time transfer while using less bandwidth network. This save costs while simultaneously increasing productivity. primary downside data compression that requires more processing resources compress necessary data. result, compression vendors place premium optimizing speed resource efficiency order reduce impact intensive compression jobs. Because uncompressed text multimedia (speech, image, video) data requires large number bits represent them consequently amount bandwidth, this storage space, bandwidth requirement reduced using good compression encoding strategy. degree compression, amount distortion introduced, computational resources required compress decompress data factors consider when designing data compression schemes. Data transfer Internet extremely time-sensitive. Consider audio file, which nothing more than variations sound intensity over period time. Sound files used transport this audio across networks. time takes transfer files increases size sound files large. Compression reduce amount time takes transfer file. Compression, computer terminology, process lowering physical size data that takes less storage space memory. Compressed files thus easier transport because data size reduced significantly. Code: #!/bin/python3 import gzip import import import simple Python class that will used write different functions that will depict different case scenarios above-mentioned compression library Python class gzipClass: Sample constructor written that used initialize class variables this class __init__(self): pass function written which will write encrypted compressed contents file this function user prompted with message enter name file which user wants store data after adding name file user asked data that wants store just specified file once user adds data wants compress there operations which performed first input data compressed with help gzip library successful completion input string data that compressed data stream written file with name specified user successful message prompted user write_to_gz_file(self): print("enter name file which want write::") gz_filename input() print("enter string want write file::") gz_file_content input() with gzip.open(gz_filename, 'wb') gz_filehandle: cannot directly write Python objects like strings! must first convert them into bytes format using io.BytesIO() then write with io.TextIOWrapper(gz_filehandle, encoding='utf-8') gz_encoder_obj: gz_encoder_obj.write(gz_file_content) print("String '{data}' written successfully {fname} file.".format( data=gz_file_content, fname=gz_filename)) #This function totally different from function that have written above this function data read from particular file then decompressed printed user this function user prompted with message enter name file from which user wants read compressed data adding name file there operations which performed first operation which performed reading data from specified file after reading data from specified file that data decompressed with help library after successful decompression data, that decompressed data printed user read_from_gz_file(self): print("enter name file from which want read::") gz_filename input() cannot directly write Python objects like strings! must first convert them into bytes format using io.BytesIO() then write with gzip.open(gz_filename, 'rb') gz_reader_filehandle: with io.TextIOWrapper(gz_reader_filehandle, encoding='utf-8') gz_decoder_obj: gz_file_contents gz_decoder_obj.read() print("The data inside {fname} file is::\n{data}".format( data=gz_file_contents, fname=gz_filename)) this function used size file which have stored compressed data, this function asks user name file whose size user wants check after adding name file, particularly file, number bytes that present that particular files calculated printed, point noted this case that these bytes data represent compressed data that stored file get_gz_file_size(self): print("enter name whose size want check::") gz_filename input() no_of_bytes os.stat(gz_filename).st_size print("The file {fname} {bytes} number bytes".format( fname=gz_filename, bytes=no_of_bytes)) this function used compress input string with help library this function user asked enter data that user wants compress after adding data string that input string first converted Byte data with help encoding function string successful conversion byte data compressed with help Python compression library that compressed data printed compress_data(self): print("enter data that want compress") data_to_compress input() byte_data str.encode(data_to_compress) compressed_data gzip.compress(byte_data) print("The data after compression ".format(compressed_data)) this function performs exact opposite Above Return function. this function converts compressed data decompressed data, this function Asks user compressed bytes data, adding input this function uses same encoding function that used previous function encode then decompress input stream compressed data with help decompress function gzip module python. decompress_data(self): print("enter data decompress") data_to_decompress input() byte_data str.encode(data_to_decompress) decompressed_data gzip.decompress(byte_data) print("The data after decompresion ".format(decompressed_data)) main function written which have created object above-written class that object used call different functions that have written inside that class where each function representing different case scenario different functions that offered gzip module python different functionalities functions that offered gzip module python like compressing data writing file, reading data from file, getting size file, compressing input stream data decompressing input stream compressed data that provided input user these functions called with help object above-written class. Output: Enter your choice according below-listed options:: write data compressed file. read data from compressed file. size compressed file. compress input string with gzip library. decompress input string with gzip library. exit from code execution. enter name file which want write:: my_gz_file_1.txt.gz enter string want write file:: This sample data going stored compressed file. String 'This sample data going stored compressed file.' written successfully my_gz_file_1.txt.gz file. move ahead with code execution enter else Enter your choice according below-listed options:: write data compressed file. read data from compressed file. size compressed file. compress input string with gzip library. decompress input string with gzip library. exit from code execution. enter name file from which want read:: my_gz_file_1.txt.gz data inside my_gz_file_1.txt.gz file is:: This sample data going stored compressed file. move ahead with code execution enter else Enter your choice according below-listed options:: write data compressed file. read data from compressed file. size compressed file. compress input string with gzip library. decompress input string with gzip library. exit from code execution. enter name whose size want check:: my_gz_file_1.txt.gz file my_gz_file_1.txt.gz bytes move ahead with code execution enter else Enter your choice according below-listed options:: write data compressed file. read data from compressed file. size compressed file. compress input string with gzip library. decompress input string with gzip library. exit from code execution. enter data that want compress sample string compress data after compression b'\x1f\x8b\x08\x00K\xd0Qb\x02\xff+N\xcc-\xc8IU(.)\xca\xccKW(\xc9WH\xce\xcf-(J-.\x06\x00i\xb7qc\x19\x00\x00\x00' move ahead with code execution enter else Enter your choice according below-listed options:: write data compressed file. read data from compressed file. size compressed file. compress input string with gzip library. decompress input string with gzip library. exit from code execution. enter data decompress \x1f\x8b\x08\x00K\xd0Qb\x02\xff+N\xcc-\xc8IU(.)\xca\xccKW(\xc9WH\xce\xcf-(J-.\x06\x00i\xb7qc\x19\x00\x00\x00 data after compression sample string compress move ahead with code execution enter else Enter your choice according below-listed options:: write data compressed file. read data from compressed file. size compressed file. compress input string with gzip library. decompress input string with gzip library. exit from code execution. enter name file which want write:: gz_file_new.gz enter string want write file:: gzip module cases explained with help this python code String 'gzip module cases explained with help this python code written successfully gz_file_new.gz file. move ahead with code execution enter else Enter your choice according below-listed options:: write data compressed file. read data from compressed file. size compressed file. compress input string with gzip library. decompress input string with gzip library. exit from code execution. enter name file from which want read:: gz_file_new.gz data inside gz_file_new.gz file is:: gzip module cases explained with help this python code move ahead with code execution enter else Enter your choice according below-listed options:: write data compressed file. read data from compressed file. size compressed file. compress input string with gzip library. decompress input string with gzip library. exit from code execution. enter name whose size want check:: gz_file_new.gz file gz_file_new.gz bytes Enter your choice according below-listed options:: write data compressed file. read data from compressed file. size compressed file. compress input string with gzip library. decompress input string with gzip library. exit from code execution. above-written code, have written class where each function representing different case scenario different functions that offered gzip module python different functionalities functions that offered gzip module python like compressing data writing file, reading data from file, getting size file, compressing input stream data decompressing input stream compressed data that provided input user. function written which will write encrypted compressed contents file this function user prompted with message enter name file which user wants store data after adding name file user asked data that wants store just specified file once user adds data wants compress there operations which performed first input data compressed with help gzip library successful completion input string data that compressed data stream written file with name specified user successful message prompted user other function totally different from function that have written above this function data read from particular file then decompressed printed user this function user prompted with message enter name file from which user wants read compressed data adding name file there operations which performed first operation which performed reading data from specified file after reading data from specified file that data decompressed with help library after successful decompression data, that decompressed data printed user this article, have usage gzip module python various functionalities offered gzip module different case scenarios. have also seen program that actually calls different functions written where each function representing individual case functionality. Next Topicguppy/heapy Python prev next