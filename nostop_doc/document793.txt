next prev Create Table using PyQt5 Python will learn table PyQt5 application this tutorial. table row-and-column data layout that often used data analysis, research, communication. QTableWidget allows more tables PyQt application. will example wanting display name city several persons table application further illustrate concept. From database, JSON file, other type storage system, extract data. Before beginning project, fundamental PyQt5 requirements most efficient manage dependencies Python utilising virtual environment. virtual environment simply, local directory that contains libraries required certain project. system-wide installation those libraries, other hand, would affect your projects. instance QApplication must present every programme; this requirement. Several components cannot used until import line been executed. will thus necessary practically every PyQt programme write. Buttons, labels, windows, conversation boxes, progress bars, other widgets instances PyQt apps. Like HTML components, widgets often nested. window, which also have label, contain button, example. benefits support custom styles. There several ways change your application looks feels. Along with aforementioned, style sheets change your application looks. This Qt's rendition CSS. Walking through code import from PyQt5.QtWidgets import First all, will import required files into program from standard python library. These files include QtWidgets. #Main Window class App(QWidget): __init__(self): super().__init__() Setting title self.title 'PyQt5 Table Python' Setting Position self.left self.top self.width self.height self.setWindowTitle(self.title) self.setGeometry(self.left, self.top, self.width, self.height) Then, will create class program. that will title window geometry same. introducing table self.creatingTable() Adding Widgets self.layout QVBoxLayout() self.layout.addWidget(self.tableNew) self.setLayout(self.layout) Displaying window self.show() #Creating table creatingTable(self): self.tableNew QTableWidget() Giving count self.tableNew.setRowCount(4) Giving count Column self.tableNew.setColumnCount(2) self.tableNew.setItem(0, QTableWidgetItem("Cell(1,1)")) self.tableNew.setItem(0, QTableWidgetItem("Cell(1,2)")) self.tableNew.setItem(1, QTableWidgetItem("Cell(2,1)")) self.tableNew.setItem(1, QTableWidgetItem("Cell(2,2)")) self.tableNew.setItem(2, QTableWidgetItem("Cell(3,1)")) self.tableNew.setItem(2, QTableWidgetItem("Cell(3,2)")) self.tableNew.setItem(3, QTableWidgetItem("Cell(4,1)")) self.tableNew.setItem(3, QTableWidgetItem("Cell(4,2)")) Adjusting horizontal table self.tableNew.horizontalHeader().setStretchLastSection(True) self.tableNew.horizontalHeader().setSectionResizeMode( QHeaderView.Stretch) Then, will table widget start create table. Next, will define rows columns table lastly, will make adjustments table. __name__ '__main__': creating pyqt5 application base QApplication(sys.argv) creating instance created Window window App() starting application sys.exit(base.exec_()) Finally, will create application base, create instance window will execute program. Complete code import from PyQt5.QtWidgets import #Main Window class App(QWidget): __init__(self): super().__init__() Setting title self.title 'PyQt5 Table Python' Setting Position self.left self.top self.width self.height self.setWindowTitle(self.title) self.setGeometry(self.left, self.top, self.width, self.height) introducing table self.creatingTable() Adding Widgets self.layout QVBoxLayout() self.layout.addWidget(self.tableNew) self.setLayout(self.layout) Displaying window self.show() #Creating table creatingTable(self): self.tableNew QTableWidget() Giving count self.tableNew.setRowCount(4) Giving count Column self.tableNew.setColumnCount(2) self.tableNew.setItem(0, QTableWidgetItem("Cell(1,1)")) self.tableNew.setItem(0, QTableWidgetItem("Cell(1,2)")) self.tableNew.setItem(1, QTableWidgetItem("Cell(2,1)")) self.tableNew.setItem(1, QTableWidgetItem("Cell(2,2)")) self.tableNew.setItem(2, QTableWidgetItem("Cell(3,1)")) self.tableNew.setItem(2, QTableWidgetItem("Cell(3,2)")) self.tableNew.setItem(3, QTableWidgetItem("Cell(4,1)")) self.tableNew.setItem(3, QTableWidgetItem("Cell(4,2)")) Adjusting horizontal table self.tableNew.horizontalHeader().setStretchLastSection(True) self.tableNew.horizontalHeader().setSectionResizeMode( QHeaderView.Stretch) __name__ '__main__': creating pyqt5 application base QApplication(sys.argv) creating instance created Window window App() starting application sys.exit(base.exec_()) Output: output code mentioned above attached below form screenshot. Next TopicCreate Calendar using PyQt5 Python prev next