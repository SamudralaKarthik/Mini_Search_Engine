next prev Flatten List Python Introduction List considered most flexible data structures Python programming language. other hand, two-dimensional list, List, which generally termed list lists, object list where each element list itself. example: [[19, 17], [16, 14], [13, 11]]. Flattening list lists process transforming two-Dimensional list into One-Dimensional list un-nesting every list element kept list lists, that transforming [[9, perform flattening process with help nested loops, recursion, list comprehensions, core functions, importing libraries packages Python depth regularity nested lists. this tutorial, will working various methods order flatten nested lists using Python Programming Language. before started, understand types Nested Lists. What types Nested Lists? know, Python weakly typed programming language. Therefore, encounter types List Lists. These List Lists Nested Lists follows: Regular List Lists Irregular List Lists Regular List Lists Each item Regular List lists referred Sub-List, thus observing uniformity type element. Instance: [[9, regular list lists list type. Irregular List Lists Each item Irregular List lists either referred Sub-List Non-list element (For instance, string integer). Thus, there irregularity terms type element. instance: [[9, irregular list lists list types, whereas type. Flattening List Lists using Nested Loops Flattening List Lists with Nested Loops' help considered brute force approach obtain flat list. perform this method selecting each item from Two-Dimensional List arranging One-Dimensional List. consider following example that works both regular well irregular lists lists. Example: defining function flattenlist(_2dlist): defining empty list flatlist Iterating through outer list item _2dlist: type(item) list: item list type, iterating through sub-list element item: flatlist.append(element) else: flatlist.append(item) return flatlist defining nested list nestedlist [[10, 40], [50, 70], [80, 100]] print('Genuine List:', nestedlist) print('Converted Flat List:', flattenlist(nestedlist)) Output: Genuine List: [[10, 40], [50, 70], [80, 100]] Converted Flat List: [10, 100] Explanation: above example, have defined function flattenlist that takes parameter _2dlist. have then used loop iterate elements nested list append them generate flattened list. have then defined nested list implement flattenlist function. result, nested list successfully transformed into flattened list. Flattening Nested List using List Comprehension Flattening list lists with help List Comprehension considered elegant approach obtain flat list depending Two-Dimensional existing list. However, this approach offers less intuitive solution. consider following example. Example: defining nested list nestedlist [[10, 40], [50, 70], [80, 90]] list comprehension flatlist [element sub_list nestedlist element sub_list] print('Genuine list:', nestedlist) print('Converted list:', flatlist) Output: Genuine list: [[10, 40], [50, 70], [80, 90]] Converted list: [10, Explanation: above example, have defined nested list list comprehension. have then printed them users. result, nested list been transformed into flattened list successfully. Flattening List Lists using Recursive method also recursive method flatten Two-Dimensional list. consider following example implementing recursive method order flatten list lists. This implementation works well regular well irregular list lists. Example: defining function flattenlist(nestedlist): len(nestedlist) return nestedlist isinstance(nestedlist[0], list): return flattenlist(nestedlist[0]) flattenlist(nestedlist[1:]) return nestedlist[:1] flattenlist(nestedlist[1:]) print(flattenlist([[10, 40], [50, 70], [80, 90], 100])) Output: [10, 100] Explanation: above example, have defined function used statement stating length nested list equals zero, then return nested list. data element zeroth index instance list, then list index goes into function again adds following index list Else function will return elements last, have defined nested list executed function. result, list lists flattened recursively. Utilizing Libraries Python also utilize some Python programming language libraries flatten list lists. Implementation these libraries described below: Flattening List Lists using functools operator libraries operator library provides iconcat() function perform fundamental operation like concatenation. apply this function cumulatively data elements nested list, from left right, resulting reduction nested list flattened list. consider following example understand Implementation. Example: importing required libraries import operator import functools regularlist Converting list lists into flattened one. convo(nestedlist): element nestedlist: type(element) list: regularlist.append(element) else: regularlist.append([element]) return regularlist twoDlist [[10, 40], [50, 70], [80, 100], 110] regular2Dlist convo(twoDlist) print('Given List:', twoDlist) print('Converted list:', functools.reduce(operator.iconcat, regular2Dlist, [])) Output: Given List: [[10, 40], [50, 70], [80, 100], 110] Converted list: [10, 100, 110] Explanation: above example, have imported functools library along with operator library. have then defined empty list regularlist. have then defined function convo transform list lists flattened list. this function, have used loop where elements from nested list appended empty list defined earlier. Later have defined nested list executes function. result, list lists converted into flattened list successfully. Flattening List Lists using itertools library itertools library provides chain() function that allows transform nested list into single flattened list ideally. This function treats consecutive series single series iterating them iterable passed parameter serial way. consider following example: Example: importing itertools library import itertools defining nested list nestedlist [[10, 40], [50, 70], [80, 100]] flattenlist list(itertools.chain(*nestedlist)) print('The nested list:', nestedlist) print('The flattened list:', flattenlist Output: nested list: [[10, 40], [50, 70], [80, 100]] flattened list: [10, 100] Explanation: above example, have imported itertools library generated nested list. have then used chain() function convert given nested list flattened list. last, have returned result users. result, list lists flattened successfully. Flattening List Lists using NumPy library NumPy library provides various everyday operations, including concatenation Two-Dimensional regular Arrays column-wise row-wise. will attribute known flat order One-Dimensional Iterator over array conquer target. consider following example understand concatenate function flat attribute. Example: importing library import numpy defining nested list nestedlist [[10, 40], [50, 70], [80, 90]] using concatenate function along with flat attribute flattenlist list(numpy.concatenate(nestedlist).flat) print('The Nested list:', nestedlist) print('The Flattened list:', flattenlist) Output: Nested list: [[10, 40], [50, 70], [80, 90]] Flattened list: [10, Explanation: above example, have imported numpy library defined nested list. have then used concatenate function numpy library along with flat attribute flatten elements nested list concatenate them flattened list. last, have printed result users. Thus, list lists flattened successfully. Utilizing Core Functions also perform flattening task utilizing some core functions that Python programming language provides. Flattening List Lists using function consider summing over inner lists another solution problem. pass arguments function: first parameter iterable, which nested list, second parameter start which void list following case that serves initial flat list where data elements inner sub-lists will add. that this approach pretty convenient since have import anything. However, slower than itertools() chain() functions when there large number sub-lists present nested list. consider following example: Example: defining nested list nestedlist [[10, 40], [50, 70], [80, 90]] using function flattenlist sum(nestedlist, print('The Nested list:', nestedlist) print('The Flattened list:', flattenlist) Output: Nested list: [[10, 40], [50, 70], [80, 90]] Flattened list: [10, Explanation: above example, have defined nested list. have then used sum() function flattened nested list into One-Dimensional list, printed resultant list users. result, have transformed list lists into flat list successfully. Flattening List Lists using Lambda keyword define anonymous function using keyword lambda. pass regular/irregular list parameter this anonymous function. evaluation expression done order obtain flat One-Dimensional List. consider following example: Example: Defining nested list nestedlist [[10, 30], [30, 60], [40, 70], Using lambda parameters: expression flattenlist lambda nestedlist:[item element nestedlist item flattenlist(element)] type(nestedlist) list else [nestedlist] print("The Nested list:", nestedlist) print("The Flattened List:", flattenlist(nestedlist)) Output: Nested list: [[10, 30], [30, 60], [40, 70], Flattened List: [10, Explanation: above example, have defined nested list. have then used lambda keyword along with argument defining expression list comprehension. have then printed them users. result, have successfully converted Two-Dimensional irregular List into flattened List. Next TopicPair Plot Python prev next