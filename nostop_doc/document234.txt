next prev Python Join List this topic, will discuss join more lists with different functions Python. Before going through concepts, let's take brief introduction Python List. Python List collection multiples items that grouped same name. store different data types (integer, string, float, etc.) items inside square bracket which separated comma. Program print Python list List.py list characters List1 ['A', 'B', 'C', 'D', 'E'] list integers List2 5,] mixed lists List3 ['A', 'C', 'E', print Display List1 List1) print Display List2 List2) print Display List3 List3) Output Display List1 ['A', 'B', 'C', 'D', 'E'] Display List2 Display List3 ['A', 'C', 'E', When join more lists together Python program, gives joined lists. this process called composition joining lists. Let's discuss different ways join more lists Python: Join lists Python using join() function delimiters Join list Python using join() function without delimiters Join integers list Python using map() function Join lists Python using loop append() function Join multiple lists Python using itertools.chain() method Join lists Python using plus operator Join lists Python using multiply asterisk operator Join lists Python using extend() function Join lists Python using join() function join() function used join iterable list another list, separated specified delimiters such comma, symbols, hyphen, etc. Syntax str_name.join( iterable) str_name: name delimiter that separates iterable list. iterable: list that contains elements joins with delimiter. Return Value: returns concatenated list that separated specified delimiters. Note: iterable list contains non-string values items, throws TypeError exception. Program join lists using join() function delimiter Join.py List1 "Apple", "Orange", "Banana", "Mango", "Grapes" Str2 comma delimiter join() function join List1 with delimiter Str2 Str2.join( List1) print join list print Display concatenated List1 using join() function delimiter", Str2) List2 "Sunday", "Monday", "Tuesday", "Wednesday", "Thursday" Str3 hyphen delimiter join() function join List2 with delimiters Str3 Str3.join( List2) print join list print Display concatenated List2 using join() function delimiter", Str3) Output Display concatenated List1 using join() function delimiter Apple, Orange, Banana, Mango, Grapes Display concatenated List2 using join() function delimiter Sunday Monday Tuesday Wednesday Thursday Program join list without using delimiter Prog.py declare python list 'j', 'a', 'v', 'a', 't', 'p', 'o', 'i', 'n', 't' print Display elements List Lt1) declare empty string without defining delimiter Ret L2.join( Lt1) join method join list with print Display List without using delimiters", Ret) Output Display elements List ['j', 'a', 'v', 'a', 't', 'p', 'o', 'i', 'n', 't'] Display List without using delimiters Join integers list using map() function Integer list: collects integers list called integer list, cannot join integer lists Python using join() function. Therefore, map() function that converts integer list into string. After that, join() function join map() function results with appropriate delimiters. Syntax: map(str, list_name) above syntax, map() function parameters, list_name, str. Where list_name name integers list represents string. map() function converts list_name into string (str). Program map() function join() function list Let's create program convert given integers list into string using map() function then join() function join list. Convert.py map() function convert integer list into string list_map map(str, lt) join() function join lists delimiter comma lt2.join (list_map) print Display concatenated integers list using map() join() function res) Output Display concatenated integers list using map() join() function Program join lists Python using loop append() function append() function used sequentially join each element iterable list another list using loop. Let's create simple program elements list another list using append() function. Append.py List1 declare List1 List2 declare List2 print Given List1 List1)	 print Given List2 List2) loop iterate each element List2: List1.append(i) append() function insert each elements print Display concatenation list using append() function List1) Output Given List1 Given List2 Display concatenation list using append() function Program join multiple lists using itertools.chain() method Let's create simple program Python concatenate multiple lists using chain() method importing itertools package. New.py Python itertools.chain() method join list import itertools declare different lists [11, print Display first list print Display second list print Display third list itertools.chain() method join list result list (itertools.chain pass result variable str() function return concatenated lists print Concatenated list python using itertools.chain() method (result)) Output Display first list Display second list Display third list [11, Concatenated list python using itertools.chain() method Program join lists using operator Let's consider example join lists Python using plus operator. Mypro.py Create program join lists Python using operator declare lists characters list1 'A', 'B', 'C', 'D', 'E'] list2 'F', 'G', 'H', 'I', 'J'] join characters lists using operator lt_sum1 list1 list2 declares lists integers list3 '1', '2', '3', '4', '5'] list4 '6', '7', '8', '9', '10'] join integers lists using operator lt_sum2 list3 list4 display concatenation list print Join list characters Python using operator: str(lt_sum1)) display concatenation list print Join list integers Python using operator: str(lt_sum2)) Output Join list characters Python using operator: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'] Join list integers Python using operator: ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'] Program join list using multiply operator Consider example join lists Python using operator. Mypro2.py declare lists characters List1 'A', 'B', 'C', 'D', 'E'] List2 'F', 'G', 'H', 'I', 'J'] print Display character List1 List1) print Display character List2 List2) join characters lists using operator lt_sum1 [*List1, *List2] declares lists integers List3 List4 print Display integer List3 List3) print Display integer List4 List4) join integers lists using operator lt_sum2 [*List3, *List4] display concatenation list print Join characters list Python using operator: str(lt_sum1)) display concatenation list print Join integers list Python using operator: str(lt_sum2)) Output Display integer List3 Display integer List4 Join characters list Python using operator: ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J'] Join integers list Python using operator: Program join lists Python using extend() method Let's write simple program join lists using extend() method Python. Prog.py takes integers lists List1 List2 print Display List1 List1) print Display List1 List2) takes string lists List3 'RED', 'BLUE', 'BLACK'] List4 'BROWN', 'PURPLE', 'GREY' print Display List3 List3) print Display List4 List4) extend() method join lists List1.extend(List2) List3.extend(List4) print concatenation lists print( Adding lists integers Python using extend() function: str(List1)) print( Adding lists strings Python using extend() function: str(List3)) Output Display List1 Display List1 Display List3 ['RED', 'BLUE', 'BLACK'] Display List4 ['BROWN', 'PURPLE', 'GREY'] Adding lists integers Python using extend() function: Adding lists strings Python using extend() function: ['RED', 'BLUE', 'BLACK', 'BROWN', 'PURPLE', 'GREY'] Next Topicstrip() function Python prev next