next prev Python List Comprehension Generator Expression this tutorial, will discuss some important differences between list comprehension generator expression. Both quite similar syntax, they have some significant differences. Let's have brief introduction list comprehension generator expression. What List Comprehension? List comprehension excellent create list. allows create list using loop conditional statement. perform task using lesser code. While normal list takes lines code, done single line. Let's understand following code. Example initialize empty list list range(20): 		list.append(i) print elements print(list) Output: same thing using list comprehension with just single line code. Example list range(20) print(list) Output: see, syntax list compression takes loop along with condition. also nested loop will reduce readability. Let's another example. Example Using Normal List square_cube=[] range(10): num%2==0: square_cube.append(num**2) else: square_cube.append(num**3) print(f"square_cube {square_cube}") Output: square_cube 125, 343, 729] Example Using List Comprehension square_cube=[n**2 n%2==0 else n**3 range(10)] print(f"With List-Conprehension {square_cube}") Output: With List Comprehension 125, 343, 729] both code same thing, filters number based condition num%2 ==0 accordingly execute either square_cube.append(num**2) square_cube.append(num**3). What Generator Expressions? Generator Expression similar list compression, uses parentheses square brackets Unlike list, returns generator object. Instead holding entire sequence memory, generator generates next element when needed. normal function terminates when return statement called. generator function uses yield statement, which saves state function picked from same state whenever function called. Generator expression provides facility create generator without using yield keyword. Let's understand following example. Example list_comprehension range(20) print(list_comprehension) Output: Example Generator Expression Generator Expression generator_expression range(20) print(generator_expression) Output: <generator object <genexpr> 0x7fa0e3f3b580> above code returns generator object; print value expression, need iterate generator object. generator_expression: 	print(i) Output: Here elements. difference between Generator expression List Comprehension. Difference between Generator Expression List Comprehension Both syntaxes quite similar, only difference being that list comprehension enclosed square brackets, whereas generator expression enclosed parentheses. generator yields elements, which means evaluates demand value. normal function with return statement terminated whenever encounters return statement, whereas Python restores memory entire list. main advantage generator expression over list memory efficiency. generator expression memory more efficient than list. Let's understand following example. Example import getsizeof from module from import getsizeof comp range(20000)] range(20000)) gives size list comprehension getsizeof(comp) print("x #gives size generator expression getsizeof(gen) print("y Output: difference while creating list Python reserves memory whole list calculates entire memory that will consume. generator expression generates next element sequence demand. calculates memory next value. Generators slower element sequence calculated yielded every time. state function saved generate value next time. Example List creation import timeit print(timeit.timeit('''list_com range(100) 0]''', number=1000000)) Output: 14.614160199999986 Example import timeit print(timeit.timeit('''gen_exp range(100) 0)''', number=1000000)) Output: 0.9265093000000206 see, there significant difference execution time. Generator expressions quite faster than list comprehension time-efficient. Conclusion This tutorial included basic introduction list comprehension generator expression. have also learned about some important differences between them. List comprehensions effectively reduce number lines, whereas generator expression generates values demand. comprehensions considered more Pythonic coding some. choose which best you. Next TopicPython Output Formatting prev next