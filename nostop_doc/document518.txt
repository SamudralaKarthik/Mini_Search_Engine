next prev Design Hashset Python know that HashSet famous class Java. HashSet used store values using hash table. this tutorial, will cover HashSet Python. will also learn about design HashSet Python. HashSet data structure created without using built-in hash table libraries. Before diving deep into this topic, let's understand core concepts. Introduction design HashSet without using hash table libraries. Below multiple different functions add(x) This method used insert value into HashSet. contains(x) used check whether value present HashSet not. remove(x) used delete from HashSet. HashSet doesn't have value, will nothing. Let's understand these methods below example. First, initialize HashSet call add(1) function. will into hash set. Call add(3), which will then call contains(1). will check whether present hash set. call contains(2), add(2), contains(2), remove(2), contains(2). output will returned true present, false present, true present, false present, respectively. Basic Operations HashSet Python perform some basic operations HashSet using following methods. Let's understand these methods. Adding values HashSet below example, will value hash using add() function. add() function value time. Let's following code. Example from import HashSet HashSet() obj.add(2) obj.add(7) obj.add(6) Output: Adding value: Adding value: Adding value: Removing values HashSet remove existing value using remove() function. Let's understand following code. Example from import HashSet HashSet() obj.add(2) obj.add(7) obj.add(6) obj.remove(7) obj.remove(6) Output: Adding value: Adding value: Adding value: Removed value: Removed value: Checking values exist HashSet this example, will demonstrate check whether particular value exists does contains() function. Let's understand following code. Example from import HashSet HashSet() obj.add(2) obj.add(7) obj.add(6) obj.contains(2) Output: Adding value: Adding value: Adding value: contains: Algorithm HashSet Python first step, define data structure called HashList. Then, initialize empty list new_list. Then, define update() function which found will storing Boolean value False. Now, loop each index same 'k', then new_list[i]=k found value True. value will inserted last list value found. next step define get() function, which will loop, value same key, output will True; otherwise, False. same 'k', delete value from list new_list. same process will applied remove() function. Now, will create Main class HashSet. This class will declare initialization function where key_space value 2096. hash_table will have list new_list type objects size key_space. Then, will create add() function, which hash_key key%key_space update hash_table[hash_key]. After that, will call remove function, which hash_key key_space, delete hash_table[hash_key]. After that, will call contains function, which hash_key key_space, hash_table[hash_key]. Let's step-wise implementation algorithm. Algorithm Create data structure called HashSet, Initialize like below new_list Define function update(). This will take found False each index new_list, same then new_list[i]:= found:= True come from loop found false, then insert new_list Define function get() This will take each new_list, same key, then return True return False Define function remove(). This will take each index new_list, same then delete new_list[i] create custom hashSet. There will methods follows Initialize this follows key_space 2096 hash_table:= list bucket type object size key_space Define function add(). This will take hash_key:= key_space call update(key) hash_table[hash_key] Define function remove(). This will take hash_key:= keymodkey_space delete from hash_table[hash_key] Define function contains(). This will take hash_key:= keymodkey_space return get(key) hash_table[hash_key] Implementation HashSet Python Here will implement above algorithm create Python program. will define classes: HashSet CreateHashset. Let's below code. Code #Design HashSet python #checking values will return output class class verifyvalues: #initialization function which list new_list __init__(self): self.new_list=[] #update vales function update(self, key): found=False enumerate(self.new_list): key==k: self.new_list[i]=key found=True break found: self.new_list.append(key) #get values function get(self, key): self.new_list: k==key: return True return False #remove values function remove(self, key): enumerate(self.new_list): key==k: self.new_list[i] #class HashSet main class class HashSet: #Initialization function __init__(self): self.key_space 2096 self.hash_table=[verifyvalues() range(self.key_space)] hash_values(self, key): hash_key=key%self.key_space return hash_key #add function add(self, key): self.hash_table[self.hash_values(key)].update(key) #remove function remove(self, key): self.hash_table[self.hash_values(key)].remove(key) #contains function contains(self, key): return self.hash_table[self.hash_values(key)].get(key) display(self): ls=[] self.hash_table: len(i.new_list)!=0:ls.append(i.new_list[0]) print(ls) ob HashSet() print(ob.hash_values(10)) print("Add 10") ob.add(10) print(ob.hash_values(6)) print("Add ob.add(6) print(ob.hash_values(5)) print("Add ob.add(5) print("Contains ",ob.contains(10)) print("Contains ",ob.contains(3)) print("Contains ",ob.contains(9)) Output: Contains True Contains False Contains False Contains True Remove Contains False Contains True Explanation above code, have created verifyvalues class that will check values given list. have added value using method. Then, checked Hash using contains(). values present, returns True, value present, returns False. removed using remove() function, values removed from hash set. used same process other values. Conclusion this tutorial, have discussed create HashSet Python, write algorithm implement using Python code. have described step-wise process create HashSet. have also explained basic operations that performed HashSet. Next TopicHow Extract YouTube Data Python (Data Scraping using BeautifulSoup) prev next