next prev Simple FLAMES game using Tkinter Python Python provides variety choices development (Graphical User Interface). Tkinter approach used most frequently among approaches. typical Python interface Python-supplied toolkit. fastest simplest approach construct apps with Python Tkinter. Tkinter makes building simple process. Making tkinter application tkinter's module imported Make primary window (container) many widgets like main window. widgets under event trigger. What exactly FLAMES acronym FLAMES stands Friends, Lovers, Affectionate, Marriage, Enemies, Siblings. well-known game played sleepovers young females, particularly preteens adolescents just beginning delve into realm crushes. Although cannot used exactly determine person right someone not, this game enjoyable play with friends. create Python apps, variety widgets like button, checkbutton, canvas, etc. employed. However, some those that will incorporate into program Button different types buttons Python application, utilise Button. Frame container which another widget placed arranged referred "frame." Entry single-line text field shown user using entry widget. frequently used receive data from users. Label label text that used display message other information about other widgets. Let's make adaptation simple FLAMES game. Walking through code begin with, will import python libraries into python program. will thus import Tkinter module. importing functs from tkinter module from tkinter import Then, will create method del_same_char() order remove characters that occurring commonly names. Followed loop which will help check mentioned information. character that common found, then that character will removed remaining list will concatenated will returned list along with True Flag. method removal common characters along with their respective occurrences del_same_char(lists01 lists02): 	for range(len(lists01)) 		for range(len(lists02)) 			# common char detected 			# then remove that particular char 			# return list concatenated 			# list with True Flag 			if lists01[i] lists02[j] 				c lists01[i] 				# removing char from list 				lists01.remove(c) 				lists02.remove(c) 				# concatenation list elements with 				# will border mark here 				lists03 lists01 ["*"] lists02 				# returning concatenated list with True flag 				return [lists03 True] Then, common characters exist, then concatenated list will returned along with False flag. common chars found returning concatenated list with False flag 	lists03 lists01 ["*"] lists02 	return [lists03 False] Then, will define method called get_status() determine status relationship between users. Where, will take name first player pl01, will check convert lower case, already lower case will replace blank spaces with empty string. And, last will generate list letters after executing aforementioned steps. method showing relationship status get_status() take player's name from Plyr01_field entry 	pl01 Plyr01_field.get() converting letters into lower case 	pl01 pl01.lower() replacing space with empty string 	pl01.replace(" making list letters chars 	pl01_list list(pl01) will repeat above steps again player now. Where, will take name second player pl02, will check convert lower case, already lower case will replace blank spaces with empty string. And, last will generate list letters after executing aforementioned steps. taking player's name from Plyr02_field entry 	pl02 Plyr02_field.get() 	pl02 pl02.lower() 	pl02.replace(" 	pl02_list list(pl02) Then, will initial value flag named processed true. After that, will while loop keep executing method del_same_char() order remove common repeating characters until common characters left. Then returned list will evaluated, concatenated list will taken sliced different lists after taking flag's current value lists pl01_List pl02_List will stored. taking flag True initially 	processed True keep calling del_same_char method until common chars found keep loop going until processed flag True 	while processed method calling storing return value 		rtrn_list del_same_char(pl01_list pl02_list) taking concatenated list from return list 		conct_list rtrn_list[0] taking flag value from return list 		processed rtrn_list[1] finding index border mark 		str_index conct_list.index("*") performing list slicing chars before stored pl01_list 		pl01_list conct_list[ str_index] chars after store pl02_list 		pl02_list conct_list[str_index Then total number remaining characters will counted from remaining lengths newly formed lists, result will stored count variable. After that, list acronyms word FLAMES will given form array. counting total remaining chars 	count len(pl01_list) len(pl02_list) list FLAMES acronyms 	result ["Friends" "Love" "Affection" "Marriage" "Enemy" "Siblings"] Next, will introduce another while loop keep checking until there only item left given array. After execution loop, will split list will store them separately. Then, after checking condition, list will formed after concatenation. condition satisfied, then resulting list will concatenated according that. keeping loop going until only item left result list 	while len(result) storing that index value from where need perform slicing 		slit_index (count len(result) these steps done performing anticlock-wise circular fashion counting 		if slit_index 			# slicing list 			right result[slit_index 			left result[ slit_index] 			# concatenating list 			result right left 		else 			result result[ len(result) Then, value will inserted entry using insert method. using insert method insert value text entry 	Value_fields.insert(10 result[0]) Then, clr_all() method will used reset clear entry boxes. this, will delete() method order delete data filled respective fields. method clearing data text entry boxes clr_all() 	Plyr01_field.delete(0 END) 	Plyr02_field.delete(0 END) 	Value_fields.delete(0 END) setting focus Plyr01_field entry 	Plyr01_field.focus_set() Then, will write main code, specifying colour background, window size, window title creating labels Player Player Relationship status along with mentioning background colours those labels. will then grid method formation these labels providing number column number then will create entry boxes similar manner where data like Player name, Player name relationship status will mentioned window. Main code __name__ "__main__" Creating window 	base Tk() Setting colour window 	base.configure(background 'light green') Setting configuration window 	base.geometry("350x125") setting name tkinter window 	base.title("Flames Game") Creating Player Name label 	labl01 Label(base text "Player Name: 				fg 'black' 'dark green') Creating Player Name label 	labl02 Label(base text "Player Name: 				fg 'black' 'dark green') Creating Relation Status label 	labl03 Label(base text "Relationship Status: 				fg 'black' 'red') grid funct used placing widgets certain positions tabular structure 	labl01.grid(row column sticky "E") 	labl02.grid(row column sticky "E") 	labl03.grid(row column sticky "E") Creating text entry filling entering info. 	Plyr01_field Entry(base) 	Plyr02_field Entry(base) 	Value_fields Entry(base) Then again, will grid method this time formation various entry boxes tabular structure screen displaying user, mentioning number, column number size. Next, will create button called submit button that will responsible submit data entered user. another button will also created, which will clear button, whose functionality will clear sort existing text data present entry boxes. Once again, grid method will used formation structure submit clear buttons screen, providing number column number. finally, will begin calling mainloop() method. using grid method placing widgets certain positions tabular structure ipadx keyword helps width entry space 	Plyr01_field.grid(row column ipadx "50") 	Plyr02_field.grid(row column ipadx "50") 	Value_fields.grid(row column ipadx "50") Creating Submit Button attaching get_status function 	btn01 Button(base text "Submit" "red" 					fg "black" command get_status) Creating Clear Button attaching clr_all function 	btn02 Button(base text "Clear" "red" 					fg "black" command clr_all) grid funct used placing widgets certain positions tabular structure 	btn01.grid(row column 	btn02.grid(row column Starting 	base.mainloop() Complete Code importing functs from tkinter module from tkinter import method removal common characters along with their respective occurrences del_same_char(lists01 lists02): 	for range(len(lists01)) 		for range(len(lists02)) 			# common char detected 			# then remove that particular char 			# return list concatenated 			# list with True Flag 			if lists01[i] lists02[j] 				c lists01[i] 				# removing char from list 				lists01.remove(c) 				lists02.remove(c) 				# concatenation list elements with 				# will border mark here 				lists03 lists01 ["*"] lists02 				# returning concatenated list with True flag 				return [lists03 True] common chars found returning concatenated list with False flag 	lists03 lists01 ["*"] lists02 	return [lists03 False] method showing relationship status get_status() take player's name from Plyr01_field entry 	pl01 Plyr01_field.get() converting letters into lower case 	pl01 pl01.lower() replacing space with empty string 	pl01.replace(" making list letters chars 	pl01_list list(pl01) taking player's name from Plyr02_field entry 	pl02 Plyr02_field.get() 	pl02 pl02.lower() 	pl02.replace(" 	pl02_list list(pl02) taking flag True initially 	processed True keep calling del_same_char method until common chars found keep loop going until processed flag True 	while processed method calling storing return value 		rtrn_list del_same_char(pl01_list pl02_list) taking concatenated list from return list 		conct_list rtrn_list[0] taking flag value from return list 		processed rtrn_list[1] finding index border mark 		str_index conct_list.index("*") performing list slicing chars before stored pl01_list 		pl01_list conct_list[ str_index] chars after store pl02_list 		pl02_list conct_list[str_index counting total remaining chars 	count len(pl01_list) len(pl02_list) list FLAMES acronyms 	result ["Friends" "Love" "Affection" "Marriage" "Enemy" "Siblings"] keeping loop going until only item left result list 	while len(result) storing that index value from where need perform slicing 		slit_index (count len(result) these steps done performing anticlock-wise circular fashion counting 		if slit_index 			# slicing list 			right result[slit_index 			left result[ slit_index] 			# concatenating list 			result right left 		else 			result result[ len(result) using insert method insert value text entry 	Value_fields.insert(10 result[0]) method clearing data text entry boxes clr_all() 	Plyr01_field.delete(0 END) 	Plyr02_field.delete(0 END) 	Value_fields.delete(0 END) setting focus Plyr01_field entry 	Plyr01_field.focus_set() Main code __name__ "__main__" Creating window 	base Tk() Setting colour window 	base.configure(background 'light green') Setting configuration window 	base.geometry("350x125") setting name tkinter window 	base.title("Flames Game") Creating Player Name label 	labl01 Label(base text "Player Name: 				fg 'black' 'dark green') Creating Player Name label 	labl02 Label(base text "Player Name: 				fg 'black' 'dark green') Creating Relation Status label 	labl03 Label(base text "Relationship Status: 				fg 'black' 'red') grid funct used placing widgets certain positions tabular structure 	labl01.grid(row column sticky "E") 	labl02.grid(row column sticky "E") 	labl03.grid(row column sticky "E") Creating text entry filling entering info. 	Plyr01_field Entry(base) 	Plyr02_field Entry(base) 	Value_fields Entry(base) using grid method placing widgets certain positions tabular structure ipadx keyword helps width entry space 	Plyr01_field.grid(row column ipadx "50") 	Plyr02_field.grid(row column ipadx "50") 	Value_fields.grid(row column ipadx "50") Creating Submit Button attaching get_status function 	btn01 Button(base text "Submit" "red" 					fg "black" command get_status) Creating Clear Button attaching clr_all function 	btn02 Button(base text "Clear" "red" 					fg "black" command clr_all) grid funct used placing widgets certain positions tabular structure 	btn01.grid(row column 	btn02.grid(row column Starting 	base.mainloop() Output output aforementioned code been attached below form screenshot. There three such screenshots attached. Displaying default Screen after loaded, with empty boxes that filled with data user. Displaying result Screen after names have been entered empty boxes that were filled with data user, thus providing result their relationship status. Displaying result Screen after names have been entered empty boxes that were filled with data user, thus providing result their relationship status. Next TopicYouTube Video Downloader using Python Tkinter prev next