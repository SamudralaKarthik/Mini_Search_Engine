next prev Write Python Program Print Doubly Linked List Reverse Order this tutorial, will write Python program print reversed linked list. Doubly-linked list circular linked list which creates circular linked list. solve this problem will following steps Traverse linked list using pointer Swap prev next pointers nodes last, change head pointer doubly linked list Example class Node(object): Singly linked node __init__(self, data=None, next=None, prev=None): self.data data self.next next self.prev prev class Doubly_Linked_List(object): __init__(self): self.head None self.tail None self.count insert_element(self, data): Append item new_item Node(data, None, None) self.head None: self.head new_item self.tail self.head else: new_item.prev self.tail self.tail.next new_item self.tail new_item self.count iter(self): Iterate list current self.head while current: item_val current.data current current.next yield item_val print_list(self): #Node current will point head current self.head; if(self.head None): print("List empty"); return; print("Nodes doubly linked list: while(current None): #Prints each node incrementing pointer. print(current.data),; current current.next; print_reversed_list(self): node self.iter(): print(node) reverse(self): Reverse linked list. current self.head while current: temp current.next current.next current.prev current.prev temp current current.prev temp self.head self.head self.tail self.tail temp node Doubly_Linked_List() node.insert_element(4) node.insert_element(2) node.insert_element(8) node.insert_element(1) node.insert_element(5) node.insert_element(12) print("Print Doubly Linked list items.print_list() print("Print Reversed Doubly Linked List") items.reverse() items.print_reversed_list() Output Print Doubly Linked list Nodes doubly linked list: Print Reversed Doubly Linked List Explanation above code, have created class Node that initialized singly linked list. create doubly linked list, initialized doubly linked list class where assigned initial value head, prev next none count zero. defined insert_element() function which call Node class insert elements. First check head none, insert item head assign head into tail. Otherwise, assigned tail new_item.pre, node tail.next tail. increased count every insertion element. reverse() function, assign current variable that holds head list. checked double-linked list non-empty, store current's next into temp variable traverse doubly linked list, assign current's prev current's next temp current's prev. code created object Doubly_Linked_List class insert elements list. called print_list() method print simple doubly linked list called reverse() function print reverse linked list. time complexity will O(N) where represents number nodes doubly linked list auxiliary space will O(N). Reverse Doubly Linked List using Stack reverse linked list using stack well. will follow below approach First, traverse linked list push node's data into stack. Then keep popping elements stack updating Doubly Linked List. Let's implement above approach into Python code Example class Node(object): Singly linked node __init__(self, data=None, next=None, prev=None): self.data data self.next next self.prev prev class Doubly_Linked_List(object): __init__(self): self.head None self.tail None self.count push(self, data): Append item new_item Node(data, None, None) self.head None: self.head new_item self.tail self.head else: new_item.prev self.tail self.tail.next new_item self.tail new_item self.count iter(self): Iterate list current self.head while current: item_val current.data current current.next yield item_val print_list(self): #Node current will point head current self.head; if(self.head None): print("List empty"); return; print("Nodes doubly linked list: while(current None): #Prints each node incrementing pointer. print(current.data),; current current.next; print_reversed_list(self): node self.iter(): print(node) reverse_using_stacks(self): stack temp self.head while temp None: stack.append(temp.data) temp temp.next elements stack sequence stack temp self.head while temp None: temp.data stack.pop() temp temp.next node Doubly_Linked_List() node.push(4) node.push(2) node.push(8) node.push(1) node.push(5) node.push(12) print("Print Doubly Linked list node.print_list() print("Print Reversed Doubly Linked List") node.reverse_using_stacks() node.print_reversed_list() Output Print Doubly Linked list Nodes doubly linked list: Print Reversed Doubly Linked List time complexity will O(N) auxiliary space will O(N). Next TopicApplication live rate using Tkinter Python prev next