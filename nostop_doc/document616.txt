next prev Rank-based Percentile Calculator Python Programming language like Python provides various options develop Graphical User Interface, abbreviated GUI. Among these methods used GUI, Tkinter most widely utilized library. following tutorial, will creating application calculate Percentile basis Rank with help Tkinter library Python. Before, briefly understand what Percentile means. What Percentile? percentile statistical indicator generally utilized identify certain segment sample population. more precise way, utilize percentile indicate value variable under consideration) below which particular percentage sample population falls. instance, consider height distribution English people living United Kingdom; saying that height value recognizes 60th Percentile, implies that English people living United Kingdom shorter than imagine, percentiles generally utilized lots statistical studies when reporting results surveys measurements large populations. Calculate Percentiles? Suppose that have collected height people. order evaluate percentiles referred this distribution, first step sort values ascending order. this point, assume asked calculate 65th Percentile distribution. will calculate so-called rank percentile/100. following case, 65/100 0.65. must multiply rank total number samples distribution following 67); obtain 0.65 44.85. Since result whole number, approximate value nearest whole number (45 this case). next step, will find height value corresponding 45th position within sample distribution; that value corresponds 65th Percentile. following case, result whole number. process further directly finding corresponding value sample distribution; that already Percentile. Now, start building project using Tkinter Python Building Rank-based Percentile Calculator using Tkinter approach building Rank-based Percentile Calculator with help Tkinter library Python divided into different steps better understanding. These steps follows: Step will start importing Tkinter library. Step will then define necessary functions project. Step will then create main window (container). Step will then number widgets main window. understand implementation these steps detail. Importing required libraries will start importing Tkinter library. This library will allow build Graphical User Interface Python. consider following snippet code demonstrating implementation above statement. File: percentileCalci.py importing required widgets methods from tkinter library from tkinter import Explanation: above snippet code, have imported widgets methods from Tkinter library required this project. Defining required functions Once have imported required libraries modules, will define functions necessary project. These functions include function reset entries entry fields function calculate percentile given data. consider following snippet code illustrating implementation above statement. File: percentileCalci.py function reset entries reset(): using delete() method delete entries entry fields total_participants_field.delete(0, END) rank_field.delete(0, END) percentile_field.delete(0, END) setting focus first entry field total_participants_field.focus_set() function calculate percentile calculate_percentile(): deleting previous result percentile_field.delete(0, END) getting values from entry fields students int(total_participants_field.get()) rank int(rank_field.get()) calculating percentile given data rounding result decimals round((students rank) students 100, printing result percentile field percentile_field.insert(10, str(res)) Explanation: above snippet code, first function have defined reset(). Within this function, have used delete() method deleted entries entry fields. have then used focus_set() method total_participants_field field cursor focus that field. Next function have defined calculate_percentile(). deleted previous result, any, within this function, displayed percentile_field field. have then retrieved values from entry fields like total_participants_field rank_field using get() method stored them students rank variables. then calculated percentile given data rounded resultant decimals using round() method. last, have used insert() method insert resultant value percentile_field field. Creating main window will create main window display widgets data users. will Tk() class Tkinter library. will also some Tk() class methods decorate main window. consider following snippet code demonstrating implementation above statement. File: percentileCalci.py main function __name__ "__main__": creating object Tk() class guiWindow Tk() setting title main window guiWindow.title("Percentile Calculator JAVATPOINT") setting size main window guiWindow.geometry("500x500+500+250") disabling resizable option better guiWindow.resizable(0, setting background color #fff5ee guiWindow.configure(bg "#fff5ee") Explanation: above code snippet, created object Tk() class. have then added title main window using title() method. have then defined size main window using geometry() method. have also disabled resizable option better User Interface with help resizable() method. last, have used configure() method background color #fff5ee. Adding Widgets main window that have created main window application, time some widgets display data users. will start adding some frames main window. These frames will responsible grouping organizing other widgets like Labels, Entry Fields, Buttons. will Frame() widget create frames. consider snippet code below illustrating implementation Frame() widgets. File: percentileCalci.py first frame maintain heading label application titleFrame Frame(guiWindow, "#fff5ee") second frame maintain entry fields application fieldFrame Frame(guiWindow, "#fff5ee") third frame maintain result field application resultFrame Frame(guiWindow, "#fff5ee") using pack() method position frames application titleFrame.pack(expand True, fill "both") fieldFrame.pack(expand True, fill "both") resultFrame.pack(expand True, fill "both") Explanation: above snippet code, have used Frame() widget created three frames main window. These frames will allow organize heading, labels, entry fields, result section. have then used pack() method position these frames application. will label first frame display heading application. will Label() widget create label master widget titleFrame. will also some text some decoration using some other parameters. consider following snippet code demonstrating same. File: percentileCalci.py defining label that display heading application mainLabel Label( titleFrame, text "WELCOME RANK-BASED \nPERCENTILE CALCULATOR", font ("cambria", 16), "#fff5ee", "#000000" using pack() method position lable application mainLabel.pack(expand True, fill "both") Explanation: above snippet code, have used Label() widget create label display heading main window. have then master widget titleFrame frame along with text displayed, font style size, background, foreground color. have then used pack() method value expand parameter True fill parameter both positioning label frame. will insert other labels into main window display information like Total Participants, Rank, Percentile. consider following snippet code demonstrating same: File: percentileCalculator.py creating "Total Participants" label total_participants_label Label( fieldFrame, text "Total Participants:", "#fff5ee", "#a0522d" creating "Rank" label rank_label Label( fieldFrame, text "Rank:", "#fff5ee", "#a0522d" creating "Percentile" label percentile_label Label( resultFrame, text "Percentile:", "#fff5ee", "#a0522d" Explanation: above snippet code, have defined three labels total_participants_label, rank_label, percentile_label with help Label() widget. have master widget total_participants_label rank_label labels fieldFrame frame percentile_label label resultFrame frame. have also included text displayed along with background foreground color. will position these labels main window their respective frames using grid() method. This method will allow place widgets two-dimensional (2-D) table. master widget split into different rows columns; each cell resulting table hold widget. consider following snippet code illustrating usage grid() method. File: percentileCalculator.py using grid() method position labels grid manner total_participants_label.grid(row column padx pady sticky rank_label.grid(row column padx pady sticky percentile_label.grid(row column padx pady sticky Explanation: above code snippet, used grid() method labels created earlier. have value row, column, padx, pady, sticky parameters each label's grid() method. will some entry fields main window with help Entry() widget. This will allow enter data display result. following snippet code illustrating implementation Entry() widget project. File: percentileCalculator.py creating entry field total participants total_participants_field Entry( fieldFrame, "#fffafa" creating entry field rank rank_field Entry( fieldFrame, "#fffafa" creating entry field percentile percentile_field Entry( resultFrame, "#fffafa" Explanation: above snippet code, have used Entry() widget create three entry fields, namely total_participants_field, rank_field, percentile_field. have also master widget total_participants_field rank_field field fieldFrame frame percentile_field field resultFrame frame. have also background color these fields #fffafa. will again grid() method these fields rows columns need. following snippet code illustrating implementation grid() method positioning fields created above. File: percentileCalculator.py using grid() method position entry fields grid manner total_participants_field.grid(row column padx pady sticky rank_field.grid(row column padx pady sticky percentile_field.grid(row column padx pady sticky Explanation: above code snippet, have used grid() method fields created earlier place them table format. have defined values row, column, padx, pady, sticky parameters grid() method. will buttons main window with help Button() widget execute functions created earlier. consider following snippet code demonstrating implementation Button() widget. File: percentileCalci.py creating "CALCULATE" button calculate_button Button( fieldFrame, text "CALCULATE", "#008000", "#ffffff", command calculate_percentile creating "RESET" button reset_button Button( resultFrame, text "RESET", "#ff0000", "#ffffff", command reset Explanation: above snippet code, have used Button() widget create buttons, respectively. first button CALCULATE button that will call calculate_percentile function through command parameter calculate percentile given data. second button RESET button that will call reset function through command parameter clear entries entry fields cursor total_participant_field field. will grid() method positioning buttons table format better User Interface. consider following snippet code understand same. File: percentileCalci.py using grid() method position buttons grid manner calculate_button.grid(row column padx pady sticky reset_button.grid(row column padx pady sticky Explanation: above code snippet, have used grid() method buttons created earlier place them table format. have defined values row, column, padx, pady, sticky parameters grid() method. last, will mainloop() method main window. following snippet code illustrating implementation mainloop() method. File: percentileCalci.py running main window guiWindow.mainloop() Explanation: above snippet code, have used mainloop() method main window. Hence, have successfully created project calculate percentile based rank participant. save Python project file execute following command result. Syntax: python percentileCalci.py Before output, complete snippet code "Rank-based Percentile Calculator with GUI" project Python. Complete Project Code following complete snippet code "Rank-based Percentile Calculator with GUI" project Python. File: percentileCalci.py importing required widgets methods from tkinter library from tkinter import function reset entries reset(): using delete() method delete entries entry fields total_participants_field.delete(0, END) rank_field.delete(0, END) percentile_field.delete(0, END) setting focus first entry field total_participants_field.focus_set() function calculate percentile calculate_percentile(): deleting previous result percentile_field.delete(0, END) getting values from entry fields students int(total_participants_field.get()) rank int(rank_field.get()) calculating percentile given data rounding result upto decimals round((students rank) students 100, printing result percentile field percentile_field.insert(10, str(res)) main function __name__ "__main__": creating object Tk() class guiWindow Tk() setting title main window guiWindow.title("Percentile Calculator JAVATPOINT") setting size main window guiWindow.geometry("500x500+500+250") disabling resizable option better guiWindow.resizable(0, setting background #fff5ee guiWindow.configure(bg "#fff5ee") first frame maintain heading label application titleFrame Frame(guiWindow, "#fff5ee") second frame maintain entry fields application fieldFrame Frame(guiWindow, "#fff5ee") third frame maintain result field application resultFrame Frame(guiWindow, "#fff5ee") using pack() method position frames application titleFrame.pack(expand True, fill "both") fieldFrame.pack(expand True, fill "both") resultFrame.pack(expand True, fill "both") defining label that display heading application mainLabel Label( titleFrame, text "WELCOME RANK-BASED \nPERCENTILE CALCULATOR", font ("cambria", 16), "#fff5ee", "#000000" using pack() method position lable application mainLabel.pack(expand True, fill "both") creating "Total Participants" label total_participants_label Label( fieldFrame, text "Total Participants:", "#fff5ee", "#a0522d" creating "Rank" label rank_label Label( fieldFrame, text "Rank:", "#fff5ee", "#a0522d" creating "Percentile" label percentile_label Label( resultFrame, text "Percentile:", "#fff5ee", "#a0522d" using grid() method position labels grid manner total_participants_label.grid(row column padx pady sticky rank_label.grid(row column padx pady sticky percentile_label.grid(row column padx pady sticky creating entry field total participants total_participants_field Entry( fieldFrame, "#fffafa" creating entry field rank rank_field Entry( fieldFrame, "#fffafa" creating entry field percentile percentile_field Entry( resultFrame, "#fffafa" using grid() method position entry fields grid manner total_participants_field.grid(row column padx pady sticky rank_field.grid(row column padx pady sticky percentile_field.grid(row column padx pady sticky creating "CALCULATE" button calculate_button Button( fieldFrame, text "CALCULATE", "#008000", "#ffffff", command calculate_percentile creating "RESET" button reset_button Button( resultFrame, text "RESET", "#ff0000", "#ffffff", command reset using grid() method position buttons grid manner calculate_button.grid(row column padx pady sticky reset_button.grid(row column padx pady sticky running main window guiWindow.mainloop() Output: Next TopicURL shortner Python prev next