next prev Python Command line arguments Python supports programs that command line, complete with command line arguments. input parameter that needs passed script when executing them. means interact with command-line interface scripts. provides getopt module, which command line arguments options parsed. What argument passing? command often used summary files folders present particular directory. argparse? means communicate between writer program user which does require going into code making changes script. provides ability user enter into command-line arguments. Access command line arguments Python module provides access command-line arguments sys.argv. solves purposes: Python module basic module that shipped with Python distribution from early days similar approach library using argc/argv access arguments. module implements command-line arguments simple list structure named sys.argv. Each list element represents single argument. first sys.argv[0] name Python script. other list elements sys.argv[1] sys.argv[n]- command line arguments delimiter between arguments, space used. Argument values that contain space have quoted, accordingly. stores command-line arguments into list; access using sys.argv. This very useful simple read command-line arguments String. import print(type(sys.argv)) print('The command line arguments are:') sys.argv: print(i) Python getopt module Python getopt module extends separation input string parameter validation. Based getopt function, allows both short long options, including value assignment. very similar getopt() function parsing command line parameters. useful parsing command line arguments where want user enter some options. Code import getopt import argv sys.argv[1:] try: opts, args getopt.getopt(argv, 'hm:d', ['help', 'my_file=']) print(opts) print(args) except getopt.GetoptError: Print message something useful print('Something went wrong!') sys.exit(2) Python argparse module offers command-line interface with standardized output, whereas former solutions leave most work your hands. argparse allows verification fixed optional arguments with name checking either UNIX style. preferred parse command-line arguments. provides option such positional arguments, default value arguments, helps message, specifying data type argument etc. makes easy write user-friendly command-line interfaces. automatically generates help usage messages issues errors when user gives invalid arguments program. getopt.getopt method This method used parsing command line options parameter list. Syntax: getopt.getopt(args, options, [long_options]) args- argument list that needs parsed. options- string option letters that script wants recognize, with options that require argument which should followed colon(:). long_options(optional)- must string with names long options, which should supported. This method returns value consisting elements, i.e. list (option, value) pairs, list program arguments left after option list stripped. Each option-and-value pair returned option first element, prefixed with hyphen short options (e.g.,'-x') hyphens long options (e.g., '--long-option'). Exception getopt.GetoptError This exception arises when unrecognized option found argument list when option requiring argument given none. argument exception string that indicates cause error. attributes give error message related option. Code #!/usr/bin/python import sys, getopt main(argv): inputfile outputfile try: opts, args getopt.getopt(argv,"hi:o:",["ifile=","ofile="]) except getopt.GetoptError: print 'test.py <inputfile> <outputfile>' sys.exit(2) opt, opts: '-h': print 'test.py <inputfile> <outputfile>' sys.exit() elif ("-i", "--ifile"): inputfile elif ("-o", "--ofile"): outputfile print 'Input file inputfile print 'Output file outputfile __name__ "__main__": main(sys.argv[1:]) Output: test.py usage: test.py <inputfile> <outputfile> test.py BMP usage: test.py <inputfile> <outputfile> test.py inputfile Input file inputfile Output file command line arguments python? Module Python version arguments sys.argv (basic) argparse Build command line interface docopt Created command line interfaces fire Automatically generate command line interfaces (CLIs) optparse Deprecated Docopt Docopt used create command line interfaces. from docopt import docopt __name__ '__main__': arguments docopt(__doc__, version='Example print(arguments) Fire Python Fire automatically generates command line interface; only need line code. Unlike other modules, works instantly. don't need define arguments; methods linked default. install type: install fire Define class: import fire class Python(object): hello(self): print("Hello") openfile(self, filename): print("Open file '" filename "'") __name__ '__main__': fire.Fire(Python) have options matching class methods: python example.py hello python example.py openfile filename.txt Next TopicPython Tutorial prev next