next prev Calculator using PyQt5 Python this post, we'll look PyQt5 used develop calculator. fantastic coding project idea beginners calculator. should attempt creating calculator programming. programme that asks user's date birth input returns user's output. you're interested learning create calculator Python, this post you. We'll introduce Python tutorial building calculator this post. Python bindings part cross-platform PyQt5 toolkit. capabilities simplicity offered this toolkit make quite simple create interactive desktop application. must installed using following command. install PyQt5 This project calculate present person, which used determine entering their certain details like date birth present date. Some basic PyQt5 requirements before starting project Python, using virtual environment handle dependencies most effective method. Simply said, virtual environment local directory that libraries needed particular project. contrast, system-wide installation those libraries would have impact your projects. Every programme must include precisely instance QApplication,this requirement import line must before several components will function. Therefore, will required almost every PyQt programme create. PyQt app's buttons, labels, windows, dialogue boxes, progress bars, etc. examples widgets. Widgets frequently nested, just like HTML components. button, instance, found window, which itself include label. Support custom styles Qt's advantages. alter appearance feel your application using variety ways. addition aforementioned, style sheets allow alter appearance your application. This equivalent Steps Implementing Make head label game's title attributes Create label date birth QDateEdit object beneath receive date attributes. Build label with provided date underneath then create QDateEdit object accept updated date modify attributes. Design push button that, when pressed, calculates date. Create result label display outcome, such computed age. Implementation back When date changes, action initial QDateEdit. Within first date edit action, obtain second date edit's date first date edit's maximum date. When date changes, action second date update. Within second date edit action, obtain first date edit's date second date edit's minimum date. Alter date adjustments such that first date should earlier than second date. Make push button something. Using result label, compute difference between dates from date modifications display screen indicate difference. Walking through code importing required libraries from PyQt5.QtWidgets import from PyQt5 import QtCore, QtGui from PyQt5.QtGui import from PyQt5.QtCore import import First all, will importing required libraries into program efficacy. libraries imported include QtWidgets, QtCore, QtGui sys. class Window(QMainWindow): 	def __init__(self): 		super().__init__() setting title window 		self.setWindowTitle("Age calculator") setting geometry window 		self.setGeometry(100, 100, 500, 400) call UiComponents func 		self.UiComponents() displaying various widgets 		self.show() Then, will create class window initialize properties. Then, will title window "Age Calculator" after that will geometry. After that, will display widgets present window. function components being defined 	def UiComponents(self): defining heading label 		heading QLabel("Age Calculator", self) geometry heading 		heading.setGeometry(100, 300, selecting font 		font QFont('Times', 		font.setBold(True) 		font.setItalic(True) 		font.setUnderline(True) setting font head 		heading.setFont(font) adjusting alignment head 		heading.setAlignment(Qt.AlignCenter) 		heading.setStyleSheet("color green;") Next, will create function introduce components window. Then, will create heading label will geometry. After this, will introduce font properties font label respectively, concluding setting alignment colour heading label. Date birth label 		dateOfBirth QLabel("Date Birth", self) geometry dateOfBirth label 		dateOfBirth.setGeometry(0, 250, alignment font dateOfBirth label 		dateOfBirth.setAlignment(Qt.AlignCenter) 		dateOfBirth.setFont(QFont('Times', 10)) Then, will create dateOfBirth label taking date birth user will geometry. After this, will introduce font properties font label respectively, concluding setting alignment dateOfBirth label. label present date 		present QLabel("Given Date", self) setting present label's geometry 		present.setGeometry(300, 250, setting alignment font present label 		present.setAlignment(Qt.AlignCenter) 		present.setFont(QFont('Times', 10)) Then, will create present label taking current date from user will geometry. After this, conclude setting alignment font style present label. Initializing QDateEdit date birth 		self.frst QDateEdit(self) setting geometry frst 		self.frst.setGeometry(25, 130, 200, setting font alignment frst 		self.frst.setAlignment(Qt.AlignCenter) 		self.frst.setFont(QFont('Arial', actions frst with change date 		self.frst.dateChanged.connect(self.frst_action) Next, initialize QDateEdit will edit first date. Then, will create frst label editing first date user will geometry. After this, conclude setting alignment, font style will action label react according change date. create QDateEdit present date 		self.scnd QDateEdit(self) geometry scnd 		self.scnd.setGeometry(275, 130, 200, font alignment scnd 		self.scnd.setAlignment(Qt.AlignCenter) 		self.scnd.setFont(QFont('Arial', actions scnd with change date 		self.scnd.dateChanged.connect(self.scnd_action) Next, initialize QDateEdit will edit date. Then, will create scnd label editing date user will geometry. After this, conclude setting alignment, font style will action label react according change date. creating push button calculating 		calculates QPushButton("Calculate", self) geometry push button 		calculates.setGeometry(200, 210, 100, color effect push button 		clr QGraphicsColorizeEffect() 		clr.setColor(Qt.darkGreen) 		calculates.setGraphicsEffect(clr) action calculation button created 		calculates.clicked.connect(self.find_age) Then, will create push button starting calculate user. push button will have name calculate. Then, will geometry after that colour will along with graphic effects. Lastly, will also action that needs taken after button will pressed. Adding result label display result 		self.result QLabel(self) geometry result label 		self.result.setGeometry(50, 280, 400, style sheet font result label 		self.result.setAlignment(Qt.AlignCenter) 		self.result.setFont(QFont('Times', 12)) Updating stylesheet details 		self.result.setStyleSheet("QLabel" 								"{" 								"border solid black;" 								"background lightgrey;" 								"}") converting label into multi line label 		self.result.setWordWrap(True) Then, will create result label displaying result calculated user will geometry. After this, conclude setting alignment font style result label. Next, will update style sheet same mentioning properties their values like border, background, etc. Lastly, will convert single line label multi line label. setting default dates frst scnd 		self.frst.setDate(QDate(2000, 		self.scnd.setDate(QDate(2020, func called with frst date edit 	def frst_action(self): getting scnd date 		date self.scnd.date() setting date maximum frst 		self.frst.setMaximumDate(date) func called with frst date edit 	def scnd_action(self): getting frst date 		date self.frst.date() setting date maximum frst 		self.scnd.setMinimumDate(date) After setting default dates frst scnd labels, will call function making changes first date setting maximum date Then, will call function making changes second date setting maximum date func called push button being pressed 	def find_age(self): getting frst 		get_Qdate1 self.frst.date() 		brth_year get_Qdate1.year() 		brth_month get_Qdate1.month() 		brth_day get_Qdate1.day() getting scnd 		get_Qdate2 self.scnd.date() 		present_year get_Qdate2.year() 		present_month get_Qdate2.month() 		present_day get_Qdate2.day() Next, will create function called when push button that created earlier will pressed. First, will take first date that birth date format day, month year. Then, will take second date that present date format day, month year. birth date greater than present brth_month then don't count current month then should added date order subtract that date take remaining days 		month [31, 		if (brth_day present_day): 			present_month present_month 			present_day present_day month[brth_month month birth exceeds present month, then don't count current year addition should done month that afterwards subtract calculate difference 		if (brth_month present_month): 			present_year present_year 			present_month present_month Then, will if-else condition calculate accurate result. Don't count current month birth date exceeds specified brth_month, instead, date, deduct birth date from that number, then count days that left over. Otherwise, birth month greater than current month, don't count current year month instead that later deduct figure difference. calc_day present_day brth_day 		calc_month present_month brth_month 		calc_year present_year brth_year text got, result 		self.result.setText(str(calc_day) Day(s), str(calc_month) 							+ Month(s), str(calc_year) Year(s)") Then, will calculate number days, months years between birth present date. That will done subtracting birth from present day, subtracting month birth from present month subtracting year birth from present year. Then, will display this result result label form such day/days, month/months year/years actual user. creating pyqt5 application Base QApplication(sys.argv) creating instance created Window window Window() starting application sys.exit(Base.exec()) Finally, will creating pyqt5 application creating base. Then, will create instance that window where application will displayed run. finally, will start execution application exiting base. complete code following complete code that will used create calculator: Python program create Calculator using PyQt5 importing required libraries from PyQt5.QtWidgets import from PyQt5 import QtCore, QtGui from PyQt5.QtGui import from PyQt5.QtCore import import class Window(QMainWindow): 	def __init__(self): 		super().__init__() setting title window 		self.setWindowTitle("Age calculator") setting geometry window 		self.setGeometry(100, 100, 500, 400) call UiComponents func 		self.UiComponents() displaying various widgets 		self.show() function components being defined 	def UiComponents(self): defining heading label 		heading QLabel("Age Calculator", self) geometry heading 		heading.setGeometry(100, 300, selecting font 		font QFont('Times', 		font.setBold(True) 		font.setItalic(True) 		font.setUnderline(True) setting font head 		heading.setFont(font) adjusting alignment head 		heading.setAlignment(Qt.AlignCenter) 		heading.setStyleSheet("color green;") Date birth label 		dateOfBirth QLabel("Date Birth", self) geometry dateOfBirth label 		dateOfBirth.setGeometry(0, 250, alignment font dateOfBirth label 		dateOfBirth.setAlignment(Qt.AlignCenter) 		dateOfBirth.setFont(QFont('Times', 10)) label present date 		present QLabel("Given Date", self) setting present label's geometry 		present.setGeometry(300, 250, setting alignment font present label 		present.setAlignment(Qt.AlignCenter) 		present.setFont(QFont('Times', 10)) Initializing QDateEdit date birth 		self.frst QDateEdit(self) setting geometry frst 		self.frst.setGeometry(25, 130, 200, setting font alignment frst 		self.frst.setAlignment(Qt.AlignCenter) 		self.frst.setFont(QFont('Arial', actions frst with change date 		self.frst.dateChanged.connect(self.frst_action) create QDateEdit present date 		self.scnd QDateEdit(self) geometry scnd 		self.scnd.setGeometry(275, 130, 200, font alignment scnd 		self.scnd.setAlignment(Qt.AlignCenter) 		self.scnd.setFont(QFont('Arial', actions scnd with change date 		self.scnd.dateChanged.connect(self.scnd_action) creating push button calculating 		calculates QPushButton("Calculate", self) geometry push button 		calculates.setGeometry(200, 210, 100, color effect push button 		clr QGraphicsColorizeEffect() 		clr.setColor(Qt.darkGreen) 		calculates.setGraphicsEffect(clr) action calculation button created 		calculates.clicked.connect(self.find_age) Adding result label display result 		self.result QLabel(self) geometry result label 		self.result.setGeometry(50, 280, 400, style sheet font result label 		self.result.setAlignment(Qt.AlignCenter) 		self.result.setFont(QFont('Times', 12)) Updating stylesheet details 		self.result.setStyleSheet("QLabel" 								"{" 								"border solid black;" 								"background lightgrey;" 								"}") converting label into multi line label 		self.result.setWordWrap(True) setting dates frst scnd 		self.frst.setDate(QDate(2000, 		self.scnd.setDate(QDate(2020, func called with frst date edit 	def frst_action(self): getting scnd date 		date self.scnd.date() setting date maximum frst 		self.frst.setMaximumDate(date) func called with frst date edit 	def scnd_action(self): getting frst date 		date self.frst.date() setting date maximum frst 		self.scnd.setMinimumDate(date) func called push button being pressed 	def find_age(self): getting frst 		get_Qdate1 self.frst.date() 		brth_year get_Qdate1.year() 		brth_month get_Qdate1.month() 		brth_day get_Qdate1.day() getting scnd 		get_Qdate2 self.scnd.date() 		present_year get_Qdate2.year() 		present_month get_Qdate2.month() 		present_day get_Qdate2.day() birth date greater than present brth_month then don't count current month then should added date order subtract that date take remaining days 		month [31, 		if (brth_day present_day): 			present_month present_month 			present_day present_day month[brth_month month birth exceeds present month, then don't count current year addition should done month that afterwards subtract calculate difference 		if (brth_month present_month): 			present_year present_year 			present_month present_month calculating day, month year 		calc_day present_day brth_day 		calc_month present_month brth_month 		calc_year present_year brth_year text got, result 		self.result.setText(str(calc_day) Day(s), str(calc_month) 							+ Month(s), str(calc_year) Year(s)") creating pyqt5 application Base QApplication(sys.argv) creating instance created Window window Window() starting application sys.exit(Base.exec()) Output: output above mentioned code attached here form screenshot. Next TopicCreate Table using PyQt5 Python prev next