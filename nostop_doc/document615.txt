next prev Compound Interest Calculator using Python Programming language like Python provides different options developing GUI, short Graphical User Interface. Among methods, Tkinter most commonly utilized one. following tutorial, will learn method creating simple Compound Interest Calculator application with help Tkinter package Python programming language. before started with coding section, briefly understand Compound Interest calculate using Python. Understanding Compound Interest Compound Interest Interest paid both principal well Interest compounded standard intervals. standard intervals, accumulated Interest clubbed with current principal amount, then Interest estimated principal. principal equivalent initial principal Interest accumulated far. Compound Interest Interest Principal Compounded Interest Standard Intervals calculate Compound Interest steps. first, will calculate final amount multiplying initial principal amount plus annual interest rate raised number compound periods minus one. next step, will subtract total initial amount loan from resulting value. This will give Compound Interest CI. Thus, order calculate annual compound interest, will multiply actual amount loan, investment, principal, annual interest rate. will then that amount principal, then multiply interest rate again compounding interest second year. consider above statement mathematically: Where, final amount future value investment/loan, including interest. initial Principal balance/amount. annual rate interest. number times interest compounded unit number periods elapsed. above formula represents total amount time period includes compounded interest principal. Moreover, estimate compound interest subtracting principal from this amount. formula calculating compound interest follows: Compound Interest (C.I.) consider above mathematical statement using example. Example: Input Values 7500 5/100 0.05 above values into formula, will following: Thus, Total Amount Compound Interest consider following example code demonstrating implementation above formula Python: Example: defining function calculate compound interest compound_interest(principal, rate_of_interest, number, time): calculating compound interest amount principal pow((1 (rate_of_interest/number)), number time) amount principal returning resultant value return defining main function main_function(): asking user input float(input("Enter Principal Amount: float(input("Enter Rate Interest: float(input("Enter Number times that interest compounded unit float(input("Enter Time Period: calling compound_interest() function storing value variable compound_interest(p, print() printing result print("Compound Interest (C.I.): %2f" %ci) calling main_function() function main_function() Output: Enter Principal Amount: 7500 Enter Rate Interest: 0.05 Enter Number times that interest compounded unit Enter Time Period: Compound Interest (C.I.): 4852.571233 Explanation: above snippet code, have defined function compound_interest() that accepts some parameters like principal, rate_of_interest, number, time. have used above formula calculate amount compound interest then calculated compound interest subtracting principal amount from total amount. last, have returned compound interest have then defined another function main_function() that asks input like principal, rate interest, number time, time period from user stored them variable have then called compound_interest() function providing values from variables storing result variable, have then printed result user. last, have called main_function() execute program. will modify this function order utilize with Tkinter library build Graphical User Interface calculation Compound Interest. Creating Compound Interest Calculator using Tkinter will create project using following steps: Step will import required modules. Step will then define some functions application. Step will then create main window (container). Step will then number widgets main windows. understand these steps detail. Importing required modules First all, will import Tkinter library construct application. consider following snippet code demonstrating same: File: ciCalci.py importing required widgets methods from tkinter library from tkinter import Explanation: have imported required widgets methods from Tkinter library above snippet code. Defining necessary functions Application will require some important functions this application that will help program. first function will allow reset entry fields that user will fill whenever user presses Reset Button. consider following snippet code demonstrating same: File: ciCalci.py defining reset function reset(): deleting entries entry fields principalField.delete(0, END) rateField.delete(0, END) numberField.delete(0, END) timeField.delete(0, END) resultField.delete(0, END) setting focus principal field principalField.focus_set() Explanation: above snippet code, have defined function reset(). Within this function, have deleted entries written entry fields using delete() method specifying END) parameter order delete entire text. have then used focus_set() method entry field will define principal amount later this tutorial. will define another function that will calculate compound interest entered values. will slightly modify previous compound_interest() function this function. following snippet code demonstrates same: File: ciCalci.py defining function calculate compound interest compound_interest(): getting values from entry fields principal float(principalField.get()) rate_of_interest float(rateField.get()) number float(numberField.get()) time float(timeField.get()) calculating compound interest amount principal pow((1 (rate_of_interest (100 number))), number time) amount principal printing resultant value result field resultField.insert(10, Explanation: above snippet code, have defined function compound_interest(). retrieved values from entry fields stored them float values different variables. have then calculated compound interest entered value inserted resultant value result entry field. Creating main window application that have successfully created functions need application, will work section. will create main window application where necessary widgets will displayed section. consider following snippet code demonstrating same: File: ciCalci.py main function __name__ "__main__": creating instance Tk() class guiWindow Tk() defining title window guiWindow.title("Compound Interest Calculator javatpoint.com") defining geometry window guiWindow.geometry("500x500+500+250") disabling resizable option guiWindow.resizable(0, setting background color window guiWindow.configure(bg "#f0c33c") Explanation: above snippet code, defined main function. have created object Tk() class within this function. have then defined title window using title() method. have then defined geometry window using geometry() method disabled resizable option setting parameters resizable() method. last, have used configure() method background color #f0c33c application. Adding Widgets Main Window that have created main window project. time some widgets order display data users. will start adding label displaying heading main window with help Label() widget. following snippet code demonstrating same: File: ciCalci.py heading window guiLabel Label( guiWindow, text "CALCULATE \nCOMPOUND INTEREST", font ("Arial", 20), "#211600", "#f0c33c" placing label window guiLabel.place( Explanation: above snippet code, have used Label() widget create label main window. have specified guiWindow parameter. have also text displayed along with font style size, foreground color, background color. have then used place() method place label screen. Now, create other labels display necessary information like principal amount, rate interest, number times, time period, compound interest using Label() widget. following snippet code demonstrating same: File: ciCalci.py creating 'Principal Amount' label labelOne Label( guiWindow, text "Principal Amount (Rs.):", "#f0c33c", "#4a3200" creating 'Rate Interest' label labelTwo Label( guiWindow, text "Rate Interest (%):", "#f0c33c", "#4a3200" creating 'Number Times' label labelThree Label( guiWindow, text "Number Times (n):", "#f0c33c", "#4a3200" creating 'Time Period' label labelFour Label( guiWindow, text "Time Period (Years):", "#f0c33c", "#4a3200" creating 'Compound Interest' label labelFive Label( guiWindow, text "Compound Interest (C.I.):", "#f0c33c", "#4a3200" Explanation: above snippet code, have defined different labels using Label() widget specifying guiWindow their parameters along with text these labels will display, background, foreground color. that have created labels, time place them main window. will using place() method specifying coordinates where label will displayed. consider following snippet code illustrating same. File: ciCalci.py using place() method place above labels window labelOne.place(x 120) labelTwo.place(x 160) labelThree.place(x 200) labelFour.place(x 240) labelFive.place(x 340) Explanation: above snippet code, have used place() method labels created earlier. have specified y-coordinates placement these labels. will Entry() widget some entry fields main window allow user enter required values calculate compound interest. will also define entry field where result will displayed. consider snippet code shown below illustrates same: File: ciCalci.py entry field principal amount principalField Entry( guiWindow, "#fcf9e8", "#211600" entry field rate interest rateField Entry( guiWindow, "#fcf9e8", "#211600" entry field number numberField Entry( guiWindow, "#fcf9e8", "#211600" entry field time period timeField Entry( guiWindow, "#fcf9e8", "#211600" entry field result resultField Entry( guiWindow, "#fcf9e8", "#211600" Explanation: above snippet code, have used Entry() widget define entry fields user enter required data. have also defined entry field display result user. Now, place these entry fields main window using place() method. following snippet code demonstrates same: File: ciCalci.py using place() method place above fields window principalField.place(x 250, 120) rateField.place(x 250, 160) numberField.place(x 250, 200) timeField.place(x 250, 240) resultField.place(x 250, 340) Explanation: above snippet code, have used place() method place above fields window. have specified y-coordinates their placements. will create some buttons that will trigger functions their execution. will Button() widgets same specify command parameter function defined earlier. will creating buttons first button CALCULATE button that will execute calculation Compound Interest given data. second button RESET button, which will reset entries result. File: ciCalci.py creating Result button resultButton Button( guiWindow, text "CALCULATE", "#135e96", "#fcf9e8", command compound_interest creating Reset button resetButton Button( guiWindow, text "RESET", "#d63638", "#fcf0f1", command reset Explanation: above snippet code, have used Button() widget create CALCULATE RESET buttons. have used command parameter target compound_interest() reset() functions. that have created buttons, time place them main window using place() method. consider following snippet code demonstrating same. File: ciCalci.py using place() method place above buttons window resultButton.place(x 280, 280) resetButton.place(x 300, 380) Explanation: above snippet code, have used place() method place above buttons main window specified coordinates. last, will mainloop() method Tkinter event loop. following snippet code illustrating same. File: ciCalci.py running window guiWindow.mainloop() Explanation: above snippet code, have used mainloop() method Tkinter event loop. Thus, coding 'Compound Interest Calculator' project finally completed. save file program works. program, type following command command-line shell terminal: Command: python ciCalci.py before output, here complete project code. Complete Project Code following program file complete code 'Compound Interest Calculator' project. File: ciCalci.py importing required widgets methods from tkinter library from tkinter import defining reset function reset(): deleting entries entry fields principalField.delete(0, END) rateField.delete(0, END) numberField.delete(0, END) timeField.delete(0, END) resultField.delete(0, END) setting focus principal field principalField.focus_set() defining function calculate compound interest compound_interest(): getting values from entry fields principal float(principalField.get()) rate_of_interest float(rateField.get()) number float(numberField.get()) time float(timeField.get()) calculating compound interest amount principal pow((1 (rate_of_interest (100 number))), number time) amount principal printing resultant value result field resultField.insert(10, main function __name__ "__main__": creating instance Tk() class guiWindow Tk() defining title window guiWindow.title("Compound Interest Calculator javatpoint.com") defining geometry window guiWindow.geometry("500x500+500+250") disabling resizable option guiWindow.resizable(0, setting background color window guiWindow.configure(bg "#f0c33c") heading window guiLabel Label( guiWindow, text "CALCULATE \nCOMPOUND INTEREST", font ("Arial", 20), "#211600", "#f0c33c" placing label window guiLabel.place( creating 'Principal Amount' label labelOne Label( guiWindow, text "Principal Amount (Rs.):", "#f0c33c", "#4a3200" creating 'Rate Interest' label labelTwo Label( guiWindow, text "Rate Interest (%):", "#f0c33c", "#4a3200" creating 'Number Times' label labelThree Label( guiWindow, text "Number Times (n):", "#f0c33c", "#4a3200" creating 'Time Period' label labelFour Label( guiWindow, text "Time Period (Years):", "#f0c33c", "#4a3200" creating 'Compound Interest' label labelFive Label( guiWindow, text "Compound Interest (C.I.):", "#f0c33c", "#4a3200" using place() method place above labels window labelOne.place(x 120) labelTwo.place(x 160) labelThree.place(x 200) labelFour.place(x 240) labelFive.place(x 340) entry field principal amount principalField Entry( guiWindow, "#fcf9e8", "#211600" entry field rate interest rateField Entry( guiWindow, "#fcf9e8", "#211600" entry field number numberField Entry( guiWindow, "#fcf9e8", "#211600" entry field time period timeField Entry( guiWindow, "#fcf9e8", "#211600" entry field result resultField Entry( guiWindow, "#fcf9e8", "#211600" using place() method place above fields window principalField.place(x 250, 120) rateField.place(x 250, 160) numberField.place(x 250, 200) timeField.place(x 250, 240) resultField.place(x 250, 340) creating Result button resultButton Button( guiWindow, text "CALCULATE", "#135e96", "#fcf9e8", command compound_interest creating Reset button resetButton Button( guiWindow, text "RESET", "#d63638", "#fcf0f1", command reset using place() method place above buttons window resultButton.place(x 280, 280) resetButton.place(x 300, 380) running window guiWindow.mainloop() Output: Next TopicRank-based Percentile Calculator Python prev next