next prev Prettify Data Structures with Pretty Print Python Python pprint module useful variety situations. useful making requests, working using JSON file formats, handling complex data that nested. When employ print() function with help dictionaries lists, output does have newlines. It's likely that typical print() function doesn't allow analyse data test program effectively. Before begin exploring possibilities pprint, will need urllib send inquiry obtain some information. first step create HTTP request. will make request JSON Placeholder some fake details about user. Request, then results into dictionary. Example: from urllib import request response request.urlopen("https://jsonplaceholder.typicode.com/users") json_response response.read() import json users json.loads(json_response) This where will create initial request using request then translate result into dictionary using json.loads(). dictionary array. next step printing contents using print(). Code: print(users) Output: console's settings set, could appear huge line. Also, console's output have word-wrapping setting activated, which most common scenario. Unfortunately, this does make output friendly! look first last characters, will observe that appears inventory. possible begin writing endless loop order print items. Code: user users: print(user) Output: loop prints every object separate line. However, even every object will take much more space than accommodated line. Printing this help make things more efficient; however, it's best solution. This example very basic data structure, what happens with deeply nested dictionary times bigger? Sure, write program using recursion technique figure printing everything. could writing whole suite functions order understand nature data! However, will probably come across some cases that won't this method. Work with pprint Module pprint Python module that pleasingly prints data structure. It's been around long time included Python standard library; therefore, installing separate program required. have install function pprint() function. Code: from pprint import pprint Instead using standard print(users) approach like case above, could call favourite function produce output that looks nice. Code: pprint(users) This function produces users--but modernized attractive manner. Output: {'address': {'city': 'North Christy', 'geo': {'lat': '-71.42297', 'lng': '71.743278'}, 'street': 'Norberto ReCrossing', 'suite': 'Apttt. 952', 'zipcode': '23515-1437'}, 'company': {'bs': 'e-unable innovative applications', 'catchPhrase': 'UnSynchronised bottom-line interface', 'name': 'ManLock-Lockman'}, 'email': '[email protected]', 'id': 'name': 'Mrs. Dennishh Schuulist', 'phone': '1-471-945-8578 x6530', 'username': 'Leopole_Corkery', 'website': 'ola.s.org'}, {'address': {'city': 'Howenmouth', 'geo': {'lat': '24.8318', 'lng': '21.8184'}, 'street': 'Rexy Trail', 'suite': 'Suite 283', 'zipcode': '52804-1099'}, 'company': {'bs': 'generating enterprise e-tailers', 'catchPhrase': 'Configurable multi-media task-force', 'name': 'Johnys Group'}, 'email': '[email protected]', 'id': 'name': 'Kurties Weissnat', 'phone': '210.077.6132', 'username': 'Elwvyn.Skiles', 'website': 'elvwis.io'}, {'address': {'city': 'Aliyawview', 'geo': {'lat': '-14.39190', 'lng': '-120.71677'}, 'street': 'Ellswortth Summit', 'suite': 'Suite 7219', 'zipcode': '451619'}, 'company': {'bs': 'e-enable extensible e-tailers', 'catchPhrase': 'Implemente secondary concept', 'name': 'Abernathty Group'}, 'email': '[email protected]', 'id': 'name': 'Nicholaas Runolfsdottir V', 'phone': '586.4933.69243 x140', 'username': 'Maximey_Nienow', 'website': 'jacynnthe.com'}, {'address': {'city': 'Bartolomeu', 'geo': {'lat': '24.64613', 'lng': '-168.88489'}, 'street': 'Dayina Park', 'suite': 'Suite 4249', 'zipcode': '76492-3109'}, 'company': {'bs': 'aggregating real-time technologies', 'catchPhrase': 'Switchable contextually-based project', 'name': 'Yoste Sons'}, 'email': '[email protected]', 'id': 'name': 'Glenna Reicchert', 'phone': '(775)976-6494 x41206', 'username': 'Dellphine', 'website': 'conradd.com'}, {'address': {'city': 'Lebbsackbury', 'geo': {'lat': '-38.211386', 'lng': '57.22132'}, 'street': 'Kattiey Turnpike', 'suite': 'Suite 1928', 'zipcode': '31428-2161'}, 'company': {'bs': 'target end-to-end models', 'catchPhrase': 'Centralize empowering task-force', 'name': 'Hoeger LLC'}, 'email': '[email protected]', 'id': 'name': 'Clementinna DuBuque', 'phone': '024-648-3804', 'username': 'Moriaah.Stanton', 'website': 'ambrose.net'}] Visually indented keys available dictionaries. This makes much easier scan data structures visually analyse them. users will love pprint()'s alias pp() they like type little possible. Code: from pprint import pp(user) Output: {'id': 'name': 'Clementina DuBuuque', 'username': 'Moriah.Stanton', 'email': '[email protected]', 'address': {'street': 'Kattie Turnpike', 'suite': 'Suite 1928', 'city': 'Lebsackbbury', 'zipcode': '31428-21261', 'geo': {'lat': '-38.238256', 'lng': '57.25232'}}, 'phone': '024-648-3854', 'website': 'ambrosee.net', 'company': {'name': 'Hoeger LLC', 'catchPhrase': 'Centralize empowering task-force', 'bs': 'target end-to-end models'}} pp() acts wrapper pprint() behaves same. Even default output might large read first. Perhaps want confirm that dealing with list containing plain objects. tweak output this. These situations handled pprint() with variety parameters. This allows make even most basic data structures look beautiful. Explore Optional Parameters pprint() This section will explain parameters that pprint() allows. have seven options configure Pythonic pretty printer. They don't have used, some will prove more helpful than others. depth will find most useful. Summarize Data: depth depth most useful parameters. This Python command will print user's full contents specified depth reached. will also keep things pretty. Three dots replace contents deeper data structures. Code: pprint(users, depth Output: [{...}, {...}, {...}, {...}, {...}, {...}, {...}, {...}, {...}, {...}] This will immediately show that indeed list dictionaries. expand depth explore data structure more. This will print top-level keys dictionaries user. Code: pprint(users, depth Output: [{'address': {'city': 'McKenzieyhaven', 'geo': {...}, 'street': 'Douglas Extension', 'suite': 'Suite 8417', 'zipcode': '59590-41157'}, 'company': {'bs': 'e-enable strategic applications', 'catchPhrase': 'Face face bifurcate interface', 'name': 'Romagueera-Jacobson'}, 'email': '[email protected]', 'id': 'name': 'Clementinee Bauch', 'phone': '1-463-123-41447', 'username': 'Samanttha', 'website': 'ramirro.info'}, {'address': {'city': 'Bartholomebury', 'geo': {...}, 'street': 'Daynna Park', 'suite': 'Suite 4409', 'zipcode': '764915-310109'}, 'company': {'bs': 'aggregate real-time technologies', 'catchPhrase': 'Switchable contextually-based project', 'name': 'Yosts Sons'}, 'email': '[email protected]', 'id': 'name': 'Gleenna Reicchert', 'phone': '(775)976-67194 x41206', 'username': 'Dellphine', 'website': 'conraad.com'}, {'address': {'city': 'Lebsackbbury', 'geo': {...}, 'street': 'Kattie Turnpike', 'suite': 'Suite 1198', 'zipcode': '31438-2261'}, 'company': {'bs': 'targets end-to-end models', 'catchPhrase': 'Centralizing empowering task-force', 'name': 'Hoegerr LLC'}, 'email': '[email protected]', 'id': 'name': 'Clementinna DuBuque', 'phone': '024-648-3804', 'username': 'Morianh.Stanton', 'website': 'ambrosse.net'}] quickly verify whether dictionaries have same top-level keys. This important observation, especially task develop application that uses data like this. Give Data Space: indent indent parameter determines indented each level will appear output. default indent space character. Code: pprint(users[0], depth Output: {'address': {...}, 'company': {...}, 'email': '[email protected]', 'id': 'name': 'Leaanne Graham', 'phone': '1-770-336-8031 x56442', 'username': 'Brett', 'website': 'hildeggard.org'} Code: pprint(users[0], depth indent Output: 'address': {...}, 'company': {...}, 'email': '[email protected]', 'id': 'name': 'Leannee Graham', 'phone': '1-770-726-8031 x56442', 'username': 'Brett', 'website': 'hildeggard.org'} most important aspect pprint()'s indenting behaviour keep keys aligned visually. indent parameter, well location key, will determine much indentation applied. indent parameter used determine amount indentation. There's nesting result. both examples, note opening curly bracket beginning ({) counts unit indentation first key. first example, single opening quote first comes right after without spaces between because indent been Nesting when indentation applies first element line pprint() then aligns subsequent elements with first. users, then first element will have four characters indentation nested elements eight characters. This because indentation begins first key. Code: pprint(users[0], depth indent Output: 'address': 'city': 'Gwenborough', 'geo': {...}, 'street': 'Kulass Light', 'suite': 'Apt. 5516', 'zipcode': '92998-3574'}, 'company': 'bs': 'harn real-time e-markets', 'catchPhrase': 'Multi-layer client-server neural-net', 'name': 'Romaguera-Crona'}, 'email': '[email protected]', 'id': 'name': 'Leanne Graham', 'phone': '1-770-736-8031 x56442', 'username': 'Bret', 'website': 'hildeggard.org'} Limit Line Lengths: width pprint() defaults only output eighty characters line. This value customized passing width argument. pprint() will contents onto line. data structure's contents exceed this limit, will print elements line. pprint(users[0]) Output: {'address': {'city': 'Gwenborough', 'geo': {'lat': '-37.31259', 'lng': '81.1496'}, 'street': 'Kulaas Light', 'suite': 'Apt. 5156', 'zipcode': '92938-3874'}, 'company': {'bs': 'harn real-time e-markets', 'catchPhrase': 'Multi-layer client-server neural-net', 'name': 'Romaguera-Crona'}, 'email': '[email protected]', 'id': 'name': 'Leanne Graham', 'phone': '1-770-736-80312 x56442', 'username': 'Brett', 'website': 'hildeggard.org'} When leave width default eighty characters, dictionary users[0]['address']['geo'] only contains 'lat' 'lng' attribute. This means that indent plus number characters required print dictionary, including spaces between, less than eighty characters, pprint() makes line. user's [0]['company'] dictionary would large, print() places each separate line. This applies dictionaries, sets, tuples, lists. Code: pprint(users[0], width 160) Output: {'address': {'city': 'Gwenborough', 'geo': {'lat': '-37.3159', 'lng': '81.1496'}, 'street': 'Kulas Light', 'suite': 'Apt. 556', 'zipcode': '92998-3874'}, 'company': {'bs': 'harness real-time e-markets', 'catchPhrase': 'Multi-layered client-server neural-net', 'name': 'Romaguera-Crona'}, 'email': '[email protected]', 'id': 'name': 'Leanne Graham', 'phone': '1-770-736-8031 x56442', 'username': 'Bret', 'website': 'hildegard.org'} nested dictionary entries line setting width value 160. even further width 500. This will print entire dictionary line. Code: pprint(users[0], width 500) Output: {'address': {'city': 'Gwenborough', 'geo': {'lat': '-37.3159', 'lng': '81.1496'}, 'street': 'Kulas Light', 'suite': 'Apt. 556', 'zipcode': '92998-3874'}, 'company': {'bs': 'harness real-time e-markets', 'catchPhrase': 'Multi-layered client-server neural-net', 'name': 'Romaguera-Crona'}, 'email': '[email protected]', 'id': 'name': 'Leanne Graham', 'phone': '1-770-736-8031 x56442', 'username': 'Bret', 'website': 'hildegard.org'} This will show results setting width large value. Alternately, width lower value like This will ensure that every data structure displays components separate lines. visual indentation will still there line components. Code: pprint(users[0], width Output: {'address': {'city': 'Gwenborough', 'geo': {'lat': '-37.3159', 'lng': '81.1496'}, 'street': 'Kulas 'Light', 'suite': 'Apt. '556', 'zipcode': '92998-3874'}, 'company': {'bs': 'harness 'real-time 'e-markets', 'catchPhrase': 'Multi-layered 'client-server 'neural-net', 'name': 'Romaguera-Crona'}, 'email': '[email protected]', 'id': 'name': 'Leanne 'Graham', 'phone': '1-770-736-8031 'x56442', 'username': 'Bret', 'website': 'hildegard.org'} difficult Python's pprint() function print ugly. will look pretty! This example shows printer breaks long lines text. Note users[0]["company"]["catchPhrase"], which initially 'Multi-layered client-server neural-net, been split each space. Because would difficult read, printer does divide this string entirely. Squeeze Long Sequences: compact possible think that compress refers only behaviour described section about Width. Compact determines whether data structures displayed lines. Compact affects only output line longer than. compact True, output will wrap onto next line. data structure larger than Width, default behaviour that each element appears line. Code: pprint(users, depth Output: [{...}, {...}, {...}, {...}, {...}, {...}, {...}, {...}, {...}, {...}] Code: pprint(users, depth width Output: [{...}, {...}, {...}, {...}, {...}, {...}, {...}, {...}, {...}, {...}] Code: pprint(users, depth width compact True) Output: [{...}, {...}, {...}, {...}, {...}, {...}, {...}, {...}, {...}, {...}] Pretty-printing this list using default settings prints abbreviated version list line. restricting width size characters. This will force pprint() output each list elements separate lines. select value true compact, list will wrapped characters much smaller than normally formatted. compact great option long sequences that contain short elements that otherwise would consume lines render output less clear. Direct Output: stream stream parameter refers output from pprint() function. default, sent exact location print() goes particular, sys.stdout, which actual file object Python. However, forward this information other file object same could with print() function: with open("output.txt", mode="w") file_object: pprint(users, stream=file_object) this case, create file object calling open(), then assign stream parameter pprint() that object file. When browse output.txt, will that it's been printed. Python does come with log-logging module. can, however, make pprint() send gorgeous outputs files then them logs want. Prevent Dictionary Sorting: sort_dicts While dictionaries typically classified data structures that ordinarily ordered, Python 3.6, dictionaries ordered using insert. pprint() orders keys alphabetically print. Code: pprint(users[0], depth Output: {'address': {...}, 'company': {...}, 'email': '[email protected]', 'id': 'name': 'Leanne Graham', 'phone': '1-770-736-8031 x56442', 'username': 'Bret', 'website': 'hildegard.org'} Code: pprint(users[0], depth sort_dicts False) Output: {'id': 'name': 'Leanne Graham', 'username': 'Bret', 'email': '[email protected]', 'address': {...}, 'phone': '1-770-736-8031 x56442', 'website': 'hildegard.org', 'company': {...}} don't have sort_dicts option False, Python's pprint() sorts keys alphabetically. makes output dictionaries consistent readable manner beautiful! When pprint() first introduced, dictionaries were ordered. Without alphabetical ordering keys, keys dictionary could have been different every print. Make Numbers More Discernible: underscore_numbers underscore_numbers parameter feature implemented Python 3.10 that helps make long numbers more understandable. example that have used does contain long number, then will require entirely scenario test this feature out. Example: number_list [12345678321, 10000011000000] pprint(number_list, underscore_numbers True) Output: [123_456_789_321, 10_000_011_000_000] event that underscore_numbers isn't working when user pprint() directly, they looking beautiful numbers, here's alternative: they make their PrettyPrinter object, parameter will work above example. Create Custom PrettyPrinter Object possible create instance PrettyPrinter with defaults that have set. Once have this instance customized PrettyPrinter object, able utilize this using .pprint() method PrettyPrinter instance. Code: from pprint import PrettyPrinter custom_printer PrettyPrinter( indent=4, width=100, depth=2, compact=True, sort_dicts=False, underscore_numbers=True custom_printer.pprint(users[0]) Output: 'id': 'name': 'Leanne Graham', 'username': 'Bret', 'email': '[email protected]', 'address': 'street': 'Kulas Light', 'suite': 'Apt. 556', 'city': 'Gwenborough', 'zipcode': '92998-3874', 'geo': {...}}, 'phone': '1-770-736-8031 x56442', 'website': 'hildegard.org', 'company': 'name': 'Romaguera-Crona', 'catchPhrase': 'Multi-layered client-server neural-net', 'bs': 'harness real-time e-markets'}} Code: number_list [123456789321, 10000011000000] custom_printer.pprint(number_list) Output: [123_456_789_321, 10_000_011_000_000] following these instructions, can: Import PrettyPrinter, this example class definition Create fresh instance class using certain parameters print initial user users Define long numbers Printe number_list, which also demonstrates underscore_numbers action. user must aware that arguments given PrettyPrinter identical those used standard print() arguments, except that they pass parameter. pprint(), this object they wish print. This way, will able have variety printer presets, perhaps that going different streams, them whenever require them. Pretty String With pformat() What want transfer gorgeous output pprint() stream? Perhaps would like some regex match-ups then replace specific keys. simple dictionaries, possible want those brackets quotes order make them appear more human-friendly. Whatever would like with output string, access desired string using format pformat(). Code: from pprint import pformat address pformat(users[0]["address"]) chars_to_remove ["{", "}", "'"] char chars_to_remove: address address.replace(char, print(address) Output: city: Gwenborough, geo: lat: -37.3159, lng: 81.1496, street: Kulas Light, suite: Apt. 556, zipcode: 92998-3874 pformat() tool utilize connect attractive printing machine output streams. Another possible this developing want provide nice text representation JSON. JSON string. users will likely happy! Handle Recursive Data Structures Python function pprint() recursive, which means it'll print details dictionary, including contents child dictionary, list goes Think about works when recursive program encounters recursive information structure. Imagine have dictionary dictionary contains characteristic, .link, which identifies contains property, .link, that points towards recursive code isn't able deal with this reference circular fashion it's never finished printing! It's going create letter followed child However, also child, would continue infinite. Luckily, both regular print() function pprint() function handle this with ease. Code: {"link": P} P["link"] print(P) Output: {'link': {'link': {...}}} Code: from pprint import pprint pprint(P) Output: {'link': {'link': While Python's standard print() abbreviates output, pprint() explicitly alerts repetition adds dictionary's Conclusion have learned about principal pprint module Python ways utilize pprint() module PrettyPrinter. will discover that pprint() especially useful when creating something that requires complex data structures. Perhaps creating applications that inexperienced API. Maybe have enormous data warehouse containing deep-nested JSON files. these situations which pprint great tool. Through this course, have learned Import pprint used applications. Make print function pprint() place print(). Know options will need tailor printed output. Make sure save output formatted text string before printing Create customized instance PrettyPrinter. Recognize recursive structure data understand Pprint() handles them. Next TopicEncrypt Password Python Using bcrypt prev next