next prev Find User's Location using Geolocation this tutorial, will learn find user's location providing address Geolocation API. Geocoding technique transforming description location into pair latitude longitude Earth's surface place. also refers modifying geographical coordinates description location. will AbstractAPI Geolocation from their address. simple REST that takes address string returns JSON object including location, device information, carrier information more. follow below steps user information Getting Started With first step visit https://www.abstractapi.com/ip-geolocation-api#docs example JSON response object right. There "Get Started" button left. When click Started button, will take create account using email password. asked have used Abstract before. Once sign will land homepage with shows tabs view code supported languages. Making Geolocation Request using Python Abstract provides some sample code supported languages. easily plug code make request from Python code. Choose Python API's home page. will show Python code text box. Copy Python code paste into function called find_geolocation_func. this function, will write logic sending receiving request Abstract API. Example api_url "https: ipgeolocation.abstractapi.com/v1/" api_key YOUR_API_KEY get_geolocation_info(validated_ip_address): params 'api_key': api_key, 'ip_address': validated_ip_address try: response requests.get(api_url, params=params) print(response.content) except requests.exceptions.RequestException api_error: print(f"There error contacting Geolocation API: {api_error}") raise SystemExit(api_error) above, Python requests library send request AbstractAPI Geolocation URL, including (unique every user) address querystring parameters. print JSON response that from API. Output: "ip_address": "XXX.XX.XXX.X", "city": "City Name", "city_geoname_id": ID_NUMBER, "region": "Region", "region_iso_code": "JAL", "region_geoname_id": GEONAME_ID, "postal_code": "postalcode", "country": "Country", "country_code": "CC", "country_geoname_id": GEONAME_ID, "country_is_eu": false, "continent": "North America", "continent_code": "NA", "continent_geoname_id": GEONAME_ID, "longitude": longitude, "latitude": latitude, "security": "is_vpn": false "timezone": "name": "America/Timezone", "abbreviation": "ABBR", "gmt_offset": "current_time": "15:52:08", "is_dst": true "flag": "emoji": "??", "unicode": "U+1F1F2 U+1F1FD", "png": "https://static.abstractapi.com/country-flags/US_flag.png", "svg": "https://static.abstractapi.com/country-flags/US_flag.svg" "currency": "currency_name": "Dollar", "currency_code": "USD" "connection": "autonomous_system_number": NUMBER, "autonomous_system_organization": "System Org.", "connection_type": "Cellular", "isp_name": "Isp", "organization_name": "Org." write valid address function check whether given valid not. Regex validate_ip_regex(ip_address): match re.match( r"[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}", "127.0.0.1", ip_address) bool(match): print(f"The address {ip_address} valid") return False bytes ip_address.split(".") ip_byte bytes: int(ip_byte) int(ip_byte) 255: print(f"The address {ip_address} valid") return False print(f"The address {ip_address} valid") return True also create single function that uses Regex validation function validate then sends Geolocation API. Example validate_ip_and_get_geolocation(ip_address): is_valid_ip validate_ip_regex(ip_address) is_valid_ip: get_geolocation_info(ip_address) else: print("Invalid IP") Conclusion This includes step-wise guide getting Geolocation info addresses using AbstractAPI Geolocation API. Next TopicLRU Cache Python prev next