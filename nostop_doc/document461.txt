next prev Snake Game Python using Turtle Module snake arcade maze game that created company Gremlin Industries published Sega month October 1976. considered excellent game been gaining popularity with public many generations. Snake game controlled with four direction buttons relation direction it's heading into. goal playing game score maximum points grabbing food fruits. player luck snake strikes wall itself. beginners Python those seeking create something simpler their field test this program. module called Turtle specifically designed used beginners play with submit program project. This project written using Python 3.0. Therefore, will create game that based Python with these modules. Turtle: This installed Python library that allows users draw patterns images providing user with virtual canvas. Time: used order calculate number seconds since date event. Random: This function utilized create random numbers Python through random module. Support code below work easily using Sublime Text application that specifically designed work with Python programs. Additionally, VSCode used this program. Install Python3 utilizing extensions VSCode. Then, save Python3 program format your_filename.py. Here step-by-step method make Snake Game using Turtle module: Step Adding modules program then giving initial value each game. import turtle import time import random delay score high_score Step will create display this game, i.e., screen game, where we'll create snake's head food items snake during game display score game. Here will creating window screen ttl.Screen() w_n.title("Snake Game JavaTpoint") w_n.bgcolor("black") width height user's choice w_n.setup(width 650, height 650) w_n.tracer(0) Here, will create head snake head1 ttl.Turtle() head1.shape("circle") head1.color("white") head1.penup() head1.goto(0, head1.direction "Stop" Here, will create food game food1 ttl.Turtle() colors rdm.choice(['pink', 'yellow', 'blue']) shapes rdm.choice(['triangle', 'square', 'circle']) food1.speed(0) food1.shape(shapes) food1.color(colors) food1.penup() food1.goto(0, 100) pen1 ttl.Turtle() pen1.speed(0) pen1.shape("square") pen1.color("white") pen1.penup() pen1.hideturtle() pen1.goto(0, 250) pen1.write("Score: High Score: align ="center", font ("Consolas", "bold")) Output: Step We'll verify that controls snake's movement. When click terms commonly used gaming, such "e", "s", "f", "v", will able control snake's movement around screen. Here, will assign directions group1(): head1.direction "down": head1.direction "up" go_down(): head1.direction "up": head1.direction "down" go_left(): head1.direction "right": head1.direction "left" go_right(): head1.direction "left": head1.direction "right" move1(): head1.direction "up": head1.ycor() head1.sety(y1 head1.direction "down": head1.ycor() head1.sety(y1 head1.direction "left": head1.xcor() head1.setx(x1 head1.direction "right": head1.xcor() head1.setx(x1 w_n.listen() w_n.onkeypress(group1, "e") w_n.onkeypress(go_down, "v") w_n.onkeypress(go_left, "s") w_n.onkeypress(go_right, "f") Step will design game which following things will occurring: snake's body will expand body after eating fruits. Colouring snake's tail. When fruit been eaten, score will then recorded. Examining snake's head collides with body side screen. game will automatically restart immediately following collision. design shape this fruit revealed each time window opened. Scores will then reset zero, highest score will kept until window shut. Code main gameplay while True: w_n.update() head1.xcor() 295 head1.xcor() -295 head1.ycor() head1.ycor() -295: time.sleep(1) head1.goto(0, head1.direction "Stop" colors rdm.choice(['pink', 'blue', 'yellow']) shapes rdm.choice(['square', 'circle']) segment1 segments1: segment1.goto(1050, 1050) segments1.clear() score delay pen1.clear() pen1.write("Score High Score ".format( score, high_score), align "center", font ("Consoles", "bold")) head1.distance(food1) rdm.randint(-275, 275) rdm.randint(-275, 275) food1.goto(x, Here, adding segment new_segment1 ttl.Turtle() new_segment1.speed(0) new_segment1.shape("square") new_segment1.color("orange") tail colour new_segment1.penup() segments.append(new_segment1) delay 0.001 score score high_score: high_score score pen1.clear() pen1.write("Score: High Score: ".format( score, high_score), align "center", font ("Consoles", "bold")) Checking head collisions with body segments index range(len(segments1)-1, -1): segments1[index-1].xcor() segments1[index-1].ycor() segments1[index].goto(x, len(segments1) head1.xcor() head1.ycor() segments1[0].goto(x1, move() segment1 segments1: segment1.distance(head1) time.sleep(1) head1.goto(0, head1.direction "stop" colors rdm.choice(['pink', 'blue', 'yellow']) shapes rdm.choice(['square', 'triangle']) segment1 segments1: segment1.goto(1050, 1050) segment1.clear() score delay pen1.clear() pen1.write("Score: High Score: ".format( score, high_score), align "center", font ("Consoles", "bold")) time.sleep(delay) w_n.mainloop() Below Full Implementation Code Snake Game import turtle import time import random delay score high_score Here will creating window screen ttl.Screen() w_n.title("Snake Game JavaTpoint") w_n.bgcolor("black") width height user's choice w_n.setup(width 650, height 650) w_n.tracer(0) Here, will create head snake head1 ttl.Turtle() head1.shape("circle") head1.color("white") head1.penup() head1.goto(0, head1.direction "Stop" Here, will create food game food1 ttl.Turtle() colors rdm.choice(['pink', 'yellow', 'blue']) shapes rdm.choice(['triangle', 'square', 'circle']) food1.speed(0) food1.shape(shapes) food1.color(colors) food1.penup() food1.goto(0, 100) pen1 ttl.Turtle() pen1.speed(0) pen1.shape("square") pen1.color("white") pen1.penup() pen1.hideturtle() pen1.goto(0, 250) pen1.write("Score: High Score: align "center", font ("Consoles", "bold")) Here, will assign directions group1(): head1.direction "down": head1.direction "up" go_down(): head1.direction "up": head1.direction "down" go_left(): head1.direction "right": head1.direction "left" go_right(): head1.direction "left": head1.direction "right" move(): head1.direction "up": head1.ycor() head1.sety(y1 head1.direction "down": head1.ycor() head1.sety(y1 head1.direction "left": head1.xcor() head1.setx(x1 head1.direction "right": head1.xcor() head1.setx(x1 w_n.listen() w_n.onkeypress(group1, "e") w_n.onkeypress(go_down, "v") w_n.onkeypress(go_left, "s") w_n.onkeypress(go_right, "f") segments1 Code main gameplay while True: w_n.update() head1.xcor() head1.xcor() -290 head1.ycor() head1.ycor() -290: time.sleep(1) head1.goto(0, head1.direction "Stop" colors rdm.choice(['pink', 'blue', 'yellow']) shapes rdm.choice(['square', 'triangle']) segment1 segments1: segment1.goto(1050, 1050) segments1.clear() score delay pen1.clear() pen1.write("Score: High Score: ".format( score, high_score), align "center", font ("candara", "bold")) head1.distance(food1) rdm.randint(-275, 275) rdm.randint(-275, 275) food1.goto(x1, Here, adding segment new_segment1 ttl.Turtle() new_segment1.speed(0) new_segment1.shape("square") new_segment1.color("orange") tail colour new_segment1.penup() segments1.append(new_segment1) delay 0.001 score score high_score: high_score score pen1.clear() pen1.write("Score High Score ".format( score, high_score), align "center", font ("Consoles", "bold")) Checking head collisions with body segments index range(len(segments1)-1, -1): segments1[index 1].xcor() segments1[index 1].ycor() segments1[index].goto(x1, len(segments1) head1.xcor() head1.ycor() segments1[0].goto(x1, move() segment1 segments1: segment1.distance(head1) time.sleep(1) head1.goto(0, head1.direction "stop" colors rdm.choice(['pink', 'blue', 'yellow']) shapes rdm.choice(['square', 'triangle']) segment1 segments1: segment1.goto(1050, 1050) segment1.clear() score delay pen1.clear() pen1.write("Score: High Score: ".format( score, high_score), align "center", font ("Consoles", "bold")) time.sleep(delay) w_n.mainloop() Output: Next TopicHow Find Armstrong Numbers between given Integers prev next