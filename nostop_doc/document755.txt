next prev Python Packing Unpacking Arguments Python this tutorial, will learn about packing unpacking arguments. Python provides unique feature pack unpack arguments. Suppose have function that takes five arguments; create list five elements pass function, which will throw error because elements packed within list. need pass five separate arguments function. past, Python developers referred this feature tuple unpacking, became quite useful popular among them. Hence, this feature generalized kinds iterables; nowadays, referred iterable unpacking. will discuss iterable unpacking make code more readable. Addition, will also explore some practical examples loops, function definition, function calls. Packing Unpacking Python Python provides facility declare variables left side assignment operation. These variables same number tuple element. Each variable tuple have value more operator) from iterable right side assignment. Python developers called this process tuple unpacking. Below definition packing unpacking arguments. Packing name suggests, wraps arguments into single variable, this function call gets into tuple called args. other name place args. Example: func( *args Unpacking Unpacking term which refers operation list tuple assigned single variable. Example List/tuple Unpacking makes code more readable that popularity among Python developers. Let's have example understand unpacking works Python. Unpacking Tuples Python allows assign tuples variable left side assignment operator tuple values right side. variables same number tuple value, then value automatically assigned left according their position left. Let's understand following example. Example print(a) print(b) print(c) print(d) print(e) print(f) Output: see, have tuple both sides assignment operator. values tuple assigned variables according their relative position. Such will will don't need create tuple both sides; simply following ways. Example Note number variables left side must equal number elements tuple right side assignment operator. Otherwise, will throw ValueError. example below, four variables left five values right. will through ValueError there many values unpack. Example Output: ValueError: many values unpack (expected Unpacking Iterables Tuple unpacking operation extended other iterables Python. only requirement that item yields same item variable receiving tuple list). Let's understand following example Example '123' print(a) print(b) print(c) print("Unpacking lists") print(a) print(b) print(c) print("Unpacking generators") range(3)) print(a) print(b) print(c) print("Unpacking dictionaries (keys, values, items") my_dict {'one': 'two':2, 'three': my_dict Unpack keys print(a) print(b) print(c) print("Unpack values") my_dict.values() print(a) print(b) print(c) print("Unpacking key-value pairs") my_dict.items() print(a) print(b) print(c) Output: Unpacking lists Unpacking generators Unpacking dictionaries (keys, values, items three Unpack values Unpacking key-value pairs ('one', ('two', ('three', other hand, following unpack argument where list/tuple defines left assignment operator values right side. Example print(a) print(b) print(c) Output: However, recommended actual code because little confusing beginner Python developers. also unpacking operations since sets unordered collections. order assignments throw subtle bugs. Let's understand following example. Example {'x', 'y', 'z'} print(a) print(b) print(c) Output: returns unordered elements, will also happen unpacking argument. recommended avoid unpacking operation. Packing with Operators operator tuple iterables) unpacking operator. allows packing multiple values into single variable. pack tuple values into single variable using operators following example. Example ('x', 'y', 'z') print(a) Output: ['x', 'y', 'z'] left side assignment must tuple list). That's trailing comma. Let's another packing arguments. Example *c= 'x', 'y', 'z' print(a) print(b) print(c) Output: ['x', 'y', 'z'] above code, pack trailing values print(a) print(b) print(c) Output: Packing values defaults because mandatory. Example print(a) print(b) print(c) print(d) Output: don't pass value required variable, will throw error. Example Output: ValueError: enough values unpack (expected least Packing value single variable with operator handy when want access elements from generator single variable without using list() function. Let's understand following example. Example range(15)) print(gen) *g, print(g) range range(10) *r, range print(r) Output: 0x7fcc4aec0ac0> 128, 256, 512, 1024, 2048, 4096, 8192, 16384] Explanation above code, packed element into into respectively. Using this, omit list() function create list values from range object. Working Packing Unpacking Simultaneously have discussed packing unpacking individually will implement both concepts practice. Packing unpacking allows programmer write more readable, clean, Pythonic code. Let's some example packing unpacking. Assigning Parallel Assignment parallel most common use-cases unpacking Python. discussed earlier, assign multiple variables according iterable (tuple list). Let's understand following example. Example ["Mathew Wade", "400000$", "Software Engineer"] name emp[0] emp[1] profile emp[2] print("The name name) print("The age) print("The profile profile) Output: name Mathew Wade 400000$ profile Software Engineer above code quite traditional quite clumsy, hard type. make easier more readable below. Example name, age, profile ["Mathew Wade", "400000$", "Software Engineer"] print("The name name) print("The age) print("The profile profile) Output: name Mathew Wade 400000$ profile Software Engineer see, using unpacking, reduced number lines made simple elegant. Swapping values Between Variables swap values Python without using temporary auxiliary variable. Let's understand following example swapping. Example Without Swapping temp temp print(a) print(b) print(temp) Output: Output: Example print(a) print(b) Output: statement we're reassigning line code. more readable straightforward. Also, notice that with this technique, there need temporary variable. Dropping Unnecessary Values With drop unneeded values. Let's understand following example. Example *_ print(a) print(b) Output: Returning Tuple Functions return multiple values separate commas from Python function. Since define tuple object without using parentheses, this kind operation interpreted returning tuple values. code function that returns multiple values, then perform iterable packing unpacking operations with returned values. Let's understand following example. Example powers(number): return number, number number Packing returned values tuple result powers(8) print(result) Unpacking returned values multiple variables number, square, cube powers(8) print(number) print(square) print(cube) *_, cube powers(2) print(cube) Output: 512) Merging Iterables With Operators Another interesting case unpacking operator ability merge several iterables into final sequence. This functionality works lists, tuples, sets. Take look following examples: Example print((0, *tup, list1 print([0, *list1, my_set print({0, *my_set, print([*my_set, *list1, *tup, *range(1, 4)]) my_str "123" print([*my_set, *list1, *tup, *range(1, *my_str]) Output: '1', '2', '3'] iterable unpacking operator when defining sequences unpack elements subsequence iterable) into final sequence. will allow create sequences from existing sequences without calling methods like append() insert(), Unpacking Dictionaries With Operator Python provides operator unpack dictionary. This operator also known dictionary unpacking operator. this operator extended 448. Now, function calls list comprehension. Example numbers {"one": "two": "three": letters {"a": "Apple", "b": "Bat", "c": "Cat"} combine {**numbers, **letters} print(combine) Output: {'one': 'two': 'three': 'a': 'Apple', 'b': 'Bat', 'c': 'Cat'} Explanation above code, created dictionaries; unpacked both dictionary created combined dictionary that includes elements both dictionaries. Unpacking loops also iterable unpacking context loops. When loop, loop assigns item iterable target variable every iteration. item assigned iterable, then tuple target variables. Let's understand following example Example students [("Mathew", 90), ("Warner", 88), ("Kapil", 100)] mark students: print(f"Marks {mark[0]} {mark[1] mark[2]}") Output: Marks Mathew Marks Warner Marks Kapil Conclusion Iterable unpacking essential pretty useful feature Python. This feature allows unpack iterable into several variables. this tutorial, have discussed some crucial concepts iterable unpacking packing. have seen some valuable examples write more readable, maintainable, Pythonic code. This knowledge solve common problems like parallel assignment swapping values between variables. also this feature other Python concepts like loops. Next TopicPython Tutorial Python prev next