next prev Traceback Python Introduction Traceback Python Python returns Traceback when there exception raised within code. output Traceback pretty irresistible view first time know what message conveys However, Traceback Python programming language wealth data that support diagnose reason exception being raised code. Depending what data traceback Python delivers vital order become better Python programmer. following tutorial, will discuss Traceback Python programming language. tutorial, will able recognize most frequent tracebacks. let's started. Understanding Traceback Python programming language Traceback report having calls made function lines code particular point. Tracebacks identified multiply names, such stack trace, stack traceback, backtrace, more. However, term "Traceback" Python programming language. Whenever program raises exception, Python returns current Traceback order help acknowledge what went wrong. consider following example illustrating such scenario. Example: File name: pytrace.py defining custom function welcome( name printing some message print( "Hello, using 'nam' instead 'name' print( "Welcome Python program!") calling function welcome( "James" Output: Traceback (most recent call last): File "D:\Python\pytrace.py", line welcome( "James" File "D:\Python\pytrace.py", line welcome print( "Hello, using 'nam' instead 'name' NameError: name 'nam' defined Explanation: above snippet code, have defined custom function named welcome which takes parameter "name". However, while printing some messages within function, have misspelled "name" parameter "nam". result, Python printed traceback message when exception raised while calling function. observe output, traceback message contains information that will require order diagnose problem. last line traceback message expresses type exception raised addition some appropriate data related that exception. earlier lines traceback message indicate code resulting raised exception. above traceback, exception NameError, which implies reference some name (such variable, class, function) that been defined. following case, name referred "nam". last line above case enough data order help issue. Search code name nam, which misspelled will indicate correctly. Generally, code more complicated. Reading Traceback Python Traceback Python much valuable data regarding exception being raised lines code. following section, will understand read different tracebacks order acknowledge different bits data stored traceback. Python traceback divided into different sections. Each section importance. consider following Traceback shown below: Traceback: Traceback (most recent call last): File "D:\Python\pytrace.py", line <module> welcome( "James" File "D:\Python\pytrace.py", line welcome print( "Hello, using 'nam' instead 'name' NameError: name 'nam' defined good practice read traceback message from bottom Python programming language. Now, understand above traceback detail: Blue block: last line highlighted with blue signifies error message line. This line consists name raised exception. Green block: After name exception message related error. This message generally consists valuable data understand reason behind raised exception. Yellow block: yellow block contains different calls function moving from bottom top, most recent least recent. These calls denoted using entries two-line each call. first line each call consists data such name file, line number, name module, indicating where code found. Bold lines: These bold lines second line these calls consisting actual snippet processed code. There some differences between output traceback when code executed command-line REPL. consider executing same example REPL understand traceback output. REPL: welcome( name print( "Hello, print( "Welcome Python program!") welcome( "James" Traceback (most recent call last): File "<stdin>", line <module> File "<stdin>", line welcome NameError: name 'nam' defined observe above snippet code REPL, traceback message returns place name(s) file because have typed code through standard input. Moreover, lines code that executed shown traceback message. Note: some fond viewing stack traces different programming languages, then pretty noticeable difference traceback looks Python programming language comparison. Most languages return exception then from bottom, most recent calls least recent. Whereas Python, traceback should read from bottom top. This pretty helpful when traceback returned, terminal usually ends bottom output, providing perfect place begin reading traceback. Understanding Some Common Tracebacks Python Once have understood read Traceback Python whenever exception raised, understand some common tracebacks that seen while coding. Here some standard exceptions might encounter, along with their meaning, reason them raised, data find their tracebacks. AttributeError exception known AttributeError raised while trying access attribute object that does have that defined attribute. documentation Python describes when AttributeError exception raised: This exception raised when reference assignment attribute fails. consider following example where AttributeError exception been raised. Example: defining variable my_int print(my_int.an_attribute) Output: Traceback (most recent call last): File "D:\Python\pytrace.py", line print(my_int.an_attribute) AttributeError: 'int' object attribute 'an_attribute' Explanation: above snippet code, have defined integer tried accessing attribute. However, when executed program, raised AttributeError exception saying that specific object type, above case, does have attribute accessed, i.e., an_attribute this case. Viewing AttributeError exception message line error assist convenient order identify attribute were trying access Generally, whenever exception like such raised, signifies that probably dealing with instance that type were looking for. consider another example better clarification: Example: defining list my_list using 'append()' method list my_list.append( printing final list print( my_list Output: Traceback (most recent call last): File "D:\Python\pytrace.py", line my_list.append( AttributeError: 'tuple' object attribute 'append' Explanation: above snippet code, have defined list used append() method another element list. However, result, might expecting my_list type list, which contains method known append(). When received AttributeError exception, observed that raise while calling append() function that expressed that probably working with object type were looking for. Generally, this happens when looking object returned from method function call particular type, end, left with None type object. above scenario, message line error will show, AttributeError: 'NoneType' object attribute 'append'. ImportError exception, also known ImportError, raised whenever something goes wide mark with import statement. will obtain this exception, subclass known ModuleNotFoundError, module library attempting import cannot found importing something from library module does happen documentation Python signifies when ImportError exception raised: This exception raised whenever import statement finds difficult load library module. Moreover, raised whenever 'from list' from import contains name that can't located. consider example demonstrating ImportError ModuleNotFoundError raised. Example: importing library module import from collections import Output: Output first line Traceback (most recent call last): File "D:\Python\pytrace.py", line import ModuleNotFoundError: module named 'xyz' Output second line Traceback (most recent call last): File "D:\Python\pytrace.py", line from collections import ImportError: cannot import name 'xyz' from 'collections' (D:\Python39\lib\collections\__init__.py) Explanation: above snippet code, have tried importing library module that does exist, xyz, resulting case ModuleNotFoundError exception. other hand, when tried importing module that does exist from collections library that does exist, program raised ImportError exception. message lines error bottom tracebacks display which specific thing could imported, both above cases, xyz. IndexError exception, also known IndexError, generally raised whenever retrieve index from series sequence, such tuple list, index found series sequence. documentation Python signifies when Index exception raised: This exception raised whenever subscript series sequence range. consider following example demonstrating IndexError exception raised. Example: defining list my_list "Apple", "Peaches", "Mango", "Banana" printing element list print( my_list[ Output: Traceback (most recent call last): File "D:\Python\pytrace.py", line print( my_list[ IndexError: list index range Explanation: above snippet code, have defined list my_list containing four elements. However, when attempted print element index number program raised IndexError exception. message stated error IndexError exception does provide proper knowledge. observe that have sequence reference, i.e., range addition type sequence, list following scenario. Together with rest traceback, that data generally enough help rapidly recognize problem. KeyError exception, also known KeyError, similar IndexError exception raised whenever access that mapping, generally observed data structure like dictionary. documentation Python signifies when KeyError exception raised: This exception raised whenever dictionary (mapping) found existing keys. consider following example understand KeyError exceptions raised. Example: defining dictionary mydict {'Mike' 'James' 'Drake' 'Jenny' accessing dictionary print( mydict['Sam'] Output: Traceback (most recent call last): File "D:\Python\pytrace.py", line print( mydict['Sam'] KeyError: 'Sam' Explanation: above snippet code, have defined dictionary with some keys values assigned each key. have then tried access value key, which available dictionary. result, program raised KeyError exception saying that looking could found. NameError exception, also known NameError, raised whenever have referenced variable, class, function, module, other names that been defined within lines code. documentation Python signifies when NameError exception raised. This exception raised whenever local global name found. consider following example order understand NameError exception raised. Example: defining function myself( name print("My name is", nam) Calling function myself( "Robin" Output: Traceback (most recent call last): File "D:\Python\pytrace.py", line myself( "Robin" File "D:\Python\pytrace.py", line myself print("My name is", nam) NameError: name 'nam' defined Explanation: above example, have defined function myself(), which takes argument name. However, have misspelled name with following line while printing some statements. have then called function. result, program raised NameError exception name 'nam' defined program. SyntaxError exception, also known SyntaxError, generally raised whenever syntax Python program incorrect. document Python signifies when SyntaxError exception raised: This exception raised whenever parser encounters error Python syntax. consider example illustrating SyntaxError exception raised. Example: defining function myself( name print("My name is", nam) Calling function myself( "Robin" Output: File "D:\Python\pytrace.py", line myself( name SyntaxError: invalid syntax Explanation: above syntax, have defined function myself(), forget include colon mark after function definition. result, when executed function, program raised SyntaxError exception, saying issue with program's syntax. (caret) mark below line code indicates location problem. Moreover, observe that SyntaxError traceback message does display regular first-line saying "Traceback (most recent call last):". This because SyntaxError exception raised when Python tries analyze line code, lines code being processed literal way. TypeError exception, also known TypeError, raised whenever syntax tries perform some function with instance that cannot perform that function, like attempting integer string calling len() function object where length specified. documentation Python signifies when TypeError exception raised: This exception raised whenever function operation applied object wrong type. consider following example demonstrating TypeError exception raised. Example: defining some variables myint mystr '10' performing addition objects different types myadd myint mystr printing result print("Result:", myadd) Output: Traceback (most recent call last): File "D:\Python\pytrace.py", line myadd myint mystr TypeError: unsupported operand type(s) 'int' 'str' Explanation: above example, have defined variables integer string. have then performed addition operation these variables tried printing result. However, program returned TypeError exception attempted integer value with string value. Similarly, this exception raised when used len() function 'int' data type. consider following example illustrating same. Example: defining variable myint finding length object type 'int' print("Length:", len(myint)) Output: Traceback (most recent call last): File "D:\Python\pytrace.py", line print("Length:", len(myint)) TypeError: object type 'int' len() Explanation: above example, have defined variable data type 'int' attempted perform len() function variable. However, program raised TypeError, saying that cannot perform len() function with object data type 'int'. ValueError exception, also known ValueError, raised whenever object's value correct. This exception similar IndexError exception index value range sequence case IndexError exception. contrast, ValueError exception more general scenario. documentation Python signifies when ValueError exception raised: This exception raised whenever function operation receives parameter with correct type; however, unfitting value state defined more specific exception like IndexError. consider example based ValueError exception. Example: defining variables var1, var2, var3 [10, Output: Traceback (most recent call last): File "D:\Python\pytrace.py", line var1, var2, var3 [10, ValueError: many values unpack (expected Explanation: above example, have tried unpack four values only three. Thus, result, program raised ValueError exception. consider another example based ValueError exception. Example: defining variable var1, var2, var3, var4 [10, Output: Traceback (most recent call last): File "D:\Python\pytrace.py", line var1, var2, var3, var4 [10, ValueError: enough values unpack (expected Explanation: above syntax, have tried unpack many values. result, program returns ValueError exception, saying there enough values unpack (expected Next TopicTime clock() Method Python prev next