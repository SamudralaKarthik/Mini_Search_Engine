next prev Validate Address Python this tutorial, will learn validate address Python using several ways. useful when write level programs. developing some applications Django Flask, need determine user's address valid not. address validation essential preventing fraud, providing targeted location services users, many more. Let's have brief introduction address. What (Internet Protocol) Address? stands internet protocol; unique address allocated every computer connected internet. refers rules that govern part data sent around internet. combines resolution information transfer from computer another. There versions addresses mainly IPv4 IPv6. IPv4 IPv6 IPv4 address that familiar probably. IPv4 consists four numbers (each between 255) separated periods. address format 32-bit numeric address written four decimal numbers called (octal). provides combination billion unique addresses. Example 32.253.431.175 IPv6 newer version slightly different from previous version. looks like below. 3002:0bd6:0000:0000:0000:ee00:0033:6778 uses combination alphanumeric characters. number available spaces that IPv4 address consists thrice. 128-bit address space that combines 2128 unique addresses, whereas IPv4 allows billion unique space addresses. That's 1028 times many addresses IPv4. need IPv6? Even though IPv4 known "version first version ever created been around since invention internet. that time, engineers could have imagined that billion addresses won't enough fulfill requirements. 2022, about 4.29 billion addresses were already used various smartphones, laptops, tablets. Validate address Python this section, will various ways validate address. Method Using count() method Let's understand following example Example validate_ip(s): check number periods s.count('.') return 'Invalid address' ip_list list(map(str, s.split('.'))) check range each number between periods element ip_list: int(element) int(element) (element[0]=='0' len(element)!=1): return 'Invalid address' return 'Valid address' print(validate_ip('255.1.2.2')) Output: Valid Address Explanation above code, have used count() method count (dot) separator. count separator less than entered address invalid. Then check range each number between periods. condition satisfied means entered valid. easy example validating address. Method Using set() Let's understand following example Example validate_ip(s): initialize count variable count check period present range(0, len(s)): if(s[i] '.'): count count+1 if(count return check range numbers between periods set_val= set() range(0, 256): set_val.add(str(i)) count temp range(0, len(s)): if(s[i] '.'): temp temp+s[i] else: if(temp set_val): count count+1 temp if(temp set_val): count count+1 verifying conditions if(count return 'Valid address' else: return 'Invalid address' print(validate_ip('110.234.52.124')) Output: Valid address Explanation code, have initialized count variable that counts number from address. count separator less than entered address invalid, condition true, initialize set_val set. set_val, added numbers string range between 256. After that, initialized count variable again temp empty string. loop iterated checked string equal dot; condition True, then that string temp. Otherwise, check string already present set_val; true, increase count clear temp. Then verify count; equal four, have valid address. Method Using ipadress() Module Python comes with handy module known ipaddress that used validate addresses perform some basic arithmetic operations addresses. doesn't evaluate address explicitly that address valid address, need some logic provides most robust secure determine valid address. supports both IPv4 IPv6 addresses. this module, need import into Python code. Let's understand following example. Example import ipaddress validate_ip(ip_str): try: ip_obj ipaddress.ip_address(ip_str) print(f"The address {ip_obj} valid") except ValueError: print(f"The address {ip_str} valid") validate_ip("127.0.0.2.4") validate_ip("127.0.0.0") Output: address '127.0.0.2.4' valid address 127.0.0.0 valid advantage using this module that validate IPv4 IPv6 addresses. validate_ip("2001:0db8:75a2:0000:0000:8a2e:0340:5625") Output: address 2001:db8:75a2::8a2e:340:5625 valid Validate using Regex this method, will custom regex check shape provided string. Python provides library, which used parse match Regex. This method more efficient robust than ipaddress module; takes more lines code checks that string only right shape value between 255. must also write logics check IPv4 IPv6 addresses. validate IPv4, create Regex string that matches IPv4 address. Let's understand following Regex. "[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}" Let's understand components one. [0-9] indicates that searching numeric character between {1,3} indicates that looking many three instances previous character set. tells parser check character. Regex, need escape specify that looking special character. Those three components make byte address (For example 255.) repeat these components four times. need import module Regex Python. Next, will match() function check input against Regular expression. Example import match re.match(r"[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}", "127.0.0.1") print(match) Output: let's implement complete validation function. Example import validate_ip(ip_address): match re.match(r"[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}", ip_address) bool(match): print(f"The address {ip_address} valid") return False bytes ip_address.split(".") ip_byte bytes: int(ip_byte) int(ip_byte) 255: print(f"The address {ip_address} valid") return False print(f"The address {ip_address} valid") return True validate_ip('127.0.0.1') Output: address 127.0.0.1 valid Conclusion this tutorial, have learnt about various ways validate addresses, including built-in module ipaddress. learned IPv4 different from IPv6 address require IPv6 addresses. easily find your current address your system. Open device setting then open System Preference Network Select either WiFi Ethernet, depending upon your connection. Next TopicWrite Program Print Diagonal Elements Given Matrix prev next