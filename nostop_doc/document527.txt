next prev Create Real Time Voice Translator using Python this tutorial, we're going develop real time voice translator using Python. Required Modules: Following libraries modules will need creating real time translator: playsound: This module plays sounds Python !pip3 install playsound Googletrans: "Googletrans" module used free unlimited Python library that implements Google Translate !pip3 install googletrans Speech Recognition Module: library which used Python recognizing commands provided. preferred method perform Speech Recognition. !pip3 install SpeechRecognition PyAudio: This module used taking command from user install PyAudio-0.2.11-cp39-cp39-win_amd64.whl gTTs: gTTs supports various languages, such English, Hindi, Tamil, French, German, many more. !pip3 install gTTs !pip3 install gTTS-token Basic Idea: real-time translator that translate human language voice inputs generates output voice translation required language. built using Google's googleTrans speech_recognition library Python. program will convert texts from language into another language save them audio file format. playsound module will used play created format file. Following that, created file removed using module. Step Step Implementation Step Import required Modules from playsound import playsound import speech_recognition from googletrans import Translator Trans from gtts import gTTS import import pyaudio Step Creating tuple languages mapped with their code Step Taking voice commands from user end. First, will capture user's Voice command will take command through built-in microphone device take_command(): s_r.Recognizer() with s_r.Microphone() source: print ("listening voice...") r1.pause_threshold audio1 r1.listen(source) try: print ("Recognizing voice...") query_1 r1.recognize_google(audio, language 'en-in') print user said? {query_1}\n") except Exception just case didn't recognise voice language properly print ("The user requested please that again...") return "None" return query_1 Step Taking voice input from user end. Here, will take user's voice input from user query_1 take_command() while (query_1 "None"): query_1 take_command() Step Implementing input destination language from user end, user input with language code. destination_language(): print("Please enter language which want convert above input English, Hindi, German, French etc.") print() Now, will implement input destination language which user wants translate voice command: to_language take_command() while (to_language "None"): to_language take_command() to_language to_language.lower() return to_language to_language destination_language() Now, will input destination language with code while (to_language dic_language): print ("The language which user wants convertthe voice command\ currently available, user requested input some other language") print() to_language destination_language() to_language dic_language[dic_language.index(to_language)+1] Step will invoke Translator. Here, will invoke Google Translator translator1 Trans() Step Now, will translate from dest will translate from dest text_to_translate_1 translator1.translate1(query_1, dest to_language) text1 text_to_translate_1.text Step Now, Save Translated files delete them after playing. will using Google-Text-to-Speech i.e., gTTS() function gtts module speaking translated text into input destination language selected user which stored to_language. have also given third argument False because speaks very slowly default speak gTTS(text text1, language to_language, slow False) will using save() function saving translated speech #captured_JTP_voice.mp3 file speak.save("captured_JTP_voice.mp3") last, will using module running translated voice. PS('captured_JTP_voice.mp3') os.remove('captured_JTP_voice.mp3') print(text) Full Implementation Code: from playsound import playsound import speech_recognition from googletrans import Translator Trans from gtts import gTTS import import pyaudio First, will capture user's Voice command will take command through built-in microphone device take_command(): s_r.Recognizer() with s_r.Microphone() source: print ("listening voice...") r1.pause_threshold audio1 r1.listen(source) try: print ("Recognizing voice...") query_1 r1.recognize_google(audio, language 'en-in') print user said? {query_1}\n") except Exception just case didn't recognise voice language properly print ("The user requested please that again...") return "None" return query_1 Here, will take user's voice input from user query_1 take_command() while (query_1 "None"): query_1 take_command() destination_language(): print("Please enter language which want convert above input English, Hindi, German, French etc.") print() Now, will implement input destination language which user wants translate voice command: to_language take_command() while (to_language "None"): to_language take_command() to_language to_language.lower() return to_language to_language destination_language() Now, will input destination language with code while (to_language dic_language): print ("The language which user wants convertthe voice command\ currently available, user requested input some other language") print() to_language destination_language() to_language dic_language[dic_language.index(to_language)+1] Here, will invoke Google Translator translator1 Trans() will translate from dest text_to_translate_1 translator1.translate1(query_1, dest to_language) text1 text_to_translate_1.text will using Google-Text-to-Speech i.e., gTTS() function gtts module speaking translated text into input destination language selected user which stored to_language. have also given third argument False because speaks very slowly default speak gTTS(text text1, language to_language, slow False) will using save() function saving translated speech #captured_JTP_voice.mp3 file speak.save("captured_JTP_voice.mp3") last, will using module running translated voice. PS('captured_JTP_voice.mp3') os.remove('captured_JTP_voice.mp3') print(text) Output: Next TopicHow Sort Tuple Python prev next