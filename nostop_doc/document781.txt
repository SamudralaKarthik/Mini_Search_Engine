next prev Loan Calculator using PyQt5 Python This article will demonstrate PyQt5 develop loan calculator. complete Python bindings available PyQt5. Cross-platform toolkit PyQt5 collection Python bindings version capabilities simplicity offered this toolkit make quite simple create interactive desktop application. platforms that supported, including Android, enables Python used alternative application development. implemented more than extension modules. This post mainly about building loan calculator using Python library called PyQt5. loan legal agreement between borrower lender whereby borrower gets money (the principle) that they must later repay. And, calculate this value, Loan Calculator. This Loan Calculator will built using PyQt5 library. will start with basic instructions followed. Steps implementing Make heading label with name calculator. Make label line edit pair interest rate, with label indicating what user must write line edit allowing text entry. Create pair similar manner amount year. Construct calculator push button. Design label that displays estimated monthly payment. Make label display total amount computed. Implementation steps back Change line edit only take numbers input; push button action. Within push button action, retrieve line edits' text. Determine line edit text empty zero, then return prevent continued execution procedure. Change value text integer. Determine monthly label. monthly amounts total, then label result. Walking through code import required modules from PyQt5.QtWidgets import from PyQt5 import QtCore, QtGui from PyQt5.QtGui import from PyQt5.QtCore import import First all, begin with, imported required modules into program. files imported include QtWidgets, QtCore, QtGui sys. creating window class class Window(QMainWindow): using constructor 	def __init__(self): 		super().__init__() setting title window 		self.setWindowTitle("Python setting width window 		self.wd_width setting height window 		self.wd_height setting geometry 		self.setGeometry(100, 100, self.wd_width, self.wd_height) calling function 		self.UiComponents() displaying widgets 		self.show() Then, created class which contains constructor initialise function. Next, title, width height window. Also, defined window's geometry. Then, displayed widgets present. function inserting components 	def UiComponents(self): defining heading label 		heading QLabel("Loan Calculator", self) Mentioning geometry heading 		heading.setGeometry(0, 400, setting font 		font QFont('Times', 		font.setBold(True) 		font.setItalic(True) 		font.setUnderline(True) Mentioning font heading 		heading.setFont(font) Giving alignment heading 		heading.setAlignment(Qt.AlignCenter) Mentioning color effect heading 		color QGraphicsColorizeEffect(self) 		color.setColor(Qt.darkCyan) 		heading.setGraphicsEffect(color) Then defined another function which will creating heading various labels setting their properties. Next, heading loan calculator position geometry along with font properties colour effects. Defining interest label 		int_label QLabel("Annual Interest", self) Mentioning properties interest label 		int_label.setAlignment(Qt.AlignCenter) 		int_label.setGeometry(20, 100, 170, 		int_label.setStyleSheet("QLabel" 							"{" 							"border solid black;" 							"background rgba(70, 35);" 							"}") 		int_label.setFont(QFont('Times', Mentioning QLineEdit object getting interest 		self.rate QLineEdit(self) taking only numbers input 		intOnly QIntValidator() 		self.rate.setValidator(intOnly) Mentioning properties rate line edit 		self.rate.setGeometry(200, 100, 180, 		self.rate.setAlignment(Qt.AlignCenter) 		self.rate.setFont(QFont('Times', Defining label number years 		num_label QLabel("Years self) Adding properties years label 		num_label.setAlignment(Qt.AlignCenter) 		num_label.setGeometry(20, 150, 170, 		num_label.setStyleSheet("QLabel" 							"{" 							"border solid black;" 							"background rgba(70, 35);" 							"}") 		num_label.setFont(QFont('Times', Defining QLineEdit object years 		self.years QLineEdit(self) taking input numbers only 		intOnly QIntValidator() 		self.years.setValidator(intOnly) Mentioning properties rate line edit 		self.years.setGeometry(200, 150, 180, 		self.years.setAlignment(Qt.AlignCenter) 		self.years.setFont(QFont('Times', Defining loan amount label 		amt_label QLabel("Amount", self) Mentioning properties amount label 		amt_label.setAlignment(Qt.AlignCenter) 		amt_label.setGeometry(20, 200, 170, 		amt_label.setStyleSheet("QLabel" 							"{" 							"border solid black;" 							"background rgba(70, 35);" 							"}") 		amt_label.setFont(QFont('Times', Defining QLineEdit object getting amount 		self.amount QLineEdit(self) Taking input numbers only 		intOnly QIntValidator() 		self.amount.setValidator(intOnly) Adding properties rate line edit 		self.amount.setGeometry(200, 200, 180, 		self.amount.setAlignment(Qt.AlignCenter) 		self.amount.setFont(QFont('Times', Then, created various labels their properties. labels were annual interest, years amount. They were first created, then defined their properties their positions. Then also defined their font styles sizes displaying. Along with these labels, also created simultaneous labels text entered displayed, i.e. textareas. Defining push button 		calc QPushButton("Compute Payment", self) Mentioning geometry push button 		calc.setGeometry(125, 270, 150, Inserting action calc button 		calc.clicked.connect(self.calc_action) Defining label display monthly payment 		self.mp_payment QLabel(self) Adding properties payment label 		self.mp_payment.setAlignment(Qt.AlignCenter) 		self.mp_payment.setGeometry(50, 340, 300, 		self.mp_payment.setStyleSheet("QLabel" 									"{" 									"border solid black;" 									"background white;" 									"}") 		self.mp_payment.setFont(QFont('Arial', 11)) Defining label display monthly payment 		self.yp_payment QLabel(self) Adding some properties payment label 		self.yp_payment.setAlignment(Qt.AlignCenter) 		self.yp_payment.setGeometry(50, 410, 300, 		self.yp_payment.setStyleSheet("QLabel" 									"{" 									"border solid black;" 									"background white;" 									"}") 		self.yp_payment.setFont(QFont('Arial', 11)) Then created push button payment labels. button, first created then geometry then added functionality order perform function being clicked. Then created monthly payment label defined properties font. Similarly, created yearly payment label defined properties fonts too. function calculating monthly annual payments 	def calc_action(self): displaying annual interest rate 		annualIntrstRate self.rate.text() condition when there number entered 		if len(annualIntrstRate) annualIntrstRate '0': 			return Showing number years 		numOfYrs self.years.text() condition when there number entered 		if len(numOfYrs) numOfYrs '0': 			return taking loan amount 		loanAmt self.amount.text() there number entered 		if len(loanAmt) loanAmt '0': 			return converting text integers 		annualIntrstRate int(annualIntrstRate) 		numOfYrs int(numOfYrs) 		loanAmt int(loanAmt) getting monthly rate interest 		mnthlyIntrstRate annualIntrstRate 1200 Analysing monthly payemnt 		mnthlyPaymnt loanAmt mnthlyIntrstRate mnthlyIntrstRate) (numOfYrs 12)) Defining formatting 		mnthlyPaymnt "{:.2f}".format(mnthlyPaymnt) setting text label 		self.mp_payment.setText("Monthly Payment str(mnthlyPaymnt)) getting total payment 		ttlPayment float(mnthlyPaymnt) numOfYrs 		ttlPayment "{:.2f}".format(ttlPayment) Mentioning text label 		self.yp_payment.setText("Total Payment str(ttlPayment)) Then, created function calculate monthly yearly payments. entire result based also annual interest rate variable's value months value values which were numerical form were converted integers from text. after final calculation value derived certain mentioned formula stored total payment variable. creating pyqt5 application base QApplication(sys.argv) creating instance Window window Window() starting application sys.exit(base.exec()) Finally, created instance window displaying application then executed application calling exit() method from system. Complete Code Python program create Loan Calculator using PyQt5 Python import required modules from PyQt5.QtWidgets import from PyQt5 import QtCore, QtGui from PyQt5.QtGui import from PyQt5.QtCore import import creating window class class Window(QMainWindow): using constructor 	def __init__(self): 		super().__init__() setting title window 		self.setWindowTitle("Python setting width window 		self.wd_width setting height window 		self.wd_height setting geometry 		self.setGeometry(100, 100, self.wd_width, self.wd_height) calling function 		self.UiComponents() displaying widgets 		self.show() function inserting components 	def UiComponents(self): defining heading label 		heading QLabel("Loan Calculator", self) Mentioning geometry heading 		heading.setGeometry(0, 400, setting font 		font QFont('Times', 		font.setBold(True) 		font.setItalic(True) 		font.setUnderline(True) Mentioning font heading 		heading.setFont(font) Giving alignment heading 		heading.setAlignment(Qt.AlignCenter) Mentioning color effect heading 		color QGraphicsColorizeEffect(self) 		color.setColor(Qt.darkCyan) 		heading.setGraphicsEffect(color) Defining interest label 		int_label QLabel("Annual Interest", self) Mentioning properties interest label 		int_label.setAlignment(Qt.AlignCenter) 		int_label.setGeometry(20, 100, 170, 		int_label.setStyleSheet("QLabel" 							"{" 							"border solid black;" 							"background rgba(70, 35);" 							"}") 		int_label.setFont(QFont('Times', Mentioning QLineEdit object getting interest 		self.rate QLineEdit(self) taking only numbers input 		intOnly QIntValidator() 		self.rate.setValidator(intOnly) Mentioning properties rate line edit 		self.rate.setGeometry(200, 100, 180, 		self.rate.setAlignment(Qt.AlignCenter) 		self.rate.setFont(QFont('Times', Defining label number years 		num_label QLabel("Years self) Adding properties years label 		num_label.setAlignment(Qt.AlignCenter) 		num_label.setGeometry(20, 150, 170, 		num_label.setStyleSheet("QLabel" 							"{" 							"border solid black;" 							"background rgba(70, 35);" 							"}") 		num_label.setFont(QFont('Times', Defining QLineEdit object years 		self.years QLineEdit(self) taking input numbers only 		intOnly QIntValidator() 		self.years.setValidator(intOnly) Mentioning properties rate line edit 		self.years.setGeometry(200, 150, 180, 		self.years.setAlignment(Qt.AlignCenter) 		self.years.setFont(QFont('Times', Defining loan amount label 		amt_label QLabel("Amount", self) Mentioning properties amount label 		amt_label.setAlignment(Qt.AlignCenter) 		amt_label.setGeometry(20, 200, 170, 		amt_label.setStyleSheet("QLabel" 							"{" 							"border solid black;" 							"background rgba(70, 35);" 							"}") 		amt_label.setFont(QFont('Times', Defining QLineEdit object getting amount 		self.amount QLineEdit(self) Taking input numbers only 		intOnly QIntValidator() 		self.amount.setValidator(intOnly) Adding properties rate line edit 		self.amount.setGeometry(200, 200, 180, 		self.amount.setAlignment(Qt.AlignCenter) 		self.amount.setFont(QFont('Times', Defining push button 		calc QPushButton("Compute Payment", self) Mentioning geometry push button 		calc.setGeometry(125, 270, 150, Inserting action calc button 		calc.clicked.connect(self.calc_action) Defining label display monthly payment 		self.mp_payment QLabel(self) Adding properties payment label 		self.mp_payment.setAlignment(Qt.AlignCenter) 		self.mp_payment.setGeometry(50, 340, 300, 		self.mp_payment.setStyleSheet("QLabel" 									"{" 									"border solid black;" 									"background white;" 									"}") 		self.mp_payment.setFont(QFont('Arial', 11)) Defining label display monthly payment 		self.yp_payment QLabel(self) Adding some properties payment label 		self.yp_payment.setAlignment(Qt.AlignCenter) 		self.yp_payment.setGeometry(50, 410, 300, 		self.yp_payment.setStyleSheet("QLabel" 									"{" 									"border solid black;" 									"background white;" 									"}") 		self.yp_payment.setFont(QFont('Arial', 11)) function calculating monthly annual payments 	def calc_action(self): displaying annual interest rate 		annualIntrstRate self.rate.text() condition when there number entered 		if len(annualIntrstRate) annualIntrstRate '0': 			return Showing number years 		numOfYrs self.years.text() condition when there number entered 		if len(numOfYrs) numOfYrs '0': 			return taking loan amount 		loanAmt self.amount.text() there number entered 		if len(loanAmt) loanAmt '0': 			return converting text integers 		annualIntrstRate int(annualIntrstRate) 		numOfYrs int(numOfYrs) 		loanAmt int(loanAmt) getting monthly rate interest 		mnthlyIntrstRate annualIntrstRate 1200 Analysing monthly payemnt 		mnthlyPaymnt loanAmt mnthlyIntrstRate mnthlyIntrstRate) (numOfYrs 12)) Defining formatting 		mnthlyPaymnt "{:.2f}".format(mnthlyPaymnt) setting text label 		self.mp_payment.setText("Monthly Payment str(mnthlyPaymnt)) getting total payment 		ttlPayment float(mnthlyPaymnt) numOfYrs 		ttlPayment "{:.2f}".format(ttlPayment) Mentioning text label 		self.yp_payment.setText("Total Payment str(ttlPayment)) creating pyqt5 application base QApplication(sys.argv) creating instance Window window Window() starting application sys.exit(base.exec()) Output: output above-mentioned code attached below screenshot. Next TopicFlappy Bird Game using PyGame Python prev next