next prev Python Magic Methods "magic" class create, define special methods called "magic methods." example, magic methods __init__ __str__are always wrapped double underscores from both sides. granting accessibility Python's built-in syntax tools, magic methods improve structure classes. integrate Python's built-in classes with classes. class which inherited from built-in class known child class. child class access attributes parent class, including methods. utilizing essential built-in features, customize some tasks class using magic methods. __init__ Method After have constructed instance class, before that instance returned caller class, _init_ method executed. When create instance class, called automatically, just like constructors various programming languages like popular ones C++, Java, PHP, etc. These methods invoked after _new_ therefore referred initialising. should define instance parameters here. Code Python program show __init__ method works Creating class class methods(): __init__(self, *args): print ("Now called __init__ magic method, after initialised parameters") self.name args[0] self.std args[1] self.marks args[2] Student methods("Itika", 98) print(Student) print(f"Name, standard, marks student \n", Student.name, "\n", Student.std, "\n", Student.marks) Output: called __init__ magic method, after initialised parameters <__main__.methods object 0x3701290> Name, standard, marks student Itika __new__() Method magic method __new__() called implicitly __init__() method. instance returned __new__() method initialised. modify creation objects user-defined class, must supply modified implementation __new__() magic method. need provide first argument reference class whose object created this static function. Code Python program show __new__ method works Creating class class Method(object): __new__( print( "Creating instance __new__ method") return super(Method, cls).__new__(cls) Calling init method __init__( self print( "Init method called here" Method() Output: Creating instance __new__ method Init method called here <__main__.Method 0x30dfb88> __add__ Method magic method __add__to class instance's attributes. Consider scenario where object1 belongs class Method object2 belongs class Method both which have same attribute called "attribute" that stores value passed class while creating instance. specified attributes, __add__ function implicitly adds instances' same attributes, such object1.attribute object2.attribute, when action object1 object2 completed. Below code show attributes instances different classes without using __add__ magic method. Code Python program show attributes Creating class class Method: __init__(self, argument): self.attribute argument Creating second class class Method_2: __init__(self, argument): self.attribute argument creating instances instance_1 Method(" Attribute") print(instance_1.attribute) instance_2 Method_2(" 27") print(instance_2.attribute) Adding attributes instances print(instance_2.attribute instance_1.attribute) Output: Attribute Attribute using __add__ magic method code changes this. Code Python program show __add__ method works Creating class class Method: __init__(self, argument): self.attribute argument __add__(self, object1): return self.attribute object1.attribute Creating second class class Method_2: __init__(self, argument): self.attribute argument __add__(self, object1): return self.attribute object1.attribute instance_1 Method(" Attribute") print(instance_1) instance_2 Method_2(" 27") print(instance_2) print(instance_2 instance_1) Output: <__main__.Method object 0x37470f0> <__main__.Method_2 object 0x376beb8> Attribute Classes, Method Method_1 script above have property called "attribute" that stores string. create instances, instance_1 instances_2, with corresponding attributes Attribute" 27" values. __add__ method used translate action instance_1 instance_2 into instance_1 instance_2.attribute, which produces output Attribute). __repr__ Method class instance represented string using magic method __repr__. __repr__ method, which produces string output, automatically called whenever attempt print object that class. Code Python program show __repr__ magic method works Creating class class Method: Calling __init__ method initializing attributes class __init__(self, z): self.x self.y self.z Calling __repr__ method providing string printed each time instance printe __repr__(self): return f"Following values attributes class Method:\nx {self.x}\ny {self.y}\nz {self.z}" instance Method(4, print(instance) Output: Following values attributes class Method: __contains__ Method 'in' membership operator Python implicitly calls __contains__ method. __contains__ method determine element contained object's attributes. this method attributes that containers such lists, tuples, etc.). Code Python code show __contains__ magic method works Creating class class Method: Calling __init__ method initializing attributes __init__(self, attribute): self.attribute attribute Calling __contains__ method __contains__(self, attribute): return attribute self.attribute Creating instance class instance Method([4, Checking value present container attribute print("4 contained ""attribute"": instance) print("5 contained ""attribute"": instance) Output: contained attribute: True contained attribute: False have used __contanis__ magic method program above determine given integer contained attribute "attribute". this case, "attribute" list integers. integer present given list integers passed class Method attribute. While present list. __call__ Method When class instance called, Python interpreter calls magic method __call__. utilise __call__ method explicitly call operation using instance name rather than creating additional method carry specific activities. Code Python program show __call__ magic method works Creating class class Method: Calling __init__ method initializing attributes __init__(self, self.a Calling __call__ method multiply number attribute value __call__(self, number): return self.a number Creating instance proving value attribute instance Method(7) print(instance.a) Printing value attribute Calling instance while passing value which will call __call__ method print(instance(5)) Output: __iter__ Method given instance, generator object supplied using __iter__ method. benefit from __iter__ method, leverage iter() next() methods. Code Python program show __iter__ method works Creating class class Method: __init__(self, start_value, stop_value): self.start start_value self.stop stop_value __iter__(self): range(self.start, self.stop yield Creating instance instance iter(Method(3, print( next(instance) print( next(instance) print( next(instance) print( next(instance) print( next(instance) print( next(instance) Output: have calculated squares numbers code. numbers specified range, squares calculated program above (start stop). __iter__ method, which generates squares numbers between given range, called when call function iter(Method(3, 8)). example, we're using range therefore, calling next() method will produce results 64. Next TopicPython Tutorial prev next