next prev Python Inheritance Inheritance important aspect object-oriented paradigm. Inheritance provides code reusability program because existing class create class instead creating from scratch. inheritance, child class acquires properties access data members functions defined parent class. child class also provide specific implementation functions parent class. this section tutorial, will discuss inheritance detail. python, derived class inherit base class just mentioning base bracket after derived class name. Consider following syntax inherit base class into derived class. Syntax class derived-class(base class): 	<class-suite> class inherit multiple classes mentioning them inside bracket. Consider following syntax. Syntax class derive-class(<base class 1>, <base class 2>, ..... <base class n>): 	<class suite> Example class Animal: speak(self): print("Animal Speaking") #child class inherits base class Animal class Dog(Animal): bark(self): print("dog barking") Dog() d.bark() d.speak() Output: barking Animal Speaking Python Multi-Level inheritance Multi-Level inheritance possible python like other object-oriented languages. Multi-level inheritance archived when derived class inherits another derived class. There limit number levels which, multi-level inheritance archived python. syntax multi-level inheritance given below. Syntax class class1: 	<class-suite> class class2(class1): 	<class suite> class class3(class2): 	<class suite> Example class Animal: speak(self): print("Animal Speaking") #The child class inherits base class Animal class Dog(Animal): bark(self): print("dog barking") #The child class Dogchild inherits another child class class DogChild(Dog): eat(self): print("Eating bread...") DogChild() d.bark() d.speak() d.eat() Output: barking Animal Speaking Eating bread... Python Multiple inheritance Python provides flexibility inherit multiple base classes child class. syntax perform multiple inheritance given below. Syntax class Base1: 	<class-suite> class Base2: 	<class-suite> class BaseN: 	<class-suite> class Derived(Base1, Base2, ...... BaseN): 	<class-suite> Example class Calculation1: Summation(self,a,b): return a+b; class Calculation2: Multiplication(self,a,b): return a*b; class Derived(Calculation1,Calculation2): Divide(self,a,b): return a/b; Derived() print(d.Summation(10,20)) print(d.Multiplication(10,20)) print(d.Divide(10,20)) Output: issubclass(sub,sup) method issubclass(sub, sup) method used check relationships between specified classes. returns true first class subclass second class, false otherwise. Consider following example. Example class Calculation1: Summation(self,a,b): return a+b; class Calculation2: Multiplication(self,a,b): return a*b; class Derived(Calculation1,Calculation2): Divide(self,a,b): return a/b; Derived() print(issubclass(Derived,Calculation2)) print(issubclass(Calculation1,Calculation2)) Output: True False isinstance (obj, class) method isinstance() method used check relationship between objects classes. returns true first parameter, i.e., instance second parameter, i.e., class. Consider following example. Example class Calculation1: Summation(self,a,b): return a+b; class Calculation2: Multiplication(self,a,b): return a*b; class Derived(Calculation1,Calculation2): Divide(self,a,b): return a/b; Derived() print(isinstance(d,Derived)) Output: True Method Overriding provide some specific implementation parent class method child class. When parent class method defined child class with some specific implementation, then concept called method overriding. need perform method overriding scenario where different definition parent class method needed child class. Consider following example perform method overriding python. Example class Animal: speak(self): print("speaking") class Dog(Animal): speak(self): print("Barking") Dog() d.speak() Output: Barking Real Life Example method overriding class Bank: 	def getroi(self): 		return class SBI(Bank): getroi(self): return class ICICI(Bank): getroi(self): return Bank() SBI() ICICI() print("Bank Rate interest:",b1.getroi()); print("SBI Rate interest:",b2.getroi()); print("ICICI Rate interest:",b3.getroi()); Output: Bank Rate interest: SBI Rate interest: ICICI Rate interest: Data abstraction python Abstraction important aspect object-oriented programming. python, also perform data hiding adding double underscore (___) prefix attribute which hidden. After this, attribute will visible outside class through object. Consider following example. Example class Employee: __count __init__(self): Employee.__count Employee.__count+1 display(self): print("The number employees",Employee.__count) Employee() emp2 Employee() try: print(emp.__count) finally: emp.display() Output: number employees AttributeError: 'Employee' object attribute '__count' Next TopicAbstraction Python prev next