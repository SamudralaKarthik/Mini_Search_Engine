next prev Difflib module Python following tutorial, will understand Difflib module Python programming language. will discuss functioning this module along with some examples based classes. let's begun. Understanding Python Difflib module Difflib built-in module Python programming language consisting different simple functions classes that allow users compare data sets. module offers outputs these sequence comparisons format that read human, using deltas show differences more efficiently. difflib module generally used compare sequence strings. also compare other data types long they hash-able. know that object hash-able hash value does alter through duration lifetime. most commonly utilized classes Python difflib module Differ Sequence Matcher classes. There also other helper classes functions that assist with more particular operations. understand some these functions following sections. Understanding Sequence Matcher class first begin with fairly self-explanatory method difflib module: SequenceMatcher. SequenceMatcher method will compare provided strings return data representing similarity between strings. this method with help ratio() object. This object will return comparison data decimal format. example same shown below: Example: importing difflib library SequenceMatcher class import difflib from difflib import SequenceMatcher defining strings str_1 "Welcome Javatpoint" str_2 "Welcome Python tutorial" using SequenceMatcher() function my_seq SequenceMatcher(a str_1, str_2) printing result print("First String:", str_1) print("Second String:", str_2) print("Sequence Matched:", my_seq.ratio()) Output: First String: Welcome Javatpoint Second String: Welcome Python tutorial Sequence Matched: 0.5106382978723404 Explanation: above snippet code, have first imported difflib module along with SequenceMatcher Class. have then defined string values that will compare with help that class. After that, have created variable that encapsulates SequenceMatcher class with arguments, respectively. While method actually accepts three arguments: None, order method acknowledge strings, have assign each values string variables method, SquenceMatcher(a str_1, str_2). Once every required variable have been defined, SequenceMatcher been provided least arguments, print value with help ratio() object that have stated earlier. This object will determine ratio identical characters strings, output returned form decimal. Just like that, have compared simple strings received output their resemblances. Note: ratio() object among that associated with Sequence Matcher class. check official documentation Python find about more these objects perform different operations sequences. Understanding Differ class Differ class considered opposite SquenceMatcher; takes lines text finds differences between strings. Differ class special utilization deltas, making even more efficient readable humans spotting differences. example, while inserting characters second string comparison between strings, will before line that received extra characters. have probably guessed, deleting characters visible first string will cause appear before second line text. line same both sequences, will returned, line missing, then will appear. Moreover, also attributes such ratio(), which discussed previous example. consider following example understand working Differ class. Example: importing difflib module Differ class import difflib from difflib import Differ defining strings str_1 "They would like order soft drink" str_2 "They would like order corn pizza" using splitlines() function lines_str1 str_1.splitlines() lines_str2 str_2.splitlines() using Differ() compare() function dif difflib.Differ() my_diff dif.compare(lines_str1, lines_str2) printing results print("First String:", str_1) print("Second String:", str_2) print("Difference between Strings") print('\n'.join(my_diff)) Output: First String: They would like order soft drink Second String: They would like order corn pizza Difference between Strings They would like order soft drink They would like order corn pizza ^^^ Explanation: above snippet code, have imported difflib module along with Differ class. have then defined strings that want compare. have then invoked splitlines() function strings. Syntax: lines_str1 str_1.splitlines() lines_str2 str_2.splitlines() This function allows compare strings each line rather than each character. Once have defined variable consisting Differ class, create another containing Differ with compare() object that takes strings arguments. Syntax: my_diff dif.compare(lines_str1, lines_str2) call print() function join my_diff variable with line enter that output formatted method that makes more readable. Understanding get_close_matches method difflib module serves another simple powerful utility get_close_matches method. This method exactly what sounds like: tool that will accept parameters return closest matches target string. pseudocode, function runs following way: Syntax: get_close_matches(target_word, list_of_possibilities, res_limit, cutoff) observe above syntax, get_close_matches() method accepts four parameters; however, only requires first order return output. first argument word that targeted; want method return similarities. second argument array variables terms that points array strings. third argument enables user define limit number outputs that returned. last argument determines similarity between words need order returned output. With first arguments alone, function will return outputs basis default cut-off range default result limit consider following example understand working this function. Example: importing difflib module get_close_matches method import difflib from difflib import get_close_matches using get_close_matches method my_list get_close_matches('mas', ['master', 'mask', 'duck', 'cow', 'mass', 'massive', 'python', 'butter']) printing list print("Matching words:", my_list) Output: Matching words: ['mass', 'mask', 'master'] Explanation: above snippet code, have imported difflib module get_close_matches method. have then used get_close_matches() method list items with some similarities their characters. Once execute program, function will return only three words that have similar letters them even though there fourth item similar word 'mas': 'massive'. Now, defining result_limit cutoff following example: Example: importing difflib module get_close_matches method import difflib from difflib import get_close_matches using get_close_matches method my_list get_close_matches( 'mas', ['master', 'mask', 'duck', 'cow', 'mass', 'massive', 'python', 'butter'], cutoff printing list print("Matching words:", my_list) Output: Matching words: ['mass', 'mask', 'master', 'massive'] Explanation: above snippet code, have yielded four results that least similar word 'mas'. cutoff equivalent original just defined same value default, 0.6. However, change this parameter make results more less strict. closer stricter constraints will Understanding unified_diff context_diff classes There classes difflib that work identical ways: unified_diff context_diff. only chief difference between result. unified_diff class accepts strings data then returns each word that either inserted deleted from first. consider following example better understanding. Example: importing required modules import import difflib from difflib import unified_diff defining string variables str_1 ['Mark\n', 'Henry\n', 'Richard\n', 'Stella\n', 'Robin\n', 'Employees\n'] str_2 ['Arthur\n', 'Joseph\n', 'Stacey\n', 'Harry\n', 'Emma\n', 'Employees\n'] using unified_diff() function sys.stdout.writelines(unified_diff(str_1, str_2)) Output: +++ -1,6 +1,6 -Mark -Henry -Richard -Stella -Robin +Arthur +Joseph +Stacey +Harry +Emma Employees Explanation: above snippet code, have imported required modules defined variables storing some words. have then used unified_diff() function remove words from first variable words from second variable first one. result, observe that unified_diff returns removed words prefixed with returns added words prefixed with +. final word, 'Employees', consists prefix present both strings. context_diff class works similar manner unified_diff. However, instead revealing what inserted deleted from original string, simply returns what lines have changed returning changed lines with prefix '!'. consider following example understand working this class. Example: importing required modules import import difflib from difflib import context_diff defining string variables str_1 ['Mark\n', 'Henry\n', 'Richard\n', 'Stella\n', 'Robin\n', 'Employees\n'] str_2 ['Arthur\n', 'Joseph\n', 'Stacey\n', 'Harry\n', 'Emma\n', 'Employees\n'] using context_diff() function sys.stdout.writelines(context_diff(str_1, str_2)) Output: *************** **** Mark Henry Richard Stella Robin Employees ---- Arthur Joseph Stacey Harry Emma Employees Explanation: above example, have used context_diff remove words first string. result same observed words altered described with prefix. Next TopicConvert Column Type from String Datetime Format Pandas DataFrame prev next