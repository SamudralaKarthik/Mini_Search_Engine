next prev Fabric Module Python Linux users must variety administrative general duties regularly, such reloading apache server after making changes, developing deploying applications, accessing certain files, these operations regularly, (Secure Shell) necessary. Fabric useful Python module that works with operating system automate variety application development administration activities. This command-line program basic straightforward use. This article demonstrates install utilize fabric library Python 3+. extends APIs Invoke (subprocess command execution command-line features) Paramiko (SSH protocol implementation), complementing providing extra capabilities. project's maintainer keeps roadmap. Fabric's project information, such changelog contribution requirements, available official website. code documentation site, docs.fabfile.org, extensive documentation. paramiko library that allows basic lower-level tasks. Fabric library that uses paramiko internally execute various higher-level tasks (for purposes). nutshell, want ssh, paramiko; want more, such running configuration, installing something server, deploying code, fabric script. will make your life easier requiring write fewer lines code than used paramiko directly. (and don't worry, because paramiko used internally fabric). Through imported library, Paramiko simply provides easy method utilize Python. fabric enables create "fabfile" perform various actions that programmed into This anything want example, have fabfile that links personal server, CDs into proper directory, pull branch transfers different config files correct places (uwsgi, Nginx), restarts appropriate services. consequence, push latest version site online with single command local fabric also makes Paramiko dependency. know that fabric library uses paramiko module internally look paramiko module python library. creation SSHClient object first step high-level client API. Pass socket socket-like object) Transport more direct control, then start server start client negotiate with remote host server client. client, responsible verifying server's host authenticating using password private key. (Paramiko handles signature verification, you'll need provide private keys double-check that content public matches what intended.) You, server, charge determining which users, passwords, keys accept, well which channels enable. After you've completed party might flow-controlled channels. look code usage fabric module Python:: Code:: sample code show uses fabric module Python have different functions perform different operations remote site server initial step these functions make secure connection remote side server secure connection established successfully next step perform specified operation corresponding function fabric module imported which will used various functions within this model from fabric import Connection system module also imported exit function import this first function that will used create working directory remote site server when this function asks user name directory that user wants create remote site server once user provides name directory that particular directory created remote site server result conveyed reuse createWorkingDir(): print("Enter name directory that want create") dir_name input() with Connection("superbook",user="client",connect_kwargs={"password":"nirnay"}) with c.cd("/home/client/Desktop"): c.run("mkdir {}".format(dir_name)) c.run("ls {}".format(dir_name)) print("{} directory created sucessfully.".format(dir_name)) this another function that have written that operate changing directory moving another directory remote site server executing this function asks name directory which want move after adding name directory current execution code gets moved directory whose name added user this function completion changes current working directory program execution moveToDir(): print("Enter name directory which want move") dir_name input() with Connection("superbook",user="client",connect_kwargs={"password":"nirnay"}) with c.cd("/home/client/Desktop/{}".format(dir_name)): c.run("pwd") print("directory changed successfully") #This function used create files remote site server execution this function user prompted with message asking pee name directory which user wants create files after specifying name directory demo files created that directory successful creation files specified directory user prompted with successful message confirming successful creation files particular specified Directory remote side server create files(): print("Enter name directory which want create files") dir_name input() with Connection("superbook",user="client",connect_kwargs={"password":"nirnay"}) with c.cd("/home/client/Desktop/{}".format(dir_name)): c.run("touch files{1..15}") print("Files created sucessfully directory.".format(dir_name)) main motive this function list files that present particular directory adding name directory whose files want list files that present that particular specified directory listed displayed user point noted that files getting list present remote server local machine listFilesInDir(): print("Enter name directory which want list files") dir_name input() with Connection("superbook",user="client",connect_kwargs={"password":"nirnay"}) with c.cd("/home/client/Desktop/{}".format(dir_name)): c.run("ls") print("Files listed sucessfully directory.".format(dir_name)) similar previous function this function also used list directories instead files only difference between previously written function this function that this function list directories inside directory previous function list files inside directory similar previous function this function also asks name directory whose directories want list directories which listed children directories directory whose name added user listAllDirs(): with Connection("superbook",user="client",connect_kwargs={"password":"nirnay"}) with c.cd("/home/client/Desktop"): c.run("ls") print("All dirs listed sucessfully.") this function kind combination above return functions that will used list files well directories from current execution directory program user this function instead calling separate above written functions that will return same data which collectively returned this function print files directories current working directory recursive manner that means there directory inside directory that contents nested directories also listed this functions whether contents files directories them will listed with thisfunction listAllDirsAndFilesInTreeMode(): with Connection("superbook",user="client",connect_kwargs={"password":"nirnay"}) with c.cd("/home/client/Desktop"): c.run("tree print("All dirs files listed sucessfully.") main function written call above detail functions verify their functionalities calling each them each them provide separate unique operation remote site server taking various inputs providing different food accordingly. main(): while(True): print("Select operation want do::") print("1. list directories which present.") print("2. create directory.") print("3. move another directory.") print("4. create files specific directory.") print("5. list files inside directory.") print("6. display files dirs tree mode.") print("7. exit from code execution.") menu_choice input() menu_choice int(menu_choice) menu_choice callable globals()['listAllDirs'] callable() elif menu_choice callable globals()['createWorkingDir'] callable() elif menu_choice callable globals()['moveToDir'] callable() elif menu_choice callable globals()['createFiles'] callable() elif menu_choice callable globals()['listFilesInDir'] callable() elif menu_choice callable globals()['listAllDirsAndFilesInTreeMode'] callable() elif menu_choice sys.exit() print("To move ahead with code execution enter else [n]") continue_or_exit input() continue_or_exit continue_or_exit 'Y': pass elif continue_or_exit continue_or_exit 'N': sys.exit() #the main fucntion called start execution code. __name__ '__main__': main() Output: [emailÂ protected]:~$ python3 fabfile.py Select operations want do:: list directories which present. create directory. move another directory. create files specific directory. list files inside directory. display files dirs tree mode. exit from code execution. primary dirs listed successfully. move ahead with code execution enter else Select operations want do:: list directories which present. create directory. move another directory. create files specific directory. list files inside directory. display files dirs tree mode. exit from code execution. Enter name directory that want create mydir mydir directory created successfully. move ahead with code execution enter else Select operations want do:: list directories which present. create directory. move another directory. create files specific directory. list files inside directory. display files dirs tree mode. exit from code execution. mydir primary dirs listed successfully. move ahead with code execution enter else Select operations want do:: list directories which present. create directory. move another directory. create files specific directory. list files inside directory. display files dirs tree mode. exit from code execution. Enter name directory which want move mydir /home/client/Desktop/mydir directory changed successfully move ahead with code execution enter else Select operations want do:: list directories which present. create directory. move another directory. create files specific directory. list files inside directory. display files dirs tree mode. exit from code execution. Enter name directory which want create files mydir Files were created successfully media directory. move ahead with code execution enter else Select operations want do:: list directories which present. create directory. move another directory. create files specific directory. list files inside directory. display files dirs tree mode. exit from code execution. Enter name directory which want list files mydir files1 files10 files11 files12 files13 files14 files15 files2 files3 files4 files5 files6 files7 files8 files9 Files listed successfully mydir directory. move ahead with code execution enter else Select operations want do:: list directories which present. create directory. move another directory. create files specific directory. list files inside directory. display files dirs tree mode. exit from code execution. mydir files1 files10 files11 files12 files13 files14 files15 files2 files3 files4 files5 files6 files7 files8 files9 primary directories, files dirs files listed successfully. move ahead with code execution enter else Conclusion: above-written code, have used fabric module python perform various operations remote site server these corporations initiated from client machine every time particular operation triggered secure connection between remote site server client machine established after successful establishment connection between remote site server client machine with fabric functions specific operation performed. various operations which performed list directories that present inside directory, create directory, list files that present particular directory, create files files inside directory, change current working directory code execution, list files directories that present inside particular directory recursive manner that means files directories inside directory which itself present inside directory also listed this method. these operations there separate functions that written that perform specified operation. each method, first all, secure connection between server-side client machine established establishment secure connection between server client inbuilt functions fabric module used, once connection established specified operation performed example user selected create directory inside particular directory user will prompted enter name directory that wants create, entering name directory which need created create directory operation performed once directory successfully created similar message prompted user. Similarly, user selects option list directories inside particular directory user prompted enter name directory from which want list children directories, entering name parent directory children directories present inside directory listed. Similarly whatever option user selects user asked relevant input required that particular operation performed server whatever result generated output displayed user. user prompted with number functions options that methods perform different operations remote site server user select them perform specific operation this options menu keeps getting printed perform various options user wants exit code execution select last option with help which user exit execution current code. Advantages Fabric Module Python: discuss some major advantages Fabric Module Python that make very powerful popular choice among developers automating list tasks that needs done repeatedly remote server that prerequisites various configurations applications. Given that Fabric Python library, Python command method) module used with box. Fabric's main value vast superb interaction with SSH, which allows automate everything with simple scripts (i.e. fabfile.py). This section contains list Fabric tools (such functions) that used interface with environments where commands express executed. Deploying application (whether it's website, API, server) usually entails starting from scratch from snapshot), updating everything, downloading dependencies, setting file structure permissions, finally uploading your codebase downloading using version control system like Git. You'll probably have instructions that need regularly during development phase (ex: right before entering deployment cycle). Being able script these processes (both local remote) logically ordered most importantly programmable manner quickly becomes beneficial once realize much time wasted repeatedly repeating same steps, making everything error-prone process. Fabric comes your rescue shape Python file that knows exactly what where Things that appear mysterious will rapidly become familiar once start working with your droplet (which fully virtualized server with complete management access). It's only natural expect some challenges launch your applications begin dealing with their maintenance. However, your application becomes more popular things begin expand, necessity manage several droplets repeat everything ceases enjoyable. single Fabric script (fabfile), indicated beginning, used conduct activities both local machine distant system (s). Fabric offers local operative ability commands locally this purpose. However, unlike sudo, there ability interact with output local same way. switch configured with capture argument capture print either output. Local helpers, such lcd context manager (which sets local working directory), honored same manner sudo) honors context manager. this article, have seen fabric module Python connect remote server perform various operations that remote server, main case fabric module seen scenarios where system administrator network controller needs manage several client machines having different configurations requirement throughout organization this scenario network administrator this system administrator fabric module python easily automate installing configuring various system configurations setting files easily with help simple python code. Similarly, have seen this example perform various operations remote site server easily just with help simple python script. These functions perform simple simple well complex tasks. Next TopicTracemalloc module Python prev next