next prev Implement Protobuf Python this tutorial, will learn about Google's protobuf implement using Python programming language. Suppose, there group number people different origin they speak different languages. communicate effectively, they language that everyone understand. here everyone group will translate their idea into language they have decided use. This method communication will successful conveying message whole group. However, this will result loss efficiency, speed accuracy. same situation occurs with computer system their components. When interchange information another, need transform data into XML, JSON, human readable format that takes much time. don't encode data such where minimize data loss increase speed? Google came with solution form Protobuf. will protobuf learn different from regular data encoding. Let's start with introduction Protobuf. Introduction Protobuf Protobuf developed tech giant Google, data transfer. proficiently shrinks data blocks therefore enhances speed sending data. technique serialize data into Binary stream fast efficient manner. designed platform-nuetral format abstract data into language. used inter-machine communication (Remote Procedure calls). started with protobuf, should have knowledge at-least programming language describe shape data. However best thing about protobuf that supports many programming languages such Python, Java, C++, JavaScript, etc. What Protocol Buffers they work? Protocol buffers defined interface serialization structure data. establishes communication data. platform language independent. According Google official definition "Protocol buffers Google's language-neutral, platform-neutral, extensible mechanism serializing structured data think XML, smaller, faster, simpler. define want your data structured once â€¦" here question, when there other methods available encode data like pickling, JSON, need protocol buffer. Python provides pickling that built-in approach serialize data doesn't work well with schema evolution. also doesn't perform properly when need share data with cross language applications (written Java C++). Serialize data become very attractive since sort human-readable there binding libraries lots languages. also work well data interchange with cross language applications. However, huge space intensive encoding/decoding huge speed issue application. Protocol buffer overcome these limitations. protocol buffer, create .proto file including data structure want store. After creating proto file, protobuf compiler comes into play. protobuf compiler generates class that implements automate encoding parsing data with efficient binary format. need specify language through command create class. generated class allows create element instantiating message according .proto file. will understand this process detail next section. Python Protobuf Buffer Protobuf developed data sharing across cross language applications. Let's have example create protobuf. First need specify data structure .proto file. Let's take example following student.proto file. syntax "proto3"; package studentblog; message StudentList Elements Student list will defined here that, syntax quite similar Java. Let's understand structure above file. Every proto file started with proto_version proto2 proto3. using proto3 because supports major version programming languages. second line package declaration that reduces chances naming conflicts between different projects. Next have defined message definitions. just aggregate holding message's fields. There many standard type fields available like bool, string, double, int32, float, double. Before creating proto file, need install proto compiler known protoc. install visit Github download python protoc compiler. have installed version window. will download protoc compiler system. Note protoc compiler from anywhere, would good idea path into system environment variable. C:\Users\User\Desktop\protoc-3.19.4-win64\bin system path. Let's some data into student.proto file. syntax "proto3"; package stdeuntInformation; enum StudentResult PASS FAIL NOT_APPEARED RESULT_UNDECLARE= PASS_WITH_GRASE message StduentList int32 student_id string student_name message StudentDetails StudentResult result [RESULT_UNDECLARE]; int32 total_marks int32 marks_obtain repeated StudentList student Let's understand detailed structure above file. first line define proto version proto3 second line consist package name. observe, have defined =2 =3 makers each elements which used identify unique "tag" that fields uses binary encoding. should remember that values 1-15 encoded with less byte than higher numbers. commonly repeated elements within 1-15 higher less-commonly used optional elements. have defined Enum type which Enumeration used listing possible value given variable. require attach following modifiers. optional means don't need pass value. don't provide value, will default one. default value define done result field. repeated similar dynamically sized arrays. field with repeated annotation repeated zero number times. ordered repeated values will conserved protocol buffer. required Such fields must acquire some value otherwise field will uninitialized will raise error while serialization. Compiling Protobuf Buffers will generate integration code using protobuf compiler (protoc) into language-specific integration. below command. protoc -I=$SRC_DIR --python_out=$DST_DIR $SRC_DIR/student.proto above command, there three parameters. -I defines source directory where proto file exists. current directory. --python-out specifies language generate code. supported language. working Python, --python-out. $SRC_DIR $DST_DIR $SRC represents source directory $DST represents destination directory. protoc -I=. --python_out=. student.proto command generated corresponding code. Note face google_protobuf module found error, simply install google_protobuf library using below command. install google_protobuf student_pb2.py file coding: utf-8 Generated protocol buffer compiler. DO EDIT! source: student.proto """Generated protocol buffer code.""" from google.protobuf.internal import enum_type_wrapper from google.protobuf import descriptor _descriptor from google.protobuf import descriptor_pool _descriptor_pool from google.protobuf import message _message from google.protobuf import reflection _reflection from google.protobuf import symbol_database _symbol_database @@protoc_insertion_point(imports) _sym_db _symbol_database.Default() DESCRIPTOR _descriptor_pool.Default().AddSerializedFile(b'\n\rstudent.proto\x12\x12stdeuntInformation\"\xe8\x01\n\x0bStduentList\x12\x12\n\nstudent_id\x18\x01 \x01(\x05\x12\x14\n\x0cstudent_name\x18\x02 \x01(\t\x12?\n\x07student\x18\x03 \x03(\x0b\x32..stdeuntInformation.StduentList.StudentDetails\x1an\n\x0eStudentDetails\x12\x31\n\x06result\x18\x01 \x01(\x0e\x32!.stdeuntInformation.StudentResult\x12\x13\n\x0btotal_marks\x18\x02 \x01(\x05\x12\x14\n\x0cmarks_obtain\x18\x03 \x01(\x05*`\n\rStudentResult\x12\x08\n\x04PASS\x10\x00\x12\x08\n\x04\x46\x41IL\x10\x01\x12\x10\n\x0cNOT_APPEARED\x10\x02\x12\x14\n\x10RESULT_UNDECLARE\x10\x03\x12\x13\n\x0fPASS_WITH_GRASE\x10\x04\x62\x06proto3') _STUDENTRESULT DESCRIPTOR.enum_types_by_name['StudentResult'] StudentResult enum_type_wrapper.EnumTypeWrapper(_STUDENTRESULT) PASS FAIL NOT_APPEARED RESULT_UNDECLARE PASS_WITH_GRASE _STDUENTLIST DESCRIPTOR.message_types_by_name['StduentList'] _STDUENTLIST_STUDENTDETAILS _STDUENTLIST.nested_types_by_name['StudentDetails'] StduentList _reflection.GeneratedProtocolMessageType('StduentList', (_message.Message,), 'StudentDetails' _reflection.GeneratedProtocolMessageType('StudentDetails', (_message.Message,), 'DESCRIPTOR' _STDUENTLIST_STUDENTDETAILS, '__module__' 'student_pb2' @@protoc_insertion_point(class_scope:stdeuntInformation.StduentList.StudentDetails) 'DESCRIPTOR' _STDUENTLIST, '__module__' 'student_pb2' @@protoc_insertion_point(class_scope:stdeuntInformation.StduentList) _sym_db.RegisterMessage(StduentList) _sym_db.RegisterMessage(StduentList.StudentDetails) _descriptor._USE_C_DESCRIPTORS False: DESCRIPTOR._options None _STUDENTRESULT._serialized_start=272 _STUDENTRESULT._serialized_end=368 _STDUENTLIST._serialized_start=38 _STDUENTLIST._serialized_end=270 _STDUENTLIST_STUDENTDETAILS._serialized_start=160 _STDUENTLIST_STUDENTDETAILS._serialized_end=270 @@protoc_insertion_point(module_scope) structure file looking quite messy won't able understand immediately. most interesting part create, build, serialize data using Generated code. Let's following integration part creating serialize data. Create file copy below code. import student_pb2 StudentList my_list StudentList.StduentList() my_list.student_id my_list.student_name "Megha" first_item my_list.student.add() first_item.result StudentList.StudentResult.Value("PASS") first_item.total_marks first_item.marks_obtain Output: student_id: student_name: "Megha" student total_marks: marks_obtain: student_id: student_name: "Peter" student result: FAIL total_marks: marks_obtain: create student list elements one. Then, print student list element. returns non-binary, non-serialized version. encode messages into binary format using SerializeToString() ParseFromString(). import student_pb2 StudentList my_list StudentList.StduentList() my_list.student_id my_list.student_name "Megha" first_item my_list.student.add() first_item.result StudentList.StudentResult.Value("PASS") first_item.total_marks first_item.marks_obtain with open("./serializedFile", "wb") fd: fd.write(my_list.SerializeToString()) print(my_list) above code, have serialized data bytes write into file using flags. read this file binary file parse using ParseFromString() method. will return bytes representation string. will look-a-like below. b'\x08\xd2\t\x12\x0Megha\x1a(\x08\x04\x12\x18Pass 500\x1a\n425' in-front quotes represents following string composed bytes octets Python. representation data given below. <studentlist> 	<student_id>101</student_id> 	<student_name>Megha</studet_name> 	<student> 		<student> 			<result>pass</state> 			<totel_marks>500 </total_marks> 			<marks_obtain>425</marks_obtain> 		</student> 	</student> </studentlist> JSON version below. student_id: student_name: "Megha" student total_marks: marks_obtain: When observe memory obtain these different formats, easily find that binary part uses less than file. case, takes only bytes which quite less compare other formats. Think about transferring thousands message that make huge difference terms memory. Note have defined default value result value FAIL. attributes assigned changed they will default value. case, won't modify StudentResult StudentList. non-set values serialized saving additional memory space. change PASS FAIL, will look like below. student_id: student_name: "Mathew" student total_marks: marks_obtain: Conclusion Protocol buffer plays essential when talk about speed efficiency while transferring data. take some time handy with however defining messages pretty straightforward. this tutorial, have covered implement Protobuf using Python language serialize data. This tutorial also included simple application creation beyond simple accessors serialization. Next TopicPyQt library Python prev next