next prev Find Hotel Price Using Hotel Price Comparison using Python this tutorial, will write program find hotel price using hotel price comparison using Python programming language. will Makcorpse hotel API. This used JSON data, helpful compare Hotel prices, ratings, reviews from more than 1500 websites like oyo.com, Hotels.com, Agoda.com, Expedia more. beneficial retrieve information hotel city regarding prices, ratings, reviews, historical prices many other things. need local machine, which from https://www.makcorps.com/ Note User must created makcorps.com then, only register user APIs. have registered will sign credentials connect with APIs. Module Require need requests module work with makcorps API. don't have requests module, type following command terminal. install requests Getting Started with MakCorps This designed provide data such reviews, prices, ratings, from than vendors such Booking.com, Agoda.com, Expedia, Hotels.com. need remember following steps before implementation Each request should include token. token will help identify account. exceed your plan connection limit, will respond with 429 status code, this solved subscribing again. have free plan, make 420 requests days. exceed limit, will receive error. Each request will return JSON response with response code. also subscribe premium plan. Token? token, expose /auth endpoint. need pass username password body. curl --request POST --url 'https://api.makcorps.com/auth' --header 'Content-Type: application/json' --data '{ "username":"franklin", "password":"franklin@123" }' Implementation need provide city name search hotel prices. Suppose, search city Delhi, output JSON will price comparison different hotels that city from different vendors along with their name. Following implementation code. Example import required modules import requests, json req_url variable store req_url "https://api.makcorps.com/free/" enter city name here city "London" complete_url req_url city Declaring headers needed headers 'Authorization': 'Your Key', method requests module return response object response_ob requests.get(complete_url, headers=headers) result response_ob.json() response_ob.status_code 200: name extracting from result variable data print("price comparison data random date city london is:") print(result) else: print("record found given request") Output: price comparison data random date city london {'comparison': 'vendor1-price': 'US$217', 'vendor3-price': 'US$246', 'vendor2-price': 'US$217', 'vendor3': 'travelup.com', 'vendor1': 'Travelocity', 'Hotel': 'Park Plaza Westminster Bridge London', 'Best-price': 'US$\xa0246US$\xa0215Booking.com', 'vendor2': 'Orbitz.com' 'vendor1-price': 'vendor3-price': 'vendor2-price': 'vendor3': 'Travelocity', 'vendor1': 'Expedia.com', 'Hotel': 'Travelodge London Covent Garden', 'Best-price': 'US$\xa074Travelodge', 'vendor2': 'Hotels.com' 'vendor1-price': 'US$167', 'vendor3-price': 'US$183', 'vendor2-price': 'US$171', 'vendor3': 'Nustay.com', 'vendor1': 'ParkGrandLondon', 'Hotel': 'Park Grand London Kensington', 'Best-price': 'US$\xa0170Booking.com', 'vendor2': 'Travelocity' 'vendor1-price': 'vendor3-price': 'vendor2-price': 'vendor3': 'Orbitz.com', 'vendor1': 'Expedia.com', 'Hotel': 'Travelodge London City hotel', 'Best-price': 'US$\xa056Travelodge', 'vendor2': 'Nustay.com' 'vendor1-price': 'US$205', 'vendor3-price': 'US$232', 'vendor2-price': 'US$185', 'vendor3': 'ZenHotels.com', 'vendor1': 'Booking.com', 'Hotel': 'The Tower Hotel', 'Best-price': 'US$\xa0206Orbitz.com', 'vendor2': 'Trip.com' 'vendor1-price': 'US$77', 'vendor3-price': 'US$94', 'vendor2-price': 'US$87', 'vendor3': 'Nustay.com', 'vendor1': 'Official Site', 'Hotel': 'Point Hotel, London Kings Cross St Pancras', 'Best-price': 'US$\xa087Orbitz.com', 'vendor2': 'Booking.com' 'vendor1-price': 'US$224', 'vendor3-price': 'US$242', 'vendor2-price': 'US$217', 'vendor3': 'travelup.com', 'vendor1': 'Orbitz.com', 'Hotel': 'Strand Palace Hotel', 'Best-price': 'US$\xa0223Booking.com', 'vendor2': 'ZenHotels.com' Explanation above code, have imported requests module assigned request req_url variable. also assigned city name that search city variable. Then complete address store complete_url variable. call method given pass header. header must include token that from /auth API. return response that convert JSON format data into Python format code. check value status code equal not, equal that means record found otherwise record found. Hence returned fetched result. Conclusion this tutorial, have learned fetch prices hotels compare. Makcorps will help choose lowest price hotels searched city. Next TopicGet Started with RabbitMQ Python prev next