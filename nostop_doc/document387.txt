next prev Working with files Python today's world, familiar with files because they most widely used digital formats documents. full form "Portable Document Format," which uses ".pdf" extension save document files. This independent software-hardware operating systems, used presenting exchanging documents reliably. invented Adobe, this open standard maintained international organization standardization. file also contain links buttons form fields, audio-video, other business logic better interaction with users viewers. this tutorial, will discuss perform various operations: extract text from rotate pages merge together split file watermarks pages perform these operations using simple Python script. Installation interacting with files, will using party module, that PyPDF2. PyPDF2 inbuilt library Python, which used toolkit. This module capable extract information documents such title, author name, many more. split pages document file. crop pages document file. merge multiple pages into single page inside document file. encrypt decrypt files. installing PyPDF2 following command from command line: !pip3 install PyPDF2 name this module case-sensitive, have make sure that lowercase everything name module uppercase. Operations File using PyPDF2 Module this section, will discuss various operations that perform files using PyPDF2 module Python. Extract Text from Document File. extract text from file using PyPDF2 module Python using following approach. Approach: extracting text from file using Python, will follow following steps: Step will open file named 'exp.pdf' binary mode save file object "pdf_File_Object". pdf_File_Object open('exp.pdf', 'rb') Step will create object "pdf_Reader" "PDFFileReader" class "PyPDF2" module, then will pass file object object reading PDF. pdf_Reader PDF.PdfFileReader(pdf_File_Object) Step getting number pages document file, will numPages print("No. pages given file: pdf_Reader.numPages) Step will create object "page_Object" PageObject class "PyPDF2" reader object function "getPage()" which takes page number argument returns object page. page_Object pdf_Reader.getPage(0) Step will extract text which function page object extracting text from page. Step last, will close document file object. pdf_File_Object.close() Code: import PyPDF2 Here will create file object pdf_File_Object open('exp.pdf', 'rb') Here, will creat reader object pdf_Reader PDF.PdfFileReader(pdf_File_Object) will print number pages file print("No. pages given file: pdf_Reader.numPages) Here, create page object page_Object pdf_Reader.getPage(0) Now, will extract text from page print(page_Object.extractText()) last, close file object pdf_File_Object.close() Output: pages given file: GUIDELINES OPENING CAMPUS VIEW COVID PANDEMIC (FOR STUDENTS 2021 This printed text first page file output. Rotate File Pages rotate pages file using PyPDF2 module Python. Approach: rotating pages given file, will using following steps: Step will create reader object original PDF. Step will write rotated pages file. writing Into file, will object pdfFileWriter class PyPDF2 pdf_Writer PDF.PdfFileWriter() Step will iterate each page original document file. will page object getPage() function reader class. then will rotate page using rotateClockwise() function page object class. page range(pdf_Reader.numPages): page_Object pdf_Reader.getPage(page) page_Object.rotateClockwise(rotation_1) pdf_Writer.addPage(page_Object) Step will pages writer object using addPage() function writer class passing rotated page object. Step Then, will write pages newly created file. this opening file object writing pages using write() function writer object. new_File open(new_File_Name, 'wb') pdf_Writer.write(new_File) Step will close original file object newly created file object. pdf_File_Object.close() new_File.close() Code: Frst, will import modules import PyPDF2 PDF_rotate(original_File_Name, new_File_Name, rotation_1): Then, will create File object original pdf_File_Object open(original_File_Name, 'rb') Then, will create Reader object pdf_Reader PDF.PdfFileReader(pdf_File_Object) Then will create writer object pdf_Writer PDF.PdfFileWriter() Now, will rotate each page document page range(pdf_Reader.numPages): Then, will create rotated page object page_Object pdf_Reader.getPage(page) page_Object.rotateClockwise(rotation_1) will rotated page object writer pdf_Writer.addPage(page_Object) will open file object new_File open(new_File_Name, 'wb') will write rotated pages file pdf_Writer.write(new_File) last, will close original file object pdf_File_Object.close() now, will close file object new_File.close() main(): original file name original_File_Name 'exp.pdf' file name new_File_Name 'rotated_exp.pdf' rotation angle rotation_1 calling PDF_rotate function PDF_rotate(original_File_Name, new_File_Name, rotation_1) __name__ "__main__": calling main function main() Output: Original File: Rotated File: Merge Files. merge files using PyPDF2 module Python. Approach: merging files Python, will using following steps: Step merging PDf files, will using pre-built class, pdfFileMerger PyPDF2 will create object called pdf_Merger merger class: pdf_Merger PDF.PdfFileMerger() Step Then, will append file object each merger object using append() pdf: pdf_Merger.append(pdf) Step last, will write pages output file using write method merger object. with open(output_1, 'wb') pdf_Merger.write(K) Code: First, will import modules import PyPDF2 PDF_merge(pdf, output_1): Here, will create file merger object pdf_Merger PDF.PdfFileMerger() now, will append pdfs pdf: pdf_Merger.append(pdf) then, will write combined output file with open(output_1, 'wb') pdf_Merger.write(K) main(): here, will select files merge ['exp.pdf', 'rotated_exp.pdf'] Here, will create output file name output_1 'combined_exp.pdf' Now, will call merge function PDF_merge(pdf pdf, output_1 output_1) __name__ "__main__": last will call main function main() Output: output this code will form combined named combined_exp.pdf, which obtained merging exp.pdf rotate_exp.pdf file. Split File split document file Python using PyPDF2 module according requirements. this code, will function class, will using simple logic iterations. splits will created according list splits_1 would passing. Code: First, will import modules import PyPDF2 PDF_split(pdf_1, splits_1): here, will create input file object pdf_File_Object open(pdf_1, 'rb') here, will create reader object pdf_Reader PDF.PdfFileReader(pdf_File_Object) will start indexing first slice start then will start indexing last slice splits_1[0] range(len(splits_1) will create writer object 1)th split pdf_Writer PDF.PdfFileWriter() output file name output_pdf pdf_1.split('.pdf')[0] str(g) '.pdf' Now, will pages writer object page_1 range(start, end): pdf_Writer.addPage(pdf_Reader.getPage(page_1)) Here, will write split pages file with open(output_pdf, "wb") pdf_Writer.write(K) Now, will interchange page split start position next split start try: then, will split position next split splits_1[g except IndexError: then, will split position last split pdf_Reader.numPages Now, will close input file object pdf_File_Object.close() main(): file split pdf_1 'exp.pdf' split page positions splits_1 [2,4] will call PDF_split function split PDF_split(pdf_1, splits_1) __name__ "__main__": last, will call main function main() Output: output this code will generate files, which split files main pdf. check folder. contains files. Watermark Pages. watermark pages document files using PyPDF2 module Python. Approach: this, will follow every step same page rotation example, only difference wm_page_Object add_watermark(user_watermark, pdf_Reader.getPage(page_1)) page object will converted into watermark page object using add_watermark() function. understanding what add_watermark() function following example: wm_File_Object open(wm_File, 'rb') pdf_Reader PDF.PdfFileReader(wm_File_Object) page_Object.mergePage(pdf_Reader.getPage(0)) wm_File_Object.close() return page_Object this, first, created reader object water_mark.pdf file. passed page object, have used mergepage() function, which passed page object first page water_mark reader object. This will cause overlay water_mark over passed page object. Code: First, will import modules import PyPDF2 add_watermark_1(wm_File, page_Object): here, will open watermark file wm_File_Object open(wm_File, 'rb') Now, will create reader object watermark file pdf_Reader PDF.PdfFileReader(wm_File_Object) then, will merge watermark pdf's first page with passed page object. page_Object.mergePage(pdf_Reader.getPage(3)) Here, will close watermark file object wm_File_Object.close() will return watermarked page object return page_Object main(): Now, will create watermark file name user_watermark 'water_mark.pdf' original file name original_File_Name 'exp.pdf' file name new_File_Name 'watermarked_exp.pdf' now, will create File object original pdf_File_Object open(original_File_Name, 'rb') here, will create Reader object pdf_Reader PDF.PdfFileReader(pdf_File_Object) create writer object pdf_Writer PDF.PdfFileWriter() watermark each page page_1 range(pdf_Reader.numPages): Now, will create watermarked page object wm_page_Object add_watermark(user_watermark, pdf_Reader.getPage(page_1)) then, will watermarked page object writer pdf_Writer.addPage(wm_page_Object) file object new_File open(new_File_Name, 'wb') will then write watermarked pages file pdf_Writer.write(new_File) close original file object pdf_File_Object.close() close file object new_File.close() __name__ "__main__": call main function main() Output: water_mark.pdf: user_watermark.pdf file: above code will generate user_Watermark.pdf file which watermark water_mark.pdf file. Conclusion this tutorial, have discussed operate different functions files using Python modules' functions methods. Next TopicPDF Handling Python prev next