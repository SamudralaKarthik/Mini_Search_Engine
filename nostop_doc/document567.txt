next prev Floor Division Python following tutorial, will learn about Floor Division operation using Python programming language. before started, briefly understand what Floor division Understanding Floor division Floor division normal division operation, except returns largest possible integer. This integer either less than normal division output equal floor function signified ⌊ ⌋ symbol mathematical terms. understand working Floor division operation. example, ⌊36/5⌋ Step Performing division first. will divide ÷ 7.2 Step Now, will perform floor function value after division, i.e., 7.2. ⌊7.2⌋=7 result, which floor value 7.2. Hence, floor division means dividing rounding down nearest integer. Different programming languages offer particular built-in function operator calculate floor division. Some examples floor() method programming language. floor() method Java programming language. operator Python programming language. However, will only discussing floor division operation Python with help double-backslash (//) operator. Understanding Floor Division using Python Python programming language, floor division used divide numbers rounds outcome down nearest integer. Before diving deeper into concept floor division, briefly remind ourselves meaning division working math.floor() function Python. Performing Regular Division Python divide numbers using backslash division operator Python. consider following example demonstrating same: Example declaring variables performing regular division printing result print(a, "/", "=", Output: 3.25 Explanation: above snippet code, have defined variables have then performed division operation using backslash division operator stored resultant value variable, last, have printed value see, division Python works same division works mathematics. Understanding math.floor() function Python There built-in math module Python that consists different useful mathematical utilities calculations. such built-in function math module math.floor() function. This function accepts numeric input returns floor value rounding down nearest integer. consider following example demonstrating same: Example importing floor() function from math module from math import floor declaring variables 5.34 -5.34 using floor() function floor(a) floor(b) printing values print("Floor value of", "=", print("Floor value of", "=", Output: Floor value 5.34 Floor value -5.34 Explanation: above snippet code, have imported floor() function from math module. have then declared variables 5.34 -5.34. have then used floor() function calculate floor values both variables stored them variables, last, have printed results users. that have understood concepts dividing flooring numbers Python. head onto details associated with floor division Python. Performing Floor Division Python Floor division operation Python that allows divide numbers rounds resultant value down nearest integer. floor division occurs through double-backslash (//) operator. syntax same shown below: Syntax: var_1 var_2 Where: resultant value floor division var_1 dividend var_2 divisor think floor division regular division combined with math.floor() function call. Note: floor division round number down nearest integer. instance, 3.99 will still rounded down consider example demonstrating working floor division. Example declaring variables using operator comparing floor value with regular division printing values print("Floor Division:", "//", "=", print("Regular Division:", "/", "=", Output: Floor Division: Regular Division: Explanation: above snippet code, have declared variables have then used operator calculate floor division value stored floor value variable, have then performed regular division using operator stored value another variable, last, have printed both results compared them. Now, consider another example using math.floor() function. Example importing floor() function from math module from math import floor declaring variables using floor() function floor(a comparing floor() function with operator printing values print("Floor Division using floor() function:", print("Floor Division using operator:", Output: Floor Division using floor() function: Floor Division using operator: Explanation: have imported floor() function from math module above snippet code. have then declared variables then used floor() function, divided stored variable have then calculated floor value using operator stored value variable, last, have printed both values compared them. Performing Floor Division with Negative Numbers also perform floor division using negative numbers. case negative numbers, resultant value still rounded down nearest integer. Some might confused rounding down negative number implies going away from zero. instance, -2.3 floored down consider example demonstrating floor division with negative numbers. Example declaring variables calculating floor value using operator printing value print("Floor Division:", "//", "=", Output: Floor Division: Explanation: above snippet code, have declared variables have then used operator calculate floor value stored variable, last, have printed value user. With regular division, would return -2.5; however, with floor division, this number round down nearest negative integer, i.e., Performing Floor Division with Floats also perform Floor division with floats Python. When floor-dividing floats, outcome float representing nearest integer. consider following example demonstrating floor division using floats. Example initializing lists [17.5, 13.4] [3.3, 2.5, using for-loop iterate through list range(0, calculating floor division value a[i] b[i] printing result print(a[i], "//", b[i], "=", Output: 17.5 13.4 Explanation: above snippet code, have initialized lists. have then used for-loop iterate through elements these lists, calculated values each floor division operation, printed results users. result, observe that floor division operation performed using floats float with integer returns value rounding down nearest integer represented floats. Floor Division Modulo Python Mathematics, modulo concept mainly associated with floor division. also that modulo means remainder division between numbers. other words, count number leftovers with calculate modulo Python using percentage operator. consider example illustrating relationship between floor division modulo Python. Example 7.1: Given candies eaters, calculate number candies each eater gets with help floor division. Code: declaring variables numberOfCandies numberOfEaters using floor division calculate number candies each eater gets candiesPerEater numberOfCandies numberOfEaters printing values print("Number Candies:", numberOfCandies) print("Number Eaters:", numberOfEaters) print("The number candies each eater gets:", candiesPerEater) Output: Number Candies: Number Eaters: number candies each eater gets: Explanation: above snippet code, have declared some variables signifying number candies eaters. have then used operator perform floor division order calculate number candies each eater gets. have then printed these values user. calculate total number candies shared among group. This isn't very important. Example 7.2: will multiply number candies person number eaters. Code: calculating total number candies being shared among group totalCandiesShared candiesPerEater numberOfEaters printing values print("The total number candies being shared among group:", totalCandiesShared) Output: total number candies being shared among group: Explanation: above snippet code, have calculated total number candies being shared among group multiplying number candies person number eaters printed resultant value users. total number full candies shared However, total number candies This statement implies that candy will leftover going eaten. above example describes calculate number leftovers. However, only interested number leftovers, directly calculate with help modulo. Example 7.3: Given candies eaters, what number leftover candies? Code: declaring variables numberOfCandies numberOfEaters using modulo calculate leftover candies leftoverCandies numberOfCandies numberOfEaters printing values print("Number Candies:", numberOfCandies) print("Number Eaters:", numberOfEaters) print("Total number Leftover Candies:", leftoverCandies) Output: Number Candies: Number Eaters: Total number Leftover Candies: Explanation: above snippet code, have declared variables storing value candies eaters. have then calculated number leftover candies using operator signifying modulo operation. last, have printed some statements resultant values users. result, that leftover candy Python, floor division modulo related following equation: Where: dividend. divisor. instance, verify above equation holds with candies eaters. Thus, have understood concepts floor division modulo Python. Now, will look some built-in function that calculates both. Understanding divmod() Function Python Python offers built-in function called divmod() that allows calculate both floor division modulo between numeric values. syntax divmod() function shown below: Syntax: divmod(var_1, var_2) Where: result tuple. This tuple floor division result remainder given modulo. var_1 dividend. var_2 divisor. consider following example demonstrating divmod() function. Example Given candies eaters, many full candies does each eater get, many candies left? Code: declaring variables numberOfCandies numberOfEaters using divmod() function nCandies, nLeftovers divmod(numberOfCandies, numberOfEaters) printing values print("Number Candies:", numberOfCandies) print("Number Eaters:", numberOfEaters) print("Number Candies eater:", nCandies) print("Total number Leftover Candies:", nLeftovers) Output: Number Candies: Number Eaters: Number Candies eater: Total number Leftover Candies: Explanation: above snippet code, have declared some variables. have used divmod() function calculate floor division value modulo given variables. have then printed these values users. Understanding Floor Division Precedence Python, floor division operator similar precedence level multiplication (*), division (/), modulo (%). This statement implies that multiply, then floor-divide, multiplication achieved first, then floor division vice versa. However, instance subtract numbers then perform floor division, floor division operation will pave way. consider example demonstrating same. Example 9.1: declaring some variables performing operation printing result print(a, "*", "//", "-", "=", Output: Explanation: above snippet code, have declared some variables have then performed operation stored resultant value variable, last, have printed this value users. order understand this result calculated, insert parenthesis around terms correct precedence order. example shown below depicts same: Example 9.2: declaring some variables performing operation ((a printing result print("((", "*", //", "=", Output: Explanation: above snippet code, have declared some variables have then performed same operation with parenthesis stored resultant value variable, last, have printed this value users. observe that similar result from previous example, which means order calculation Multiplication Floor Division Subtraction Here stepwise calculation above: (15 have understood floor division properly Python programming language. last, will look advanced case floor division. following case, advanced does imply hard; however, rather unusual. Understanding Advance Floor Division Some might aware that also make custom objects supporting floor division operation Python. This possible through special method known __floordiv__(). __floordiv__() method Python floor division operation Python used divide numbers rounds result down nearest integer. works under hood because numeric type implements special method called __floordiv__(). Then, whenever call operator between objects, __floordiv__() method gets called. Python, also directly call __floordiv__() method. consider following example demonstrating same: Example declaring some variables performing floor division using operator performing floor division using __floordiv__() method (a).__floordiv__(b) printing results both operations print("Using operator:\n", "//", "=", print("Using __floordiv__() method:\n ").__floordiv__(", Output: Using operator: Using __floordiv__() method: ).__floordiv__( Explanation: above snippet code, have declared variables then performed floor division using operator __floordiv__() method stored their resultant values variables, last, have printed results users. From output shown above, observe that both expressions have yielded same result. This because first expression gets converted into second expression. other words, these calls equivalent another. Now, things will interesting. consider following example. Example 11.1: will create custom class representing integer values strings following example. will then create objects this custom class perform floor division operation them. Code: creating class representing integer values string class IntStr: __init__(self, val): self.val instantiating class with objects intOne IntStr("17") intTwo IntStr("4") printing result floor division operation print(intOne intTwo) Output: Traceback (most recent call last): File "D:\Python_programs\pycase.py", line print(intOne intTwo) TypeError: unsupported operand type(s) //: 'IntStr' 'IntStr' Explanation: above snippet code, have defined class IntStr that represents integer values strings. have then created objects IntStr class. last, have floor-divide intOne object intTwo object tried printing result. However, above output indicates TypeError. This error message reveals that IntStr objects support floor division. This error makes sense. would custom type have clue floor dividing strings objects? However, turns out, make IntStr object support floor division. Previously, learned whenever call operator, call __floordiv__() method. This method executed somewhere class object. instance, objects support floor division because class applied __floordiv__() method. These special methods, like __floordiv__(), have something amazing common that implement these methods into custom class. other words, make custom objects support floor division Python programming language. consider following example demonstrating same. Example 11.2: following example, will implement __floordiv__() method into IntStr class. will then create objects this custom class perform floor division operation them. Code: creating class representing integer values string class IntStr: __init__(self, val): self.val __floordiv__(self, other): intOne int(self.val) intTwo int(other.val) intOne intTwo return IntStr(str(res)) instantiating class with objects intOne IntStr("17") intTwo IntStr("4") performing floor division operation intOne intTwo printing result floor division operation print(intOne.val, "//", intTwo.val, "=", res.val) Output: Explanation: above snippet code, have defined class IntStr that represents integer values strings. have also implemented __floordiv__() method within this class. This method accepts numeric string value from itself another object. converted these string values integers performed floor division between them. have then converted result back into string created IntStr object. instantiated IntStr class with objects performed floor division operation between them. last, have printed resultant value users. that successfully understand method making custom class support floor division. like fact that have call object.val result, implement __str__() method that directly returns value while printing. consider following example demonstrating same. Example 11.3: creating class representing integer values string class IntStr: __init__(self, val): self.val __floordiv__(self, other): intOne int(self.val) intTwo int(other.val) intOne intTwo return IntStr(str(res)) __str__(self): return self.val instantiating class with objects intOne IntStr("17") intTwo IntStr("4") performing floor division operation intOne intTwo printing result floor division operation print(intOne, "//", intTwo, "=", res) Output: Explanation: above snippet code, have defined class IntStr that represents integer values strings. have also implemented __floordiv__() method within this class. have then defined __str__() method that directly returns string values while printing. instantiated IntStr class with objects performed floor division operation between them. last, have printed resultant value users. Next TopicTop Best Coursera Python Courses prev next