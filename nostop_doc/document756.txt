next prev Python Tutorial Python this tutorial, will learn about Python debugging tool with pdb. Debugging applications unwelcomed activity when developer being busy working under time crunch he/she want work. will show basics using pdb, Python's interactive source code debugger. will also walk through some common pdb. good practice tracking down bugs allows fixing faulty code more quickly reliably. Let's have introduction Python module. Python Module Python module used debugging Python which comes built-in Python standard library. defined class which internally makes bdb (basic debugger functions) (support line-oriented command interpreters) modules. provides advantage running command line thereby making great debugging code remote server. module supports setting breakpoints, stepping through code, viewing stack traces, source code listing. Starting Python Debugger Python provides many ways invoke debugger. need insert import pdb, pdb.set_trace() commands start debugging within program. define breakpoint program, script will stop execution that breakpoint automatically. Python provides breakpoint() function which works same define manually. Let's understand following example. Example Adding numbers Intentional Error input() function returns string program concatenates those strings instead adding input numbers. import add(a, return pdb.set_trace() input("Enter first number input("Enter second number add(x, print(sum) Output: d:\python project\test_pdb.py(8)() input("Enter first number (Pdb) SyntaxError: invalid syntax Explanation above output, first line directory path executable file, line number where breaking point located, <module>. means that have breakpoint test_pdd.py file line number appearing inside <>. next line indicating code line where execution stopped. That line executed yet. Then have prompt which used navigate code using below command. Command Function help used display commands. where used display stack trace line number current line. next executes current line move next line ignoring function calls. step steps into functions called current line. example, when help command prompt shows (Pdb) "C:/Users/User/.virtualenvs/Django-ExvyqL3O/Scripts/python.exe" "d:/Python Project/test_pdb.py" (Pdb) help Documented commands (type help <topic>): ======================================== list rv undisplay cl debug help quit unt alias clear disable ignore longlist source until args commands display interact restart step condition down next return tbreak break cont enable jump retval whatis bt continue exit unalias where Miscellaneous help topics: ========================== exec (Pdb) check type variable whatis variable name. Let's following example. Example d:\python project\test_pdb.py(884)<module>()->None print(sum) (Pdb) whatis <class 'str'> When next command (Pdb) next Enter first number d:\python project\test_pdb.py(882)<module>() input("Enter second number (Pdb) next Enter second number d:\python project\test_pdb.py(883)<module>() add(x, (Pdb) next d:\python project\test_pdb.py(884)<module>() print(sum) (Pdb) next --Return-- Printing Expression print command evaluates passing expression. pass variable name, prints current value. However, perform several operations identify state running application. Let's understand following example. file path using get_path() method. inspect program process, call pdb.set_trace() pause execution. Example import get_path(filename): """Return file's path empty string path.""" head, tail os.path.split(filename) import pdb; pdb.set_trace() return head filename __file__ print(f'path {get_path(filename)}') Output: d:\python project\test_pdb.py(891)get_path() return head (Pdb) what happening above code have file test_pdb.py line function get_path(). This frame reference command will resolve variable names i.e. current scope context. program stopped return head line function get_path() from above line. let's print some expression current state application. (Pdb) get_path(filename): """Return file's path empty string path.""" head, tail os.path.split1(filename) import pdb; pdb.set_trace() return head (Pdb) head, tail ('d:/Python Project', 'test_pdb.py') (Pdb) get_path <function get_path 0x000002F24F306160> (Pdb) getattr(get_path, '__doc__') "Return file's path empty string path." (Pdb) step --Return-- d:\python project\test_pdb.py(891)get_path()->'d:/Python Project' return head pass valid evaluation expression command. These expressions very helpful when debugging program want test alternative implementation directly. (pretty-print) command also used. useful when want print variable with large amount output. Post-mortem Debugging post-mortem debugging refers entering debug mode after program finished with execution process. module provides pm() post_morterm() functions. This function directly targets line which causes error. Let's understand below example Example import mul(a, answer return answer input("Enter first number input("Enter second number result mul(x, print(result) Output: Enter first number Enter second number Traceback (most recent call last): File "d:/Python Project/test_pdb.py", line result mul(x, File "d:/Python Project/test_pdb.py", line answer TypeError: can't multiply sequence non-int type 'str' Checking Variable Stack variables used program local global maintained stack. args(or print argument function which currently active. command evaluate expression given argument prints result. Let's following debugging. Example d:\python project\test_pdb.py(7)<module>() input("Enter first number (Pdb) next Enter first number d:\python project\test_pdb.py(8)<module>() input("Enter second number (Pdb) next Enter second number d:\python project\test_pdb.py(9)<module>() result mul(x, (Pdb) step --Call-- d:\python project\test_pdb.py(2)mul() mul(a, (Pdb) args '65' '21' (Pdb) next d:\python project\test_pdb.py(3)mul() answer (Pdb) '21' Displaying Expression module provides other commands apart from tell display value expression, changed, when execution stops. Let's understand below syntax description commands. Command Syntax Description display display [expression] displays value expression changed, each time execution stops current frame. displays expression current frame expression provided. undisplay undisplay[expression] doesn't display expression more current frame. removes expression current frame expression provided. Python Breakpoint breakpoints play essential role when work with large program. often want number breakpoints where know error might occur. module provides break command Let's following syntax. Syntax b(reak) ([filename:]lineno function) condition] filename given, line number lineno, then current source file used. second argument condition very powerful important. Using this, apply break point only condition existed. pass second argument, will break when expression evaluates true. Let's understand following example Example import mul(a, answer return answer pdb.set_trace() input("Enter first number input("Enter second number result mul(x, print(result) Output: d:\python project\test_pdb.py(7)() input("Enter first number (Pdb) break test_pdb.py:7 Breakpoint d:\python project\test_pdb.py:7 (Pdb) break test_pdb.py:8 Breakpoint d:\python project\test_pdb.py:8 (Pdb) break Type Disp Where breakpoint keep d:\python project\test_pdb.py:7 breakpoint keep d:\python project\test_pdb.py:8 Managing Breakpoints also manage breakpoints using enable, disable remove command. disable allows debugger stop when breakpoint reached while enable activates disable breakpoints. Let's understand following example Example import concate(a, answer return answer pdb.set_trace() input("Enter first string int(input("Enter second string concate(x, print(res) Output: d:\python project\test_pdb.py(7)() input("Enter first string (Pdb) break test_pdb.py:7 Breakpoint d:\python project\test_pdb.py:7 (Pdb) break test_pdb.py:8 Breakpoint d:\python project\test_pdb.py:8 (Pdb) break Type Disp Where breakpoint keep d:\python project\test_pdb.py:7 breakpoint keep d:\python project\test_pdb.py:8 (Pdb) disable Disabled breakpoint d:\python project\test_pdb.py:8 (Pdb) break Type Disp Where breakpoint keep d:\python project\test_pdb.py:7 breakpoint keep d:\python project\test_pdb.py:8 Conclusion this tutorial, have covered basic common concepts module. have learned printing expression, commands, breakpoints, displaying expressions implemented some example. Debugging helps programmer analyze program line line. Python comes with default debugger that easy import use. module play essential role debugging especially when work with large program. Next TopicPython Program Move zeros Array prev next