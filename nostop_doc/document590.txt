next prev Make Notepad using Tkinter this tutorial, will learn build easy notepad using Python using Tkinter. notepad comprises different options like file edit. functions, such saving file, opening document, editing copying pasting, possible. Python, Tkinter must already installed your system create notepad. possible download appropriate Python package accordance with your system's requirements. After successfully installing Python, must download install Tkinter program that Python's application). Command install Tkinter: following command install Tkinter: !pip3 install Steps Make Notepad: this section, will follow given steps creating Notepad using Tkinter: Step Import required module. import tkinter import from tkinter import getting space above message from tkinter.messagebox import getting dialog open when required from tkinter.filedialog import messagebox used write messages white space known notepad. filedialog used create this dialog display when open file from location your computer save file specified location position. Step menu. __init__(self,**kwargs): Here, will controls such widgets 		self.__thisTextArea.grid(sticky opening file 		self.__thisFileMenu.add_command(label "New FIle", 										command self.__newFile1) opening already existing file from menu 		self.__thisFileMenu.add_command(label "Open File", 										command self.__openFile1) saving current working file 		self.__thisFileMenu.add_command(label "Save File", 										command self.__saveFile1) creating line dialog Box	 		self.__thisFileMenu.add_separator()										 		self.__thisFileMenu.add_command(label "Exit File", 										command=self.__quitApplication1) 		self.__thisMenuBar.add_cascade(label "File Menu", 									menu self.__thisFileMenu)	 giving feature cutting Files 		self.__thisEditMenu.add_command(label "Cut File", 										command self.__cut1)			 giving feature copying file 		self.__thisEditMenu.add_command(label "Copy File", 										command self.__copy1)		 giving feature pasting file 		self.__thisEditMenu.add_command(label "Paste File", 										command self.__paste1)		 giving feature editing file 		self.__thisMenuBar.add_cascade(label "Edit File", 									menu self.__thisEditMenu)	 creating feature description notepad File 		self.__thisHelpMenu.add_command(label "About Notepad File", 										command self.__showAbout1) 		self.__thisMenuBar.add_cascade(label "Help File", 									menu self.__thisHelpMenu) 		self.__root.config(menu self.__thisMenuBar) 		self.__thisScrollBar.pack(side RIGHT,fill=Y)				 Here, scroll-bar will adjusted automatically according content file 		self.__thisScrollBar.config(command self.__thisTextArea.yview)	 		self.__thisTextArea.config(yscrollcommand self.__thisScrollBar.set) This code will create menu within window notepad, include things such copy, paste, save, Step functionality. 	def __quitApplication1(self): 		self.__root.destroy() exit() 	def __showAbout1(self): 		showinfo("Notepad File","Javatpoint") 	def __openFile1(self): 		self.__file askopenfilename(defaultextension ".txt", 									filetypes [("All Files","*.*"), 										("Text Documents","*.txt")]) 		if self.__file 			# there file open 			self.__file None 		else: 			# trying open file window title 			self.__root.title(os.path.basename(self.__file) Notepad File") 			self.__thisTextArea.delete(1.0, END) 			file open(self.__file, "r") 			self.__thisTextArea.insert(1.0, file.read()) 			file.close() 	def __newFile1(self): 		self.__root.title("Untitled- Notepad File") 		self.__file None 		self.__thisTextArea.delete(1.0, END) 	def __saveFile1(self): 		if self.__file None: 			# Saving file 			self.__file asksaveasfilename(initialfile 'UntitledFile.txt', 											defaultextension ".txt", 											filetypes [("All Files","*.*"), 												("Text Documents", "*.txt")]) 			if self.__file 				self.__file None 			else: 				 				# trying save file 				file open(self.__file,"w") 				file.write(self.__thisTextArea.get(1.0, END)) 				file.close() 				 				# changing window title 				self.__root.title(os.path.basename(self.__file) Notepad File") 				 		else: 			file open(self.__file,"w") 			file.write(self.__thisTextArea.get(1.0, END)) 			file.close() 	def __cut1(self): 		self.__thisTextArea.event_generate("<<Cut File>>") 	def __copy1(self): 		self.__thisTextArea.event_generate("<<Copy File>>") 	def __paste1(self): 		self.__thisTextArea.event_generate("<<Paste File>>") 	def run1(self): running main application 		self.__root.mainloop()In this, have included functions needed notepad. user also additional functions this, example, size font bold, font colour underlined, bold, etc. Main Code: import tkinter import from tkinter import from tkinter.messagebox import from tkinter.filedialog import class Notepad_file: 	__root Tk() default window width height 	__thisWidth 	__thisHeight 	__thisTextArea Text(__root) 	__thisMenuBar Menu(__root) 	__thisFileMenu Menu(__thisMenuBar, tearoff 	__thisEditMenu Menu(__thisMenuBar, tearoff 	__thisHelpMenu Menu(__thisMenuBar, tearoff adding scrollbar 	__thisScrollBar Scrollbar(__thisTextArea)	 	__file None 	def __init__(self, **kwargs): Here, will icon 		try: 				self.__root.wm_iconbitmap("Notepad.ico") 		except: 				pass here, will window size, default window size 		try: 			self.__thisWidth kwargs['width'] 		except KeyError: 			pass 		try: 			self.__thisHeight kwargs['height'] 		except KeyError: 			pass here, will window text 		self.__root.title("Untitled- Notepad File") here, will center window 		screenWidth self.__root.winfo_screenwidth() 		screenHeight self.__root.winfo_screenheight() left-align 		left (screenWidth (self.__thisWidth right-align 		top (screenHeight (self.__thisHeight /2) bottom 		self.__root.geometry('%d (self.__thisWidth, 											self.__thisHeight, 											left, top)) Here, making text-area auto resizable 		self.__root.grid_rowconfigure(0, weight 		self.__root.grid_columnconfigure(0, weight Here, will controls such widgets 		self.__thisTextArea.grid(sticky opening file 		self.__thisFileMenu.add_command(label "New FIle", 										command self.__newFile1) opening already existing file from menu 		self.__thisFileMenu.add_command(label "Open File", 										command self.__openFile1) saving current working file 		self.__thisFileMenu.add_command(label "Save File", 										command self.__saveFile1) creating line dialog Box	 		self.__thisFileMenu.add_separator()										 		self.__thisFileMenu.add_command(label "Exit File", 										command=self.__quitApplication1) 		self.__thisMenuBar.add_cascade(label "File Menu", 									menu self.__thisFileMenu)	 giving feature cutting Files 		self.__thisEditMenu.add_command(label "Cut File", 										command self.__cut1)			 giving feature copying file 		self.__thisEditMenu.add_command(label "Copy File", 										command self.__copy1)		 giving feature pasting file 		self.__thisEditMenu.add_command(label "Paste File", 										command self.__paste1)		 giving feature editing file 		self.__thisMenuBar.add_cascade(label "Edit File", 									menu self.__thisEditMenu)	 creating feature description notepad File 		self.__thisHelpMenu.add_command(label "About Notepad File", 										command self.__showAbout1) 		self.__thisMenuBar.add_cascade(label "Help File", 									menu self.__thisHelpMenu) 		self.__root.config(menu self.__thisMenuBar) 		self.__thisScrollBar.pack(side RIGHT,fill=Y)				 Here, scroll-bar will adjusted automatically according content file 		self.__thisScrollBar.config(command self.__thisTextArea.yview)	 		self.__thisTextArea.config(yscrollcommand self.__thisScrollBar.set) 	def __quitApplication1(self): 		self.__root.destroy() exit() 	def __showAbout1(self): 		showinfo("Notepad File","Javatpoint") 	def __openFile1(self): 		self.__file askopenfilename(defaultextension ".txt", 									filetypes [("All Files","*.*"), 										("Text Documents","*.txt")]) 		if self.__file 			# there file open 			self.__file None 		else: 			# trying open file window title 			self.__root.title(os.path.basename(self.__file) Notepad File") 			self.__thisTextArea.delete(1.0, END) 			file open(self.__file, "r") 			self.__thisTextArea.insert(1.0, file.read()) 			file.close() 	def __newFile1(self): 		self.__root.title("Untitled- Notepad File") 		self.__file None 		self.__thisTextArea.delete(1.0, END) 	def __saveFile1(self): 		if self.__file None: 			# Saving file 			self.__file asksaveasfilename(initialfile 'UntitledFile.txt', 											defaultextension ".txt", 											filetypes [("All Files","*.*"), 												("Text Documents", "*.txt")]) 			if self.__file 				self.__file None 			else: 				 				# trying save file 				file open(self.__file,"w") 				file.write(self.__thisTextArea.get(1.0, END)) 				file.close() 				 				# changing window title 				self.__root.title(os.path.basename(self.__file) Notepad File") 				 		else: 			file open(self.__file,"w") 			file.write(self.__thisTextArea.get(1.0, END)) 			file.close() 	def __cut1(self): 		self.__thisTextArea.event_generate("<<Cut File>>") 	def __copy1(self): 		self.__thisTextArea.event_generate("<<Copy File>>") 	def __paste1(self): 		self.__thisTextArea.event_generate("<<Paste File>>") 	def run1(self): running main application 		self.__root.mainloop() running main application notepad1 Notepad_file(width 650, height 450) notepad1.run1() Output: Next TopicCamelcase Python prev next