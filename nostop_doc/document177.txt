next prev FuzzyWuzzy Python Library this tutorial, will learn match string using Python built-in fuzzyWuzzy library determine they similar using various examples. Introduction Python provides methods compare strings. main methods given below. Using Regex Simple Compare Using dfflib there another method that effectively used comparison, known fuzzywuzzy. This method quite effective differentiating strings referring same thing, they written slightly differently. Sometimes need program that automatically identify wrong spelling. process finding strings that match given pattern. uses Levenshtein Distance calculate difference between sequences. This library help databases that lack common key, such joining tables company name, these appear differently both tables. Example Let's following example. Str1 "Welcome Javatpoint" Str2 "Welcome Javatpoint" Result Str1 Str2 print(Result) Output: True above code returns true because strings matched exactly (100 %), what make change str2. Str1 "Welcome Javatpoint" Str2 "welcome Javatpoint" Result Str1 Str2 print(Result) Output: False Here above code returns false, strings pretty identical human eyes, interpreter. However, solve this problem converting both strings lower case. Str1 "Welcome Javatpoint" Str2 "welcome Javatpoint" Result Str1.lower() Str2.lower() print(Result) Output: True make changes charset, will another problem. Str1 "Welcome javatpoint." Str2 "Welcome javatpoint" Result Str1.lower() Str2.lower() print(Result) Output: True resolve such types problems, need more effective tools compare strings. fuzzywuzzy best tool calculate strings. Levenshtein Distance levenshtein distance used calculate distance between sequences words. calculates minimum number edits that need change given string. These edits insertion, deletions substitution. Example import numpy levenshtein_distance (s1, ratio_calculation False): Initialize matrix zeros rows len(s1)+1 cols len(t1)+1 calc_distance np.zeros((rows,cols),dtype int) Populate matrix zeros with indeces each character both strings range(1, rows): range(1,cols): calc_distance[i][0] calc_distance[0][k] range(1, cols): range(1, rows): s1[row-1] t1[col-1]: cost ratio_calculation True: cost else: cost calc_distance[row][col] min(calc_distance[row-1][col] Cost deletions calc_distance[row][col-1] Cost insertions calc_distance[row-1][col-1] cost) Cost substitutions ratio_calculation True: Computation Levenshtein calc_distance Ratio Ratio ((len(s)+len(t)) calc_distance[row][col]) (len(s)+len(t)) return Ratio else: return "The strings edits away".format(calc_distance[row][col]) will above function earlier example where were trying compare "Welcome javatpoint." "Welcome javatpoint". both strings likely same because Levensthtein's length small. Str1 "Welcome Javatpoint" Str2 "welcome Javatpoint" Distance levenshtein_distance(Str1,Str2) print(Distance) Ratio levenshtein_distance(Str1,Str2,ratio_calc True) print(Ratio) FuzzyWuzzy Package name this library something weird funny, advantageous. unique compare both strings returns score much string matched. work with this library, need install Python environment. Installation install this library using command. install fuzzywuzzy Collecting fuzzywuzzy Downloading fuzzywuzzy-0.18.0-py2.py3-none-any.whl (18 Installing collected packages: fuzzywuzzy Successfully installed fuzzywuzzy-0.18.0 type following command press enter. install python-Levenshtein Let's understand following methods fuzzuwuzzy library Fuzz Module fuzz module used compare given string time. returns score after comparison using different methods. Fuzz.ratio() important methods fuzz module. compares string score basis much given string matched. Let's understand following example. Example from fuzzywuzzy import fuzz Str1 "Welcome Javatpoint" Str2 "welcome javatpoint" Ratio fuzz.ratio(Str1.lower(),Str2.lower()) print(Ratio) Output: above code, fuzz.ratio() method returned score which means there very slight difference between strings. Fuzz.partial_ratio() fuzzywuzzy library provides another powerful method partial_ratio(). used handle complex string comparison such substring matching. Let's following example. Example #importing module from fuzzywuzzy library from fuzzywuzzy import fuzz str1 "Welcome Javatpoint" str2 "tpoint" Ratio fuzz.ratio(str1.lower(),str2.lower()) Ratio_partial fuzz.partial_ratio(str1.lower(),str2.lower()) print(Ratio) print(Ratio_partial) Output: Explanation: partial_ratio() method detect substring. Thus, yields 100% similarity. follows optimal partial logic where short length string longer string algorithm finds best matching length k-substring. Fuzz.token_sort_ratio This method does guarantee accurate result because make changes order string. give accurate result. fuzzywuzzy module provides solution. Let's understand following example. Example str1 "united states nixon" str2 "Nixon United States" Ratio fuzz.ratio(str1.lower(),str2.lower()) Ratio_Partial fuzz.partial_ratio(str1.lower(),str2.lower()) Ratio_Token fuzz.token_sort_ratio(str1,str2) print(Ratio) print(Ratio_Partial) print(Ratio_Token) Output: Explanation: above code, have used token_sort_ratio() method which provides advantage over partial_ratio. this method, string token sorted alphabetically joined together. there another situation such what strings widely different length. Let's understand following example. Example str1 "The supreme court case Democratic Congress" str2 "Congress Democratic" Ratio fuzz.ratio(str1.lower(),str2.lower()) Partial_Ratio fuzz.partial_ratio(str1.lower(),str2.lower()) Token_Sort_Ratio fuzz.token_sort_ratio(str1,str2) Token_Set_Ratio fuzz.token_set_ratio(str1,str2) print(Ratio) print(Partial_Ratio) print(Token_Sort_Ratio) print(Token_Set_Ratio) Output: above code, have used another method called fuzz.token_set_ratio() that performs operation takes common token then makes ratio() pairwise comparison. intersection sorted token always same because substring smaller string consists larger chunks original string remaining token closer each other. fuzzywuzzy package provides process module that allows calculate string with highest similarity. Let's understand following example. Example from fuzzywuzzy import process strToMatch "Hello Good Morning" givenOpt ["hello","Hello Good","Morning","Good Evenining"] ratios process.extract(strToMatch,givenOpt) print(ratios) choose string that highest matching percentage high process.extractOne(strToMatch,givenOpt) print(high) Output: [('hello', 90), ('Hello Good', 90), ('Morning', 90), ('Good Evenining', 59)] ('hello', above code will return highest matching percentage given string list. Fuzz.WRatio process module also provides WRatio, which gives better result than simple ratio. handles lower upper cases some other parameters too. Let's understand following example. Example from fuzzywuzzy import process fuzz.WRatio('good morning', 'Good Morning') fuzz.WRatio('good morning!!!','good Morning') Output: Conclusion this tutorial, have discussed match string determine closely they are. have illustrated simple example they enough clear that computer treats mismatched strings. Many real-life applications such spell checking, bioinformatics match, sequence etc. based fuzzy logic. Next TopicDask Python prev next