next prev Simple calculator using PyQt5 Python calculator something used performing mathematical calculations, particularly compact electronic device having keyboard visual display. this post, we'll look make using PyQt5. Steps implementing Create label, specify shape display numbers output Increase font size align label text from right side. Make push buttons numerals through arrange their geometries correct sequence. Make example operator push button addition, subtraction, etc. draw attention equals button, give colour effect. Back-end implementation procedure Give each button function. label's text with appropriate number operator within each button's actions, with exception equals action. label's text from within equals action begin except block. eval method label text inside block obtain response answer label. text "Wrong Input" within unless block. Make label's final character disappear delete action, leave entire text blank clear action. Understanding code step step import required libraries from PyQt5.QtWidgets import from PyQt5 import QtCore, QtGui from PyQt5.QtGui import from PyQt5.QtCore import import First all, will import modules needed program like PyQt5 modules. class Window(QMainWindow): 	def __init__(element): 		super().__init__() title 		element.setWindowTitle("Python geometry 		element.setGeometry(105, 100, 360, 350) call function 		element.UiCompnts() displaying present widgets 		element.show() Then, will title dimensions window will call components function display widgets. function widgets 	def UiCompnts(element): create label 		element.label QLabel(element) geometry label 		element.label.setGeometry(10, 350, create another label multiple line 		element.label.setWordWrap(True) Setting styles style sheet label 		element.label.setStyleSheet("QLabel" 								"{" 								"border 4px solid Black 								"background white 								"}") Adjusting alignments diff labels 		element.label.setAlignment(Qt.AlignRight) font style label 		element.label.setFont(QFont('Arial', 14)) Then, call components function creating element label setting stylesheet Labels including alignment fonts. Addition numerical buttons screen create push button 		push001 QPushButton("1", element) geometry 		push001.setGeometry(10, 150, create push button 		push002 QPushButton("2", element) geometry 		push002.setGeometry(100, 150, create push button 		push003 QPushButton("3", element) geometry 		push003.setGeometry(190, 150, create push button 		push004 QPushButton("4", element) geometry 		push004.setGeometry(10, 200, create push button 		push005 QPushButton("5", element) geometry 		push005.setGeometry(100, 200, create push button 		push006 QPushButton("5", element) geometry 		push006.setGeometry(190, 200, create push button 		push007 QPushButton("7", element) geometry 		push007.setGeometry(10, 250, create push button 		push008 QPushButton("8", element) geometry 		push008.setGeometry(100, 250, create push button 		push009 QPushButton("9", element) geometry 		push009.setGeometry(190, 250, create push button 		push00 QPushButton("0", element) geometry 		push00.setGeometry(10, 300, Then, will create push buttons numbers from 0-9 their geometry size. Creating introducing operator push button create push button operator 		push_equalsto QPushButton("=", element) geometry 		push_equalsto.setGeometry(280, 300, adding color effect equal button 		clr_effect QGraphicsColorizeEffect() 		clr_effect.setColor(Qt.blue) 		push_equalsto.setGraphicsEffect(clr_effect) create push button operator 		push_addtn QPushButton("+", element) geometry 		push_addtn.setGeometry(280, 250, create push button operator 		push_subtrct QPushButton("-", element) geometry 		push_subtrct.setGeometry(280, 200, create push button operator 		push_multiply QPushButton("*", element) geometry 		push_multiply.setGeometry(280, 150, create push button operator 		push_divide QPushButton("/", element) geometry 		push_divide.setGeometry(190, 300, create push button operator 		push_pnt QPushButton(".", element) geometry 		push_pnt.setGeometry(100, 300, create clear button 		push_clr QPushButton("Clear", element) 		push_clr.setGeometry(10, 100, 200, deleting current-char button 		push_delete QPushButton("Del", element) 		push_delete.setGeometry(215, 100, 145, Then, will create push buttons mathematical operators clear, equal delete keywords along with setting their geometry size. equal button given special emphasis adding different colour effect adding respective actions each buttons 		push_subtrct.clicked.connect(element.action_subtrct) 		push_equalsto.clicked.connect(element.action_equalsto) 		push00.clicked.connect(element.action00) 		push001.clicked.connect(element.action001) 		push002.clicked.connect(element.action002) 		push003.clicked.connect(element.action003) 		push004.clicked.connect(element.action004) 		push005.clicked.connect(element.action005) 		push006.clicked.connect(element.action006) 		push007.clicked.connect(element.action007) 		push008.clicked.connect(element.action008) 		push009.clicked.connect(element.action009) 		push_divide.clicked.connect(element.action_divide) 		push_multiply.clicked.connect(element.action_multiply) 		push_addtn.clicked.connect(element.action_addtn) 		push_pnt.clicked.connect(element.action_pnt) 		push_clr.clicked.connect(element.action_clr) 		push_delete.clicked.connect(element.action_delete) Then, added actions these push buttons attaching event calling functions. action_equalsto(element): getting text label 		equation element.label.text() 		try: 			# getting solution 			sol eval(equation) 			# setting text label 			element.label.setText(str(sol)) 		except: 			# setting text label 			element.label.setText("Wrong Input") 	def action_addtn(element): appending text label 		text element.label.text() 		element.label.setText(text 	def action_subtrct(element): appending text label 		text element.label.text() 		element.label.setText(text 	def action_divide(element): appending text label 		text element.label.text() 		element.label.setText(text 	def action_multiply(element): appending label text 		text element.label.text() 		element.label.setText(text 	def action_pnt(element): appending text label 		text element.label.text() 		element.label.setText(text ".") 	def action00(element): appending text label 		text element.label.text() 		element.label.setText(text "0") 	def action001(element): appending text label 		text element.label.text() 		element.label.setText(text "1") 	def action002(element): appending text label 		text element.label.text() 		element.label.setText(text "2") 	def action003(element): appending text label 		text element.label.text() 		element.label.setText(text "3") 	def action004(element): appending text label 		text element.label.text() 		element.label.setText(text "4") 	def action005(element): appending text label 		text element.label.text() 		element.label.setText(text "5") 	def action006(element): appending text label 		text element.label.text() 		element.label.setText(text "6") 	def action007(element): appending text label 		text element.label.text() 		element.label.setText(text "7") 	def action008(element): appending text label 		text element.label.text() 		element.label.setText(text "8") 	def action009(element): appending text label 		text element.label.text() 		element.label.setText(text "9") Then, event calling functions that that were added each push button were defined. functions were created number from 0-9. These functions being called proceeded such that some text present then that text would added/ subtracted/ multiplied/ divided/ equated next number pressed. And, till equals operator button pressed, results stored temporarily variable, which displayed after getting final answer. action_clr(element): clearing text label 		element.label.setText("") 	def action_delete(element): clearing only single digit 		text element.label.text() 		print(text[:len(text)-1]) 		element.label.setText(text[:len(text)-1]) clear button's corresponding function used clear text text area delete button's corresponding function used delete only current character text area. creating PyQt5 application root QApplication(sys.argv) creating instance Window window Window() starting application sys.exit(root.exec()) Finally, will create PyQt5 application creating instance window then executed application's code. Complete Code Python program create simple Calculator using PyQt5 import required libraries from PyQt5.QtWidgets import from PyQt5 import QtCore, QtGui from PyQt5.QtGui import from PyQt5.QtCore import import class Window(QMainWindow): 	def __init__(element): 		super().__init__() title 		element.setWindowTitle("Python geometry 		element.setGeometry(105, 100, 360, 350) call function 		element.UiCompnts() displaying present widgets 		element.show() function widgets 	def UiCompnts(element): create label 		element.label QLabel(element) geometry label 		element.label.setGeometry(10, 350, create another label multiple line 		element.label.setWordWrap(True) Setting styles style sheet label 		element.label.setStyleSheet("QLabel" 								"{" 								"border solid Black 								"background white 								"}") Adjusting alignments diff labels 		element.label.setAlignment(Qt.AlignRight) font style label 		element.label.setFont(QFont('Arial', 14)) Addition numerical buttons screen create push button 		push001 QPushButton("1", element) geometry 		push001.setGeometry(10, 150, create push button 		push002 QPushButton("2", element) geometry 		push002.setGeometry(100, 150, create push button 		push003 QPushButton("3", element) geometry 		push003.setGeometry(190, 150, create push button 		push004 QPushButton("4", element) geometry 		push004.setGeometry(10, 200, create push button 		push005 QPushButton("5", element) geometry 		push005.setGeometry(100, 200, create push button 		push006 QPushButton("5", element) geometry 		push006.setGeometry(190, 200, create push button 		push007 QPushButton("7", element) geometry 		push007.setGeometry(10, 250, create push button 		push008 QPushButton("8", element) geometry 		push008.setGeometry(100, 250, create push button 		push009 QPushButton("9", element) geometry 		push009.setGeometry(190, 250, create push button 		push00 QPushButton("0", element) geometry 		push00.setGeometry(10, 300, Creating introducing operator push button create push button operator 		push_equalsto QPushButton("=", element) geometry 		push_equalsto.setGeometry(280, 300, adding color effect equal button 		clr_effect QGraphicsColorizeEffect() 		clr_effect.setColor(Qt.blue) 		push_equalsto.setGraphicsEffect(clr_effect) create push button operator 		push_addtn QPushButton("+", element) geometry 		push_addtn.setGeometry(280, 250, create push button operator 		push_subtrct QPushButton("-", element) geometry 		push_subtrct.setGeometry(280, 200, create push button operator 		push_multiply QPushButton("*", element) geometry 		push_multiply.setGeometry(280, 150, create push button operator 		push_divide QPushButton("/", element) geometry 		push_divide.setGeometry(190, 300, create push button operator 		push_pnt QPushButton(".", element) geometry 		push_pnt.setGeometry(100, 300, create clear button 		push_clr QPushButton("Clear", element) 		push_clr.setGeometry(10, 100, 200, deleting current-char button 		push_delete QPushButton("Del", element) 		push_delete.setGeometry(215, 100, 145, adding respective actions each buttons 		push_subtrct.clicked.connect(element.action_subtrct) 		push_equalsto.clicked.connect(element.action_equalsto) 		push00.clicked.connect(element.action00) 		push001.clicked.connect(element.action001) 		push002.clicked.connect(element.action002) 		push003.clicked.connect(element.action003) 		push004.clicked.connect(element.action004) 		push005.clicked.connect(element.action005) 		push006.clicked.connect(element.action006) 		push007.clicked.connect(element.action007) 		push008.clicked.connect(element.action008) 		push009.clicked.connect(element.action009) 		push_divide.clicked.connect(element.action_divide) 		push_multiply.clicked.connect(element.action_multiply) 		push_addtn.clicked.connect(element.action_addtn) 		push_pnt.clicked.connect(element.action_pnt) 		push_clr.clicked.connect(element.action_clr) 		push_delete.clicked.connect(element.action_delete) 	def action_equalsto(element): getting text label 		equation element.label.text() 		try: 			# getting solution 			sol eval(equation) 			# setting text label 			element.label.setText(str(sol)) 		except: 			# setting text label 			element.label.setText("Wrong Input") 	def action_addtn(element): appending text label 		text element.label.text() 		element.label.setText(text 	def action_subtrct(element): appending text label 		text element.label.text() 		element.label.setText(text 	def action_divide(element): appending text label 		text element.label.text() 		element.label.setText(text 	def action_multiply(element): appending label text 		text element.label.text() 		element.label.setText(text 	def action_pnt(element): appending text label 		text element.label.text() 		element.label.setText(text ".") 	def action00(element): appending text label 		text element.label.text() 		element.label.setText(text "0") 	def action001(element): appending text label 		text element.label.text() 		element.label.setText(text "1") 	def action002(element): appending text label 		text element.label.text() 		element.label.setText(text "2") 	def action003(element): appending text label 		text element.label.text() 		element.label.setText(text "3") 	def action004(element): appending text label 		text element.label.text() 		element.label.setText(text "4") 	def action005(element): appending text label 		text element.label.text() 		element.label.setText(text "5") 	def action006(element): appending text label 		text element.label.text() 		element.label.setText(text "6") 	def action007(element): appending text label 		text element.label.text() 		element.label.setText(text "7") 	def action008(element): appending text label 		text element.label.text() 		element.label.setText(text "8") 	def action009(element): appending text label 		text element.label.text() 		element.label.setText(text "9") 	def action_clr(element): clearing text label 		element.label.setText("") 	def action_delete(element): clearing only single digit 		text element.label.text() 		print(text[:len(text)-1]) 		element.label.setText(text[:len(text)-1]) creating PyQt5 application root QApplication(sys.argv) creating instance Window window Window() starting application sys.exit(root.exec()) Output: Next TopicBest Resources Learn NumPy Pandas prev next