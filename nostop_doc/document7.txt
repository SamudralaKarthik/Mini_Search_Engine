next prev Python Data Types Variables hold values, every value data-type. Python dynamically typed language; hence need define type variable while declaring interpreter implicitly binds value with type. variable holds integer value five define type. Python interpreter will automatically interpret variables integer type. Python enables check type variable used program. Python provides type() function, which returns type variable passed. Consider following example define values different data types checking type. a=10 b="Hi Python" 10.5 print(type(a)) print(type(b)) print(type(c)) Output: <type 'int'> <type 'str'> <type 'float'> Standard data types variable hold different types values. example, person's name must stored string whereas must stored integer. Python provides various standard data types that define storage method each them. data types defined Python given below. Numbers Sequence Type Boolean Dictionary this section tutorial, will give brief introduction above data-types. will discuss each them detail later this tutorial. Numbers Number stores numeric values. integer, float, complex values belong Python Numbers data-type. Python provides type() function know data-type variable. Similarly, isinstance() function used check object belongs particular class. Python creates Number objects when number assigned variable. example; print("The type type(a)) 40.5 print("The type type(b)) 1+3j print("The type type(c)) print(" complex number", isinstance(1+3j,complex)) Output: type <class 'int'> type <class 'float'> type <class 'complex'> complex number: True Python supports three types numeric data. Integer value length such integers -20, -150 etc. Python restriction length integer. value belongs Float Float used store floating-point numbers like 1.9, 9.902, 15.2, etc. accurate upto decimal points. complex complex number contains ordered pair, i.e., iy where denote real imaginary parts, respectively. complex numbers like 2.14j, 2.3j, etc. Sequence Type String string defined sequence characters represented quotation marks. Python, single, double, triple quotes define string. String handling Python straightforward task since Python provides built-in functions operators perform operations string. case string handling, operator used concatenate strings operation "hello"+" python" returns "hello python". operator known repetition operator operation "Python" *2 returns 'Python Python'. following example illustrates string Python. Example "string using double quotes" print(str) '''A multiline string''' print(s) Output: string using double quotes multiline string Consider following example string handling. Example str1 'hello javatpoint' #string str1 str2 you' #string str2 print (str1[0:2]) #printing first character using slice operator print (str1[4]) #printing character string print (str1*2) #printing string twice print (str1 str2) #printing concatenation str1 str2 Output: hello javatpointhello javatpoint hello javatpoint List Python Lists similar arrays However, list contain data different types. items stored list separated with comma enclosed within square brackets slice operators access data list. concatenation operator repetition operator works with list same they were working with strings. Consider following example. list1 "hi", "Python", #Checking type given list print(type(list1)) #Printing list1 print (list1) List slicing print (list1[3:]) List slicing print (list1[0:2]) List Concatenation using operator print (list1 list1) List repetation using operator print (list1 Output: 'hi', 'Python', 'hi'] 'hi', 'Python', 'hi', 'Python', 'hi', 'Python', 'hi', 'Python', 'hi', 'Python', Tuple tuple similar list many ways. Like lists, tuples also contain collection items different data types. items tuple separated with comma enclosed parentheses tuple read-only data structure can't modify size value items tuple. Let's simple example tuple. ("hi", "Python", Checking type print (type(tup)) #Printing tuple print (tup) Tuple slicing print (tup[1:]) print (tup[0:1]) Tuple concatenation using operator print (tup tup) Tuple repatation using operator print (tup Adding value tup. will throw error. t[2] "hi" Output: <class 'tuple'> ('hi', 'Python', ('Python', ('hi',) ('hi', 'Python', 'hi', 'Python', ('hi', 'Python', 'hi', 'Python', 'hi', 'Python', Traceback (most recent call last): File "main.py", line <module> t[2] "hi"; TypeError: 'tuple' object does support item assignment Dictionary Dictionary unordered key-value pair items. like associative array hash table where each stores specific value. hold primitive data type, whereas value arbitrary Python object. items dictionary separated with comma enclosed curly braces Consider following example. {1:'Jimmy', 2:'Alex', 3:'john', 4:'mike'} Printing dictionary print Accesing value using keys print("1st name "+d[1]) print("2nd name d[4]) print (d.keys()) print (d.values()) Output: name Jimmy name mike 'Jimmy', 'Alex', 'john', 'mike'} dict_keys([1, dict_values(['Jimmy', 'Alex', 'john', 'mike']) Boolean Boolean type provides built-in values, True False. These values used determine given statement true false. denotes class bool. True represented non-zero value whereas false represented 'F'. Consider following example. Python program check boolean type print(type(True)) print(type(False)) print(false) Output: <class 'bool'> <class 'bool'> NameError: name 'false' defined Python unordered collection data type. iterable, mutable(can modify after creation), unique elements. set, order elements undefined; return changed sequence element. created using built-in function set(), sequence elements passed curly braces separated comma. contain various types values. Consider following example. Creating Empty set1 set() set2 {'James', 3,'Python'} #Printing value print(set2) Adding element set2.add(10) print(set2) #Removing element from set2.remove(2) print(set2) Output: 'Python', 'James', {'Python', 'James', {'Python', 'James', Next TopicPython Keywords prev next