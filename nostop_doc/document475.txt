next prev Python zlib Library what zlib Python? zlib Python library that supports zlib library, higher-level generalization deflating lossless compression algorithms. zlib library used lossless compress, which means there data loss between compression decompression). also provides portability advantages across different platforms doesn't expand data. This library plays very significant role terms security. Many applications require compression decompression arbitrary data such strings, files, structured in-memory content. This library well-suited with gzip file format/tool, most popular useful compression application UNIX systems. compression() method zlib library facilitates compress() method, which used compress data string. Below syntax function. compress(data, level=-1) Parameter data parameter specifies bytes compressed, level represents integer value between level parameter used define level compression. Level signifies slowest; however, brings highest compression level. value default that level Level yields compression. Let's understand below example. Example import zlib import binascii value 'Welcome JavaTpoint' compressed_data zlib.compress(value, print('Original data: value) print('Compressed data: binascii.hexlify(compressed_data)) Output: Original data: Welcome JavaTpoint Compressed data: 785ef348cdc9c95728cf2fca49010018ab043d change value then result will below. Original data: Welcome JavaTpoint Compressed data: 785ef348cdc9c95728cf2fca49010018ab043d Compressing Large Data Streams zlib library provides comressobj() function manage large data streams. This method returns compression object. syntax given below. Syntax compressobj(level=-1, method=DEFLATED, wbits=15, memLevel=8, strategy=Z_DEFAULT_STRATEGY[, zdict]) Parameters above method accepts wbits argument that handles window size, header trailer comprised output. Below possible value Value Window size logarithm Output Base includes zlib headers trailer. Represent absolute value wbit Exclude header trailer. +25 bits value. includes header trailing checksum. method argument defines algorithm used compression. DEFLATED default current possible algorithm. strategy argument defines compression tuning. recommended only default value now. Let's understand following example Example import zlib import binascii data 'Welcome JavaTpoint' compress zlib.compressobj(zlib.Z_DEFAULT_COMPRESSION, zlib.DEFLATED, -15) compressed_data compress.compress(data) compressed_data compress.flush() print('Original: data) print('Compressed data: binascii.hexlify(compressed_data)) Output: Original: Hello world Compressed data: f348cdc9c95728cf2fca490100 Explanation took simple string value that large data stream, serves purpose showing working compressobj() function. string "Welcome JavaTpoint" compressed. Generally, this method used when data streams large won't into memory. This method plays essential role bigger application where configure compression used compress portions data series. plays significant role where compression required. With help compress.compress(data) method, compress flush chunk data without accumulating full data memory. Compressing File will compression() method compress file. syntax similar previous example. below example, will compress image "mountain.png". Let's understand following example. Example import zlib original_data open(r'C:\Users\DEVANSH SHARMA\Pictures\Saved Pictures\mountain.png', 'rb').read() compressed_data zlib.compress(original_data, zlib.Z_BEST_COMPRESSION) compress_ratio (float(len(original_data)) float(len(compressed_data))) float(len(original_data)) print('Compressed: %d%%' (100.0 compress_ratio)) Output: Compressed: above example, have used Z_BEST_COMPRESSION, which best compression level this algorithm offer. next line, calculate level compression based ratio compressed data length over original data. file compressed 13%, this compress ASCII string binary image data. Saving Compress Data File also save compressed data file further use. below example, shows some compressed text into file. Example import zlib my_data 'Welcome JavaTpoint' compressed_data zlib.compress(my_data, open('outfile.txt', 'w') f.write(compressed_data) f.close() When above program, compresses given string saves compressed data into file named "output.txt". Decompression Decompressing also important aspect application. zlib library provides decompress() method. Below syntax Syntax: decompress(data, wbits=MAX_WBITS, bufsize=DEF_BUF_SIZE) Parameters data argument byte formatted value. wbits argument used manage size history buffer. possible buffer value below. Value Window size logarithm Input +8 Base includes zlib header trailer -8 represents absolute alve wbits includes stream with header trailer +24 represents bits value includes gzip header trailer +40 +47 represents bits value zlib gzip format bufsize argument indicates buffer size. best thing about this argument that doesn't need exact; value automatically increases when extra buffer size needed. Let's understand following example. Example import zlib data 'Welcome JavaTpoint' compressed_data zlib.compress(data, decompressed_data zlib.decompress(compressed_data) print('Decompressed data: decompressed_data) Output: Welcome JavaTpoint Decompressing Large Data Streams While decompressing large data stream, face memory management issue size source data. There chance utilize available memory that particular task. that, decompressobj() allows divide large stream multiple chunks, which decompressed separately. syntax below. Syntax decompressobj(wbits=15[, zdict]) above method returns decompress object, which used decompress particular data. Let's understand following example. Example import zlib data 'Welcome JavaTpoint' compress zlib.compressobj(zlib.Z_DEFAULT_COMPRESSION, zlib.DEFLATED, +15) compressed_data compress.compress(data) compressed_data compress.flush() print('Data before Decompress: data) print('Data After Decompress: compressed_data) open('compressed.datd', 'w') f.write(compressed_data) f.close() CHUNKSIZE 1024 data2 zlib.decompressobj() my_file open('compressed.dat', 'rb') buffer_value my_file.read(CHUNKSIZE) Decompress stream chunks while buffer_value: decompressed_data data2.decompress(buf) my_file.read(CHUNKSIZE) decompressed_data data2.flush() print('Decompressed data: decompressed_data) my_file.close() Output: Data Before Decompress: Welcome JavaTpoint Data After Decompress #@$%%#@@#s Decompressed Data: Welcome JavaTpoint Decompressing Data from File have discussed previous examples, easily decompress data contained file. This example similar previous example; data from file, except that this case, will decompress() method. This method useful when data small enough memory easily. Let's understand following example. Example import zlib compressed_data open('hello.dat', 'rb').read() decompressed_data zlib.decompress(compressed_data) print(decompressed_data) Explanation have read hello.dat that contains "Welcome JavaTpoint". However, file contains small string have used decompress() instead decompressobj() function. Conclusion Python zlib library useful when application requires compression security level. comes with bunch excellent functions. have discussed some important concepts zlib library, although many functions available. compress() decompress() methods used small data, whereas compressobj() decompressobj() methods available provide more flexibility supporting compression/decompression data streams. Next TopicPython Queue Module prev next