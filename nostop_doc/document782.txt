next prev Flappy Bird Game using PyGame Python Python most popular high-level programming languages. Python offers huge libraries different fields like Artificial Intelligence (TensorFlow, PyTorch), Machine Learning (Pandas, NumPy, Matplotlib), Game Development (Pyglet, PyGame). also consider Python next-generation programming language shows presence actively every emerging field Computer Science. following tutorial, will create game known Flappy Bird using PyGame library Python programming language. Flappy Bird endless game that includes bird controlled player. objective this game prevent bird from falling ground colliding with obstacles like pipes. Every time bird passes through pipes, scores increment one. game ends when bird collides with pipes falls ground gravity. before start building this project, briefly understand Python PyGame library. Understanding PyGame library PyGame library cross-platform Python modules utilized develop video games. PyGame mainly comprises computer graphics sound libraries designed utilized with Python programming language. Pete Shinners officially wrote this library replace PySDL. suitable develop client-side applications that potentially wrapped standalone executable. install PyGame library? PyGame library installed using installer typing following command command prompt terminal. Syntax: installing PyGame library install pygame Once installation complete, verify whether pygame library installed properly creating python program file importing pygame module. following snippet code illustrating same. File: verify.py import pygame Now, save file following command command prompt terminal. Syntax: python verify.py library been installed successfully program does return importing error. case exception raised, reinstalling library consider checking their official documentation. Prerequisites Project that have successfully installed required library, briefly look into project's prerequisites. following modules that required project: PyGame: This module will allow develop game. Random: This module will allow generate random numbers, print random value list string, more. Developing Flappy Bird Game using PyGame will start developing Flappy Bird Game Python. have created folder "Flappy Bird". Inside this folder, have created python file "main.py" where will write code program another folder "images" containing images need throughout project. download resource project through following link: Click here Download have divided complete project code into smaller segments better understanding. following steps will follow develop project: Step Firstly, will import required modules. Step will then create Scrolling background. Step This step involves adding Sprite Animation Game. Step will then some physics Game. Step this step, will scrolling pipes Game. Step will then score counter. Step will last functions game over reset game. Now, understand implementation these steps detail. Importing necessary Modules will start importing modules required game development. will import pygame module along with random module. consider following snippet code illustrating same. File: main.py importing required modules import pygame importing pygame module from pygame.locals import importing everything from pygame.locals module import random importing random module Explanation: above snippet code, have imported pygame module. have then imported everything from pygame.locals module. last, imported random module. Creating Scrolling background that have imported required modules project, time create scrolling background. accomplish this objective, will first initialize pygame window. will size screen along with title display. will also define some necessary functions perform scrolling. will then load some images from directory display background base perform functionality. consider following snippet code illustrating same. File: main.py using init() function initialize pygame window pygame.init() creating object Clock() class pygame.time module game_clock pygame.time.Clock() defining game game_fps defining width height game screen SCREEN_WIDTH SCREEN_HEIGHT using set_mode() function pygame.display module size screen display_screen pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT)) setting title application using set_caption() function pygame.display.set_caption('Flappy Bird JAVATPOINT') declaring initializing game variables baseScroll scrollSpeed loading images background pygame.image.load('images/background.png') base pygame.image.load('images/base.png') declaring variable initializing value with True game_run True using while loop while game_run: setting game game_clock.tick(game_fps) drawing background display_screen.blit(background, drawing scrolling base display_screen.blit(base, (baseScroll, 768)) baseScroll scrollSpeed abs(baseScroll) baseScroll using loop iterate through events game event pygame.event.get(): setting variable value False event's type equivalent pygame's QUIT constant event.type pygame.QUIT: game_run False using update() function pygame.display module update events game pygame.display.update() using quit() function quit game pygame.quit() Explanation: above snippet code, have used init() function initialize pygame window. have then created object Clock() class pygame.time module defined variable store game's FPS. have then defined width height used set_mode() function pygame.display module size screen. have then title application using set_caption() function pygame.display module. have then declared initialized some game variables specifically perform scrolling. have then used load() function pygame.image module load images display background base. have then game_run variable value True used while loop game. Within this loop, have used tick() function game clock FPS defined earlier. have then drawn background using blit() function. have then drawn base using blit() function scroll subtracting scrolling speed from base scroll value, absolute value base scroll greater than pixels, base scroll value back have then used for-loop iterate through events game game_run variable value False event type QUIT constant pygame module. then used update() function update events game. last, used quit() function quit game. Creating sprite animation bird will create sprite animation bird using Sprite() class display bird. Within this class, will import required sprite bird images from directory place imported images after another perform animation. consider following snippet code demonstrating same. File: main.py creating class pygame's Sprite() class display bird class FlappyBird(pygame.sprite.Sprite): defining initializing function __init__(self, x_coordinate, y_coordinate): pygame.sprite.Sprite.__init__(self) creating empty list self.image_list setting index counter value self.index self.counter iterating through range range(1, loading sprite bird images from directory using load() function pygame.image module image pygame.image.load(f'images/bird_{i}.png') using append() function image list self.image_list.append(image) setting current image self.image self.image_list[self.index] creating rectangle place bird image self.rect self.image.get_rect() setting position bird self.rect.center [x_coordinate, y_coordinate] defining function handle animation update(self): updating counter self.counter defining variable display sprite cooldown flapCooldown counter value greater than cooldown value counter value self.counter flapCooldown: self.counter updating index value self.index index value greater than equal length list, index value self.index len(self.image_list): self.index updating current image self.image self.image_list[self.index] creating object Group() class pygame.sprite module birdGroup pygame.sprite.Group() creating object FlappyBird() class with bird FlappyBird(200, int(SCREEN_HEIGHT using add() function object FlappyBird() class group birdGroup.add(bird) Explanation: above snippet code, have created class FlappyBird using pygame's Sprite() class display bird. have defined initializing function initialize some variables within this function. have created empty list index counter value then used for-loop iterate through bird images that have loaded program using load() function pygame.image module. have then used append() function these imported images list created earlier. have then initial image displayed when game starts. have then created rectangle placement bird screen using get_rect() function coordinates coordinates bird pixels. have then defined another function handle animation. Within this function, have updated counter variable incrementing value defined another variable display sprite cooldown. then counter value back counter value exceeds cooldown value. have then updated index value incrementing back value gets greater than number elements image list. have then updated current image from image list index value. have then created object Group() class pygame.sprite module. last, have instantiated FlappyBird() class used add() function this instance object Group() class. that have successfully created Sprite() class display bird, time draw bird screen over background call necessary functions implement animation. consider following snippet code illustrating same. File: main.py using while loop while game_run: setting game game_clock.tick(game_fps) drawing background display_screen.blit(background, drawing bird birdGroup.draw(display_screen) calling update() function birdGroup.update() drawing scrolling base display_screen.blit(base, (baseScroll, 768)) baseScroll scrollSpeed abs(baseScroll) baseScroll using loop iterate through events game event pygame.event.get(): setting variable value False event's type equivalent pygame's QUIT constant event.type pygame.QUIT: game_run False using update() function pygame.display module update events game pygame.display.update() Explanation: above snippet code, have updated while loop adding statements draw bird implement animation. have used draw() function with Group() class object consisting bird display main screen. have then called update() function animate bird. Adding Physics Game will some physics game. This will help bird fall gravity jump mouse click. will also adding some adjustments bird sprite itself that will appear more appealing. will start declaring initializing some game variables. These variables will consist Boolean values indicating flying bird game over. consider following snippet code illustrating same. File: main.py declaring initializing game variables birdFlying False gameOver False Explanation: above snippet code, have declared some game variables initialized them with False. will update FlappyBird() class. These updates include implementation bird's velocity, checking mouse pressed, rotation bird. consider following snippet code demonstrating same. File: main.py creating class pygame's Sprite() class display bird class FlappyBird(pygame.sprite.Sprite): defining initializing function __init__(self, x_coordinate, y_coordinate): pygame.sprite.Sprite.__init__(self) code initialize variables sprite bird animation defining initial velocity bird self.velocity self.pressed False defining function handle animation update(self): bird flying then this code birdFlying True: adding gravity bird incrementing velocity bird self.velocity velocity bird greater than then final value self.velocity 8.5: self.velocity rectangle's bottom less than then increment y-axis value velocity's integer value self.rect.bottom 576: self.rect.y int(self.velocity) game over then this code gameOver False: mouse button clicked pygame.mouse.get_pressed()[0] self.pressed False: setting pressed variable value True self.pressed True setting velocity self.velocity mouse button released pygame.mouse.get_pressed()[0] setting pressed variable value False self.pressed False sprite animation's update() function code rotating bird self.image pygame.transform.rotate(self.image_list[self.index], self.velocity game over else: rotating bird self.image pygame.transform.rotate(self.image_list[self.index], -90) Explanation: above snippet code, have updated FlappyBird() class adding some variables indicating initial velocity bird Boolean value describing state mouse key. Inside update() function class, have included code implement functioning free fall jump every mouse click. order accomplish functioning free fall, have created checkpoint bird flying added some statements like incrementing bird's velocity setting final velocity bird reaches velocity above. have also checked position bird image rectangle less than incremented value velocity. Similarly, accomplish jump every mouse click, have created checkpoint game over, with help if-else conditional statement. then checked mouse pressed initial pressed value False pressed value True, velocity equals move bird upward. then checked mouse released pressed value back False. have then used rotate() function pygame.transform module rotate bird certain angle appears moving. game over, have again used rotate() function rotate bird make look dead. that have made required adjustments FlappyBird() Sprite class, also time update game loop. will include checkpoint over game bird ground. will also statement pause scroll base game over. Moreover, will also statement state game once user clicks screen. consider following snippet code demonstrating same. Note: while loop will updated whenever something game until game becomes fully functional. replacing previous while loop with following recommended. File: main.py using while loop while game_run: setting game game_clock.tick(game_fps) drawing background display_screen.blit(background, drawing bird birdGroup.draw(display_screen) calling update() function birdGroup.update() drawing base display_screen.blit(base, (baseScroll, 576)) checking bird ground bird.rect.bottom 576: gameOver True birdFlying False checking game over gameOver False: scrolling base baseScroll scrollSpeed abs(baseScroll) baseScroll using loop iterate through events game event pygame.event.get(): setting variable value False event's type equivalent pygame's QUIT constant event.type pygame.QUIT: game_run False setting variable value True event's type equivalent pygame's MOUSEBUTTONDOWN constant, bird flying game over event.type pygame.MOUSEBUTTONDOWN birdFlying False gameOver False: birdFlying True using update() function pygame.display module update events game pygame.display.update() Explanation: above code snippet, have updated while loop adding if-conditional statement check bird ground. case does, game will over, bird will more fly. Similarly, have added if-conditional statement check game over base scroll. added another if-conditional statement inside for-loop iterating through events check mouse click, bird flying, game over, bird flying start game. Adding Scrolling Pipes Game that have added background, base, bird game, time scrolling pipes. will start declaring initializing some game variables store values, like between pipes frequency pipes. will create Sprite() class display pipes update game loop. consider following snippet code illustrating same. File: main.py declaring initializing game variables pipeGap pipeFrequency 1450 milliseconds lastPipe pygame.time.get_ticks() pipeFrequency Explanation: above code snippet, have declared some game variables like pipeGap, pipeFrequency, lastPipe initialized them with some values, respectively. will create class using pygame's Sprite() class display pipes. This class will frequently generate different pipes game. consider following snippet code illustrating same. File: main.py creating class pygame's Sprite() class display pipes class Pipe(pygame.sprite.Sprite): defining initializing function __init__(self, x_coordinate, y_coordinate, position): pygame.sprite.Sprite.__init__(self) loading sprite pipe image from directory using load() function pygame.image module self.image pygame.image.load('images/pipe.png') creating rectangle place pipe image self.rect self.image.get_rect() position from top, from bottom position self.image pygame.transform.flip(self.image, False, True) self.rect.bottomleft [x_coordinate, y_coordinate int(pipeGap position self.rect.topleft [x_coordinate, y_coordinate int(pipeGap defining function handle pipes animation memory update(self): setting scroll speed pipes self.rect.x scrollSpeed destroying pipes once they left screen release memory self.rect.right self.kill() creating object Group() class pygame.sprite module pipeGroup pygame.sprite.Group() Explanation: above code snippet, have created class pygame's Sprite() class. Within this class, have defined initializing function declare some required variables load image pipe from directory. then created rectangle place imported pipe image. have then placed bottom facing each other. have then defined function handle pipes' animation memory. Within this function, have pipe scroll using same scrolling speed used base. have also used kill() function release memory once pipe leaves screen. last, have created object Group() class store pipes. that have created Sprite() class display pipes, will update game loop implementation pipes in-game. consider following snippet code illustrating same. Note: while loop will updated whenever something game until game becomes fully functional. replacing previous while loop with following recommended. File: main.py using while loop while game_run: setting game game_clock.tick(game_fps) drawing background display_screen.blit(background, drawing bird birdGroup.draw(display_screen) calling update() function birdGroup.update() drawing pipes pipeGroup.draw(display_screen) drawing base display_screen.blit(base, (baseScroll, 576)) looking collision pygame.sprite.groupcollide(birdGroup, pipeGroup, False, False) bird.rect.top gameOver True checking bird ground bird.rect.bottom 576: gameOver True birdFlying False checking game over gameOver False birdFlying True: generating pipes timeNow pygame.time.get_ticks() timeNow lastPipe pipeFrequency: pipeHeight random.randint(-100, 100) bottomPipe Pipe(SCREEN_WIDTH, int(SCREEN_HEIGHT pipeHeight, topPipe Pipe(SCREEN_WIDTH, int(SCREEN_HEIGHT pipeHeight, pipeGroup.add(bottomPipe) pipeGroup.add(topPipe) lastPipe timeNow scrolling base baseScroll scrollSpeed abs(baseScroll) baseScroll calling update() function pipeGroup.update() using loop iterate through events game event pygame.event.get(): setting variable value False event's type equivalent pygame's QUIT constant event.type pygame.QUIT: game_run False setting variable value True event's type equivalent pygame's MOUSEBUTTONDOWN constant, bird flying game over event.type pygame.MOUSEBUTTONDOWN birdFlying False gameOver False: birdFlying True using update() function pygame.display module update events game pygame.display.update() Explanation: above snippet code, have updated while loop adding pipes game. have used draw() method draw pipes game screen. then used groupcollide() function check collision between bird pipe over game. have then generated pipes with variations height. have then added these pipes floor ceiling. Creating Score Counter will score counter game. This score counter will reward player with score whenever bird passes through pipe successfully. this mechanism work, will create flag check bird passed pipe counter store score. will initial value flag False counter will then check bird passed left side pipe right side flag value True. Once bird passed right side pipe, will flag value back False increment counter value This process will continue every time bird passes through pipe. understand same using following snippet code. File: main.py defining font style fontStyle pygame.font.SysFont('arial black', defining font color black declaring initializing game variables playerScore passPipe False Explanation: above snippet code, have defined some variables store font style color. have then declared some game variables store score flag value initialized them with False, respectively. will define function draw text image screen, Pygame does over flexibility text directly application. This function will accept multiple parameters like text display, font style, font color, coordinates where this text will displayed. will render() function render required text image. will then blit() function display image screen. File: main.py defining function draw text screen drawText(text, fontStyle, textColor, x_coordinate, y_coordinate): using render() function render text image image fontStyle.render(text, True, textColor) using blit() function display image screen display_screen.blit(image, (x_coordinate, y_coordinate)) Explanation: above snippet code, have defined function drawText(), which accepts text, font style, text color, y-coordinates parameters. Within this function, have used render() function render text image. then used blit() function display rendered image screen. will update game loop once again configuration score counter game. consider following snippet code illustrating same. Note: while loop will updated whenever something game until game becomes fully functional. replacing previous while loop with following recommended. File: main.py using while loop while game_run: setting game game_clock.tick(game_fps) drawing background display_screen.blit(background, drawing bird birdGroup.draw(display_screen) calling update() function birdGroup.update() drawing bird pipeGroup.draw(display_screen) drawing base display_screen.blit(base, (baseScroll, 576)) checking score len(pipeGroup) checking bird over pipe passed left side right size birdGroup.sprites()[0].rect.left pipeGroup.sprites()[0].rect.left\ birdGroup.sprites()[0].rect.left pipeGroup.sprites()[0].rect.right\ passPipe False: setting boolean value true passPipe True checking bird passed left side pipe passPipe True: checking bird passed right side pipe birdGroup.sprites()[0].rect.left pipeGroup.sprites()[0].rect.right: incrementing score playerScore setting boolean value back false passPipe False calling drawText() function display calculated score screen drawText(str(playerScore), fontStyle, black, int(SCREEN_WIDTH looking collision pygame.sprite.groupcollide(birdGroup, pipeGroup, False, False) bird.rect.top gameOver True checking bird ground bird.rect.bottom 576: gameOver True birdFlying False checking game over gameOver False birdFlying True: generating pipes timeNow pygame.time.get_ticks() timeNow lastPipe pipeFrequency: pipeHeight random.randint(-100, 100) bottomPipe Pipe(SCREEN_WIDTH, int(SCREEN_HEIGHT pipeHeight, topPipe Pipe(SCREEN_WIDTH, int(SCREEN_HEIGHT pipeHeight, pipeGroup.add(bottomPipe) pipeGroup.add(topPipe) lastPipe timeNow scrolling base baseScroll scrollSpeed abs(baseScroll) baseScroll calling update() function pipeGroup.update() using loop iterate through events game event pygame.event.get(): setting variable value False event's type equivalent pygame's QUIT constant event.type pygame.QUIT: game_run False setting variable value True event's type equivalent pygame's MOUSEBUTTONDOWN constant, bird flying game over event.type pygame.MOUSEBUTTONDOWN birdFlying False gameOver False: birdFlying True using update() function pygame.display module update events game pygame.display.update() Explanation: above snippet code, have updated while loop once again adding score counter. this, have checked bird over pipe passed left side right side flag value True. have then checked flag True, bird passed right side pipe incremented score flag back False. have then called drawText() function display calculated score screen. Adding Functions Game Over Restart Game will some functions display game over screen restart game. accomplish this goal importing image needed displayed once game over. will then define class order display image button function interact with start importing required image. following snippet code illustrating same. File: main.py loading image button pygame.image.load('images/restart.png') Explanation: above code snippet, used load() function pygame.image module import required image from directory. will define class display button. consider following snippet code illustrating same. File: main.py defining class display button class Button(): defining initializing function __init__(self, x_coordinate, y_coordinate, image): defining some variables self.image image self.rect self.image.get_rect() self.rect.topleft (x_coordinate, y_coordinate) defining function draw image screen draw(self): setting initial action false action False getting mouse position position pygame.mouse.get_pos() checking mouse over button self.rect.collidepoint(position): pygame.mouse.get_pressed()[0] action True drawing button display_screen.blit(self.image, (self.rect.x, self.rect.y)) returning action return action creating restart button instance restartButton Button(150, 100, button) Explanation: above code snippet, have defined class Button(). Within this class, have defined initializing function initialize some variables work with imported image. have then defined function draw() draw image screen. have defined flag primarily initialized value with False. then retrieved mouse position using get_pos() function pygame.mouse module. have then checked mouse clicked over button flag True. then used blit() function draw imported image screen returned flag. last, have instantiated Button() class. will define function reset game. This function will bird's position back initial state, setting scores back remove pipes from screen. consider following snippet code illustrating same. File: main.py defining function reset game resetGame(): calling empty() function remove sprites pipeGroup.empty() describing coordinates rectangle placement bird.rect.x bird.rect.y int(SCREEN_HEIGHT setting player score playerScore returning score return playerScore Explanation: above snippet code, have defined function resetGame(). Within this function, have called empty() function remove sprites pipeGroup group. have then coordinates bird placement. have also player score returned will update game loop once again implementation Button() class resetGame() function. consider following snippet code illustrating same. Note: while loop will updated whenever something game until game becomes fully functional. replacing previous while loop with following recommended. File: main.py using while loop while game_run: setting game game_clock.tick(game_fps) drawing background display_screen.blit(background, drawing bird birdGroup.draw(display_screen) calling update() function birdGroup.update() drawing bird pipeGroup.draw(display_screen) drawing base display_screen.blit(base, (baseScroll, 576)) checking score len(pipeGroup) checking bird over pipe passed left side right size birdGroup.sprites()[0].rect.left pipeGroup.sprites()[0].rect.left\ birdGroup.sprites()[0].rect.left pipeGroup.sprites()[0].rect.right\ passPipe False: setting boolean value true passPipe True checking bird passed left side pipe passPipe True: checking bird passed right side pipe birdGroup.sprites()[0].rect.left pipeGroup.sprites()[0].rect.right: incrementing score playerScore setting boolean value back false passPipe False calling drawText() function display calculated score screen drawText(str(playerScore), fontStyle, black, int(SCREEN_WIDTH looking collision pygame.sprite.groupcollide(birdGroup, pipeGroup, False, False) bird.rect.top gameOver True checking bird ground bird.rect.bottom 576: gameOver True birdFlying False checking game over gameOver False birdFlying True: generating pipes timeNow pygame.time.get_ticks() timeNow lastPipe pipeFrequency: pipeHeight random.randint(-100, 100) bottomPipe Pipe(SCREEN_WIDTH, int(SCREEN_HEIGHT pipeHeight, topPipe Pipe(SCREEN_WIDTH, int(SCREEN_HEIGHT pipeHeight, pipeGroup.add(bottomPipe) pipeGroup.add(topPipe) lastPipe timeNow scrolling base baseScroll scrollSpeed abs(baseScroll) baseScroll calling update() function pipeGroup.update() checking game over reset gameOver True: restartButton.draw() True: gameOver False playerScore resetGame() using loop iterate through events game event pygame.event.get(): setting variable value False event's type equivalent pygame's QUIT constant event.type pygame.QUIT: game_run False setting variable value True event's type equivalent pygame's MOUSEBUTTONDOWN constant, bird flying game over event.type pygame.MOUSEBUTTONDOWN birdFlying False gameOver False: birdFlying True using update() function pygame.display module update events game pygame.display.update() Explanation: above snippet code, have checked game over, button displayed. then gameOver flag value back False, called resetGame() function, used playerScore variable store initial value score, i.e., that project code finally completed, time result. will save project file following command command shell terminal program. Syntax: python main.py briefly complete project code "Flappy Bird using Pygame". Complete Project Code will complete snippet code "Flappy Bird using Pygame Python" project. File: main.py importing required modules import pygame importing pygame module from pygame.locals import importing everything from pygame.locals module import random importing random module using init() function initialize pygame window pygame.init() creating object Clock() class pygame.time module game_clock pygame.time.Clock() defining game game_fps defining width height game screen SCREEN_WIDTH SCREEN_HEIGHT 735 using set_mode() function pygame.display module size screen display_screen pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT)) setting title application using set_caption() function pygame.display.set_caption('Flappy Bird JAVATPOINT') defining font style fontStyle pygame.font.SysFont('arial black', defining font color black declaring initializing game variables baseScroll scrollSpeed birdFlying False gameOver False pipeGap pipeFrequency 1450 milliseconds lastPipe pygame.time.get_ticks() pipeFrequency playerScore passPipe False loading images background pygame.image.load('images/background.png') base pygame.image.load('images/base.png') button pygame.image.load('images/restart.png') defining function draw text screen drawText(text, fontStyle, textColor, x_coordinate, y_coordinate): using render() function render text image image fontStyle.render(text, True, textColor) using blit() function display image screen display_screen.blit(image, (x_coordinate, y_coordinate)) defining function reset game resetGame(): calling empty() function remove sprites pipeGroup.empty() describing coordinates rectangle placement bird.rect.x bird.rect.y int(SCREEN_HEIGHT setting player score playerScore returning score return playerScore creating class pygame's Sprite() class display bird class FlappyBird(pygame.sprite.Sprite): defining initializing function __init__(self, x_coordinate, y_coordinate): pygame.sprite.Sprite.__init__(self) creating empty list self.image_list setting index counter value self.index self.counter iterating through range range(1, loading sprite bird images from directory using load() function pygame.image module image pygame.image.load(f'images/bird_{i}.png') using append() function image list self.image_list.append(image) setting current image self.image self.image_list[self.index] creating rectangle place bird image self.rect self.image.get_rect() setting position bird self.rect.center [x_coordinate, y_coordinate] defining initial velocity bird self.velocity self.pressed False defining function handle animation update(self): bird flying then this code birdFlying True: adding gravity bird incrementing velocity bird self.velocity velocity bird greater than then final value self.velocity 8.5: self.velocity rectangle's bottom less than then increment y-axis value velocity's integer value self.rect.bottom 576: self.rect.y int(self.velocity) game over then this code gameOver False: mouse button clicked pygame.mouse.get_pressed()[0] self.pressed False: setting pressed variable value True self.pressed True setting velocity self.velocity mouse button released pygame.mouse.get_pressed()[0] setting pressed variable value False self.pressed False updating counter self.counter defining variable display sprite cooldown flapCooldown counter value greater than cooldown value counter value self.counter flapCooldown: self.counter updating index value self.index index value greater than equal length list, index value self.index len(self.image_list): self.index updating current image self.image self.image_list[self.index] rotating bird self.image pygame.transform.rotate(self.image_list[self.index], self.velocity game over else: rotating bird self.image pygame.transform.rotate(self.image_list[self.index], -90) creating class pygame's Sprite() class display pipes class Pipe(pygame.sprite.Sprite): defining initializing function __init__(self, x_coordinate, y_coordinate, position): pygame.sprite.Sprite.__init__(self) loading sprite pipe image from directory using load() function pygame.image module self.image pygame.image.load('images/pipe.png') creating rectangle place pipe image self.rect self.image.get_rect() position from top, from bottom position self.image pygame.transform.flip(self.image, False, True) self.rect.bottomleft [x_coordinate, y_coordinate int(pipeGap position self.rect.topleft [x_coordinate, y_coordinate int(pipeGap defining function handle pipes animation memory update(self): setting scroll speed pipes self.rect.x scrollSpeed destroying pipes once they left screen release memory self.rect.right self.kill() defining class display button class Button(): defining initializing function __init__(self, x_coordinate, y_coordinate, image): defining some variables self.image image self.rect self.image.get_rect() self.rect.topleft (x_coordinate, y_coordinate) defining function draw image screen draw(self): setting initial action false action False getting mouse position position pygame.mouse.get_pos() checking mouse over button self.rect.collidepoint(position): pygame.mouse.get_pressed()[0] action True drawing button display_screen.blit(self.image, (self.rect.x, self.rect.y)) returning action return action creating objects Group() class pygame.sprite module birdGroup pygame.sprite.Group() pipeGroup pygame.sprite.Group() creating object FlappyBird() class with bird FlappyBird(200, int(SCREEN_HEIGHT using add() function object FlappyBird() class group birdGroup.add(bird) creating restart button instance restartButton Button(150, 100, button) declaring variable initializing value with True game_run True using while loop while game_run: setting game game_clock.tick(game_fps) drawing background display_screen.blit(background, drawing bird birdGroup.draw(display_screen) calling update() function birdGroup.update() drawing pipes pipeGroup.draw(display_screen) drawing base display_screen.blit(base, (baseScroll, 576)) checking score len(pipeGroup) checking bird over pipe passed left side right size birdGroup.sprites()[0].rect.left pipeGroup.sprites()[0].rect.left\ birdGroup.sprites()[0].rect.left pipeGroup.sprites()[0].rect.right\ passPipe False: setting boolean value true passPipe True checking bird passed left side pipe passPipe True: checking bird passed right side pipe birdGroup.sprites()[0].rect.left pipeGroup.sprites()[0].rect.right: incrementing score playerScore setting boolean value back false passPipe False calling drawText() function display calculated score screen drawText(str(playerScore), fontStyle, black, int(SCREEN_WIDTH looking collision pygame.sprite.groupcollide(birdGroup, pipeGroup, False, False) bird.rect.top gameOver True checking bird ground bird.rect.bottom 576: gameOver True birdFlying False checking game over gameOver False birdFlying True: generating pipes timeNow pygame.time.get_ticks() timeNow lastPipe pipeFrequency: pipeHeight random.randint(-100, 100) bottomPipe Pipe(SCREEN_WIDTH, int(SCREEN_HEIGHT pipeHeight, topPipe Pipe(SCREEN_WIDTH, int(SCREEN_HEIGHT pipeHeight, pipeGroup.add(bottomPipe) pipeGroup.add(topPipe) lastPipe timeNow scrolling base baseScroll scrollSpeed abs(baseScroll) baseScroll calling update() function pipeGroup.update() checking game over reset gameOver True: restartButton.draw() True: gameOver False playerScore resetGame() using loop iterate through events game event pygame.event.get(): setting variable value False event's type equivalent pygame's QUIT constant event.type pygame.QUIT: game_run False setting variable value True event's type equivalent pygame's MOUSEBUTTONDOWN constant, bird flying game over event.type pygame.MOUSEBUTTONDOWN birdFlying False gameOver False: birdFlying True using update() function pygame.display module update events game pygame.display.update() using quit() function quit game pygame.quit() Output: Image Flappy Bird Game Image Game Running Image Game Over Next TopicRank-Based Percentile Calculator using PyQt5 Python prev next