next prev Colour game using PyQt5 Python This post will demonstrate PyQt5 construct colour game. order most points this game, player must correctly identify colour word that provided. further confuse player, text will have several colour names. multiplatform PyQt5 toolkit includes Python bindings v5. toolkit's features simplicity make very easy construct interactive desktop application. Installing requires running next command. install PyQt5 Steps implementation Create head label display game's name specify characteristics, such alignment colour, etc. Make instruction label provide user instructions. Design push button launch restart game. Make label display score. Create line edit collect user input. Create label countdown seconds. Implementation steps back Make score value variable, counter value variable, list colours, start flag. Make object with timer that calls function after second. Determine whether start flag true inside timer method, then counter value counter label, decrease count value. counter variable equals zero, start flag false prevent line editing. Include start button function. action start button, initial value true, thou count's value clear entire line edit text. Choose random colour from colour list colour label. Once more, select random option from list, then that text label. When enter pressed, action line edit. Inside action, verify input text against random choice, matches, increase score value alter colour label's text colour another random number. Walking through code import required libraries from PyQt5.QtWidgets import from PyQt5 import QtCore, QtGui from PyQt5.QtGui import from PyQt5.QtCore import import random import first, import required files into program from standard python library. class Window(QMainWindow): 	def __init__(self): 		super().__init__() title window 		self.setWindowTitle("Python geometry window 		self.setGeometry(150, 150, 550, 550) calling func 		self.UiComponents() displaying widgets 		self.show() counter values 		self.count_val scoring values 		self.scoring_val start value flag 		self.strt_flag False list containing possible colours. 		self.clr_list ['Blue', 'Red', 'Pink', 'Green', 'Black', 				'Orange', 'Yellow', 'Brown', 'Purple'] Next, will create window class initialize window geometry title. Then will introduce various labels, flag variables also their initial values give list random colours. func components 	def UiComponents(self): create heading label 		heading QLabel("Color Game", self) geometry heading 		heading.setGeometry(100, 300, adding fonts 		font QFont('Times', 		font.setBold(True) 		font.setItalic(True) 		font.setUnderline(True) font heading 		heading.setFont(font) alignment heading 		heading.setAlignment(Qt.AlignCenter) introducing instructions label 		inst QLabel("Inst Enter Color text. 							"Press Start button start game		 							"Note Time limit game seconds", self) changing label multi line 		inst.setWordWrap(True) geometry label 		inst.setGeometry(20, 460, creat start button 		start QPushButton("Start Reset", self) geometry push button 		start.setGeometry(200, 120, 100, adding action start button 		start.clicked.connect(self.start_action) create scoring label 		self.scoring QLabel("Score self) geometry label 		self.scoring.setGeometry(160, 170, 180, alignment label 		self.scoring.setAlignment(Qt.AlignCenter) font label 		self.scoring.setFont(QFont('Times', 16)) style sheet properties 		self.scoring.setStyleSheet("QLabel" 								"{" 								"border solid black;" 								"color green;" 								"background lightgrey;" 								"}") create label showing color 		self.color QLabel("Color Name", self) geometry label 		self.color.setGeometry(50, 230, 400, 120) alignment label 		self.color.setAlignment(Qt.AlignCenter) fonts 		self.color.setFont(QFont('Times', 30)) create line edit 		self.input_txt QLineEdit(self) geometry 		self.input_txt.setGeometry(150, 340, 200, fonts 		self.input_txt.setFont(QFont('Arial', 14)) converting line edit disabled 		self.input_txt.setDisabled(True) action when enter pushed 		self.input_txt.returnPressed.connect(self.input_actn) create label timerClock 		self.count QLabel("30", self) geometry label 		self.count.setGeometry(225, 430, alignment label 		self.count.setAlignment(Qt.AlignCenter) font 		self.count.setFont(QFont('Times', 14)) style sheet properties 		self.count.setStyleSheet("border solid black;" 								"background lightgrey;") Next, will create function introducing components window. will then create heading various labels their properties like geometry, fonts, alignments stylesheet properties too. also added buttons functions action were also introduced. create timerClock object 		timerClock QTimer (self) action perform timerClock pressed 		timerClock.timeout.connect(self.display_time) starting timerClock 		timerClock.start(1000) 	def display_time(self): 		if self.strt_flag: 			# displaying count value label 			self.count.setText(str(self.count_val)) 			# verifying count value zero 			if self.count_val 				# changing start flag value false 				self.strt_flag False 				# changing line edit widget disable form 				self.input_txt.setDisabled(True) 			# decreasing count values 			self.count_val Then, created clock timer label show time mentioned properties, Then, created function display time that label keep updated after every second. start_action(self): changing start flag value true 		self.strt_flag True reset scoring value 		self.scoring.setText("Scoring 		self.scoring_val reset count value 		self.count_val clear entire line edit text 		self.input_txt.clear() changing line edit value enabled 		self.input_txt.setEnabled(True) getting random color from list mentioned 		self.rndm_color random.choice(self.clr_list) changing color choice random color 		self.rndm_color.lower() random color label 		self.color.setStyleSheet("color self.rndm_color ";") another random color's name 		rndm_text random.choice(self.clr_list) text label 		self.color.setText(rndm_text) 	def input_actn(self): getting line edit text 		text self.input_txt.text() changing text lower case 		text.lower() check text with random color 		if text self.rndm_color: 			# clear entire line edit text 			self.input_txt.clear() 			# increasing scoring value 			self.scoring_val 			# score scoring label 			self.scoring.setText("Score str(self.scoring_val)) 			# random color from list 			self.rndm_color random.choice(self.clr_list) 			# changing color choice random color 			self.rndm_color.lower() 			# random color label 			self.color.setStyleSheet("color self.rndm_color ";") 			# another random color's name 			rndm_text random.choice(self.clr_list) 			# text label 			self.color.setText(rndm_text) Then, created start action function start countdown used labels display update text buttons click functionality which chose random colour from list entered right text field repeat process otherwise break process. input function also used take display input from user give result. creating pyqt5 application Base QApplication(sys.argv) creating instance created Window window Window() starting application sys.exit(Base.exec()) Finally, created instance window started application calling that instance. Complete code Python program create colour game using PyQt5 import required libraries from PyQt5.QtWidgets import from PyQt5 import QtCore, QtGui from PyQt5.QtGui import from PyQt5.QtCore import import random import class Window(QMainWindow): 	def __init__(self): 		super().__init__() title window 		self.setWindowTitle("Python geometry window 		self.setGeometry(150, 150, 550, 550) calling func 		self.UiComponents() displaying widgets 		self.show() counter values 		self.count_val scoring values 		self.scoring_val start value flag 		self.strt_flag False list containing possible colours. 		self.clr_list ['Blue', 'Red', 'Pink', 'Green', 'Black', 				'Orange', 'Yellow', 'Brown', 'Purple'] func components 	def UiComponents(self): creat heading label 		heading QLabel("Color Game", self) geometry heading 		heading.setGeometry(100, 300, adding fonts 		font QFont('Times', 		font.setBold(True) 		font.setItalic(True) 		font.setUnderline(True) font heading 		heading.setFont(font) alignment heading 		heading.setAlignment(Qt.AlignCenter) introducing instructions label 		inst QLabel("Inst Enter Color text. 							"Press Start button start game		 							"Note Time limit game seconds", self) changing label multi line 		inst.setWordWrap(True) geometry label 		inst.setGeometry(20, 460, creat start button 		start QPushButton("Start Reset", self) geometry push button 		start.setGeometry(200, 120, 100, adding action start button 		start.clicked.connect(self.start_action) create scoring label 		self.scoring QLabel("Score self) geometry label 		self.scoring.setGeometry(160, 170, 180, alignment label 		self.scoring.setAlignment(Qt.AlignCenter) font label 		self.scoring.setFont(QFont('Times', 16)) style sheet properties 		self.scoring.setStyleSheet("QLabel" 								"{" 								"border solid black;" 								"color green;" 								"background lightgrey;" 								"}") create label showing color 		self.color QLabel("Color Name", self) geometry label 		self.color.setGeometry(50, 230, 400, 120) alignment label 		self.color.setAlignment(Qt.AlignCenter) fonts 		self.color.setFont(QFont('Times', 30)) create line edit 		self.input_txt QLineEdit(self) geometry 		self.input_txt.setGeometry(150, 340, 200, fonts 		self.input_txt.setFont(QFont('Arial', 14)) converting line edit disabled 		self.input_txt.setDisabled(True) action when enter pushed 		self.input_txt.returnPressed.connect(self.input_actn) create label timerClock 		self.count QLabel("30", self) geometry label 		self.count.setGeometry(225, 430, alignment label 		self.count.setAlignment(Qt.AlignCenter) font 		self.count.setFont(QFont('Times', 14)) style sheet properties 		self.count.setStyleSheet("border solid black;" 								"background lightgrey;") create timerClock object 		timerClock QTimer (self) action perform timerClock pressed 		timerClock.timeout.connect(self.display_time) starting timerClock 		timerClock.start(1000) 	def display_time(self): 		if self.strt_flag: 			# displaying count value label 			self.count.setText(str(self.count_val)) 			# verifying count value zero 			if self.count_val 				# changing start flag value false 				self.strt_flag False 				# changing line edit widget disable form 				self.input_txt.setDisabled(True) 			# decreasing count values 			self.count_val 	def start_action(self): changing start flag value true 		self.strt_flag True reset scoring value 		self.scoring.setText("Scoring 		self.scoring_val reset count value 		self.count_val clear entire line edit text 		self.input_txt.clear() changing line edit value enabled 		self.input_txt.setEnabled(True) getting random color from list mentioned 		self.rndm_color random.choice(self.clr_list) changing color choice random color 		self.rndm_color.lower() random color label 		self.color.setStyleSheet("color self.rndm_color ";") another random color's name 		rndm_text random.choice(self.clr_list) text label 		self.color.setText(rndm_text) 	def input_actn(self): getting line edit text 		text self.input_txt.text() changing text lower case 		text.lower() check text with random color 		if text self.rndm_color: 			# clear entire line edit text 			self.input_txt.clear() 			# increasing scoring value 			self.scoring_val 			# score scoring label 			self.scoring.setText("Score str(self.scoring_val)) 			# random color from list 			self.rndm_color random.choice(self.clr_list) 			# changing color choice random color 			self.rndm_color.lower() 			# random color label 			self.color.setStyleSheet("color self.rndm_color ";") 			# another random color's name 			rndm_text random.choice(self.clr_list) 			# text label 			self.color.setText(rndm_text) creating pyqt5 application Base QApplication(sys.argv) creating instance created Window window Window() starting application sys.exit(Base.exec()) Output: output code explained above been attached below screenshot. Next TopicDigital clock using PyQt5 Python prev next