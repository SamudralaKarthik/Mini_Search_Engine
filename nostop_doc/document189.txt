next prev Brython Browser this article, will discuss Brython browsers implementing Base64 calculator experimenting browser with Document Object Model Application Program Interface other functionalities which only available from JavaScript. Application Program Interface Brython experimenting with Document Object Model manipulations, which available Brython, will build form encoding string Base64. final output form will look like this: Let's create HTML file, name index.html: example: <!DOCTYPE html <html> <head> <meta charset "utf-8"/> <link "stylesheet" href "https://cdnjs.cloudflare.com /ajax/libs/pure/2.0.3/pure-min.min.css" integrity "sha256-jYujp4Kf07YDuUF9i1MHo4AnpXUKuHxIUXH7CrHxdKw=" crossorigin "anonymous" <script "https://cdnjs.cloudflare.com /ajax/libs/brython/3.8.9/brython.min.js" integrity "sha256-U56d9Sn/Gtf1meSBXazW81LM1bUeyc1jFuoY3CBu6A8=" crossorigin "anonymous"> </script> <script "https://cdnjs.cloudflare.com /ajax/libs/brython /3.8.9/brython_stdlib.min.js" integrity "sha256 twMHOlRBOpBkpyGFeXIBWoJqTpqf76Zp8HExOelwyRc=" crossorigin "anonymous" defer> </script> <script "main.py" type="text/python" defer> </script> <style> body padding: 30px; </style> </head> <body onload="brython()"> <form class="pure-form" onsubmit="return false;"> <fieldset> <legend>Base64 Calculator</legend> <input type "text" "text-src" placeholder "Text Encode" autocomplete="off"/> <button type "submit" "submit" class "pure-button pure-button-primary">Ok </button> <button "clear-btn" class "pure-button">Clear </button> </fieldset> </form> <div id="b64-display"> </div> </body> </html> above code html loads static resources, which defines layout, also initiates compilation Python: Line will load PureCSS style sheet improving defaut HTML style Line will load minimized version Brython engine. Line will load minimized version standard library Brython. Line will load main.py, which will handle dynamic logics this static HTML page. Line will describe input fields. This field will take string encoding argument. Line line will define default button wich will trigger main logic page. user this logic implemented main.py. Line will define button clearing data elements page. This will implement main.py. Line will declare intended placeholder table. Python code which associated, main.py. example: from browser import document, html, alert import base64 b64_map base64_compute(evt): value document[" text-src "].value value: alert(" need enter value return value b64_map: alert( base64 value '{value}' already exists: '{b64_map[value]}' return b64data base64.b64encode(value.encode()).decode() b64_map[value] b64data display_map() clear_map(evt): b64_map.clear() document[" b64-display "].clear() display_map(): table html.TABLE(Class "pure-table") table html.THEAD(html.TR(html.TH(" Text html.TH(" Base64 "))) table (html.TR(html.TD(key) html.TD(b64_map[key])) b64_map) base64_display document[" b64-display base64_display.clear() base64_display table document[" text-src "].value document[" submit "].bind("click", base64_compute) document[" clear-btn "].bind("click", clear_map) Python program shows definition callback function mechanism manipulating DOM: Line will import modules which user interacting with Document Object Model (DOM) Browser code brython.min.js. Line will import base64, which available standard library Brython, that brython_stdlib.min.js. Line will declare dictionary which user will storing data during running time HTML page. Line will define event handler, that base64_compute(), which will encode base54 value text entered input field with text-src. Line will retrieve value elements identified with text-src. Line will define event handler, that clear_map(), which will clear data presentation data this page. Line will define display_map(), which will take data contained b64_map, display under form page. Line will retrieve elements with text-src. Line will clear value element with text-src. Line will bind onclick event submit button base64_compute(). Line will bind onclick event clear-btn button clear_map(). manipulating DOM, Brython will operators: operator, mainly specific Brython. This will child node. have used display_map(), which defined line substitute Element.insertAdjacementHTML('afterend') adding sibling nodes. these operators action above statement display_map(): table html.THEAD(html.TR( html.TH(" Text html.TH(" Base64 "))) above command translated "add table element table head element containing table element composed adjacent table data cell elements. rendering browser following HTML program. example: <table> <thead> <tr><th>Text</th><th>Base64</th></tr> </thead> </table> above HTML code shows nested structure header table element. also write this code more readable manner. example: <table> <thead> <tr> <th> Text </th> <th> Base64 </th> </tr> </thead> </table> observing result Brython console, enter following code block: from browser import html table html.TABLE() table html.THEAD(html.TR( html.TH(" Text html.TH(" Base64 "))) table.outerHTML Output: '<table> <thead> <tr> <th> Text </th> <th> Base64 </th> </tr> </thead> </table>' executing whole code, need start website server. previously, have started built-in Python website server same directory files, main.html index.html. example: python3 http.server Output: Serving HTTP port 8080 (http://[::]:8080/) After starting website server, point browser http://localhost:8080. This page will look like this: Image: Importing file Brython user import accessing Python Brython modules libraries JavaScript. Python modules libraries files with extension root folder their project Python package subfolder containing _init_.py file. importing Python modules their Brython program, they would have start website server. users want explore more about import Python modules into Brython code, they look "Installation using PyPI" section "How install Brython" article. They have create activate Python virtual environment, install Brython, then modify index.html. example: <!doctype html> <html> <head> <meta charset utf-8 <script type text/javascript brython.js </script> <script type text/javascript brython_stdlib.js </script> </head> <body onload brython() <script type text/python from browser import document, html, window import import functional selection functional.take(10, range(10000)) numbers '.join([ str(x) selection document html.P(f"{sys.version=}") document html.P(f"{numbers=}") </script> </body> </html> above HTML file will expose modules which imported from core engine browser, from standard library sys, from local Python module, which functional. content functional.py following: import itertools take(n, iterable): "Return first items iterable list" return list(itertools.islice(iterable, This module will implement take(), which itertools receipts.take(), which will return first elements given iterable. will rely itertools.slice(). user tries open index.html from file system with their browser, then they will following error browser console: Traceback (most recent call last): File file:///Users/User Name/brython/code /import/index.html/__main__ ----> <module> import functional ModuleNotFoundError: functional After importing Python module, which required starting local website server. First, start local website server then open http://localhost:8080 browser. user will following HTML page: there running website server, then browser would able fetch functional.py module after importing functional executed. results number sys.version values inserted HTML files with help last Python scripts, which embedded rendered browser. Reduce Import Size directory previous example project, reducing size import JavaScript libraries module, user Brython-cli with option -module. This method also used precompiling Python module JavaScript. example: brython-cli -modules Output: Create brython_modules.js with modules used application searching brython_stdlib.js... finding packages... script html index.html This will used generating brython_modules.js, user then modify head element index.html file. example: <head> <meta charset="utf-8"> <script type="text/javascript" src="brython.js"> </script> <script type="text/javascript" src="brython_modules.js"> </script> </head> Line will change original form script source from brython_stdlib.js into brython_modules.js. user open index.html with their browser, they point browser local server reduced same HTML page. user notice these points: They reduce HTML page their browser, even without running website server. They would need distribute functional.py file, program converted into JavaScript then bundled brython_modules.js. user would need load brython_stdlib.js. tool command-line that brython-cli -modules will provide solution removing unnecessary code from standard library. Then will compile Python module into JavaScript program. This will help page user's application, will result reduced size resources download. Conclusion this article, have discussed users Brython browsers with help Base64 calculator, which implemented experimentation browser with Document Object Model Application Program Interface. have also explained user import Python files Brython user reduce size Imported file. Next TopicArima Model Python prev next