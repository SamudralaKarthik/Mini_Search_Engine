next prev Prettytable Python this tutorial, will learn create relational table using Python Prettytable module. will create tables without using external libraries. What Pretty Table? Pretty tables visual representation data tabular forms. These ASCII tables easy use. prettytable library consists PrettyTable class, which used create relational tables. work with this library, need install using below command. Installation install prettytable Create Table using Pretty Table Here, will create row-wise table using pretty table module. Let's understand following example. Example Creating table wise from prettytable import PrettyTable Creating table newTable PrettyTable(["Student Name", "Class", "Subject", "Makrs"]) rows newTable.add_row(["Camron", "X", "English", "91"]) newTable.add_row(["Haris", "X", "Math", "63"]) newTable.add_row(["Jenny", "X", "Science", "90"]) newTable.add_row(["Bernald", "X", "Art", "92"]) newTable.add_row(["Jackson", "X", "Science", "98"]) newTable.add_row(["Samual", "X", "English", "88"]) newTable.add_row(["Stark", "X", "English", "95"]) print(newTable) Output +--------------+-------+---------+-------+ Student Name Class Subject Makrs +--------------+-------+---------+-------+ Camron English Haris Math Jenny Science Bernald Jackson Science Samual English Stark English +--------------+-------+---------+-------+ Example Column Wise Table from prettytable import PrettyTable columns ["Student Name", "Class", "Subject", "Marks"] newTable PrettyTable() Columns newTable.add_column(columns[0], ["Jacob", "Peter", "Grenger", "Stark", "Falcon", "Matthew", "Jackson"]) newTable.add_column(columns[1], ["X", "X", "X", "X", "X", "X", "X"]) newTable.add_column(columns[2], ["English", "Art", "Science", "Math", "Science", "English", "English"]) newTable.add_column(columns[3], ["91", "63", "90", "92", "98", "83", "95"]) print(newTable) Output +--------------+-------+---------+-------------------+ Student Name Class Subject Marks +--------------+-------+---------+-------------------+ Jacob English Peter Grenger Science Stark Math Falcon Science Matthew English Jackson English +--------------+-------+---------+------------------+ have used add_column() method pretty table module. Example Rows Once from prettytable import PrettyTable Creating table newTable PrettyTable(["Student Name", "Class", "Subject", "Makrs"]) rows newTable.add_rows( ["Camron", "X", "English", "91"], ["Haris", "X", "Math", "63"], ["Jenny", "X", "Science", "90"], ["Bernald", "X", "Art", "92"], ["Jackson", "X", "Science", "98"], ["Samual", "X", "English", "88"], ["Stark", "X", "English", "95"], print(newTable) Output +--------------+-------+---------+-------+ Camron English Haris Math Jenny Science Bernald Jackson Science Samual English Stark English +--------------+-------+---------+-------+ PrettyTable Deleting Rows This module provides del_row() method which allows removes rows. takes index value that deleted remove rows. indexing starts from zero. Let's understand following code. Example from prettytable import PrettyTable Creating table newTable PrettyTable(["Student Name", "Class", "Subject", "Makrs"]) rows newTable.add_row(["Camron", "X", "English", "91"]) newTable.add_row(["Haris", "X", "Math", "63"]) newTable.add_row(["Jenny", "X", "Science", "90"]) newTable.add_row(["Bernald", "X", "Art", "92"]) newTable.add_row(["Jackson", "X", "Science", "98"]) newTable.add_row(["Samual", "X", "English", "88"]) newTable.add_row(["Stark", "X", "English", "95"]) newTable.del_row(1) newTable.del_row(2) newTable.del_row(3) print(newTable) Output +--------------+-------+---------+-------+ Student Name Class Subject Makrs +--------------+-------+---------+-------+ Camron English Jenny Science Jackson Science Stark English +--------------+-------+---------+-------+ will remove specific rows from table. clear entire table, following method. myTable.clear_rows() Example from prettytable import PrettyTable Creating table newTable PrettyTable(["Student Name", "Class", "Subject", "Makrs"]) rows newTable.add_row(["Camron", "X", "English", "91"]) newTable.add_row(["Haris", "X", "Math", "63"]) newTable.add_row(["Jenny", "X", "Science", "90"]) newTable.add_row(["Bernald", "X", "Art", "92"]) newTable.add_row(["Jackson", "X", "Science", "98"]) newTable.add_row(["Samual", "X", "English", "88"]) newTable.add_row(["Stark", "X", "English", "95"]) newTable.clear_rows() print(newTable) Output +--------------+-------+---------+------------------+ Student Name Class Subject Makrs +--------------+-------+---------+--------------------+ +--------------+-------+---------+--------------------+ above code, rows have been deleted. only column names. Getting Particular Rows Columns main prettytable tables ASCII form. restrict output table using following method. get_string(fields=["Column "Column2", .............., ColumnN] Let's understand following example. Example: from prettytable import PrettyTable Creating table newTable PrettyTable(["Student Name", "Class", "Subject", "Makrs"]) rows newTable.add_rows( ["Camron", "X", "English", "91"], ["Haris", "X", "Math", "63"], ["Jenny", "X", "Science", "90"], ["Bernald", "X", "Art", "92"], ["Jackson", "X", "Science", "98"], ["Samual", "X", "English", "88"], ["Stark", "X", "English", "95"], print(newTable.get_string(fields=["Student Name", "Class"])) Output +--------------+--------------+ Student Name Class +--------------+--------------+ Camron Haris Jenny Bernald Jackson Samual Stark +--------------+---------------+ field argument takes list field names printed. also following method control result. print(newTable.get_string(start=1, end=4) Output +--------------+-------+---------+-------------------+ Student Name Class Subject Makrs +--------------+-------+---------+-------------------+ Camron English Haris Math Jenny Science +--------------+-------+---------+------------------+ Changing Alignment Column observe that columns Table aligned center. change according requirement assigning character align attribute. There three strings 'l' (for left), (for right) 'c'(for center) alignment, respectively. Let's following example. Example newTable.align print(newTable) Output +--------------+-------+---------+-------------------+ Student Name Class Subject Makrs +--------------+-------+---------+------------------+ Camron English Haris Math Jenny Science Bernald Jackson Science Samual English Stark English +--------------+-------+---------+------------------+ Changing Appearance Table default table looks like database shell. However, modify table appearance other format. pretty table module provides set_style() method, transforming Table MSWord friendly. Let's following example. Example following code create table code. from prettytable import MSWORD_FRIENDLY newTable.set_style(MSWORD_FRIENDLY) print(newTable) Output Student Name Class Subject Makrs Camron English Haris Math Jenny Science Bernald Jackson Science Samual English Stark English clearly difference between default table MSWord friendly table. Conclusion have discussed some important operations table using prettytable module. This very effective module work with table using Python script. Next TopicConvert Python List NumPy Arrays prev next