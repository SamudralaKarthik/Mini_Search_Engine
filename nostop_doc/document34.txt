next prev Python read file File stands "comma separated values", which defined simple file format that uses specific structuring arrange tabular data. stores tabular data such spreadsheet database plain text common format data interchange. file opens into excel sheet, rows columns data define standard format. Python Module Functions module work used handle files read/write data from specified columns. There different types functions, which follows: csv.field_size_limit returns current maximum field size allowed parser. csv.get_dialect returns dialect associated with name. csv.list_dialects returns names registered dialects. csv.reader read data from file csv.register_dialect associates dialect with name. name must string Unicode object. csv.writer writes data file o	csv.unregister_dialect deletes dialect which associated with name from dialect registry. name registered dialect name, then error being raised. csv.QUOTE_ALL instructs writer objects quote fields. csv.QUOTE_MINIMAL instructs writer objects quote only those fields which contain special characters such quotechar, delimiter, etc. csv.QUOTE_NONNUMERIC instructs writer objects quote non-numeric fields. csv.QUOTE_NONE instructs writer object never quote fields. Reading files Python provides various functions read file. describing method reading function. Using csv.reader() function Python, csv.reader() module used read file. takes each file makes list columns. have taken file named python.txt that have default delimiter comma(,) with following data: name,department,birthday month Parker,Accounting,November Smith,IT,October Example import with open('python.csv') csv_file: csv_reader csv.reader(csv_file, delimiter=',') line_count csv_reader: line_count print(f'Column names ".join(row)}') line_count Output: Column names name, department, birthday month Parker works Accounting department, born November. Smith works department, born October. Processed lines. above code, have opened 'python.csv' using open() function. used csv.reader() function read file, that returns iterable reader object. reader object have consisted data iterated using loop print content each Read into Dictionar also DictReader() function read file directly into dictionary rather than deal with list individual string elements. Again, input file, python.txt follows: name,department,birthday month Parker,Accounting,November Smith,IT,October Example import with open('python.txt', mode='r') csv_file: csv_reader csv.DictReader(csv_file) line_count csv_reader: line_count print(f'The Column names follows ".join(row)}') line_count print(f'\t{row["name"]} works {row["department"]} department, born {row["birthday month"]}.') line_count print(f'Processed {line_count} lines.') Output: Column names follows name, department, birthday month Parker works Accounting department, born November. Smith works department, born October. Processed lines. Reading files with Pandas Pandas defined open-source library which built NumPy library. provides fast analysis, data cleaning, preparation data user. Reading file into pandas DataFrame quick straight forward. don't need write enough lines code open, analyze, read file pandas stores data DataFrame. Here, taking slightly more complicated file read, called hrdata.csv, which contains data company employees. Name,Hire Date,Salary,Leaves Remaining John Idle,08/15/14,50000.00,10 Smith Gilliam,04/07/15,65000.00,8 Parker Chapman,02/21/14,45000.00,10 Jones Palin,10/14/13,70000.00,3 Terry Gilliam,07/22/14,48000.00,7 Michael Palin,06/28/13,66000.00,8 Example import pandas pandas.read_csv('hrdata.csv') print(df) above code, three lines enough read file, only them doing actual work, i.e., pandas.read_csv() Output: Name Hire Date Salary Leaves Remaining John Idle 03/15/14 50000.0 Smith Gilliam 06/01/15 65000.0 Parker Chapman 05/12/14 45000.0 Jones Palin 11/01/13 70000.0 Terry Gilliam 08/12/14 48000.0 Michael Palin 05/23/13 66000.0 Next TopicPython write file prev next