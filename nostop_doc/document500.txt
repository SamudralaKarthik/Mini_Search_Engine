next prev Draw Mandelbrot Python This tutorial will discuss about interesting project that involves complicated numbers using Python. will learn about fractals make incredible artwork using illustration Mandelbrot with Python's Matplotlib Pillow libraries. will also find process which this fractal created significance, related other fractals. Understanding concept object-oriented programming principles concept recursion will allow make most Python's expressive syntax write simple code that reads math formulas. comprehend algorithms creating fractals, need comfortable working with complicated mathematical concepts like logarithms, theory, repeated functions. However, don't these basics hindrance, will able follow along make however like! Understand Mandelbrot Before attempt draw fractal, need know Mandelbrot identify members. already acquainted with basic theory, then free proceed part plotting below. Icon Fractal Geometry name isn't familiar user personally, they have seen some stunning visualizations that part Mandelbrot prior that. It's collection complicated numbers which form intricate distinctive pattern when shown intricate plane. This pattern probably most famous fractal gave birth concept fractal geometry latter half 20th century. Mandelbrot made possible because advancements technology. It's believed work mathematician called Benoit Mandelbrot. worked able access computers that could what back then, plethora numbers crunching. Nowadays, possible look into fractals from comfort home using only Python! This discovery, Mandelbrot's set, made possible technological advancement. Fractals endlessly repeating patterns that occur various sizes. Philosophers have debated existence infinite many centuries, fractals have parallel world. It's extremely regular phenomenon that occurs natural world. instance, this Romanesco cauliflower infinite self-similar form because every part plant appears like whole, just smaller. Self-similarity often defined mathematically using notion recursion. Indeed, Mandelbrot isn't self-similar sense that since composed slightly different versions smaller dimensions. Yet, described recursive function within complex domain. Boundary Iterative Stability Mandelbrot refers collection complex numbers called infinite number sequences, such ..., zn, ..., remains bounded. Also, upper limit size number complex within that sequence never greater than. following formula recursive defines this Mandelbrot sequence: simple English, order determine whether some complex number, part Mandelbrot set, need feed that number into formula below. number input will remain same through sequence from this point initial element this sequence, number will always same zero. calculate following element zn+1, will continue squaring previous element, zn. Then, will adding beginning number, which create feedback loop. observing sequence numbers functions behaves, will able categorize complex numbers, either Mandelbrot not. choice make arbitrarily based level have certainty since more components provide precise conclusion number sequence infinitely long. However, have calculating elements point able stop. complex numbers, could visualize this process dimensions. However, would best looked only real numbers simplicity process now. Should decide apply equation above Python, would something like this: z(n, return else: return z(n z() function returns element your sequence. This reason will take index element, first argument. second argument, "c," regarded fixed number you're trying test. function will continue call itself indefinitely because recursion. break chain repeated calls, conditional check basic case using immediate solution known as--zero. Test formula determine first elements this sequence formula observe what happens: range(10): print(f"z({n}) {z(n, 1)}") Output: z(0) z(1) z(2) z(3) z(4) z(5) z(6) 458330 z(7) 210066388901 z(8) 44127887745906175987802 z(9) 1947270476915296449559703445493848930452791205 Note rapid increase these sequence components. reveals something about composition Particularly this into Mandelbrot because sequence it's based bound. Sometimes iterative method more effective than recursive method. Here's alternative function that produces infinite sequence with input value specified sequence(c): while True: yield Sequence() functions return sequence elements. sequence() function returns Generator object giving successive components series indefinitely through form loop. Since doesn't provide indices elements that could identify them then stop after certain number iterations. enumerate(sequence(c=1)): print(f"z({n}) {z}") break Output: z(0) z(1) z(2) z(3) z(4) z(5) z(6) 458330 z(7) 210066388901 z(8) 44127887745906175987802 z(9) 1947270476915296449559703445493848930452791205 results identical previous version. However, generator function allows determine sequence elements with greater efficiency through algorithm that lazy evaluation. Additionally, iteration eliminates redundant function calls that require already computed sequence elements. This means that chance exceeding maximum number recursion elements future. majority numbers cause this sequence diverge until infinity. But, some will make sequence steady converging sequence value remaining within certain interval. Some will ensure that sequence continuously stable alternating back across same values. Stable regularly stable values comprise what known Mandelbrot set. instance, adding integer will make sequence expand without limit you've learned However, value causes jump between frequently, whereas combination results sequence with only number: Element z3 z4 z5 z6 458,330 z7 210,066,388,901 It's difficult determine numbers that considered stable those that aren't since virtually insensitive even tiny change value that tested place solid numbers complicated plane, then will observe following pattern appear: image created using recursive formula least times pixel, each pixel representing number values. were determined that value resultant complex number remained tiny after iterations, then corresponding pixel would colour-black. However, when magnitude larger than radius two, process ended skipped present pixels. surprising that simple formula that only requires multiplication addition create intricate structure. it's only thing. It's been discovered that this formula apply create endlessly different Fractals. Julia Sets isn't easy talk about this without also mentioning Mandelbrot without also mentioning Julia sets that were found work French mathematician Gaston Julia several decades before without assistance computers. Julia sets, well sets Mandelbrot set, very closely linked since they obtained using same formula with different sets start conditions. There just Mandelbrot set; there many Julia sets. started sequence with past. will then systematically check some arbitrarily intricate number, example, determine member. contrast, order determine whether given number belongs Julia sequence, have select that number point departure sequence then select different number parameter. Here's quick overview formula's definitions based studying: Term Mandelbrot Julia Candidate value Candidate value Fixed constant first instance, represents possible member Mandelbrot sole input value needed since Z0 remains zero. every term alters meaning when using that formula while when Julia mode. this case, works parameter that determines form shape whole Julia set, value will become primary focus. before, formula Julia requires only input values. could modify function have previously defined that becomes more general. This will allow create infinite sequences that begin from point instead always zero. sequence(c, while True: yield Because this default value argument highlighted this line, still utilize this function just same before since required. addition, alter point which begin sequence. might more clarity after have defined function wrappers Mandelbrot Julia sets: mandelbrot(candidate): return sequence(z candidate) julia(candidate, parameter): return sequence(z candidate, parameter) Every function will return object generator tuned preferred starting condition. principles used determine whether individual value part Julia similar Mandelbrot observed earlier. short, need repeat process then observe evolution over time. Benoit Mandelbrot studying Julia sets during research. Particularly interested locating values which result so-called Connected Julia sets, opposed their unconnected counterparts. These referred name Fatou sets characterized dust composed innumerable amount fragments when viewed plane complex: well-known that plugging member Mandelbrot into formula recursive will result series complex numbers that will converge. image top-left corner shows connected Julia derived from formula 0.25, which part Mandelbrot set. numbers converged this instance. slight alteration number could turn your Julia into dust cause sequence split infinity. connected Julia sets correlated values that produce stable sequences using formula recursive above. could claim idea that Benoit Mandelbrot looking boundary that would allow iterative stability Julia sets, which would reveal places where these sets connected also where they're not. Plotting Mandelbrot Using Python's Matplotlib There variety ways display Mandelbrot using Python. They used avoid needing convert between world coordinates pixels coordinates. users familiar with working with NumPy library well Matplotlib, libraries combination will offer easiest methods visualize fractured. create initial list candidates, make np.linspace() that creates evenly spaced numbers within specified range: import numpy complex_matrix(x_min, x_max, y_min, y_max, pixel_density): re1 nmp.linspace(x_min, x_max, int((x_max x_min) pixel_density)) im1 nmp.linspace(y_min, y_max, int((y_max y_min) pixel_density)) return re1[nmp.newaxis, im1[:, nmp.newaxis] 1j function described above will produce array two-dimensional complex numbers enclosed rectangular space defined with four variables. These parameters x_min well x_max parameters that determine boundaries horizontal direction. contrast, y_min y_max same with regard vertical. fifth parameter, pixel density, that determines number pixels unit. this array composed complicated numbers well-known formula recursive computation determine which numbers stable those that don't. Because NumPy's vectorization, matrix passed matrix element, then perform calculations each element without writing explicit loops: is_stable(c, num_iterations): range(num_iterations): return abs(z) code that highlighted line executed entire elements matrix during each repetition. Since begin with different dimensions first, NumPy uses broadcasting extend latter that they have same forms. function creates image consisting Boolean values resulting array, Each value correlated stability sequence this time. benefit from vectorized computation, loop this code continues adding squaring numbers indefinitely regardless large they were already. This isn't ideal since common numbers begin diverge very early, which makes majority calculations inefficient. Additionally, numbers that rise rapidly result error overflow. NumPy detects overflows causing problems warns users standard error stream (stderr). would prefer block these warnings, filter prior using your program: import numpy nmp.warnings.filterwarnings("ignore") After number iterations, magnitude each number matrix will remain within over that threshold two. they not, they will likely members Mandelbrot set. They visualized with Matplotlib. Low-Resolution Scatter Plot simple easy method visualizing Mandelbrot scatterplot which shows relationship between variables. Since complex numbers combination physical real imaginary components, breaking them into separate arrays good using scatter plot. First, must transform Boolean security mask into complex numbers that create sequence. this using NumPy's masking filtering: get_members(c, num_iterations): mask is_stable(c, num_iterations) return c[mask] This function returns one-dimensional array that consists only those complex numbers which stable thus belong Mandelbrot group. functions described previous section, will able create scatter plot with Matplotlib. Make sure include import statement need file. import matplotlib.pyplot plot import numpy nmp.warnings.filterwarnings("ignore") This will bring plotting interface current namespace. calculate information plot complex_matrix(-1.5, 0.25, pixel_density members get_members(c, num_iterations plot.scatter(members.real, members.imag, color "Red", marker ",", plot.gca().set_aspect("equal") plot.axis("off") plot.tight_layout() plot.show() method complex_matrix() prepares rectangular array complex numbers that span range from -1.5 0.25 x-direction. within well direction following operation find_members() passes through only numbers part Mandelbrot set. Then, plot.scatter() plots addition, plot.show() will reveal this picture: This re-enactment mathematical history! It's 749 points long akin original ASCII printout created using matrix printers Benoit Mandelbrot himself years ago. play around with pixel density number repetitions determine they affect final result. High-Resolution Black-and-White Visualization more precise visualization Mandelbrot plot white black, increase number pixels scattering plot until individual dots difficult distinguish. Using binary colormap create Boolean stabilization mask, also Matplotlib plot.imshow() function. Just handful changes required your current code: complex_matrix(-1.5, 0.25, -2.5, 2.5, pixel_density=612) plot.imshow(is_stable(c, num_iterations 20), cmap "binary") plot.gca().set_aspect("equal") plot.axis("off") plot.tight_layout() plot.show() Make sure increase pixel density high value, like 612. After that, remove callback function get_members() replace scatter plot with plot.imshow() display data image. goes planned, should able look this image Mandelbrot's set: Mandelbrot set: narrow down part fractal, alter boundaries matrix that area well increase frequency iterations ratio more. also possible experiment with various colormaps made available Matplotlib. But, creativity flow, might want experiment using Pillow, Python's most popular imaging libraries. Conclusion know Python used plot draw famous Benoit Mandelbrot fractal. There many ways visualize using colors, grayscale, black white, other visualizations. practical example been shown show Python elegantly express complex mathematical formulas. this tutorial, have learned solve real problem, complex numbers applied. Locate members Mandelbrot Julia sets. These sets drawn fractals with Matplotlib. Next TopicPython Module prev next