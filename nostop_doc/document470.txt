next prev Generate UUID Python this tutorial, will discuss generate UUID Python using uuid module. Before diving into this topic, let's understand basic concept UUID. Introduction UUID abbreviation name universally unique identifiers also known GUID, i.e., Globally Unique Identifier. bits long number uniquely define documents, users, resources, information. There various versions UUIDs; will discuss them upcoming section. UUID used define unique identifiers across space time. Space time mean that once UUID generated according standard, identifiers cannot duplicate existing resources. UUID most suitable option when uniqueness required. plays essential role cryptography hashing application. When UUID UUID module used following scenarios. Application UUID helps manage state generating unique session Generally, auto-increment values generate user ids. quite straightforward approach easy guess. However, UUIDs difficult guess because they created consecutively. Database System provides significant advantage database because UUID environment-independent. means create UUID machine using application. Most applications depend upon database server generate unique primary key. UUID good option generate unique database which helps change generation approach database. UUID real value, pseudo value like number table. Python uuid Module Python uuid module implemented 4122, standard Copyright Â© internet society. With help Python UUID module, generate UUIDs various types such version UUIDs. Python module supports following versions UUID. UUID1 generates unique number using address current time component. UUID4 uses pseudo-random number generators generate UUIDs, such types UUIDs good safety purpose. UUID3 UUID5 uses cryptographic hashing application-provided text strings generate UUID. Generate UUID using Python UUID Module Let's generates UUIDs various versions using Python uuid module. Using uuid1() generate uuid, must import uuid module then call uuid1() method. Let's understand following example. Example import uuid Printing random using uuid1() print ("The random generated uuid uuid.uuid1()) Output: random using uuid1() ab2d0fc0-7224-11ec-8ef2-b658b885fb3 Structure UUID that there five components above UUID each component same length. structure UUID format "8-4-4-4-12". UUID string representation given below UUID time_low time_mid "-"time_high_and_version "clock_seq_and_reserved_And_clock_seq_low"-" Node. Let's break down above fields UUIDs time_low first bits time_mid next bits time_high_and_version next bits clock_seq_hi_variant next bits clock_seq_low next bits node last bits time time component field clock_seq sequence number. Let's understand another example generating UUID various formats such bytes, int, hex. Example import uuid uuid.uuid1() Representations uuid1() print ("The byte Representations uuid1() print (repr(id.bytes)) print ("Integer Value Representation: ",end="") print(id.int) print ("hex Value Representation ",end="") print (id.hex) print("\n") components uuid1() print ("The components uuid1() print ("Version ",end="") print (id.version) print ("Variant ",end="") print (id.variant) print("\n") Fields uuid1() print ("The Fields uuid1() print ("Fields ",end="") print (id.fields) print('UUID.fields id.fields) print("Prining each field seperately") print('UUID.time_low id.time_low) print('UUID.time_mid id.time_mid) print('UUID.time_hi_version id.time_hi_version) print('UUID.clock_seq_hi_variant: id.clock_seq_hi_variant) print('UUID.clock_seq_low id.clock_seq_low) print('UUID.node id.node) print('UUID.time id.time) print('UUID.clock_seq id.clock_seq) print('UUID.SafeUUID id.is_safe) print("\n") time Component uuid1() print ("The time Component uuid1() print ("Time component ",end="") print (id.node) Output: byte Representations uuid1() b'\xb9\xea\xb88s\x0e\x11\xec\xbfv\x86\xa0;\xe4`\x12' Representation 247125913120858544596828814248071421970 Representation b9eab838730e11ecbf7686a03be46012 Components uuid1() Version Variant specified 4122 Fields uuid1() Fields (3119167544, 29454, 4588, 191, 118, 148022757711890) time Component uuid1() Time component 148022757711890 UUID.time_mid 29460 UUID.time_hi_version 4588 UUID.clock_seq_hi_variant: UUID.clock_seq_low UUID.node 90979746151630 UUID.time 138612218401246920 UUID.clock_seq 14948 UUID.SafeUUID SafeUUID.unsafe Disadvantages UUID1 UUID1 associated with computer's address hence threat privacy. However, provides complete uniqueness. Method using uuid4() This method generates random numbers with guarantee secure privacy. Let's understand following example. Example import uuid uuid.uuid4() generated using uuid4() print ("The generated using uuid4() ",end="") print (id) Output: generated using uuid4() 53967be6-71e9-4ee9-9912-60d02d2d9b0a uuid1() uuid4 uuid1() provides assurance produce collision. create duplicates UUIDs creating more than 16384 uuid1 less than 100ns. doesn't provide guarantee secure privacy. uuid1() recommended don't wish visible your machine's addresses. uuid4() method generates random UUID using cryptographically generated secure number generators. generates more secure UUIDs. recommended when UUIDs require generating separate machines. UUID UUID Create Name-Based UUID name-based UUID means generate UUIDs using version UUID. names namespaces create series unique UUIDs. Version hashing namespace identifier with name. uuid3() method generates UUID that based MD5 hash namespace identifier string. other hand, uuid5() method generates UUID based SHA-1 hashing technique namespace identifier. Below namespaces identifiers defined uuid3() uuid5(). NAMESPACE_DNS represents traditional domain name. example, https://javatpoint.com. NAMESPACE_URL represents URL. NAMESPACE_OID This namespace specified string OID. NAMESPACE_X500 When this namespace specified, name string X.500 DN DER text output format. Let's understand following example generate UUID3 UUID5 using various hostname namespace. Example import uuid host_names ['javatpoint.com', 'tutorialandexample.com'] host host_names: print('Generate uuid version using name as',host,' namespace uuid.NAMESPACE_DNS') print(uuid.uuid3(uuid.NAMESPACE_DNS, host)) print('Generate uuid version using name as', host, namespace uuid.NAMESPACE_DNS'), print(uuid.uuid5(uuid.NAMESPACE_DNS, host)) print() Output: Generate uuid version using name javatpoint.com namespace uuid.NAMESPACE_DNS 98bbe92a-b38f-3289-a4b4-80ec1cfdf8cb Generate uuid version using name javatpoint.com namespace uuid.NAMESPACE_DNS 0fc2d4dd-7194-5200-8050-f0ca1dd04b3d Generate uuid version using name tutorialandexample.com namespace uuid.NAMESPACE_DNS 6f6fe445-1c4c-3874-854e-c79f617effe5 Generate uuid version using name tutorialandexample.com namespace uuid.NAMESPACE_DNS 781c3cc9-4965-5fdc-9c40-89bb0ea8ec0d Example Generate UUID 3and UUID using different namespace import uuid name_spaces [uuid.NAMESPACE_DNS, uuid.NAMESPACE_URL, uuid.NAMESPACE_OID, uuid.NAMESPACE_X500] host_name 'pynative.com' print("Generate uuid using namespace") namespace name_spaces: print('uuid is', uuid.uuid3(namespace, host_name)) print('uuid is', uuid.uuid5(namespace, host_name)) print() Output: Generate uuid using namespace uuid 6ddc8513-dc7b-3b37-b21b-a1ca9440fe14 uuid 8d6a1314-170a-559c-afe7-b68d1d7ee9ac uuid 5dcfef3e-bcc9-38bc-b989-4a7516a05974 uuid 3a4a6c31-8d6a-5583-8497-d2ed90b1f13a uuid 84d9730f-330f-3634-9542-4acfcdcd6c60 uuid 899f3d4b-6095-5ee6-9805-68e0c51dcb39 uuid b140fa3b-983a-3efe-85ef-92f07d5e09a0 uuid 73b723ef-5c5e-5eb4-8fcc-aabb5c4e7803 Behavior uuid3 uuid5 Despite same namespace same name similar, UUIDs generated different times. different namespace same namespace different, generates unique Ids. Example import uuid print('Generate version uuid using name pynative.com namespace uuid.NAMESPACE_DNS') print(uuid.uuid3(uuid.NAMESPACE_DNS, "javatpoint.com")) print('Generate version uuid using name pynative.com namespace uuid.NAMESPACE_DNS') print(uuid.uuid3(uuid.NAMESPACE_DNS, "javatpoint.com")) Output: Generate version uuid using name pynative.com namespace uuid.NAMESPACE_DNS 98bbe92a-b38f-3289-a4b4-80ec1cfdf8cb Generate version uuid using name pynative.com namespace uuid.NAMESPACE_DNS 98bbe92a-b38f-3289-a4b4-80ec1cfdf8cb convert string UUID UUID string Python? uuid.uuid1() method returns instance UUID class. string representation UUID using str() method. corresponding string format used comparison manipulation. Let's understand following example. Example import uuid UUID1_VAL uuid.uuid1() print("The version UUID UUID1_VAL) convert UUID string digits standard form print("The version UUID String format", str(UUID1_VAL)) replace() method remove dashes from string uuidString str(UUID1).replace("-", print("Version UUID String removing dashes", uuidString) Output: version UUID cdca7930-7488-11ec-a0c4-4984d2946471 UUID version String format cdca7930-7488-11ec-a0c4-4984d2946471 Version UUID String format cdca7930-7488-11ec-a0c4-4984d2946471 Version UUID String removing dashes cdca7930748811eca0c44984d2946471 Now, will create UUID from String. Sometimes, UUID string format. application needs convert UUID class instance some applications. Let's understand following example convert string formatted UUID. Example import uuid import uuid UUIDStrings ["{c7c9de0a-d676-11e8-8d62-ccaf789d94a0}", "018c168c-d509-11e8-b096-ccaf789d94a0", "urn:uuid:e5e9394c-daed-498e-b9f3-69228b44fbfa"] string UUIDStrings: make UUID from string digits (braces hyphens ignored) myUUID uuid.UUID(string) print("My UUID is", myUUID) print("My UUID time component is", myUUID.time) print() Output: UUID c7c9de0a-d676-11e8-8d62-ccaf789d94a0 Time component 137595594281180682 UUID 018c168c-d509-11e8-b096-ccaf789d94a0 Time component 137594023292180108 UUID e5e9394c-daed-498e-b9f3-69228b44fbfa Time component 688728508333635916 Example import uuid display(message, print(message) print(v) print() string_uuids 'urn:uuid:f2f84497-b3bf-493a-bba9-7c68e6def80b', '{417a5ebb-01f7-4ed5-aeac-3d56cd5037b0}', '2115773a-5bf1-11dd-ab48-001ec200d9e0', display('string UUID', string_uuids) uuids uuid.UUID(s) string_uuids display('converted uuids', uuids) uuids.sort() display('sorted value', uuids) Output: string UUID urn:uuid:f2f84497-b3bf-493a-bba9-7c68e6def80b {417a5ebb-01f7-4ed5-aeac-3d56cd5037b0} 2115773a-5bf1-11dd-ab48-001ec200d9e0 converted uuids f2f84497-b3bf-493a-bba9-7c68e6def80b 417a5ebb-01f7-4ed5-aeac-3d56cd5037b0 2115773a-5bf1-11dd-ab48-001ec200d9e0 sorted value 2115773a-5bf1-11dd-ab48-001ec200d9e0 417a5ebb-01f7-4ed5-aeac-3d56cd5037b0 f2f84497-b3bf-493a-bba9-7c68e6def80b Generate Reproducible UUIDs mentioned earlier, UUID various attributes. same UUID using attributes. Using uuid module, generate same uuid anytime using seed value. seed value also used generate same UUID. Let's understand both concepts. following inputs used create UUID instance. String Bytes Bytes_le Fields Using above value, UUID generated. Let's following example where these value same UUID. Example import uuid print("Generating UUID from int") UUID_x uuid.UUID(int=236357465324988601727440242910546465952) print("UUID is", UUID_x) print("UUID from URN") UUID_x1 uuid.UUID('urn:uuid:b1d0cac0-d50d-11e8-b57b-ccaf789d94a0') print("UUID is", UUID_x1) print("UUID from bytes") UUID_x2 uuid.UUID(bytes=b'\xb1\xd0\xca\xc0\xd5\r\x11\xe8\xb5{\xcc\xafx\x9d\x94\xa0') print("UUID is", UUID_x2) print("UUID from bytes_len") UUID_x3 uuid.UUID(bytes_le=b'\xc0\xca\xd0\xb1\r\xd5\xe8\x11\xb5{\xcc\xafx\x9d\x94\xa0') print("UUID is", UUID_x3) print("UUID from fields") UUID_x4 uuid.UUID(fields=(2983250624, 54541, 4584, 181, 123, 225054014936224)) print("UUID is", UUID_x4) Output: Generating UUID from UUID b1d0cac0-d50d-11e8-b57b-ccaf789d94a0 UUID from URN UUID b1d0cac0-d50d-11e8-b57b-ccaf789d94a0 UUID from bytes UUID b1d0cac0-d50d-11e8-b57b-ccaf789d94a0 UUID from bytes_len UUID b1d0cac0-d50d-11e8-b57b-ccaf789d94a0 UUID from fields UUID b1d0cac0-d50d-11e8-b57b-ccaf789d94a0 Reproduce UUID with seed name suggests, Faker module generates fake data have used faker module generate same UUID repeatedly. Let's understand following example. Example import uuid from faker import Faker fake_obj Faker() fake_obj.seed(8754) print(faker_obj.uuid4()) fake_obj.seed(8754) print(fake_obj.uuid4()) Output: b1d0cac0-d50d-11e8-b57b-ccaf789d94a0 b1d0cac0-d50d-11e8-b57b-ccaf789d94a0 Conclusion this tutorial, have discussed uuid module details understand generate various UUIDs. UUIDs help define uniqueness application/database also help define identifiers documents, hosts, application, clients, other situation. Next TopicPython Libraries Learn 2022 prev next