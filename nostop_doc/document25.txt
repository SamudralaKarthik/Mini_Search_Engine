next prev Python Functions This tutorial will learn about basics Python functions, including what they are, their syntax, their main components, return keywords, major types. will also examples define Python function. What Python Functions? function collection related assertions that performs mathematical, analytical, evaluative operation. Python functions simple define essential intermediate-level programming. exact criteria hold function names they variable names. goal group certain often performed actions define function. Rather than rewriting same code block over over varied input variables, call function repurpose code included within with different variables. functions broad types, user-defined built-in functions. aids keeping software succinct, non-repetitive, well-organized. Advantages Functions Python Python functions have following benefits. including functions, prevent repeating same code block repeatedly program. Python functions, once defined, called many times from anywhere program. Python program large, separated into numerous functions which simple track. accomplishment Python functions return many outputs want with different arguments. However, calling functions always been overhead Python program. Syntax Python Function Code name_of_function( parameters """This docstring""" code block following elements make define function, seen above. beginning function header indicated keyword called def. name_of_function function's name that separate from others. will this name call function later program. same criteria apply naming functions naming variables Python. pass arguments defined function using parameters. They optional, though. function header terminated colon (:). documentation string called docstring short form explain purpose function. body function made several valid Python statements. indentation depth whole code block must same (usually spaces). return expression return value from defined function. Example User-Defined Function will define function that when called will return square number passed argument. Code square( This function computes square number. return num**2 object_ square(9) print( "The square number object_ Output: square number Calling Function function defined using keyword giving name, specifying arguments that must passed function, structuring code block. After function's fundamental framework complete, call from anywhere program. following example a_function function. Code Defining function a_function( string "This prints value length string" return len(string) Calling function defined print( "Length string Functions a_function( "Functions" print( "Length string Python a_function( "Python" Output: Length string Functions Length string Python Pass Reference Value Python programming language, arguments supplied reference. implies that modify value argument within function, change also reflected calling function. instance, Code defining function square( my_list '''This function will find square items list''' squares my_list: squares.append( l**2 return squares calling defined function list_ [45, 13]; result square( list_ print( "Squares list result Output: Squares list [2025, 2704, 169] Function Arguments following types arguments that call function: Default arguments Keyword arguments Required arguments Variable-length arguments Default Arguments default argument kind parameter that takes input default value value supplied argument when function called. Default arguments demonstrated following instance. Code Python code demonstrate default arguments defining function function( num1, num2 print("num1 num1) print("num2 num2) Calling function passing only argument print( "Passing argument" function(10) giving arguments function print( "Passing arguments" function(10,30) Output: Passing argument num1 num2 Passing arguments num1 num2 Keyword Arguments arguments function called connected keyword arguments. provide keyword arguments while calling function, user uses parameter label identify which parameters value Since Python interpreter will connect keywords given link values with parameters, omit some arguments arrange them order. function() method also called with keywords following manner: Code Python code demonstrate keyword arguments Defining function function( num1, num2 print("num1 num1) print("num2 num2) Calling function passing arguments without using keyword print( "Without using keyword" function( Calling function passing arguments using keyword print( "With using keyword" function( num2 num1 Output: Without using keyword num1 num2 With using keyword num1 num2 Required Arguments arguments given function while calling pre-defined positional sequence required arguments. count required arguments method call must equal count arguments provided while defining function. must send arguments function function() correct order, will return syntax error, seen below. Code Python code demonstrate default arguments Defining function function( num1, num2 print("num1 num1) print("num2 num2) Calling function passing arguments order, need num1 num2 print( "Passing order arguments" function( Calling function passing only argument print( "Passing only argument" try: function( except: print( "Function needs positional arguments" Output: Passing order arguments num1 num2 Passing only argument Function needs positional arguments Variable-Length Arguments special characters Python functions pass many arguments want function. There types characters that this purpose: *args -These Non-Keyword Arguments **kwargs These Keyword Arguments. Here example clarify Variable length arguments Code Python code demonstrate variable-length arguments Defining function function( *args_list args_list: ans.append( l.upper() return Passing args arguments object function('Python', 'Functions', 'tutorial') print( object defining function function( **kargs_list key, value kargs_list.items(): ans.append([key, value]) return Paasing kwargs arguments object function(First "Python", Second "Functions", Third "Tutorial") print(object) Output: ['PYTHON', 'FUNCTIONS', 'TUTORIAL'] [['First', 'Python'], ['Second', 'Functions'], ['Third', 'Tutorial']] return Statement write return statement function leave function give calculated value when defined function called. Syntax: return expression returned output argument, statement, value used return statement, which given output when specific task function completed. write return statement, then None object returned defined function. Here example return statement Python functions. Code Python code demonstrate return statements Defining function with return statement square( return num**2 Calling function passing arguments. print( "With return statement" print( square( Defining function without return statement square( num**2 Calling function passing arguments. print( "Without return statement" print( square( Output: With return statement 1521 Without return statement None Anonymous Functions These types Python functions anonymous since declare them, declare usual functions, using keyword. lambda keyword define short, single output, anonymous functions. Lambda expressions accept unlimited number arguments; however, they only return value result function. They can't have numerous expressions instructions them. Since lambda needs expression, anonymous function cannot directly called print. Lambda functions contain their unique local domain, meaning they only reference variables their argument list global domain name. Although lambda expressions seem one-line representation function, they like inline expressions C++, which pass function stack allocations execution efficiency concerns. Syntax Lambda functions have exactly line their syntax: lambda [argument1 [,argument2... .argumentn]] expression Below illustration lambda function: Code Defining function lambda_ lambda argument1, argument2: argument1 argument2; Calling function passing values print( "Value function lambda_( print( "Value function lambda_( Output: Value function Value function Scope Lifetime Variables scope variable refers domain program wherever declared. function's arguments variables accessible outside defined function. result, they only have local domain. period variable's existence referred lifetime. Variables within function have same lifespan function itself. When function, they removed. result, function does retain variable's value from earlier executions. Here's simple example variable's scope within function. Code #defining function print number. number( print( "Value inside function: num) number() print( "Value outside function:", num) Output: Value inside function: Value outside function: Here, observe that initial value Even function number() modified value value outside function remained unchanged. This because variable within function distinct from variable outside function (local function). Despite their identical variable name, they distinct variables having distinct scopes. Variables beyond function, contrary, accessible within function. These variables have global reach. retrieve their values inside function cannot alter (change) them. declare variable global using keyword global, also change variable's value outside function. Python Function within Another Function Functions considered first-class objects Python. programming language, first-class objects treated same wherever they used. They used conditional expressions, arguments, saved built-in data structures. programming language handles functions first-class entities, said implement first-class functions. Python supports notion First Class functions. Inner nested function refers function defined within another defined function. Inner functions access parameters outer scope. Inner functions constructed cover them from changes that happen outside function. Many developers regard this process encapsulation. Code Python code show access variables nested functions defining nested function function1(): string 'Python functions tutorial' function2(): print( string function2() function1() Output: Python functions tutorial Next TopicPython Built-in Functions prev next