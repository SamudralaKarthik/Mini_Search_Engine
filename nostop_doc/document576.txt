next prev Alarm Clock with Python This wonder that alarm clock always been useful warn while sleep, take brief nap, remind about some important days that might forget. alarm clock clock that created order alert specified time. primary function these clocks awaken people from their night's sleep short naps; they sometimes used other reminders. following tutorial, will develop basic Alarm Clock using Tkinter library Python programming language. Introduction Python Project this Python project, will consider using some Python libraries, namely, Tkinter datetime. will using current date time this project along with feature setting alarm current date time found. start building Alarm Clock using Tkinter. Building Alarm Clock procedure this Python project divided into several steps. Step Importing required modules Step Creating function alarm Step Creating Tkinter window will understand these steps detail. Importing required modules Before start building project, primary step import important libraries modules that need project. this case, will need Tkinter library along with datetime, time winsound modules. Tkinter library:This library will allow create window user order application. Datetime time modules:These modules will allow handle dates times help manipulate them whenever required. winsound module:This module will allow generate sounds alarm clock. consider following snippet code illustrating importing required modules. File: alarmClock.py importing required modules from tkinter import import datetime import time import winsound Explanation: above snippet code, have imported required modules. Creating function alarm Once importing done, will move next step, which includes creation functions alarm clock. consider following snippet code demonstrating same. File: alarmClock.py defining function alarm clock alarm(setAlarmTimer): while True: time.sleep(1) actualTime dt.datetime.now() currentTime actualTime.strftime("%H %S") currentDate actualTime.strftime("%d %Y") the_message "Current Time: str(currentTime) print(the_message) currentTime setAlarmTimer: ws.PlaySound("sound.wav", ws.SND_ASYNC) break getAlarmTime(): alarmSetTime f"{hour.get()} {minute.get()} {second.get()}" alarm(alarmSetTime) Explanation: above snippet code, have defined function alarm with parameter setAlarmTimer. Within this function, have used while loop True. Inside this loop, have used sleep function time module stop execution program until gets time values entered user. have then gotten current date time using help datetime.now() function datetime module stored variable. have then stored time date into separate variables with specific format using strftime function. have then printed message representing current time. have then used conditional statement check current time equivalent alarm timer play sound same using winsound module, else timer continues. have then defined another function getAlarmTime(), which accepts time from user alarm passes previous function. Creating Tkinter Window that have created function alarm clock, head onto final step creating main window application with widgets features defined. consider following snippet code demonstrating same: File: alarmClock.py creating application guiWindow Tk() guiWindow.title("The Alarm Clock") guiWindow.geometry("464x200") guiWindow.config(bg "#87BDD8") guiWindow.resizable(width False, height False) timeFormat Label( guiWindow, text "Remember time 24-hour format!", "white", "#36486B", font ("Arial", ).place( add_time Label( guiWindow, text "Hour Minute Second", font "white", "#87BDD8" ).place( 220, setAlarm Label( guiWindow, text "Set Time Alarm: "white", "#034F84", relief "solid", font ("Helevetica", "bold") ).place( hour StringVar() minute StringVar() second StringVar() hourTime Entry( guiWindow, textvariable hour, "#FEFBD8", width font (20) ).place( 220, minuteTime Entry( guiWindow, textvariable minute, "#FEFBD8", width font (20) ).place( 297, secondTime Entry( guiWindow, textvariable second, "#FEFBD8", width font (20) ).place( 390, submit Button( guiWindow, text "Set Alarm", "white", "#82B74B", width command getAlarmTime, font (20) ).place( 140, guiWindow.mainloop() Explanation: have created window using Tk() class above snippet code. have then title window specified dimensions using title() geometry() methods. have then used attribute config() method background color #87BDD8. have also fixed window's geometry setting width height False resizable() method. have then defined different labels using Label class that will display texts window provided some parameters decorate texts. have then defined some variables that hold value Strings. have then added three text boxes using Entry class, where will enter time alarm provide some parameters decorate them. added button using Button class linked getAlarmTime() function created earlier used some parameters decorate last, have used mainloop() method display window. coding 'Alarm Clock with GUI' project finally completed. save file program works. program, type following command command-line shell terminal: Command: python alarmClock.py before output, here complete project code. Complete Project Code following program file complete code 'GUI Alarm Clock' project. File: alarmClock.py importing required modules from tkinter import import datetime import time import winsound defining function alarm clock alarm(setAlarmTimer): while True: time.sleep(1) actualTime dt.datetime.now() currentTime actualTime.strftime("%H %S") currentDate actualTime.strftime("%d %Y") the_message "Current Time: str(currentTime) print(the_message) currentTime setAlarmTimer: ws.PlaySound("sound.wav", ws.SND_ASYNC) break getAlarmTime(): alarmSetTime f"{hour.get()} {minute.get()} {second.get()}" alarm(alarmSetTime) creating application guiWindow Tk() guiWindow.title("The Alarm Clock") guiWindow.geometry("464x200") guiWindow.config(bg "#87BDD8") guiWindow.resizable(width False, height False) timeFormat Label( guiWindow, text "Remember time 24-hour format!", "white", "#36486B", font ("Arial", ).place( add_time Label( guiWindow, text "Hour Minute Second", font "white", "#87BDD8" ).place( 220, setAlarm Label( guiWindow, text "Set Time Alarm: "white", "#034F84", relief "solid", font ("Helevetica", "bold") ).place( hour StringVar() minute StringVar() second StringVar() hourTime Entry( guiWindow, textvariable hour, "#FEFBD8", width font (20) ).place( 220, minuteTime Entry( guiWindow, textvariable minute, "#FEFBD8", width font (20) ).place( 297, secondTime Entry( guiWindow, textvariable second, "#FEFBD8", width font (20) ).place( 390, submit Button( guiWindow, text "Set Alarm", "white", "#82B74B", width command getAlarmTime, font (20) ).place( 140, guiWindow.mainloop() Output: Current Time: Current Time: Current Time: Current Time: Current Time: Current Time: Current Time: Current Time: Current Time: Current Time: Current Time: Current Time: Current Time: Current Time: Current Time: *ALARM* Next TopicRock Paper Scissors Game Python prev next