next prev Logging Python this tutorial, will learn fundamentals standard logging module. What logging? Logging Python module standard library that provides facility work with framework releasing messages from Python programs. Logging used tracking events that occur when software runs. This module widely used developers when they work logging. very important tool which used software development, running, debugging. Logging beneficial store logging records. Suppose there logging record, program interrupted during execution, will unable find actual cause problem. Somehow, detect cause crash will consume time resolve this. Using logging, leave trace breadcrumbs that problem happens program, find cause problem easily. face many problems while running applications such suppose integer, have been given float, service under maintenance many more. These problems hard determine time-consuming. Logging Works logging powerful module used beginners well enterprises. This module provides proficiency organize different control handlers transfer messages these handlers. releasing message, need import logging module follows. import logging Now, will call logger messages that want see. logging module offers five levels that specify severity events. Each event contains parallel methods that used events level severity. Let's understand following events their working. DEBUG used provide detailed information only when there diagnosing problems. INFO provides information regarding that things working want. WARNING used warn that something happened unexpectedly, will face problem upcoming time. ERROR used inform when some serious trouble, software hasn't executed some programs. CRITICAL specifies serious error, program itself incapable remaining executing. above levels sufficient handle types problems. These corresponding numerical values levels given below. Level Numeric Values NOTSET DEBUG INFO WARNING ERROR CRITICAL logging module offers many features. consists several constants, classes, methods. constants represented caps latter; classes represented capital letters. items with lowercase represent methods. Let's have look several logger objects offered module itself. Logger.info(msg) used message with level INFO this logger. Logger.warning(msg) used message with level WARNING this logger. Logger.error(msg) used message with level ERROR this logger. Logger.critical(msg) used message with level CRITICAL this logger. Logger.log(lvl,msg) used logs message with integer level this logger. Logger.exception(msg) used message with level ERROR this logger. Logger.setLevel(lvl) used sets beginning this logger lvl. will ignore messages which written below. Logger.addFilter(filt) used specific filter filt this logger. Logger.removeFilter(filt) used eliminates specific filter filt this logger. Logger.filter(record) filter logger record. record available handled then returns True. Otherwise, will return False. Logger.addHandler(hdlr) used particular handler hdlr this logger. Logger.removeHandler(hdlr) used eliminate particular handler hdlr this logger. Logger.hasHandlers() used verify logger contains handler configured not. Let's understand following example. Example import logging logging.debug('The debug message displaying') logging.info('The info message displaying') logging.warning('The warning message displaying') logging.error('The error message displaying') logging.critical('The critical message displaying') Output: WARNING:root:The warning message displaying ERROR:root:The error message displaying CRITICAL:root:The critical message displaying Explanation: above output, each message displayed along with root, which logging module name given default logger. message level name separated colon print messages default output format. notice that debug() info() message didn't display messages because, default, module logs messages with severity level WARNING, ERROR CRITICAL. Basic Configurations main task logging store records events file. logging module provides basicConfig(**kwarg), used configure logging. accepts some commonly used argument follows. level specified severity level root level. filename specifies file. filemode opens file specific mode. default mode opening file which means append content. format format defines format message. level messages using level parameter want record. need pass constant class, which would permit logging calls. Let's understand following example. Example import logging logging.basicConfig(level=logging.DEBUG) logging.debug('The dubug message logged') Output: DEBUG:root: debug will logged Similarly, message file instead display console, filename filemode used basicConfig() function, decide format message using format attributes. Let's understand following example. Example import logging logging.basicConfig(filename='msg.log', filemode='w', format='%(name)s %(levelname)s %(message)s') logging.warning('This will logged file') Output: root WARNING This will logged file Explanation: above output will displayed msg.log file instead console. opened file which means file opened "write mode". basicConfig() called multiple times, then each program will rewrite file's output. basicConfig() function modified passing additional arguments (https://docs.python.org/3/library/logging.html#logging.basicConfig). Let's understand following example. Example import logging #Create configure logger using basicConfig() function logging.basicConfig(filename="newfile.log", format='%(asctime)s %(message)s', filemode='w') #Creating object logging logger=logging.getLogger() #Setting threshold logger DEBUG logger.setLevel(logging.DEBUG) #Test messages logger.debug("This harmless debug Message") logger.info("This just information") logger.warning("It Warning. Please make changes") logger.error("You trying divide zero") logger.critical("Internet down") Output: 2020-09-05 13:17:39,204 This harmless debug Message 2020-09-05 13:17:39,205 This just information 2020-09-05 13:17:39,205 Warning. Please make changes 2020-09-05 13:17:39,205 trying divide zero 2020-09-05 13:17:39,205 Internet down Explanation: above code will generate file, output while opening file. Formatting Output string passed program message modified according requirements. There some basic elements given string part Logrecord. Let's understand following example. Example import logging logging.basicConfig(format='%(process)d-%(levelname)s-%(message)s') logging.warning('This Warning Message') Output: 18472-WARNING-This Warning Message format argument accept string with Logrecord attributes form require. Let's understand following example Example import logging logging.basicConfig(format='%(asctime)s %(message)s', level=logging.INFO) logging.info('Admin logged in') Output: 2020-09-02 20:12:06,288 Admin logged %(asctime) attributes adds time creation Logrecord. also customize format using datefmt attributes, which provides same function datetime module. Example import logging logging.basicConfig(format='%(asctime)s %(message)s', datefmt='%d-%b-%y %H:%M:%S') logging.warning('Admin logged out') Output: 02-Sep-20 13:29:05 Admin logged Logging Variable Data Sometimes, want include dynamic information from application log. logging methods accepted string argument, good practice format string with variable data passed method. instead that, also format string message appending variable data argument. Let's understand following example import logging name 'Peter Decosta' logging.error('%s raised error', name) Output: ERROR:root: Peter Decosta raised error Explanation: arguments passed method would convoluted variable data message. f{string} format given string. provides short easy handle string. Example import logging name 'Antonio Mino' logging.error(f'{name} raised error') Output: ERROR:root: Antonio Mino raised error Capturing Stack Traces capture full stacks traces application using logging module. There exc_info parameter logging function; True, capture Exception information. Let's understand following example Example import logging try: except Exception logging.error("Exception occurred", exc_info=True) Output: ERROR:root:Exception occurred Traceback (most recent call last): File "C:/Users/DEVANSH SHARMA/PycharmProjects/Hello/loggingFile.py", line 224, <module> ZeroDivisionError: division zero Explanation: don't true exc_info, output will inform about exception. would hard debug error thousand lines code, displays only following output. ERROR:root:Exception occurred There also other option complete information about exception. logging module provides exception() method, which logs message with ERROR attaches exception information. call logging.exception() method same calling logging.error(exc_info True). Let's understand following example. Example import logging try: except Exception logging.exception("Exception occurred", exc_info=True) Output: ERROR:root:Exception occurred Traceback (most recent call last): File "C:/Users/DEVANSH SHARMA/PycharmProjects/Hello/loggingFile.py", line 224, <module> ZeroDivisionError: division zero option error(), debug(), critical() methods information about exception. Classes Functions have seen default logger called root. logging module used whenever functions called such logging.debug(), logging.error(), etc. also define logger creating object Logger class. Here, defining commonly used classes functions. Below classes functions defined logging module. Logger logger object used call functions directly. LogRecord creates automatically record file which consists information related event being logged such logger's name, function, line number, message, more. Handler handlers used dispatch LogRecord output endpoint. FileHandler, StreamHandler, HTTPHandler, SMTTPHandler subclasses Handler. Formatters formatters used define structure output. used string formatting methods specify format messages. don't have message format, default message. default format date format %Y-%m-%d %H:%M:%S following format used make message human -readable format. '%(asctime)s %(levelname)s %(message)s' generally work with objects Logger class, which created using logging.getLogger(name) function. getLogger() method called multiple times with same name, will return reference same logger object. Let's understand following example: Example import logging logger logging.getLogger('first_logger') logger.warning('This warning message') Output: This warning message Explanation: have created logger name first_logger, unlike root logger, first_logger part output format. display pass into configuration function. Then output will look like follows. WARNING:first_logger:This warning message Work With Handlers Handlers generally used configure logger transmit logs many places time. sends messages standard output stream file over HTTP email. Let's understand following example creating handlers. Example: import logging Create custom logger_obj logger_obj logging.getLogger(__name__) Create handlers w_handler logging.StreamHandler() e_handler logging.FileHandler('file.log') w_handler.setLevel(logging.WARNING) e_handler.setLevel(logging.ERROR) Create formatters handlers c_format logging.Formatter('%(name)s %(levelname)s %(message)s') f_format logging.Formatter('%(asctime)s %(name)s %(levelname)s %(message)s') w_handler.setFormatter(c_format) e_handler.setFormatter(f_format) handlers logger_obj logger_obj.addHandler(w_handler) logger_obj.addHandler(e_handler) logger_obj.warning('This warning message') logger_obj.error('This error message') Output: __main__ WARNING This warning message __main__ ERROR This error message Explanation: following program, have created custom logger named logger_obj created LogRecord that stores record logging events passed Handlers that has: w_handlers e_handlers. w_handlers stream handler with level WARNING. accepts from LogRecord generate output format string print screen. e_handler file handler with level ERROR. disregards LogRecord level WARNING. Conclusion logging module flexible easy use. very useful keeping track logging records displaying appropriate message user. provides flexibility create custom levels, handler classes, many other useful methods. also provides basic logging small projects. this tutorial, have discussed essential concepts logging module. have covered generate messages with different levels. Next TopicInsertion Sort Python prev next