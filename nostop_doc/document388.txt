next prev Handling Python Python considered extremely flexible programming language with wide range libraries, high-level language with easy-to-read writes syntax. reach Python being expanded different sectors like Machine Learning, Development, Cybersecurity, Application Development, more. Thus, this programming language widely chosen among programmers, engineers developers. following tutorial, will working PDFs with help Python programming language. PDFs, abbreviated Portable Document Format, file format document containing texts, tables, images, many more, which usually utilized whenever require save files that cannot modified further easily shared printed. file format developed Adobe year 1993 order present documents involving formatted text images independent software, applications, operating systems, hardware. following tutorial been divided into different parts order understand mostly everything related handling processing using Python. let's started. Some Famous Python Libraries Python offers large variety libraries that used manipulate file. Some famous libraries that utilized generally while working with PDFs are: PDFMiner, PyPDF4, PyPDF2, Python-docx, PyMuPDF, more. While there different packages that utilized order perform different functional operations with PDFs Python, will only discuss working some libraries such PDFMiner, PyPDF2, PyMuPDF, reportlab, more this tutorial. PyPDF2 considered widely chosen Python modules work with PDFs. This package easy-to-use offers various features. when talk about extraction texts, PDFMiner package more precise dependable. PDFMiner specifically designed users extract texts from files. There different scenarios where package more efficient than other different aspects when take files manipulation into account. Hence, will discuss different libraries utilized manipulate files based their comfort reliability this tutorial. Text Extraction from PDFs using Python PDFs composed various contents such Text, Tables, Images, Forms, many more. These files graphical interpretations data. They deliver information exact location display paper. However, they don't have logical structure specified sentences paragraphs can't adapt themselves when size display alters. PDFMiner package performs work users evaluating layouts predicting location texts other contents. PDFMiner considered robust libraries utilized perform operations like extracting texts from files. Thus, following section, will demonstrate usage PDFMiner Text Extraction. First all, have install PDFMiner package. Installing PDFMiner Package install PDFMiner package using following command: Syntax: install pdfminer Once installation complete, will head onto main part, extracting texts using PDFMiner library. consider following example demonstrating extraction texts with help PDFMiner Python. Example: from import StringIO from pdfminer.converter import TextConverter from pdfminer.layout import LAParams from pdfminer.pdfdocument import PDFDocument from pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreter from pdfminer.pdfpage import PDFPage from pdfminer.pdfparser import PDFParser O_string StringIO() with open('my_file.pdf', 'rb') input_file: my_parser PDFParser(input_file) my_doc PDFDocument(my_parser) rsrcmgr PDFResourceManager() my_device TextConverter(rsrcmgr, O_string, laparams LAParams()) my_interpreter PDFPageInterpreter(rsrcmgr, my_device) my_page PDFPage.create_pages(my_doc): my_interpreter.process_page(my_page) print(O_string.getvalue()) Output: Simple File This small demonstration .pdf file just Virtual Mechanics tutorials. More text. more text. more text. more text. more text. more text. more text. more text. more text. more text. more text. Boring, zzzzz. more text. more text. more text. more text. more text. more text. more text. more text. more text. more text. more text. more text. more text. more text. more text. more text. Even more. Continued page Simple File ...continued from page more text. more text. more text. more text. more text. more text. more text. more text. Oh, boring typing this stuff. boring watching paint dry. more text. more text. more text. more text. Boring. More, little more text. end, just well. Explanation: above snippet code, have imported StringIO module from library required functions classes from PDFMiner module. created StringIO object used with statement open file from directory. PDFMiner documentation, PDFPageInterpreter used process page contents, while PDFResourceManager used store shared resources such fonts images. PDFPage utilized performing page-by-page analysis data. LAParams loads Layout analysis characters, textbox, text lines, images, figures. With help these, TextConverter function helps converting document into text. providing "my_file.pdf" file analyzed executed with help PDFMiner module. extract texts from file using process_page function. last, print(text) function will print extracted text from PDF. this manner, texts extracted from file using PDFMiner library. Image Extraction from PDFs using Python Whenever want extract images from PDF, utilize PyMuPDF. This library uses additional module, fitz, which makes image extraction from file easier. Before starting work with modules directly, install required libraries. Installing PyMuPDF Package install PyMuPDF package using following command: Syntax: install pymupdf install fitz Once installation complete, will head onto main part, extracting texts using PyMuPDF library fitz module. consider following example demonstrating extraction images Python. Example: PyMuPDF import fitz import from import Image path input file my_file "file2.pdf" Input file my_pdf open(my_file) page_num range(len(my_pdf)): cur_page my_pdf[page_num] cur_page.getImageList() image_num, image enumerate(cur_page.getImageList()): XREF image xref image[0] extract image bytes cur_image my_pdf.extractImage(xref) imgBytes cur_image["image"] image extension img_ext cur_image["ext"] load image Image.open(io.BytesIO(imgBytes)) save local disk image.save(open(f"page{page_num 1}_img{image_num}.{img_ext}", "wb")) Output: Found total images page Found total images page Explanation: above snippet code, have imported required modules. have then loaded file using fitz module. Then page page find list images. have then converted image bytes PDFs actual images saved them locally. Thus, this manner, have extracted images file. Tables Extraction from PDFs using Python Tables extraction from files easy compared images text extraction. Python offers predefined library known camelot, which extract tables. before start implementing code, becomes necessary install library first. Installing camelot library install camelot module using following command with installer: Syntax: install camelot Once installation done, head extracting tables from files Python. Example: import camelot reading file my_tables camelot.read_pdf("my_table.pdf") print(my_tables[0].df) Explanation: above snippet code, have imported camelot library. have then extracted tables from file using read_pdf() function camelot library stored them variable list. last, have printed extracted tables using index value table along with attribute. Hence, have successfully extracted tables from files. Extracting URLs from PDFs using Python Extracting URLs considered another handy function that Python offers. Python predefined library known "pdfx", which usually utilized extract URLs from file. utilize libraries such PDFMiner, PyPDF2, many more order extract texts regular expressions find URLs. Nevertheless, this procedure long hectic. Thus, order shorten length code, will using pdfx library extract URLs from file. Installing pdfx library install pdfx library using following command with installer: Syntax: install pdfx Once installation complete, consider following example understand extraction URLs from PDFs. Example: import pdfx reading File my_pdf pdfx.PDFx("sample-url.pdf") list URLS print(my_pdf.get_references_as_dict()) Output: {'url': ['https://www.javatpoint.com/python-pass', 'https://www.javatpoint.com/python-tutorial', 'https://www.javatpoint.com/python-seaborn-library', 'https://www.javatpoint.com/', 'https://www.javatpoint.com/chatbot-in-python', 'https://www.javatpoint.com/python-if-else']} Explanation: above snippet code, have imported pdfx library. have then used PDFx() function read file from directory. have then used get_references_as_dict() function extract URLs available input file form dictionary. Pages Extraction from PDFs Image using Python this section, will understand extraction pages from file form image. order accomplish task, will need another short simple library known pdf2image. This library usually utilized when want take files into images. begin installing library. Installing pdf2image library following command with installer install pdf2image library: Syntax: install pdf2image Once installation completed, consider following example understand working pdf2image library. Example: from pdf2image import convert_from_path my_pages convert_from_path("my_file.pdf", 120) iterating through pages page my_pages: page.save(f"output{n}.jpg", "JPEG") Explanation: above snippet code, have imported convert_from_path function from pdf2image library. have then used imported function along where have provided value 120. This value known DPI Dots Inch. Higher value, clearer bigger-sized image will formed. iterating through each page saving pages JPEG images. Next TopicManipulating using Python prev next