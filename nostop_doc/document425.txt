next prev Python Pexpect Module know about desktop operating systems their functions working. Some most famous operating systems which must have heard Windows, Linux, macOS, ChromeOS. Among them, chromeOS also Linux-based operating system desktop, which increases popularity Linux Linux-based operating systems. Linux very popular operating system among programmers developers because enhanced security features. same time, that much among general people, biggest reason behind this trend complex commands used operate work Linux operating system-based desktop. Now, talking about Linux, desktop operating system from family UNIX-like operating systems, first released Linus Torvalds 1991 September Other than security features, other, most attractive thing about Linux, that open-source free licensing software based FOSS (Free Open-Source Software) model. Unlike windows many other desktop operating systems, Linux absolutely free, download latest versions with hundreds distributions. Other features that Linux offers developers faster interpreters compilers, option heavy customization, less complexity, many others. what don't have Linux still want Linux commands. There could many reasons doing this, including want familiar with Linux commands, etc. Maybe programming languages, Python offers this option Linux commands Windows other operating system. this, Python pexpect module, which gives option automate Linux commands through Python program using functions. Therefore, will learn about this pexpect Module Python understand Linux commands through Python program using Introduction Pexpect Module Python Pexpect Python package used perform many functions, including automating Linux commands through Python programs, spawning child processes after that automatically controlling them, etc. Pexpect module very rich module Python that comes with lots functions perform many different tasks. Pexpect module works span child, responds expected pattern; define using Python program perform several functions. Following some useful functions that perform using pexpect module Python: passwords, ssh, Telnet, automating Linux commands, many others Installation Python Pexpect Module Pexpect in-built package Python doesn't install along with Python installation), that's this module present system already, have perform installation this module. should first make sure that pexpect module already installed system because will able perform implementation without having this module present system. Pexpect module already installed system, install this module through multiple methods, among possible installation methods, installing pexpect module with installer simplest easiest one. That's will installer this section installing this module system, this method, will following installer command: install pexpect have write above-given command command prompt terminal shell, after writing command, have press enter that installer will start installing this module system. Once installation process this module begins, will take while install module system successfully, have wait till then. see, successfully installed message displayed screen, which means that pexpect module successfully installed system. Now, move forward with implementation part Pexpect module start importing into example programs understand it's working. Automating Linux Commands with Pexpect Module Here, this part, will automate Linux commands through Python programs Importing Pexpect module into them. have three methods pexpect module, which automate Linux commands through Python program. Following three methods pexpect module which automate Linux commands: Using run() method Using spawn class method Using sendline() method will understand implementation three methods that listed above using them example program. will separate example program each method automate Linux command through Note: pexpect module methods listed above only UNIX-based operating systems, none them available windows. Therefore, these methods example programs, will show error output. First, have Virtual environment UNIX-based want these programs Windows operating system. Method Using run() Method have run() function pexpect module, which execute command. pexpect.run() method execute Linux command providing argument function, then, return result execution output. run() function used replacement os.system method, which used execute Linux commands. Syntax run() Method: Following syntax using run() method pexpect module execute Linux commands: pexpect.run(Linux command) syntax above, have provided Linux command argument run() method. When program, run() method will execute Linux command provided show result output. Let's understand implementation run() method executing Linux commands through following example program. Example Look following Python program where executed Linux command: Importing pexpect module import pexpect Using method with Linux command executionResult px.run('echo Welcome JavaTpoint!') Showing result output print("The result after executing Linux commands through method:") print(executionResult) Output: result after executing Linux commands through method: Welcome JavaTpoint! see, Linux command successfully executed, result printed output. Explanation: After importing pexpect module program, have used run() method with example Linux command echo 'Welcome JavaTpoint!' stored initialized variable, i.e., executionResult. Lastly, printed execution result output using print statement. Method Using Spawn Class Method this method, will spawn class that will help automate Linux commands given program. Spawn class main interface which start child process during execution control through child classes. string argument give spawn class replaced shell command (whenever needed), which must executed program. Syntax Spawn class: pexpect.spawn('Linux Command') see, have provided Linux command argument spawn class, replaced shell command, which executed. When using spawn class method, expect() function with which also important method spawn class. expect() method waits child class (defined spawn class) process that will return given string inputs. When program, pattern will specify spawn class function will matched with input strings defined child class, matching string will returned output. expect() used child class will return position string where input pattern spawn class matched output. Syntax expect() Function: have expect() function child class spawn method like syntax given below: childClassObject.expect(inputPatterns, searchwindowsize async_ false) Arguments: syntax expect() function given above, this function takes following three arguments: inputPatterns: These input string patterns that would matched with pattern have defined spawn class, this mandatory argument given function. searchwindowsize: optional window size defines size search window. default value this argument function async_: This also optional argument expect() function, input values taken this argument 'True' 'False.' default value this argument function False. this value 'True' when creating non-blocking application. timeout value used expect() function raise return value will pexpect.TIMEOUT. searchwindow option expect() function maxread value class. Let's understand implementation spawn class method with expect() function child class through following example program. Example Look following Python program where have matched input pattern defined spawn class: Importing pexpect module import pexpect Starting child process with spawn class childProcess px.spawn("echo JavaTpoint") Matching defined pattern with input strings expect() function processResult childProcessing.expect(["Welcome", "To", "JavaTpoint", "Hello"]) Returning matched string index result output print("The defined pattern spawn class matched index number:", processResult, "from input strings given expect function") Output: defined pattern spawn class matched index number: from input strings given expect function see, index number input string, which matched with defined pattern, printed output after executing spawn class. That's match input strings given expect() function child process with pattern defined spawn class. Since index numbering starts from that's index number printed place input string position. Explanation: have used spawn class start child process after importing pexpect module program. While starting child process, have defined pattern 'JavaTpoint', which will match with given input strings. After that, have used expect() function, where have defined multiple input strings. index number string, which will matched with defined pattern, will stored result initialized variable. Lastly, printed result with initialized variable using print statement. Method Using sendline Method this method, will sendline() function after starting child process with spawn class. sendline() method will write over string pattern defined child process. Sendline method also used return number bytes consumed pattern string defined will only this method matching patterns from input strings this part. This method used automate Linux command when write string child process. Syntax sendline Method: Following syntax using sendline method pexpect module writing matching pattern child process: childProcess.sendline("pattern") see, sendline function takes only argument, which pattern child process. understand implementation application sendline method through following example program: Example Look following Python program where have used sendline() function write matching pattern child process: Importing pexpect module import pexpect Starting child process with spawn class childProcess px.spawn("JavaTpoint") Definite pattern child process childProcess.sendline("Welcome") Matching defined pattern with input strings processResult childProcessing.expect(["Welcome", "To", "JavaTpoint", "Hello"]) Returning matched string index result output print("The defined pattern child process sendline method matched index number: processResult) Output: defined pattern child process sendline method matched index number: see, index number where input string from expect() function matched with defined pattern sendline method printed output after execution. That's define match pattern child process using sendline method. Explanation: After starting child process, have used sendline() function, where have defined pattern child process. Then, matched defined pattern with input strings given expect function. Lastly, printed index number input string, which matched with defined pattern child process. Next TopicPython Optparse Module prev next