next prev Python loop Python powerful, general-purpose scripting language intended simple understand implement. free access because open-source. This tutorial will teach Python loops, most basic looping instructions Python programming. Introduction Loop Python Python, loop often used iterate over iterable objects such lists, tuples, strings. Traversal process iterating across series. have section code that would like repeat certain number times, employ loops. for-loop usually used iterable object such list in-built range function. statement Python traverses through elements series, running block code each time. statement opposition "while" loop, which employed whenever condition requires verified each repetition when piece code repeated indefinitely. Syntax Loop value sequence: {loop body} each iteration, value parameter that gets element's value within iterable sequence. expression statement present sequence, processed first. iterating variable iterating_variable then allocated first element sequence. After that, intended block run. statement block performed until whole sequence completed, each element sequence allocated iterating_variable. loop's material distinguished from rest program using indentation. Example Python Loop Code Code find squares each element list using loop creating list numbers numbers initializing variable that will store sum_ using loop iterate over list numbers: sum_ sum_ print("The squares sum_) Output: squares range() Function Because "range" function appears frequently loops, might mistakenly believe range component syntax loop. isn't: it's Python built-in method that provides series that follows specified pattern (usually serial integers), fulfilling criteria giving series expression over. There necessity count because straight sequences most time. they're coming from some other language with distinctive loop syntax, this frequent novice construct: Code my_list iter_var range( len( my_list my_list.append(my_list[iter_var] print( my_list Output: Iterating Using Index Sequence Another method iterating through every item index offset within sequence. Here's simple illustration: Code Code find squares each element list using loop creating list numbers numbers initializing variable that will store sum_ using loop iterate over list range( len(numbers) sum_ sum_ numbers[num] print("The squares sum_) Output: squares len() built-in method that returns total number items list tuple built-in function range(), which returns exact sequence iterate over, came handy here. Using else Statement with Loop Python allows connect else expression with loop expression. When else clause combined with loop, performed after circuit finished iterating over list. following instance shows otherwise statement conjunction with expression find students' marks from record. Code code print marks student from record student_name_1 'Itika' student_name_2 'Parker' Creating dictionary records students records {'Itika': 'Arshia': 'Peter': 46} marks( student_name a_student record: loop will iterate over keys dictionary a_student student_name: return records[ a_student break else: return f'There student name {student_name} records' giving function marks() name students print( f"Marks {student_name_1} are: marks( student_name_1 print( f"Marks {student_name_2} are: marks( student_name_2 Output: Marks Itika are: Marks Parker are: There student name Parker records Nested Loops have piece script that want number times then another piece script inside that script that want number times, employ "nested loop." When working with iterable lists, these widely utilized Python. Code import random numbers range(0, 11): numbers.append( random.randint( range( numbers: print( num, Output: Next TopicPython while loop prev next