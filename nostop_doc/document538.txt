next prev Tracemalloc module Python following tutorial, will discuss tracemalloc module Python programming language with some examples. Tracemalloc module that became available from Python version that allows monitor memory allocations Python code. allows take memory snapshots specific point, perform different statistics snapshots perform differences between snapshots order check object allocation between snapshots. following tutorial will help understand Application Programming Interface (API) tracemalloc module trace memory consumption Python code perform different operations. will also understand usage different classes, methods, attributes available through tracemalloc module using different examples. let's begun. Understanding Python tracemalloc module tracemalloc module debug utility order tool memory blocks allocated Python. offers following information: Traceback where object allocated Statistics allocated memory blocks filename line number: total size, number, average size allocated memory blocks Calculate differences between snapshots order detect memory leaks must start tracemalloc module early possible trace most memory blocks allocated Python programming language. make this possible setting PYTHONTRACEMALLOC environment variable with help tracemalloc command-line option. start() function tracemalloc module called runtime order start tracing Python memory allocations. default, trace allocated memory block only stores most recent frame frame). store frames startup setting PYTHONTRACEMALLOC environment variable using tracemalloc command line option. understand some classes methods that tracemalloc module offers. Understanding Classes Methods tracemalloc module These some classes methods that Python tracemalloc module provides: start() This method used begin tracing memory. takes integer parameter named nframe, which specifies number frames allocate call. default value take_snapshot() This method takes memory snapshot returns Snapshot object. statistics() access this method using Snapshot object accept input sort records tracing. This method returns iterator that list Statistic objects. single Statistic object details related single traceback (usually single line code) which involves number objects their sizes recorded that traceback. following list keys that this method accepts input: filename: This attribute allows method sort traces file names. lineno: This attribute allows method sort traces line number file. traceback: This attribute allows method sort traces trace taken order. traceback This attribute Statistic object used return object Traceback class. Traceback details associated with individual trace, which have multiple frames (Frame). format() This method used format traceback list lines that were traced this traceback. get_traceback_limit() This method used return integer specifying maximum number frames stored single traceback. specify total number maximum frames record traceback tracemalloc.start() method. get_object_traceback() This method accepts individual object input used return traceback object specifying where traceback this object taken. get_traced_memory() This method used return tuple integers specifying current size peak size block traced bytes. get_tracemalloc_memory() This method used return integer specifying memory used tracemalloc module bytes. is_tracing() This method used return Boolean value specifying whether tracing happening stopped. stop() This method used stop tracemalloc module from accepting traces. clear_traces() This method used clear traces taken from beginning start() method. necessary make sure that traces info would still available Snapshot objects taken; however, won't available call take_snapshot() method after this method. dump() This method accepts filename input store traces information. load() This method accepts filename input from which load traces information. DomainFilter This class allows filter traces addressing space objects. accepts arguments input. domain This argument accepts integer value specifying address space memory block. Python memory traces usually utilize integer however, number will varied inclusive This argument accepts Boolean value specifying whether include exclude traces mentioned domain attribute. Filter This class allows filter traces based combination filename, line number, domain. multiple parameters, shown below: domain This attribute accepts integer value specifying address space memory block. Python memory traces generally integer however, number will varied filename_pattern This attribute accepts string value specifying pattern which filenames will matched traces, based inclusive flag, they will included excluded. lineno This attribute accepts integer value specifying traces with that line numbers include. inclusive This attribute accepts Boolean value specifying whether include exclude traces mentioned domain, filename_pattern, lineno attributes. all_frames This attribute accepts Boolean flag specifying whether include frames trace not. compare_to() call this method snapshot object, passing another snapshot object order difference between snapshots. also accepts key_type parameter input that will utilize primary find difference between snapshots. will return object StatisticDiff class. This object information related differences. will understand usage above classes methods with some examples. Some examples tracemalloc module consider some examples demonstrating working classes methods tracemalloc module. Example following example, will understand start(), take_snapshot() statistics() method tracemalloc module. Code: import tracemalloc tm.start() listOne range(15000)] listTwo [n*n range(15000)] listThree [n*n*n range(15000)] tm.take_snapshot() stats ss.statistics("lineno"): print(stats) Output: D:\Python_programs\tracOne.py:7: size=583 KiB, count=14994, average=40 D:\Python_programs\tracOne.py:6: size=528 KiB, count=14984, average=36 D:\Python_programs\tracOne.py:5: size=522 KiB, count=14745, average=36 Explanation: above snippet code, have imported tracemalloc module. then began tracing starting using start() method then created three lists integers. have then taken memory snapshot printed list tracebacks collected that snapshot from beginning traceback. Example following example will understand methods like format(), get_traceback_limit(), get_object_traceback(), get_object_memory(), get_tracemalloc_memory(), is_tracing(). Code: import tracemalloc import numpy tm.start(25) listOne range(15000)] listTwo [n*n range(15000)] listThree [n*n*n range(15000)] listFour np.random.randint(1, 150, (1500,)) tm.take_snapshot() print("========== SNAPSHOT =============") stats ss.statistics("lineno"): print(stats) print(stats.traceback.format()) print("\n=========== USEFUL METHODS ===========") print("\nTraceback Limit tm.get_traceback_limit(), Frames") print("\nAllocation Location List tm.get_object_traceback(listFour)) print("\nTraced Memory (Current, Peak): tm.get_traced_memory()) tracemalloc.reset_peak() print("\nTraced Memory tracemalloc.get_traced_memory()) print("\nMemory Usage tracemalloc Module tm.get_tracemalloc_memory(), bytes") print("\nTracing Status tm.is_tracing()) Output: ========== SNAPSHOT ============= D:\Python_programs\tracTwo.py:8: size=583 KiB, count=14994, average=40 File "D:\\Python_programs\\tracTwo.py", line 8', listThree [n*n*n range(15000)]'] D:\Python_programs\tracTwo.py:7: size=528 KiB, count=14984, average=36 File "D:\\Python_programs\\tracTwo.py", line 7', listTwo [n*n range(15000)]'] D:\Python_programs\tracTwo.py:6: size=522 KiB, count=14744, average=36 File "D:\\Python_programs\\tracTwo.py", line 6', listOne range(15000)]'] D:\Python_programs\tracTwo.py:9: size=6544 count=3, average=2181 File "D:\\Python_programs\\tracTwo.py", line 9', listFour np.random.randint(1, 150, (1500,))'] <__array_function__ internals>:5: size=528 count=1, average=528 File "<__array_function__ internals>", line C:\Users\khans\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\LocalCache\local-packages\Python39\site-packages\numpy\core\fromnumeric.py:3051: size=520 count=1, average=520 File "C:\\Users\\khans\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\numpy\\core\\fromnumeric.py", line 3051', return _wrapreduction(a, np.multiply, 'prod', axis, dtype, out,"] <__array_function__ internals>:4: size=456 count=1, average=456 File "<__array_function__ internals>", line 4'] C:\Users\khans\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\LocalCache\local-packages\Python39\site-packages\numpy\core\fromnumeric.py:70: size=440 count=1, average=440 File "C:\\Users\\khans\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python39\\site-packages\\numpy\\core\\fromnumeric.py", line 70', passkwargs {k: kwargs.items()'] D:\Python_programs\tracTwo.py:11: size=424 count=1, average=424 File "D:\\Python_programs\\tracTwo.py", line 11', tm.take_snapshot()'] =========== USEFUL METHODS =========== Traceback Limit Frames Allocation Location List D:\Python_programs\tracTwo.py:9 Traced Memory (Current, Peak): (2000444, 2019653) Memory Usage tracemalloc Module 2585088 bytes Tracing Status True Explanation: above snippet code, have imported tracemalloc module. then began tracing starting using start() method then created four lists integers. have then taken memory snapshot performed different operations using methods mentioned above, returned information required pattern. Example following example, will understand implementation stop() method along with clear_traces() method. Code: import tracemalloc tm.start() listOne range(1500000)] listTwo [n*n range(15000)] listThree [n*n*n range(15000)] ss_1 tm.take_snapshot() print("================ SNAPSHOT =================") stats ss_1.statistics("lineno"): print(stats) listFour [n*n*n*n range(15000)] ss_2 tm.take_snapshot() print("\n================ SNAPSHOT =================") stats ss_2.statistics("lineno"): print(stats) tm.clear_traces() listFive [n*2 range(15000)] ss_3 tm.take_snapshot() print("\n================ SNAPSHOT =================") stats ss_3.statistics("lineno"): print(stats) print("\nTracing Status tm.is_tracing()) tm.stop() print("\nTracing Status tm.is_tracing()) try: print("\nTrying Take Snapshot After Tracing Stopped.") the_snap tm.take_snapshot() except Exception print("Exception Output: ================ SNAPSHOT ================= D:\Python_programs\tracThree.py:5: size=51.5 MiB, count=1499745, average=36 D:\Python_programs\tracThree.py:7: size=583 KiB, count=14994, average=40 D:\Python_programs\tracThree.py:6: size=528 KiB, count=14984, average=36 ================ SNAPSHOT ================= D:\Python_programs\tracThree.py:5: size=51.5 MiB, count=1499745, average=36 D:\Python_programs\tracThree.py:15: size=642 KiB, count=14998, average=44 D:\Python_programs\tracThree.py:7: size=583 KiB, count=14994, average=40 D:\Python_programs\tracThree.py:6: size=528 KiB, count=14984, average=36 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:226: size=896 count=3, average=299 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:173: size=816 count=2, average=408 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:505: size=656 count=3, average=219 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:423: size=576 count=4, average=144 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:533: size=576 count=1, average=576 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:498: size=528 count=3, average=176 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:560: size=472 count=2, average=236 D:\Python_programs\tracThree.py:12: size=456 count=1, average=456 D:\Python_programs\tracThree.py:13: size=448 count=1, average=448 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:59: size=440 count=1, average=440 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:535: size=416 count=1, average=416 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:207: size=416 count=1, average=416 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:53: size=416 count=1, average=416 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:501: size=408 count=1, average=408 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:499: size=168 count=1, average=168 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:193: size=144 count=3, average=48 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:67: size=128 count=2, average=64 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:315: size=104 count=2, average=52 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:485: size=64 count=1, average=64 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:484: size=64 count=1, average=64 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:54: size=64 count=1, average=64 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:558: size=56 count=1, average=56 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:26: size=56 count=1, average=56 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:212: size=37 count=2, average=18 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:503: size=28 count=1, average=28 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:502: size=28 count=1, average=28 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:58: size=24 count=1, average=24 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:21: size=24 count=1, average=24 ================ SNAPSHOT ================= D:\Python_programs\tracThree.py:25: size=526 KiB, count=14873, average=36 Tracing Status True Tracing Status False Trying Take Snapshot After Tracing Stopped. Exception tracemalloc module must tracing memory allocations take snapshot Explanation: above snippet code, have first taken snapshot after creation three lists integers. have then created another list taken snapshots again. have then cleared traces, which traces four lists created since beginning. have then created fifth list taken snapshot again. also understand from output that third snapshot information only about fifth list created traces before cleared. last, have also displayed usage stop() method. Example following example, will understand implementation dump() load() methods. Code: import tracemalloc tm.start() listOne range(15000)] listTwo [n*n range(15000)] listThree [n*n*n range(15000)] tm.take_snapshot() stats ss.statistics("lineno"): print(stats) ss.dump("snap.out") ssLoaded tm.Snapshot.load("snap.out") print("\nLoaded Snapshot From File stats ssLoaded.statistics("lineno"): print(stats) Output: D:\Python_programs\tracFour.py:7: size=583 KiB, count=14994, average=40 D:\Python_programs\tracFour.py:6: size=528 KiB, count=14984, average=36 D:\Python_programs\tracFour.py:5: size=522 KiB, count=14745, average=36 Loaded Snapshot From File D:\Python_programs\tracFour.py:7: size=583 KiB, count=14994, average=40 D:\Python_programs\tracFour.py:6: size=528 KiB, count=14984, average=36 D:\Python_programs\tracFour.py:5: size=522 KiB, count=14745, average=36 Explanation: above snippet code, have created three lists taken snapshot. have then printed statistics users. have then used dump() method store trace information snap.out file. have then used load() method load stored trace information from snap.out file printed statistics user. Example following example, will understand implementation DomainFilter Filter classes filtering traces from list traces recorded tracemalloc module. Code: import tracemalloc import numpy tm.start(10) listTwo [i*i range(15000)] listOne range(15000)] listThree [i*i*i range(15000)] listFour [i*2 range(15000)] listFive np.random.randint(1, 150, (1500, tm.take_snapshot() print("========== Original Snapshot ===========") stats ss.statistics("lineno"): print(stats) print("\n========= Filtered Snapshot =============") filterSS tm.DomainFilter(inclusive True, domain snapShot ss.filter_traces(filters [filterSS]) stats snapShot.statistics("lineno"): print(stats) filterSS tm.DomainFilter(inclusive False, domain snapShot ss.filter_traces(filters [filterSS]) print("\n========= Filtered Snapshot =============") stats snapShot.statistics("lineno"): print(stats) filterSS tm.Filter(inclusive True, filename_pattern "tracFive.py") snapShot ss.filter_traces([filterSS]) print("\n========= Filtered Snapshot Three =============") stats snapShot.statistics("lineno"): print(stats) filterSS tm.Filter(inclusive False, filename_pattern "tracFive.py") snapShot ss.filter_traces([filterSS]) print("\n========= Filtered Snapshot Four =============") stats snapShot.statistics("lineno"): print(stats) Output: ========== Original Snapshot =========== D:\Python_programs\tracFive.py:8: size=583 KiB, count=14994, average=40 D:\Python_programs\tracFive.py:6: size=528 KiB, count=14984, average=36 D:\Python_programs\tracFive.py:9: size=525 KiB, count=14872, average=36 D:\Python_programs\tracFive.py:7: size=522 KiB, count=14744, average=36 D:\Python_programs\tracFive.py:10: size=6544 count=3, average=2181 <__array_function__ internals>:5: size=528 count=1, average=528 C:\Users\khans\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\LocalCache\local-packages\Python39\site-packages\numpy\core\fromnumeric.py:3051: size=520 count=1, average=520 <__array_function__ internals>:4: size=456 count=1, average=456 C:\Users\khans\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\LocalCache\local-packages\Python39\site-packages\numpy\core\fromnumeric.py:70: size=440 count=1, average=440 D:\Python_programs\tracFive.py:12: size=424 count=1, average=424 ========= Filtered Snapshot ============= D:\Python_programs\tracFive.py:8: size=583 KiB, count=14994, average=40 D:\Python_programs\tracFive.py:6: size=528 KiB, count=14984, average=36 D:\Python_programs\tracFive.py:9: size=525 KiB, count=14872, average=36 D:\Python_programs\tracFive.py:7: size=522 KiB, count=14744, average=36 D:\Python_programs\tracFive.py:10: size=544 count=2, average=272 <__array_function__ internals>:5: size=528 count=1, average=528 C:\Users\khans\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\LocalCache\local-packages\Python39\site-packages\numpy\core\fromnumeric.py:3051: size=520 count=1, average=520 <__array_function__ internals>:4: size=456 count=1, average=456 C:\Users\khans\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\LocalCache\local-packages\Python39\site-packages\numpy\core\fromnumeric.py:70: size=440 count=1, average=440 D:\Python_programs\tracFive.py:12: size=424 count=1, average=424 ========= Filtered Snapshot ============= D:\Python_programs\tracFive.py:10: size=6000 count=1, average=6000 ========= Filtered Snapshot Three ============= ========= Filtered Snapshot Four ============= D:\Python_programs\tracFive.py:8: size=583 KiB, count=14994, average=40 D:\Python_programs\tracFive.py:6: size=528 KiB, count=14984, average=36 D:\Python_programs\tracFive.py:9: size=525 KiB, count=14872, average=36 D:\Python_programs\tracFive.py:7: size=522 KiB, count=14744, average=36 D:\Python_programs\tracFive.py:10: size=6544 count=3, average=2181 <__array_function__ internals>:5: size=528 count=1, average=528 C:\Users\khans\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\LocalCache\local-packages\Python39\site-packages\numpy\core\fromnumeric.py:3051: size=520 count=1, average=520 <__array_function__ internals>:4: size=456 count=1, average=456 C:\Users\khans\AppData\Local\Packages\PythonSoftwareFoundation.Python.3.9_qbz5n2kfra8p0\LocalCache\local-packages\Python39\site-packages\numpy\core\fromnumeric.py:70: size=440 count=1, average=440 D:\Python_programs\tracFive.py:12: size=424 count=1, average=424 Explanation: above snippet code, have understood utilization filters. first snapshot involves traces from memory blocks utilized Python. second snapshot involves traces memory blocks created Python. because NumPy built third snapshot involves entries where filename tracFive.py, fourth snapshot excludes entries with that file names. Example following example, will understand method comparing snapshots finding difference traces between them using compare_to() method. Code: import tracemalloc tm.start() listOne range(15000)] listTwo [n*n range(15000)] listThree [n*n*n range(15000)] ss_1 tm.take_snapshot() print("SNAPSHOT ONE") stats ss_1.statistics("lineno"): print(stats) listFour [n*n*n*n range(15000)] listFive [n*n*n*n*n range(15000)] print("\nSNAPSHOT TWO") ss_2 tm.take_snapshot() stats ss_2.statistics("lineno"): "tracSix.py" str(stats): print(stats) print("\nDIFFERENCE") diff ss_2.compare_to(ss_1, "lineno"): "tracSix.py" str(diff): print(diff) Output: SNAPSHOT D:\Python_programs\tracSix.py:7: size=583 KiB, count=14994, average=40 D:\Python_programs\tracSix.py:6: size=528 KiB, count=14984, average=36 D:\Python_programs\tracSix.py:5: size=522 KiB, count=14745, average=36 SNAPSHOT D:\Python_programs\tracSix.py:17: size=645 KiB, count=14998, average=44 D:\Python_programs\tracSix.py:16: size=642 KiB, count=14998, average=44 D:\Python_programs\tracSix.py:7: size=583 KiB, count=14994, average=40 D:\Python_programs\tracSix.py:6: size=528 KiB, count=14984, average=36 D:\Python_programs\tracSix.py:5: size=522 KiB, count=14745, average=36 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:226: size=848 count=2, average=424 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:173: size=816 count=2, average=408 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:533: size=576 count=1, average=576 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:498: size=528 count=3, average=176 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:423: size=512 count=3, average=171 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:505: size=488 count=2, average=244 D:\Python_programs\tracSix.py:12: size=456 count=1, average=456 D:\Python_programs\tracSix.py:13: size=448 count=1, average=448 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:59: size=440 count=1, average=440 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:535: size=416 count=1, average=416 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:207: size=416 count=1, average=416 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:53: size=416 count=1, average=416 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:501: size=408 count=1, average=408 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:193: size=144 count=3, average=48 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:560: size=48 count=1, average=48 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:315: size=40 count=1, average=40 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:212: size=37 count=2, average=18 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:503: size=28 count=1, average=28 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:502: size=28 count=1, average=28 DIFFERENCE D:\Python_programs\tracSix.py:17: size=645 (+645 KiB), count=14998 (+14998), average=44 D:\Python_programs\tracSix.py:16: size=642 (+642 KiB), count=14998 (+14998), average=44 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:226: size=848 (+848 count=2 (+2), average=424 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:173: size=816 (+816 count=2 (+2), average=408 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:533: size=576 (+576 count=1 (+1), average=576 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:498: size=528 (+528 count=3 (+3), average=176 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:423: size=512 (+512 count=3 (+3), average=171 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:505: size=488 (+488 count=2 (+2), average=244 D:\Python_programs\tracSix.py:12: size=456 (+456 count=1 (+1), average=456 D:\Python_programs\tracSix.py:13: size=448 (+448 count=1 (+1), average=448 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:59: size=440 (+440 count=1 (+1), average=440 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:535: size=416 (+416 count=1 (+1), average=416 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:207: size=416 (+416 count=1 (+1), average=416 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:53: size=416 (+416 count=1 (+1), average=416 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:501: size=408 (+408 count=1 (+1), average=408 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:193: size=144 (+144 count=3 (+3), average=48 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:560: size=48 (+48 count=1 (+1), average=48 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:315: size=40 (+40 count=1 (+1), average=40 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:212: size=37 (+37 count=2 (+2), average=18 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:503: size=28 (+28 count=1 (+1), average=28 C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.9_3.9.3312.0_x64__qbz5n2kfra8p0\lib\tracemalloc.py:502: size=28 (+28 count=1 (+1), average=28 D:\Python_programs\tracSix.py:7: size=583 count=14994 (+0), average=40 D:\Python_programs\tracSix.py:6: size=528 count=14984 (+0), average=36 D:\Python_programs\tracSix.py:5: size=522 count=14745 (+0), average=36 Explanation: above snippet code, have created three lists taken first snapshot. have then printed statistic information user. added more lists, took another snapshot, printed statistic information. last, have found difference between snapshots using compare_to() method printed that users. Example following example absolutely same previous example; however, only difference that will filter remove entries associated with tracemalloc module itself. Code: import tracemalloc tm.start() listOne range(15000)] listTwo [n*n range(15000)] listThree [n*n*n range(15000)] ss_1 tm.take_snapshot() print("SNAPSHOT ONE") stats ss_1.statistics("lineno"): print(stats) listFour [n*n*n*n range(15000)] listFive [n*n*n*n*n range(15000)] print("\nSNAPSHOT TWO") ss_2 tm.take_snapshot() filterSS tm.Filter(inclusive False, filename_pattern tm.__file__) ss_2 ss_2.filter_traces([filterSS]) stats ss_2.statistics("lineno"): print(stats) print("\nDIFFERENCE") diff ss_2.compare_to(ss_1, "lineno"): print(diff) Output: SNAPSHOT D:\Python_programs\tracSeven.py:7: size=583 KiB, count=14994, average=40 D:\Python_programs\tracSeven.py:6: size=528 KiB, count=14984, average=36 D:\Python_programs\tracSeven.py:5: size=522 KiB, count=14745, average=36 SNAPSHOT D:\Python_programs\tracSeven.py:16: size=645 KiB, count=14998, average=44 D:\Python_programs\tracSeven.py:15: size=642 KiB, count=14998, average=44 D:\Python_programs\tracSeven.py:7: size=583 KiB, count=14994, average=40 D:\Python_programs\tracSeven.py:6: size=528 KiB, count=14984, average=36 D:\Python_programs\tracSeven.py:5: size=522 KiB, count=14745, average=36 D:\Python_programs\tracSeven.py:12: size=456 count=1, average=456 D:\Python_programs\tracSeven.py:13: size=448 count=1, average=448 DIFFERENCE D:\Python_programs\tracSeven.py:16: size=645 (+645 KiB), count=14998 (+14998), average=44 D:\Python_programs\tracSeven.py:15: size=642 (+642 KiB), count=14998 (+14998), average=44 D:\Python_programs\tracSeven.py:12: size=456 (+456 count=1 (+1), average=456 D:\Python_programs\tracSeven.py:13: size=448 (+448 count=1 (+1), average=448 D:\Python_programs\tracSeven.py:7: size=583 count=14994 (+0), average=40 D:\Python_programs\tracSeven.py:6: size=528 count=14984 (+0), average=36 D:\Python_programs\tracSeven.py:5: size=522 count=14745 (+0), average=36 Explanation: above snippet code, have created three lists taken first snapshot. have then printed statistic information user. added more lists, took another snapshot, printed statistic information. have then defined filter using Filter class. have specified tracemalloc filename (tracemalloc.__file__) filename_pattern attribute Filter class with inclusive attribute False exclude entries with tracemalloc module. last, have found difference between snapshots using compare_to() method printed that users. Next TopicSplit, Sub, Subn functions module python prev next