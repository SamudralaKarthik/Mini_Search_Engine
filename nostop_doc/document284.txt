next prev Graphene Python Python considered among most beloved general-purpose programming languages because ease utilization simplicity. addition GraphQL, declarative query language Application Programming Interfaces server runtimes, pairs pretty well with Python. However, very small number comprehensive learning materials available there that provide programmers step-by-step breakdown utilization GraphQL with Python. Graphene among best libraries create endpoints GraphQL programming language like Python. dynamically advanced. contains reasonably entire helper libraries Django, SQLAlchemy, MongoDB. considerably effortless achieve something simple going. Documentation Graphene leaves desired. easy achieve something simple going GraphQL with help documentation; however, getting something hardened, production-ready, capable another story. following tutorial, will focus GraphQL with Python using Graphene library. before into that, briefly discuss goal requirements tutorial. Objective will build project based crawling service. will extraction library this project. This crawling service will submit client request following way: website(url: "https://www.javatpoint.com/python-tutorial") title image response from server will "data": "website": "title": "Learn Python Tutorial javatpoint", "image": "https://static.javatpoint.com/images/logo/jtp_logo", Each website will also involve description field. Setting environment With hypothesis that already have Python version available locally, first create virtual environment dependencies. order create one, begin with installing virtualenv shown below: Syntax: install virtualenv virtualenv Output: created virtual environment CPython3.9.0.final.0-64 45108ms creator CPython3Windows(dest=D:\Python\env, clear=False, no_vcs_ignore=False, global=False) seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=C:\Users\Mango\AppData\Local\pypa\virtualenv) added seed packages: pip==21.2.2, setuptools==57.4.0, wheel==0.36.2 activators BashActivator,BatchActivator,FishActivator,PowerShellActivator,PythonActivator activate virtual environment. syntax Windows, MacOS, Linux quite different. Windows: Syntax: env\Scripts\activate MacOS Linux: Syntax: source env/bin/activate Now, understand what required libraries project are. Extraction Graphene Flask-graphql Requests install them individually, using installer shown below. Syntax: install extraction install graphene install flask-graphql install requests install them group shown below: Syntax: install extraction graphene flask-graphql requests Crawling Extraction Before started with GraphQL, briefly understand following snippet code crawling extracting data from website. Example: importing required libraries import graphene import extraction import requests defining function extraction extract(myurl): myhtml requests.get(myurl).text extrctd extraction.Extractor().extract(myhtml, source_url myurl) print(extrctd) calling function extract('https://www.javatpoint.com/python-tutorial') Output: Explanation: above snippet code, have imported required libraries defined function extraction extract(). Inside function, have used requests module request details from stored those details variable named myhtml. have then used Extractor() function extraction module extract required data user printed them user. last, have called extract() function specifying want extract data from. observe that every extracted object generates different sections data available such title, url, image, description, feed. Schema GraphQL scheme present base each GraphQL. helps describing types, fields, objects exposed API. utilize Graphene library order describe schema object Python. write schema describing extracted website quite simple way, shown below: Example: importing graphene library import graphene defining class class my_Website(graphene.ObjectType): my_url graphene.String(required True) my_title graphene.String() my_description graphene.String() my_image graphene.String() Explanation: above snippet code, have imported graphene library defined class myWebsite that inherits ObjectType class graphene library. This ObjectType acts building block utilized order define relationship between Fields Schema retrieving their data. Inside class, have defined different fields used String() graphene library describe types fields; however, each field could another object have described several other lists, scalars, enums, many more. thing which quite unexpected that also need write schema describing query will make order retrieve these objects: Example: importing graphene library import graphene defining class class my_Query(graphene.ObjectType): website1 graphene.Field(my_Website, my_url graphene.String()) defining function resolv_website(self, info, my_url): extrctd extract(my_url) return my_Website(my_url my_url, my_title extrctd.title, my_description extrctd.description, my_image extrctd.image, Explanation: above snippet code, website1 object type that support querying against, my_url parameter that will pass along resolution function, then website1 object calls resolv_website function each request. last step create instance graphene.Schema, which will pass server order describe have created. consider following snippet code same. Example: my_schema graphene.Schema(query my_Query) With that done, have created schema project successfully. complete code same shown below: File: my_schema.py importing required libraries import graphene import extraction import requests defining function extraction extract(my_url): myhtml requests.get(my_url).text extrctd extraction.Extractor().extract(myhtml, source_url my_url) print(extrctd) return extrctd defining class class my_Website(graphene.ObjectType): my_url graphene.String(required True) my_title graphene.String() my_description graphene.String() my_image graphene.String() defining class class my_Query(graphene.ObjectType): website1 graphene.Field(my_Website, my_url graphene.String()) defining function resolv_website(self, info, my_url): extrctd extract(my_url) return my_Website(my_url my_url, my_title extrctd.title, my_description extrctd.description, my_image extrctd.image, my_schema graphene.Schema(query my_Query) Server that have written schema, begin serving over HTTP with help flask flask-graphql. consider following snippet code order create server. File: my_server.py importing required library from flask import Flask from flask_graphql import GraphQLView import my_schema using Flask() function create my_app Flask(__name__) setting rules my_app.add_url_rule( '/', view_func GraphQLView.as_view('graphql', schema my_schema, graphiql True) my_app.run() Explanation: above snippet code, have imported required libraries addition file named my_schema that created earlier. have then used Flask() function specifying parameter __name__ create application. have also added different rules using add_url_rule() function, where have specified different parameters used run() function last execute application. server using following syntax: Syntax: python my_server.py Once entered above syntax, server will begin running localhost:5000 http://127.0.0.1:5000/. output same shown below: Output: Serving Flask "my_server" (lazy loading) Environment: production WARNING: This development server. production deployment. production WSGI server instead. Debug mode: Running http://127.0.0.1:5000/ (Press CTRL+C quit) Client Even though they exist, require special GraphQL client order perform requests against API; stick HTTP clients that used with utilizing requests following example. File: my_client.py importing requests library import requests defining query my_query website(url: "https://www.javatpoint.com/python-tutorial") title image description defining response my_response requests.post("http://127.0.0.1:5000/", params {'query': my_query}) print(my_response.text) Output: "data": "website": "title": "Learn Python Tutorial javatpoint", "image": "https://static.javatpoint.com/images/logo/jtp_logo", "description": "Learn Python Tutorial beginners profession" Explanation: above snippet code, have imported requests library defined query my_query that will sent server. have then defined variable my_response, which will store data returned form response from server. last, have printed response user. also customize contents my_query variable order retrieve various fields even utilize things such aliases order retrieve more than object time. Introspection Among most powerful aspects GraphQL, servers support introspection. Introspection allows both humans well automated tools order understand available objects operations. good examples this that while running example built, navigate http://127.0.0.1:5000 utilize GraphiQL order test directly. These capabilities restricted GraphiQL, integration also done with help same query interface would utilize query API. consider simple example where about available queries exposed sample service: __type(name: "Query") fields name args name server reply would "data": "__type": "fields": "name": "website", "args": [{ "name": "url" Many other queries based introspection available, which quite clumsy write; however, they depict tremendous amount power tool builders. Next TopicName Mangling Python prev next