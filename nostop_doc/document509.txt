next prev Building Telegram using Python Chatbots generally touted revolution manner users interact with technology businesses. They have simpler interface compared with traditional applications, they only need users chat. chatbots meant understand perform tasks user demands from them, least theory. Many industries shifting their customer service chatbot systems because huge drop cost compared actual human beings robustness constant availability. Chatbots provide degree user support without substantial additional cost. present day, chatbots utilized multiple scenarios, ranging from menial activities like displaying time weather data more complex operations like rudimentary medical diagnosis customer communication/support. devise chatbot that supports customers when they specific questions about product. build personal assistant chatbot that handle fundamental activities work reminder remind different day-to-day activities like time head meeting exercise. There various options available when comes where deploy chatbot, most common utilizations social media platforms, most people utilize them general basis. same said instant messaging applications, though with some caveats. Telegram among more famous Instant Messaging (IM) platforms these days, enables store messages cloud instead just device, boasts good multi-platform support, have Telegram Android, iOS, Windows, just about other platform that support version. Building chatbot Telegram quite easy requires steps that take little time complete. integrate chatbot Telegram groups channels, also works own. following tutorial, will understand create telegram with help Python programming language. before started, understand basic requirement project. Requirements Telegram Account: have Telegram application installed, download from Google Play Store Apple Store. Once downloaded, have create account using mobile number, just like WhatsApp. python-telegram-bot module: this project, will need module known python-telegram-bot. This library offers pure Python interface Telegram API. compatible with Python version 3.6.8+. addition pure implementation, this library features several high-level classes make development bots easy simple. These classes stored "telegram.ext" submodule. more information, check their official GitHub repo. Install python-telegram-bot Module? order install Python module, need 'pip', framework manage packages required install modules from trusted public repositories. Once have 'pip', install python-telegram-bot module using command from Windows command prompt (CMD) terminal shown below: Syntax: python.exe install python-telegram-bot Verifying Installation Once module installed, verify creating empty Python program file writing import statement follows: File: verify.py import telegram Now, save above file execute using following command terminal: Syntax: python verify.py above Python program file does return error, module installed properly. However, case where exception raised, reinstalling module, also recommended refer official documentation module. Steps create first will follow some steps order create first that shown below: Step After creating account Telegram, will search search "Botfather". Step Now, will click "BotFather" (first result) type command /newbot. Step will then give unique name bot. Once name BotFather will username. Then also give unique name BUT remember username must with bot. example, telebot, mybot, welcomebot, etc. Step After providing unique name gets accepted, will message something like following: above image, token will different everyone; will utilize this token Python code order make changes make just like need, different commands Understanding Stepwise implementation Python code following section, will understand stepwise implementation telegram Python programming language. These steps include: Step Importing required libraries Step Defining functions operation Step Adding Handlers handle messages commands Step Running Importing required libraries will start importing libraries functions required create telegram bot. brief usage these functions follows: Updater This function will consist received from BotFather specify which adding functionalities with help Python code. Update This function will help invoke every time receives update, i.e., message command, send user message. CallbackContext will utilize functionality this function directly code; however, required while adding dispatcher (and will work internally). CommandHandler This Handler class utilized order handle command sent user bot, command must begin with "/". example, "/start", "/help" many more. MessageHandler This Handler class utilized order handle normal message sent user bot. Filters This function will allow filter normal text, commands, images, etc., from sent message. consider following snippet code demonstrating same: File: teleBot.py importing required libraries functions from telegram.ext.updater import Updater from telegram.update import Update from telegram.ext.callbackcontext import CallbackContext from telegram.ext.commandhandler import CommandHandler from telegram.ext.messagehandler import MessageHandler from telegram.ext.filters import Filters Explanation: have imported required libraries functions above snippet code. Defining functions operation Start function: This function will show first conversation; name something else; however, message inside will sent user whenever they press "start" very beginning. general, should something like "Hello! Welcome Bot.", etc. start message. Help function: Generally, this function, should kind help user might require, i.e., commands understands, information associated with bot, many more). consider following snippet code demonstrating same: File: teleBot.py the_updater Updater("provide token from BotFather", use_context True) the_start(update: Update, context: CallbackContext): update.message.reply_text( "Hello sir, Welcome TelePy. Please write /help commands available." the_help(update: Update, context: CallbackContext): update.message.reply_text( """Available Commands /youtube youtube /linkedin LinkedIn profile /gmail gmail /jtp JavaTpoint.com URL""") Explanation: above snippet code, have used Updater() function provided token received from BotFather. have then defined functions the_start the_help, including messages displayed user. will some more functionalities Bot. consider following snippet code demonstrating same: File: teleBot.py gmailURL(update: Update, context: CallbackContext): update.message.reply_text( "provide gmail address here (For example, example@gmail.com)" youtubeURL(update: Update, context: CallbackContext): update.message.reply_text( "Link YouTube https://www.youtube.com/" linkedInURL(update: Update, context: CallbackContext): update.message.reply_text( "URL LinkedIn Profile https://www.linkedin.com/username/" jtpURL(update: Update, context: CallbackContext): update.message.reply_text( "URL official website https://www.javatpoint.com/" unknownCommmand(update: Update, context: CallbackContext): update.message.reply_text( "Sorry '%s' invalid command" update.message.text unknownText(update: Update, context: CallbackContext): update.message.reply_text( "Unfortunately, system cannot recognize you, said '%s'" update.message.text Explanation: above snippet code, have added different functions. These functions include open Gmail, YouTube, open LinkedIn Profile, last Javatpoint.com official website. These MANDATORY functions, kind functions their reply_text their preferences; these only illustrating. Here, have also defined function unknownText that will send message written inside whenever receives some unknown messages. have also added function unknownCommand that will allow filter unknown commands sent user reply message written within Adding Handlers handle messages commands will using add_handler() function handle different commands bot. Here following snippet code that demonstrates same: File: teleBot.py adding handler handle messages commands the_updater.dispatcher.add_handler(CommandHandler('start', the_start)) the_updater.dispatcher.add_handler(CommandHandler('youtube', youtubeURL)) the_updater.dispatcher.add_handler(CommandHandler('help', the_help)) the_updater.dispatcher.add_handler(CommandHandler('linkedin', linkedInURL)) the_updater.dispatcher.add_handler(CommandHandler('gmail', gmailURL)) the_updater.dispatcher.add_handler(CommandHandler('jtp', jtpURL)) the_updater.dispatcher.add_handler(MessageHandler(Filters.text, unknownCommmand)) Filtering unknown commands the_updater.dispatcher.add_handler(MessageHandler(Filters.command, unknownCommmand)) Filtering unknown messages the_updater.dispatcher.add_handler(MessageHandler(Filters.text, unknownText)) Explanation: have used add_handler() function above snippet code. Within this function, have used CommandHandler() function that gets command from user, return, reply generated with message enclosed within function. Running will start_polling() function bot. consider following snippet code demonstrating same: File: teleBot.py running the_updater.start_polling() Explanation: have used start_polling() function above snippet code. Whenever start polling, will active, will look message sent users, matches command specified there, will reply accordingly. Now, before output project, complete code provided next section. Complete Python Code complete Python code create Telegram shown below: File: teleBot.py importing required libraries functions from telegram.ext.updater import Updater from telegram.update import Update from telegram.ext.callbackcontext import CallbackContext from telegram.ext.commandhandler import CommandHandler from telegram.ext.messagehandler import MessageHandler from telegram.ext.filters import Filters adding different functions the_updater Updater("provide token from BotFather", use_context True) the_start(update: Update, context: CallbackContext): update.message.reply_text( "Hello sir, Welcome TelePy. Please write /help commands available." the_help(update: Update, context: CallbackContext): update.message.reply_text( """Available Commands /youtube youtube /linkedin LinkedIn profile /gmail gmail /jtp JavaTpoint.com URL""") gmailURL(update: Update, context: CallbackContext): update.message.reply_text( "provide gmail address here (For example, example@gmail.com)" youtubeURL(update: Update, context: CallbackContext): update.message.reply_text( "Link YouTube https://www.youtube.com/" linkedInURL(update: Update, context: CallbackContext): update.message.reply_text( "URL LinkedIn Profile https://www.linkedin.com/username/" jtpURL(update: Update, context: CallbackContext): update.message.reply_text( "URL official website https://www.javatpoint.com/" unknownCommmand(update: Update, context: CallbackContext): update.message.reply_text( "Sorry '%s' invalid command" update.message.text unknownText(update: Update, context: CallbackContext): update.message.reply_text( "Unfortunately, system cannot recognize you, said '%s'" update.message.text adding handler handle messages commands the_updater.dispatcher.add_handler(CommandHandler('start', the_start)) the_updater.dispatcher.add_handler(CommandHandler('youtube', youtubeURL)) the_updater.dispatcher.add_handler(CommandHandler('help', the_help)) the_updater.dispatcher.add_handler(CommandHandler('linkedin', linkedInURL)) the_updater.dispatcher.add_handler(CommandHandler('gmail', gmailURL)) the_updater.dispatcher.add_handler(CommandHandler('jtp', jtpURL)) the_updater.dispatcher.add_handler(MessageHandler(Filters.text, unknownCommmand)) Filtering unknown commands the_updater.dispatcher.add_handler(MessageHandler(Filters.command, unknownCommmand)) Filtering unknown messages the_updater.dispatcher.add_handler(MessageHandler(Filters.text, unknownText)) running the_updater.start_polling() Output: Next TopicWeb2py Framework Python prev next