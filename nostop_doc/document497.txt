next prev Modulo String Formatting Python this tutorial will learn about Modulo operator string formatting Python. users writing contemporary Python code using Python they will need format their strings using Python string formatters like f-strings. But, they working Python codebases, it's likely into strings that strings modulo operators formatting strings. users writing reading Python code, it'll helpful they familiar with this method. Since syntax still Python it's possible find developers using latest Python codebases. this tutorial, we'll discussing can: Make modulo operator format strings. Convert values specific kinds before incorporating values into strings. must specify what vertical space formatted value takes Adjust display's appearance with flags conversion. dictionary mapping specify values, instead tuples. users familiar with printf() family functions Perl well Java, they will notice that these available Python. But, there's quite some resemblance printf() string modulo operator. user have already been familiar with using printf(), many functions below will familiar. However, case they unfamiliar with printf(), don't concerned! There need prior experience with printf() master modulo string formatting Python. Modulo Operator String Formatting Python have probably heard modulo operator previously with numbers which case calculates remaining from division. Example: Output: String operands used format strings, modulo operators perform distinct functions: string formatting. Here's syntax string modulo: <format_string> <values> left side operator string that contains conversion specifier more them. right side, <values> inserted into <format_string>, replace converter specifiers. resultant formatted string result query. Here, will start demonstrating print() display formatted string through String Modulo Operator. Example: print("%d cost $%.2f" (12, "apples", 3.44)) Output: apples cost $3.44 Alongside being symbol string modulo operation itself, character also signifies beginning conversion specifier format string. this instance, there three them: %.2f. output program, Python transformed each items from tuple into string then inserted into format string instead appropriate conversion specification: first element within tuple number numerical value that replaces character string's format. next element value string "apples", which replacement final floating number 3.44, which replaces %.2f. string that created apples that cost $3.44, demonstrated following diagram: there multiple values same tuple, they should contained tuple, shown previous example. there only value, write without parentheses surrounding Example: print("Hello, website name %s." "JavaTpoint") Output: Hello, website name JavaTpoint. Also, note that string modulo operations isn't just used printing. also format values well then assign them different strings variable. Example: welcome_sentence "Hello, website name %s." "JavaTpoint" welcome_sentence Output: Hello, website name JavaTpoint. users familiar with functions associated with printf() programming language, They will probably observe format syntax modulo string formatting above akin sprintf(). not, don't worry! Conversion Specifier various components conversion specifier included within string format. They determine format values when Python inserts string format. conversion specifier starts with percentage character consist several elements specific order: %[<flags>][<width>][.<precision>]<type> percentage character <type> component both required. other components, which shown brackets, important. following table summarizes functions each part conversion specifier's Component Meaning Introduces conversion specifier <flags> Indicates more flags that exert finer control over formatting <width> Specifies minimum width formatted result .<precision> Determines length precision floating-point string output <type> Indicates type conversion performed Convert Values using Conversion Type last element conversion specification, only requirement that sole part, with exception introductory character: %[<flags>][<width>][.<precision>]<type> This determines which type conversion Python does value before entering format string. Here's table with various types conversions that used: <type> Conversion Type Decimal integer Hexadecimal integer Octal integer Floating-point notation Floating-point notation Single character String Single '%' character next sections, will learn these types conversions. Integer Conversion Types integer values correspond conversion types. will function same way. three convert corresponding argument into string representation decimal integer. Example: "%d, (123, 123, 123) Output: '123, 123, 123' "%d, (-123, -123, -123) Output: '-123, -123, -123' choose have value positive negative. value negative, will replaced with minus symbol types conversions convert string representing hexadecimal number value. converts into string representation octal integer-valued. Example: "%x, %X" (252, 252) Output: 'd4, D4' Input: "%o" Output: '14' Lowercase will produce lowercase output. Uppercase will produce upper-case output. have additional control over final format using conversion flags. Floating-Point Conversion Types Conversion types create string representation floating-point number. Whereas produce string that represents (scientific) notation. Example: "%f, %F" (2.132435, 2.13) Output: '3.141590, 3.140000' Input: "%e, %E" (1010.0, 101.0) Output: '1.010000e+03, 1.010000E+02' Lowercase generate lowercase output. Uppercase creates uppercase output. choose from floating-point output depending magnitude value exponent component. Example: "%g" 4.12 Output: '4.12' Input: "%g" 0.00000007 Output: '7e-08' Input: "%g" 0.00000007 Output: '7E-08' output same exponent lower than less than. It's same thing Like other floating-point conversion types, produces lowercase output, produces higher case output. Character Conversion Types conversion type inserts character. value corresponding character integer single character string. Example: "%c" Output: Input: "%c" Output: Python will convert integer printable character supply This conversion type also supports conversion Unicode characters. Example: "%c" 8732 Output: '∜' user also pass code ASCII Unicode order render properly formatted their string. conversion types produces string output using built-in functions str() repr() asii(). Example: "%s" "Coffee Output: 'Coffee ☕' Input: "%r" "Coffee Output: "'Coffee ☕'" Input: "%a" "Coffee Output: "'Coffee \\u2615\\ufe0f'" When user their code, Python converts Unicode characters into their ASCII representation. user control padding justification string outputwith <width> .<precision> conversion specifier components, will next section. Literal Percent Character (%%) insert percent character into output specifying consecutive percent characters format string %%). first character format string introduces conversion specify while second character (code>%%/code>) specifies that conversion type will This formatting will result percent characters being included output. Example: %d%% today only!" (10, "Apples") Output: Apples today only!' This code example shows types conversion: First (%d) decimal integer conversion type. Second (%%) literal percent character that renders Please note that Conversion type doesn't require <values> shown right string modulo operator (10, "Apples" This conversion type used escape percent characters event that have render literal percent string. Align Data Horizontally using Width Precision <width> .<precision> components middle specification conversion: %[<flags>][<width>][.<precision>]<type> They used separately tandem with with each. They determine amount horizontal space that formatted value takes altering either padding string length values Python displays. <width> Component minimum size field makes <width> components. When output shorter than <width> then default right-justified field padded using ASCII space characters left. Example: "%4s" "foo" Output: foo' Input: "%4d" Output: "foo" first these strings. length three characters. Since user using <width> convert specifying element, Python adds whitespace characters before including "foo" make string with characters. second scenario, user chooses one-digit number input request string length characters. Thus, Python again adds whitespace characters before inserting strings that represent number create final string with overall length characters. alter padding character Python should make length output exceeds length input, does have effect. Example: "%4d" 3241 Output: '3241' Input: "%d" 3241 Output: '3241' Input: "%2s" "JavaTpoint" Output: 'JavaTpoint' Input: "%s" "JavaTpoint" Output: 'JavaTpoint' each examples, indicates width field However, since values asking Python write greater than characters, this results identical when don't provide <width> way. .<precision> Component .<precision> conversion specifier component influences floating-point type conversion types conversion characters. floating-point conversion types Determine many digits following decimal point. Example: "%.2f" 213.73571 Output: '213.74' Input: "%.2e" 213.73571 Output: '2.14e+02' floating-point conversion types, well determines number significant numbers prior following decimal point. Example: "%.2g" 213.73571 Output: '2.1e+02' String values formatted using Types character conversion shortened lengths specified .<precision> component. Example: "%.4s" "JavaTpoint" Output: 'Java' this instance, will need determine length input value "JavaTpoint" eight characters. However, have .<precision> Therefore, Python will only display initial four characters string input. user will likely <width> .<precision> Also, they used together. Example: "%8.3f" 213.73571 Output: 213.736' Input: "%8.3s" "JavaTpoint" Output: Jav' mention both <width> .<precision> with asterisk character serve placeholders. this, Python takes value these placeholders from items within tuple. Example: "%*d" 141) Output: 141' Input: "%.*d" Output: '000000013' Input: "%*.*d" 123) Output: 0141' unlikely that will need this feature value unchanging value. There's difference functionality between using placeholders like above example directly using value. Example: "%10d" Output: 14' Input: "%.10d" Output: '0000000014' Input: "%10.5d" Output: 00014' Utilizing placeholder asterisks more appealing when define width precision with variables. Example: range(3): int(input("Enter width: print("[%*s]" "ABC")) Output: Enter width: ABC] Enter width: [ABC] Enter width: ABC] This syntax width precision time execution, which means that they different from next. Fine-Tune Output with Conversion Flags also specify conversion flags middle character: character: %[<flags>][<width>][.<precision>]<type> They alter display specific kinds conversions more specific detail. <flag> component conversion specifier include more letters listed table below: Character Controls Display decimal base point floating integer values Padding values that smaller than field width specified Validation fields that smaller than field width specified display leading sign numerical values (space) display leading sign numbers Hash Flag flag allows base information displayed formatted output hexadecimal octal conversion types. those using kind conversion, this flag will leading "0o". When comes those using well kinds conversions, this flag will introductory "0x" "0X". Example: "%#o" Output: '0o14' Input: "%#x" "%#X" Output: ('0xc', '0XC') flag ignored decimal conversion types. Flag flag does apply when using type decimal converters such decimal conversion type u. number flag causes output contain decimal point floating-point values. Normally, floating-point values have decimal mark event that there aren't digits following them. This flag required include addition decimal number. Example: "%.0f" Output: '412' Input: "%#.0f" Output: '412.' Input: "%.0e" Output: '4e+02' Input: "%#.0e" Output: '4.e+02' requirement include decimal points employing flag. Number flag also possible display values with Notation. This demonstrated code example. Zero Flag formatted numeric value smaller than dimension field size, standard behaviour cover field ASCII spaces right side number. flag option causes padding using characters instead. Example: "%04d" Output: '0234' Input: "%08.2f" Output: '00003.20' flag used types numeric conversions: Hyphen-Minus Flag value formatted formatted form less than specified field's width, it's normally right-justified within field. this case, hyphen -) flag will cause value left-justified field instead. Example: "%-5d" Output: '234 Input: "%-8.2f" 234.3 Output: '234.30 Input: "%-*s" "ABC") Output: 'ABC possible utilize flag (-)to specify three types string conversion: addition other types numeric conversion. type numeric, both zero character occur, considered. Plus Flag default, positive numerical values include leading sign character. addition, flag added with plus symbol +) left numeric output. Example: "%+d" Output: '+4' Input: "%+5d" Output: +4' Input: "%5d" Output: compare outputs, possible that Python uses character have added using this flag into consideration calculating width output. This flag isn't affected negative numerical values, usually containing leading minus Similar that plus symbol, Python also considers plus character when calculating size output. Space Character Flag Space character flag extra space character front positive numeric values: Output: Like that flag does affect negative numeric values, which always accompanied underlying zero characters Example: Output: Input: Output: '-3' Input: "%d" Output: '-3' flags well flag space, will assist aligning positive negative numbers consistently. Specify Values Dictionary Mapping define format string inserted inside string format dictionary rather than Tuple. this case, every convert specifier must include dictionary-related keys within parentheses immediately after character. Example: cost $%.2f" "apples", 3.74) Output: apples cost $3.74' Input: data {"quantity": "item": "apples", "price": 3.74} template "%(quantity)d %(item)s cost $%(price).2f" template data Output: apples cost $3.74' With this method, define values inserted sequence: data {" quantity": "item": "apples", "price": 3.74} ad_1 "%(quantity)d %(item)s cost $%(price).2f" ad_1 data Output: apples cost $3.74' Input: ad_2 "You'll $%(price).2f %(item)s, %(quantity)d" ad_2 data Output: "You'll $3.74 apples, 4" conversion specifier components that listed below-- <flags>, <width>, .<precision> still working same when entered values using Tuple. possible them define dictionary dictionary: "Quantity: %(quantity)03d" data Output: 'Quantity: 004' Input: "Item: %(item).4s" data Output: 'Item: apple' code snippet example above, we've made flags accompanied first example with estimated value second example. Input values defined using dictionary mapping particularly helpful those want specify input values just once then change order which displayed different outputs. Conclusion have gained great understanding string modulo operator. It's older formatting technique used that used Python. Since this technique still working widely employed within Python it's helpful familiar with basics this particular syntax. this course, have learned Make modulo operator format strings. Modulo operator format strings. formatting strings Convert values specific kinds before insertion into string Indicate what horizontal area which formatted value occupies Adjust display's appearance with flags conversion dictionary mapping specify values. Dictionary mapping instead tuples. Next TopicCounters Python Initialize Update prev next