Python Openpyxl this tutorial, will learn about following topics: Openpyxl Introduction Openpyxl Working Process Openpyxl Installation Openpyxl Write Data Cell Openpyxl Reading Excel File Openpyxl Read Data from Cell Openpyxl Read Multiple Cells Openpyxl Sheets Openpyxl Filter sort data Openpyxl Merging cells Openpyxl Append Values Openpyxl Iterate Column Openpyxl Iterate rows Openpyxl Adding chart Excel file Openpyxl Adding Image Python Openpyxl Introduction Python provides Openpyxl module, which used deal with Excel files without involving third-party Microsoft application software. using this module, have control over excel without open application. used perform excel tasks such read data from excel file, write data excel file, draw some charts, accessing excel sheet, renaming sheet, modification (adding deleting) excel sheet, formatting, styling sheet, other task. Openpyxl very efficient perform these tasks you. Data scientists often Openpyxl perform different operations such data copying data mining well data analysis. Openpyxl Working Process Openpyxl library used write read data excel file many other tasks. excel file that operation called Workbook that contains minimum Sheet maximum tens sheets. Sheets consist Rows (horizontal series) starting from Columns (vertical series) starting from column together make grid form cell that store some data. Data type, such numeric, string. Openpyxl provides flexibility read data from individual cell write data Installation Openpyxl above section, have discussed openpyxl briefly working process. order Openpyxl, should have Python openpyxl 2.6.2 installed system. Let's start working with openpyxl installing openpyxl using following command: install openpyxl xlsx extension spreadsheet file. xlsx file supports macros. Let's understand basic operation related excel file. Consider following code: from openpyxl import Workbook import time Workbook() sheet wb.active sheet['A1'] sheet['A2'] "Devansh" sheet['A3'] 41.80 sheet['A4'] time.strftime("%x") sheet['A5'] wb.save("sample_file.xlsx") Output: above code, have written data into five cells A1, A2, A3, A4, A5. These cells consist different types values. have imported Workbook class from openpyxl module. workbook class container that contains parts document. Here have defined workbook. least sheet always made with workbook. Workbook() location active sheet. sheet['A1'] sheet['A2'] 'Devansh' have saved data sample_file.xlsx file using save() method. Openpyxl Write Data Cell data excel file using following Python code. First, will import load_workbook function from openpyxl module, then create object file pass filepath argument. Consider following code: from openpyxl import load_workbook load_workbook(r'C:\Users\DEVANSH SHARMA\Desktop\demo.xlsx') sheet wb.active sheet['A1'] 'Devansh Sharma' sheet.cell(row=2, column=2).value wb.save(r'C:\Users\DEVANSH SHARMA\Desktop\demo.xlsx') Output: Openpyxl Append values Openpyxl provides append() method, which used append group values. append type value. These values appended bottom current working sheet. Consider following code: from openpyxl import Workbook Workbook() sheet wb.active data (11, 50), (81, 82), (20, 72), (21, 60), (28, 49), (74, 53), ("Peter", 'Andrew',45.63) data: sheet.append(i) wb.save('appending_values.xlsx') Output: Openpyxl Read Data from cell read data that have previously written cell. There methods read cell, firstly access cell name, secondly, access cell() function. example, reading data from sample_file.xlrs file. import openpyxl openpyxl.load_workbook('sample_file.xlsx') sheet wb.active sheet['A1'] sheet['A2'] #using cell() function sheet.cell(row=3, column=1) print("The first cell value:",x1.value) print("The second cell value:",x2.value) print("The third cell value:",x3.value) Output: first cell value: second cell value: Devansh third cell value: 41.8 Openpyxl Read multiple cells read values from multiple cells. following example, have marks.xlsx named excel file will read each cell file using range operator. Let's have look following program: import openpyxl openpyxl.load_workbook('marks.xlsx') sheet wb.active cells sheet['A1','B7'] cells behave like range operator i1,i2 cells: print("{0:8} {1:8}".format(i1.value,i2.value)) Output: Student_name Marks Tony Stark Loki Oddin Nick Fury Samaul Peter Parkar Openpyxl Iterate rows openpyxl provides iter_row() function, which used read data corresponding rows. Consider following example: from openpyxl import Workbook Workbook() sheet wb.active rows (90, 44), (81, 16), (23, 87,27), (65, 53), (42, 44), (34, rows: sheet.append(row) sheet.iter_rows(min_row=1, min_col=1, max_row=6, max_col=4): cell row: print(cell.value, end=" print() book.save('iter_rows.xlsx') Output: Openpyxl Iterate Column openpyxl provides iter_col() method which return cells from worksheet columns. Consider following example: from openpyxl import Workbook book Workbook() sheet book.active rows (90, 44), (81, 16), (23, 27), (65, 53), (42, 44), (34, rows: sheet.append(row) sheet.iter_cols(min_row=1, min_col=1, max_row=6, max_col=3): cell row: print(cell.value, end=" print() book.save('iterbycols.xlsx') Output: Openpyxl Sheets know that each workbook have multiple sheets. First, need create more than sheet single workbook then access those excel sheets using Python. following example, have created workbook with three sheets: import openpyxl openpyxl.load_workbook('dimension_1.xlsx') #Getting list sheet available workbook print(wb.get_sheet_names()) Returning object active_sheet wb.active print(type(active_sheet)) Title sheet sheet wb.get_sheet_by_name("Monday") print(sheet.title) Output: ['Sheet', 'Sunday', 'Monday', 'Tuesday', 'Wednesday'] <class 'openpyxl.worksheet.worksheet.Worksheet'> Monday will look like following image. Openpyxl filter sort data auto_filter attribute used filtering sorting conditions. Consider following code: from openpyxl import Workbook Workbook() sheet wb.active sheet['A3'] sheet['B3'] row_count (93,45), (23,54), (80,43), (21,12), (63,29), (34,15), (80,68), (20,41) row_count: sheet.append(row) print(sheet.dimensions) a1,a2 sheet[sheet.dimensions]: print(a1.value, a2.value) sheet.auto_filter.add_sort_condition('B2:B8') sheet.auto_filter.add_filter_column(1, ['40', '26']) wb.save('dimension_1.xlsx') Output: A3:B11 Openpyxl Merging cell merge cell using merge_cells() method. When merge cells, top-left removed from worksheet. openpyxl also provides unmerged_cells() method unmerge cell. Consider following code: from openpyxl.styles import Alignment Workbook() sheet wb.active sheet.merge_cells('A1:B2') cell sheet.cell(row=1, column=1) cell.value 'Devansh Sharma' cell.alignment Alignment(horizontal='center', vertical='center') wb.save('merging.xlsx') Output: freezing panes simply mean freeze area worksheet visible while scrolling other parts worksheet. useful feature where display leftmost column screen. this passing cell name freeze_panes variable. unfreeze panes, freeze_panes 'None'. Consider following code: from openpyxl import Workbook from openpyxl.styles import Alignment Workbook() sheet wb.active sheet.freeze_panes 'A1' wb.save('freez_cells.xlsx') Output: above code scroll worksheet. Openpyxl formulas write formula into cell. These formulas used perform operations excel file. After writing cell execute from workbook. Consider following example: from openpyxl import Workbook Workbook() sheet wb.active rows_count (14, 27), (22, 30), (42, 92), (51, 32), (16, 60), (63, rows_count: sheet.append(i) cell sheet.cell(row=7, column=3) cell.value "=SUM(A1:B6)" cell.font cell.font.copy(bold=True) wb.save('formulas_book.xlsx') Output: Openpyxl Cell Inverter openpyxl cell inverter used invert column cell spreadsheet. example, value rows will inverted into columns will invert column (vice versa). following images: This program written with help nested loop. First data structure writes sheetData[x][y] cell column then newly created spreadsheet spreadData[y][x] cell column Adding Chart Excel File Charts effective represent data. Using charts, visualizes data which easily untestable. There various types chart: chart, line chart, chart, draw chart spreadsheet using openpyxl module. building chart spreadsheet, need define chart type like BarChart, LineChart, also import reference which represents data that used chart. important define what data want represent chart. Let's understand following example: from openpyxl import Workbook from openpyxl.chart import BarChart, Reference Workbook() sheet wb.active Let's create some sample student data rows ["Serial_no", "Roll no", "Marks"], "0090011", 75], "0090012", 60], "0090013", 43], "0090014", 97], "0090015", 63], "0090016", 54], "0090017", 86], rows: sheet.append(i) chart BarChart() values Reference(worksheet=sheet, min_row=1, max_row=8, min_col=2, max_col=3) chart.add_data(values, titles_from_data=True) sheet.add_chart(chart, "E2") wb.save("student_chart.xlsx") Output: above code, have created sample data drawn chart corresponding sample data. will create line chart. Consider following code: import random from openpyxl import Workbook from openpyxl.chart import LineChart, Reference Workbook() spreadsheet wb.active Let's create some sample data rows ["", "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], rows: spreadsheet.append(row) spreadsheet.iter_rows(min_row=2, max_row=4, min_col=2, max_col=13): cell row: cell.value random.randrange(5, 100) chart LineChart() data Reference(worksheet=spreadsheet, min_row=2, max_row=4, min_col=1, max_col=13) chart.add_data(data, from_rows=True, titles_from_data=True) spreadsheet.add_chart(chart, "C6") wb.save("line_chart1.xlsx") Output: above code, used from_rows True parameter, denotes chart plot instead column column. Adding Image Images generally used spreadsheet sometimes requirement. image branding purposes make spreadsheet more personal attractive. loading image spreadsheet, need install additional module called pillow following command. install pillow following program, importing image into excel file. from openpyxl import load_workbook from openpyxl.drawing.image import Image Let's hello_world spreadsheet since less data workbook load_workbook(filename="student_chart1.xlsx") sheet workbook.active logo Image(r"C:\Users\DEVANSH SHARMA\Pictures\Screenshots\image.png") resizing fill whole spreadsheet with logo logo.height logo.width sheet.add_image(logo, "E2") workbook.save(filename="hello_world_logo1.xlsx") this tutorial, have covered basic advance concept openpyxl.