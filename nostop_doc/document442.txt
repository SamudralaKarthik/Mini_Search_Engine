next prev Python fbchat library power programming language like Python comes because wide range modules libraries offers users. This time going explore those. There might time another when every wish message spamming) Facebook friend. Being able automate activities making supporting bots Facebook messenger appears interesting. following tutorial, will understand connect Facebook messenger using Python programming language perform variety mind-blowing things. This statement implies will perform same GET/POST requests trick Facebook into thinking accessing website normally. will need Python library known fbchat that allows programmers emulate browser this operation. Therefore, this Application Programming Interface (API) official, does require key. However, requires credentials Facebook account. let's started. Introduction Python fbchat library fbchat library Python programming language utilizes e-mail password order communicate with Facebook server. This statement means that should always store password separate file someone sneaking into while writing code. should also make sure that access control file appropriately restrictive. order install fbchat library, will using installer following command shown below: Syntax: pip3 install fbchat order verify library installed properly, create file import statement returns errors not. File: verify.py import fbchat Now, save Python file execution command using command prompt: Syntax: python verify.py above Python file does raise import error, good head onto Facebook messenger building procedure. However, does raise exception, recommended reinstall library refer official documentation. Now, understand basics fbchat library. Logging simply create instance Client class fbchat library. have two-factor authentication enabled, need type code terminal prompt case want supply code another fashion, overwrite Client.on2FACode function. same following syntax: Example: importing required modules from fbchat import Client from fbchat.models import input username password Facebook account username "example@website.com" password "password2email" creating object Client class clientObj Client(username, password) Explanation: above snippet code, have imported Client class from fbchat library along with functions from fbchat.models. have defined username password Facebook account. last, have created object Client class specifying username password parameters which allows access Facebook account. username password provided above only demonstrate working Client class serve real purpose. However, replacing variable strings with actual e-mail password required, respectively. incorrect username password lead exception while connecting Facebook account. Throughout code, would like check still logged isLoggedIn() function Client class. login() function Client class order Facebook account. consider following example where want again logged out. Example: importing required modules from fbchat import Client from fbchat.models import input username password Facebook account username "example@website.com" password "password2email" creating object Client class clientObj Client(username, password) checking logged clientObj.isLoggedIn(): logging using login() function clientObj.login(username, password) Explanation: above snippet code, have used statement check logged Facebook account using isLoggedIn() function. have also used login() function specifying username password again logged out. Once done utilizing client want securely logout, will logout() function. syntax same shown below: Example: importing required modules from fbchat import Client from fbchat.models import input username password Facebook account username "example@website.com" password "password2email" creating object Client class clientObj Client(username, password) logging clientObj.logout() Explanation: above snippet code, have used logout() function Client class along with object Client order out. Understanding Threads Thread considered things: Messenger group chat single Facebook user. ThreadType enumerator with values. first value USER, other GROUP. These will specify whether thread single-user group chat. This required multiple functions fbchat library Facebook differentiate between these internally. search group chat find their using searchForGroups method Client class. also search user using searchForUsers method. will look into later this tutorial. retrieve User with help uid method Client class. also retrieve Group chat However, procedure same quite trivial. only have navigate https://www.facebook.com/messages/, will then have click group want find then read from address bar. will appear something like this: https://www.facebook.com/messages/t/123456789, where 123456789 would group chat. apply same method several user accounts, though will just that they have custom URL. consider following snippet code demonstrating utilization thread thread types. Example: importing required modules from fbchat import Client from fbchat.models import input username password Facebook account username "example@website.com" password "password2email" creating object Client class clientObj Client(username, password) sending some message user group clientObj.send(Message(text 'some message'), thread_id '<user_ID>', thread_type ThreadType.USER) clientObj.send(Message(text 'some message'), thread_id '<group_ID>', thread_type ThreadType.GROUP) logging clientObj.logout() Explanation: above snippet code, have started importing required library providing username password. have then created object Client class. Later, used send() function specifying text message along with thread thread type USER GROUP. last, have logged using logout() function. observe that have provided thread thread type initiate function. However, there some functions that require thread type all. such function changeThreadColor. such case, have provide thread consider following example demonstrating same: Example: importing required modules from fbchat import Client from fbchat.models import input username password Facebook account username "example@website.com" password "password2email" creating object Client class clientObj Client(username, password) changing Thread Colors clientObj.changeThreadColor(ThreadColor.BRIGHT_TURQUOISE, thread_id '<user_ID>') clientObj.changeThreadColor(ThreadColor.DARK_TANGERINE, thread_id '<group_ID>') logging clientObj.logout() Explanation: above snippet code, have imported required modules provided username password. have then created object Client class. have then used changeThreadColor function Client class order change colors thread. have specified Thread color thread within function. last, have logged using logout() function. Understanding Message Every message send Facebook consists unique every activity perform thread, such changing nickname adding person, unique Some functions fbchat library need these IDs, like reactToMessage, some them provide this like sendMessage. consider following example demonstrating these functions. Example: importing required modules from fbchat import Client from fbchat.models import input username password Facebook account username "example@website.com" password "password2email" creating object Client class clientObj Client(username, password) getting message messageID clientObj.send(Message(text 'message'), thread_id clientObj.uid, thread_type '<user_ID>') using message react message clientObj.reactToMessage(messageID, MessageReaction.LOVE) logging clientObj.logout() Explanation: above snippet code, have imported required methods provided username password. have then created object Client class. have then retrieved message using send() function. have then used message order react message with help reactToMessage(), where have specified messageID along with MessageReaction LOVE emoji. Interaction with Threads fbchat library offers different functions order interact with threads. Most functionality works threads, though some things, such adding users removing users from group chat, logically work group chats only. Some functions used interacting with threads described following table: Function Description send This function used send messages user group. sendLocalImage This function used send Image located locally. sendRemoteImage This function used download Image from send addUsersToGroup This function used many users group. removeUserFromGroup This function used remove user from group. changeNickname This function used change nickname user. changeThreadTitle This function helps changing title Thread. setTypingStatus This function helps setting status Typing either TYPING STOPPED. changeThreadColor This function used change color Thread. changeThreadEmoji This function helps changing emoji Thread. reactToMessage This function helps reacting message. consider following example demonstrating above function interacting with threads. Example: importing required modules from fbchat import Client from fbchat.models import input username password facebook account username "example@website.com" password "password2email" creating object Client class clientObj Client(username, password) specifying thread type threadID "1234567890" threadType ThreadType.GROUP sending message thread clientObj.send( Message(text "some text message"), thread_id threadID, thread_type threadType sending emoji clientObj.send( Message(text "üëç", emoji_size EmojiSize.LARGE), thread_id threadID, thread_type threadType sending sticker with `767334476626295` clientObj.send( Message(sticker Sticker("767334476626295")), thread_id threadID, thread_type threadType sending message with mention clientObj.send( Message( text example @mention", mentions [Mention( threadID, offset length )]), thread_id threadID, thread_type threadType sending image located `<path_to_image_file>` clientObj.sendLocalImage( "<path_to_image_file>", message Message(text "This local image"), thread_id threadID, thread_type threadType downloading image `<url_to_image_file>`, then sending clientObj.sendRemoteImage( "<url_to_image_file>", message Message(text "This remote image"), thread_id threadID, thread_type threadType Only these actions thread group threadType ThreadType.GROUP: removing user with `<user_id>` from thread clientObj.removeUserFromGroup("<user_id>", thread_id threadID) adding user with `<user_id>` thread clientObj.addUsersToGroup("<user_id>", thread_id threadID) adding users with `<First_user_id>`, `<Second_user_id>` `<Third_user_id>` thread clientObj.addUsersToGroup( ["<First_user_id>", "<Second_user_id>", "<Third_user_id>"], thread_id threadID changing nickname user `<user_id>` `<new_nickname>` clientObj.changeNickname( "<new_nickname>", "<user_id>", thread_id threadID, thread_type threadType changing title thread `<title>` clientObj.changeThreadTitle("<some_title>", thread_id threadID, thread_type threadType) setting typing status thread `TYPING` clientObj.setTypingStatus( TypingStatus.TYPING, thread_id threadID, thread_type threadType changing thread color `RADICAL_RED` clientObj.changeThreadColor(ThreadColor.RADICAL_RED, thread_id threadID) changing thread emoji clientObj.changeThreadEmoji("üëç", thread_id threadID) reacting message with üòç emoji clientObj.reactToMessage("<messageID>", MessageReaction.LOVE) Explanation: above snippet code, have imported required modules provided username password. created instance Client class specified Thread type. have then used different functions order interact with thread ranging from sending text message emoji changing Thread color emoji. Since working GROUP chat, have also used operations involving adding removing Users from group. have also used functions sending image available locally well specific URL. Now, understand fetch information using fbchat library. Fetching Information utilize fbchat library order fetch basic information regarding users, such their usernames, profile pictures, thread names, user IDs. retrieve User's using searchForUsers function Client class. consider following example that demonstrates working functions that allows fetch information Users. Example: importing required modules from fbchat import Client from fbchat.models import input username password facebook account username "example@website.com" password "password2email" creating object Client class clientObj Client(username, password) retrieving User the_users clientObj.searchForUsers('<name_of_user>') the_user the_users[0] printing information User print("User {}".format(the_user.uid)) print("Name User: {}".format(the_user.name)) print("Profile picture User: {}".format(the_user.photo)) print("Main URL: {}".format(the_user.url)) Explanation: above snippet code, have imported required modules created instance Client class. have then used searchForUsers function order retrieve User have then stored value first user variable. last, have printed information user using uid, name, photo, functions. Since this example utilizes search functions Facebook, have specify complete name; first names will usually enough. understand Sessions. Understanding Sessions fbchat library offers functions order retrieve session cookies. This function will allow store session cookies separate file that have every time begin script. retrieve cookies using getSession function Client class. syntax same shown below: Syntax: sessionCookies clientObj.getSession() Then setSession function Client class order session. syntax same shown below: Syntax: clientObj.setSession(sessionCookies) session_cookies initial login. (If session cookies invalid, email password will used instead): Syntax: clientObj Client('<email_ID>', '<password>', session_cookies sessionCookies) Warning: session cookies valuable password, store them with equal care. Listening Events fbchat library also offers listening functions like listen function Client class that need define what should executed when certain events occur. default, (most) events will just logging.info statement, meaning will simply print details console when event occurs. Note: identify event methods them prefix. example, onMessage. change event actions subclassing Client then overwriting event methods shown below: Syntax: creating subclass Client class class Custom_Client(Client): onMessage(self, mid, author_id, message_object, thread_id, thread_type, metadata, msg, **kwargs): Perform something with message_object here pass creating instance Custom_Client class clientObj Custom_Client('<email_ID>', '<password>') Explanation: have defined subclass Client class Custom_Client above syntax. Within class, have defined method onMessage that accepts multiple parameters like self, mid, author_id, message_object, thread_id, thread_type, metadata, msg, **kwargs. write some functionalities within this method. last, have instantiated Custom_Client class passing username password arguments. onMessage method work even when alter parameters method; however, have include **kwargs Note: Hence, both backward forward compatibility, requires include **kwargs final parameter. Further information provided official documentation available https://fbchat.readthedocs.io/en/stable/intro.html Next TopicArtificial Intelligence Cybersecurity: Pitting Algorithms Algorithms prev next