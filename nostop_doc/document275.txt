next prev Python know that programming language like Python Interpreted language, which essentially implies that every block line code processed after one, rather than changing whole program low-level code altogether. Whenever interpreter Python scans line code notices something unexceptional, raises error known Syntax Error. Generally, missing bracket, missing ending quote, other fundamental anomalies syntax errors were raised. following tutorial, will going discover syntax errors Python known EOL, which usually raised when scan string literal. Understanding meaning must understand meaning effectively before solving problem. short "End Line". error signifies that Interpreter Python reached line while scanning string literal. string literals, also known constants, must enclosed single double quotation marks. Reaching "End Line" when attempt scan means that have reached last character string have encountered ending quotation marks. consider basic example demonstrating error raised. Example: defining string value my_string "This string literal, broken... printing string value print("String:", my_string) Output: File "D:\Python\ternarypy.py", line my_string "This string literal, broken... SyntaxError: while scanning string literal Explanation: above snippet code, have defined string literal; however, have missed quotation mark string, which raised syntax error called while printing that string users. output section, observe small arrow pointing last character string, demonstrating that error occurred when program tried parse that segment statement. that have understood issue understand some instances where this error appear while executing python code. Fixing "Syntax Error: while scanning string literal." encounter this error four main situations while working Python program. These four main situations shown below: Missing ending quotation mark Using incorrect ending quotation mark String constant stretching multiple lines Using backslash before ending quotation mark begin understand each these situations work around them. Missing ending quotation mark discussed previous snippet code, Python interpreter raises syntax error whenever reaches string literal's discovers that quotation mark missing. Example: defining string value my_string "This string literal, broken... printing string value print("String:", my_string) Explanation: observe that quotation mark literal string missing, which also justifies syntax error. Every language fundamental rules regarding syntax, which, when violated, result errors. consider following syntax solution above problem. Solution: defining string value my_string "This string literal, broken..." printing string value print("String:", my_string) Output: String: This string literal, broken... Explanation: above snippet code, observe that have included quotation mark literal string. result, string printed users successfully without raising Syntax error. Using incorrect ending quotation mark make well order enclose certain string constant Python. However, programmer often uses incorrect quotation mark string value. Such situation causes program raise Syntax error terms EOL. consider such situation following example: Example: defining string value my_string "This string literal with wrong quotation mark end.' printing string value print("String:", my_string) Output: File "D:\Python\ternarypy.py", line my_string "This string literal with wrong quotation mark end.' SyntaxError: while scanning string literal Explanation: above snippet code, have used incorrect quotation mark string value that results syntax error. avoid such problem using matching quotation mark string, shown following snippet code. Solution: defining string value my_string "This string literal with wrong quotation mark end." printing string value print("String:", my_string) Output: String: This string literal with wrong quotation mark end. Explanation: above snippet code, observe, have used matching quotation mark string that helps avoid error. String constant stretching multiple lines There various novice Python programmers that make mistake stretching statements more than line. Python takes into account line statement, unlike other languages such Java that consider statements. consider example demonstrating same problem. Problem Example: defining string value my_string "This string literal... this line" printing string value print("String:", my_string) Output: File "D:\Python\ternarypy.py", line my_string "This string literal... SyntaxError: while scanning string literal Explanation: above snippet code, observe that code look ordinary; however, soon next line begun, Python interpreter puts that statement raising Syntax error enclosing string constant. However, solve this problem using various methods shown below: Solution Using '\n' provide effect line string constant defining string value my_string "This string literal...\n this line" printing string value print("String:", my_string) Output: String: This string literal... this line Explanation: above snippet code, have included '\n' string constant provide effect line result, string constant breaks statement into multiple lines. consider another solution. Solution Using triple quotation marks, store multi-line string constants defining string value my_string """This string literal... this line""" printing string value print("String:", my_string) Output: String: This string literal... this line Explanation: above snippet code, have used triple quotation mark, order store multi-line string constants. Using backslash before ending quotation mark backslash responsible escaping string causes syntax error. consider following example. Example: storing directory path my_string "D:\Python\My_Folder\" printing string value print("String:", my_string) Output: File "D:\Python\ternarypy.py", line my_string "D:\Python\My_Folder\" SyntaxError: while scanning string literal Explanation: above snippet code, have used backslash order separate paths folder from each other. However, during execution program, Python interpreter raised Syntax error. last backslash before quotation mark escapes string constant, Python interpreter considers single character. This escape sequence translates quotation mark ("). solve this problem using following snippet code. Solution: storing directory path my_string "D:\\Python\\My_Folder\\" printing string value print("String:", my_string) Output: String: D:\Python\My_Folder\ Explanation: above snippet code, have used '\\' string constant. result, Python interpreter executes that string without raising error. Next TopicPython Program convert Hexadecimal String Decimal String prev next