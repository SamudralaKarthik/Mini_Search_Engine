next prev Cbind Python? cbind function easiest ways accomplish this. cbind method (standing column bind) fusion function that combines data frames having equal number different rows into unified data frame. It's little more difficult than appears connect Pandas DataFrames having same count rows. employ cbind function We'll cover bind columns data frames Python Pandas using function known concat() this tutorial. Data Frames with Equal Number Indices First, will create data frames using DataFrame function Pandas. Creating Dataframe Code import pandas #Creating Data Frame data 'Name':['Itika','Arshia','Aditi','Peter','Parker','Harry','Naill', 'Zayn','Louis'], 'Eng_Marks':[9, 42], 'Math_Marks':[65, 45]} dataframe1 pd.DataFrame(data) print(dataframe1) Output: Creating Dataframe Code import pandas #Creating Data Frame data 'Sci_Marks':[65, 86], 'Hindi_Marks':[63, 53]} dataframe2 pd.DataFrame(data) print(dataframe2) Output: Let's join column bind data frames, dataframe1 dataframe2. combination data frames done using concat() function, which accepts data frames parameter conducts process column column. Code import pandas print(pd.concat([dataframe1, dataframe2], axis=1)) Output: argument axis=1 binds specifies that binding data frame done column wise, final column bound data frame will shown. Data Frames with Equal Number Indices First, will create data frames using DataFrame function Pandas. Creating dataframe Code import pandas #Creating Data Frame data 'Fruit':['Mango','Pomegranate','Orange','Litchi','Kiwi','Melon','Apple', 'Banana','Guava'], 'Kgs':[54, 58], 'Boxes':[12, 21]} dataframe1 pd.DataFrame(data) print(dataframe1) Output: Creating Dataframe Code import pandas #Creating Data Frame data 'dilivery_days':[12, 7]} dataframe2 pd.DataFrame(data) dataframe2.index print(dataframe2) Output: Notice that DataFrames have same index values. When cbind these dataframes together with concat() function, will final dataframe shown: Code #performing column bind DataFrames dataframe3 pd.concat([dataframe1, dataframe2], axis=1) #view resulting DataFrame print(dataframe3) Output: This result wanted. correct this, must manually reset every DataFrame's index prior concatenating them next each other: Code #reseting indices each DataFrame dataframe1.reset_index(drop True, inplace True) dataframe2.reset_index(drop True, inplace True) #performing column-bind DataFrames dataframe3 pd.concat([dataframe1, dataframe2], axis=1) print (dataframe3) Output: have learned perform column bind Python using concat() function. Though actual column bind function, i.e., cbind() much more convenient than Pandas's concat() function, with some extra lines code, they perform same operations. Next TopicPython Asserts prev next