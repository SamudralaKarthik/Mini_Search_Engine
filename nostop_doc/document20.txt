next prev Python List list Python used store sequence various types data. Python lists mutable type mean modify element after created. However, Python consists data-types that capable store sequences, most common reliable type list. list defined collection values items different types. items list separated with comma enclosed with square brackets list define below ["John", 102, "USA"] IIf print type using type() function then will come list. print(type(L1)) print(type(L2)) Output: <class 'list'> <class 'list'> Characteristics Lists list following characteristics: lists ordered. element list access index. lists mutable type. lists mutable types. list store number various elements. Let's check first statement that lists ordered. [1,2,"Peter",4.50,"Ricky",5,6] [1,2,5,"Peter",4.50,"Ricky",6] ==b Output: False Both lists have consisted same elements, second list changed index position element that violates order lists. When compare both lists returns false. Lists maintain order element lifetime. That's ordered collection objects. 2,"Peter", 4.50,"Ricky",5, 2,"Peter", 4.50,"Ricky",5, Output: True Let's have look list example detail. ["John", 102, "USA"] Dep1 ["CS",10] Dep2 ["IT",11] HOD_CS [10,"Mr. Holding"] HOD_IT [11, "Mr. Bewon"] print("printing employee data...") print("Name Country: %s"%(emp[0],emp[1],emp[2])) print("printing departments...") print("Department 1:\nName: %d\nDepartment 2:\nName: %s"%(Dep1[0],Dep2[1],Dep2[0],Dep2[1])) print("HOD Details ....") print("CS Name: %d"%(HOD_CS[1],HOD_CS[0])) print("IT Name: %d"%(HOD_IT[1],HOD_IT[0])) print(type(emp),type(Dep1),type(Dep2),type(HOD_CS),type(HOD_IT)) Output: printing employee data... Name John, 102, Country: printing departments... Department Name: CS, Department Name: Details .... Name: Holding, Name: Bewon, <class 'list'> <class 'list'> <class 'list'> <class 'list'> <class 'list'> above example, have created lists which consist employee department details printed corresponding details. Observe above code understand concept list better. List indexing splitting indexing processed same happens with strings. elements list accessed using slice operator index starts from goes length first element list stored index, second element list stored index, sub-list list using following syntax. list_varible(start:stop:step) start denotes starting index position list. stop denotes last index position list. step used skip element within start:stop Consider following example: list [1,2,3,4,5,6,7] print(list[0]) print(list[1]) print(list[2]) print(list[3]) Slicing elements print(list[0:6]) default index value starts from element index print(list[:]) print(list[2:5]) print(list[1:6:2]) Output: Unlike other languages, Python provides flexibility negative indexing also. negative indices counted from right. last element (rightmost) list index adjacent left element present index until left-most elements encountered. Let's have look following example where will negative indexing access elements list. list [1,2,3,4,5] print(list[-1]) print(list[-3:]) print(list[:-1]) print(list[-3:-1]) Output: discussed above, element using negative indexing. above code, first print statement returned rightmost element list. second print statement returned sub-list, Updating List values Lists most versatile data structures Python since they mutable, their values updated using slice assignment operator. Python also provides append() insert() methods, which used values list. Consider following example update values inside list. list print(list) will assign value value second index list[2] print(list) Adding multiple-element list[1:3] [89, print(list) will value list list[-1] print(list) Output: list elements also deleted using keyword. Python also provides remove() method know which element deleted from list. Consider following example delete list elements. list print(list) will assign value value second index list[2] print(list) Adding multiple element list[1:3] [89, print(list) will value list list[-1] print(list) Output: Python List Operations concatenation repetition operators work same they were working with strings. Let's list responds various operators. Consider Lists perform operation. Operator Description Example Repetition repetition operator enables list elements repeated multiple times. L1*2 Concatenation concatenates list mentioned either side operator. l1+l2 Membership returns true particular item exists particular list otherwise false. print(2 l1) prints True. Iteration loop used iterate over list elements. l1: print(i) Output1 Length used length list len(l1) Iterating List list iterated using loop. simple list containing four strings, which iterated follows. list ["John", "David", "James", "Jonathan"] list: variable will iterate over elements List contains each element each iteration. print(i) Output: John David James Jonathan Adding elements list Python provides append() function which used element list. However, append() function only value list. Consider following example which, taking elements list from user printing list console. #Declaring empty list #Number elements will entered user int(input("Enter number elements list:")) loop take input range(0,n): input taken from user added list item l.append(input("Enter item:")) print("printing list items..") traversal loop print list items print(i, Output: Enter number elements list:5 Enter item:25 Enter item:46 Enter item:12 Enter item:75 Enter item:42 printing list items Removing elements from list Python provides remove() function which used remove element from list. Consider following example understand this concept. Example list [0,1,2,3,4] print("printing original list: list: print(i,end=" list.remove(2) print("\nprinting list after removal first element...") list: print(i,end=" Output: printing original list: printing list after removal first element... Python List Built-in functions Python provides following built-in functions, which used with lists. Function Description Example cmp(list1, list2) compares elements both lists. This method used Python above versions. len(list) used calculate length list. [1,2,3,4,5,6,7,8] print(len(L1)) max(list) returns maximum element list. [12,34,26,48,72] print(max(L1)) min(list) returns minimum element list. [12,34,26,48,72] print(min(L1)) list(seq) converts sequence list. "Johnson" list(str) print(type(s)) <class list> Let's have look list examples. Example: Write program remove duplicate element list. list1 [1,2,2,3,55,98,65,65,13,29] Declare empty list that will store unique values list2 list1: list2: list2.append(i) print(list2) Output: Example:2- Write program find element list. list1 [3,4,5,9,10,12,24] list1: sum+i print("The is:",sum) Output: Example: Write program find lists consist least common element. list1 [1,2,3,4,5,6] list2 [7,8,9,2,10] list1: list2: print("The common element is:",x) Output: common element Next TopicPython Tuples prev next