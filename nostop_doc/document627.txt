next prev Calendar using Tkinter Python exciting build Projects Python. Python provides different modules libraries make projects interactive. such attribute Graphical User Interface (GUI) which added projects using Python libraries like Tkinter, PyQt5, Kivy more. Tkinter library among most common libraries designing interactive applications. lightweight easy use. operate this library different platforms Operating Systems like Windows, Linux, macOS. following tutorial, will learn build Calendar based with help Tkinter library Python programming language. let's started. Building Calendar using Tkinter order start building Calendar Python, will consider following procedure shown below: STEP will import required libraries modules. STEP will then define necessary functions execution application. STEP will then create main window application. STEP will widgets main window apply event Trigger. understand steps mentioned above detail. Importing required libraries modules First, will import necessary libraries modules, including tkinter library application, ImageTk Image modules from library images application, calendar module year data date module from datetime module current month year. consider following snippet code demonstrating same. File: guiCalendar.py importing required libraries modules from tkinter import importing methods, classes widgets from tkinter library from import ImageTk, Image importing ImageTk Image modules from library import calendar importing calendar module from datetime import date importing date module from datetime library Explanation: above snippet code, have imported methods, classes, widgets from tkinter library. have then imported ImageTk Image modules from library. have then imported calendar module. last, have imported date module from datetime library. Defining Functions application Once have imported required libraries modules, will some functions program perform specific functions interact with application. These functions will display data users, reset entries, close application. will start defining first function display calendar. consider following snippet code demonstrating same. File: guiCalendar.py defining necessary functions function display Calendar displayCalendar(): month year data from spin boxes month int(month_box.get()) year int(year_box.get()) using month() method from calendar module month info storing variable output_calendar calendar.month(year, month) using delete() method delete output calendar_field.delete(1.0, 'end') displaying resultant calendar calendar_field.insert('end', output_calendar) Explanation: above snippet code, have defined function displayCalendar. This function will allow print calendar month year. have gotten month year data from spin boxes stored them integer values different variables, namely month year. then used month() method from calendar module retrieve month details store them another variable, output_calendar. have then deleted previous output text field using delete() method. last, have inserted resultant calendar text field with help insert() method. define another function reset values result application. Here snippet code demonstrating same. File: guiCalendar.py function reset entries reset(): using delete() method delete output calendar_field.delete(1.0, 'end') setting values IntVar objects current month year month_var.set(current_month) year_var.set(current_year) using config() method assigning textvariable parameter different IntVar objects month_box.config(textvariable month_var) year_box.config(textvariable year_var) Explanation: above snippet code, have defined function reset. Within this function, have used delete() method delete output text field. have then values IntVar objects current month year. have then used config() method spinbox objects values their textvariable parameters above IntVar objects. will define another function close application. consider following snippet code demonstrating same. File: guiCalendar.py function close application close(): using destroy() method close application guiWindow.destroy() Explanation: above snippet code, have defined function close. Within this function, have used destroy() method with object Tk() class close application. Creating main window application will create main window application display widgets output users. will start creating object Tk() class Tkinter library. will then title, size, position, background color bitmap icon make look attractive. consider following snippet code demonstrating same. File: guiCalendar.py main function __name__ "__main__": creating object Tk() class guiWindow Tk() setting title main window guiWindow.title("GUI Calendar JAVATPOINT") setting size position main window guiWindow.geometry('500x550+650+250') disabling resizable option guiWindow.resizable(0, setting background color #B0E0E6 guiWindow.configure(bg="#B0E0E6") setting bitmap icon application guiWindow.iconbitmap("icon_calendar.ico") Explanation: above snippet code, have created object Tk() class that will represent main window application. have then used title() method title main window. have also size position main window using geometry() method disabled resizable option setting parameters resizable() method have also background color using configure() method bitmap icon with help iconbitmap() method. have used file import icon image application. Adding widgets main window applying event triggers will some widgets main window, including frames provide proper structure other widgets, labels display information application, spin boxes enter month year details, text field display output some buttons trigger specific events. will start adding frames application. These frames will help provide well-defined structure hold other widgets. will Frame() widget create one. consider following snippet code demonstrating same. File: guiCalendar.py creating objects Frame() widget header_frame Frame(guiWindow, "#B0E0E6") entry_frame Frame(guiWindow, "#B0E0E6") result_frame Frame(guiWindow, "#B0E0E6") button_frame Frame(guiWindow, "#B0E0E6") using pack() method positions frames header_frame.pack(expand True, fill "both") entry_frame.pack(expand True, fill "both") result_frame.pack(expand True, fill "both") button_frame.pack(expand True, fill "both") Explanation: above snippet code, have created some frames with help Frame() widget their master parameters object Tk() class, i.e., guiWindow. have their background colors parameters #B0E0E6. have then used pack() method positions frames application. have expand parameter True fill parameter both that frames expand both sides space provided. will different labels application. will start creating label displaying heading main window; will then create another label display image. will also more labels display month year information. will Label() widget create these labels. consider following snippet code demonstrating creation each label. File: guiCalendar.py creating label display heading header_label Label( header_frame, text "CALENDAR", font ('verdana','25','bold'), "#B0E0E6", "#191970" using pack() method position label header_label.pack(expand True, fill "both") Explanation: above snippet code, have used Label() method create label display heading. have master parameter this label header_frame. have also text, font style size, background color foreground color. have then used pack() method position label. File: guiCalendar.py importing image application calendar_image ImageTk.PhotoImage(Image.open('calendar.png').resize((50, 50), Image.ANTIALIAS)) creating label display imported image image_label Label( header_frame, image calendar_image, "#B0E0E6" using pack() method position label image_label.pack(expand True, fill "both") Explanation: above snippet code, have used open() method Image module import image from directory. have then used resize() method resize image that application. have also used ANTIALIAS filter image. have then made imported image compatible with Tkinter using PhotoImage() method ImageTk module. have then created label using Label() widget display imported image. have master parameter this widget header_frame frame. have also image parameter this label imported image. last, have used pack() method position label main window. File: guiCalendar.py creating labels display details month year month_label Label( entry_frame, text "Month:", font ("consolas", "10", "bold"), "#B0E0E6", "#000000" year_label Label( entry_frame, text "Year:", font ("consolas", "10", "bold"), "#B0E0E6", "#000000" using place() method position labels month_label.place(x 120, year_label.place(x 268, Explanation: above code snippet, created labels display details spin boxes enter month year using Label() method. have master parameter these labels entry_frame frame. have also text, font size style, background color foreground color. have then used place() method position these labels main window. that have added labels required application, time create some spin boxes enter data. will Spinbox() widget create spin boxes. first, will create objects IntVar class. These objects will store value current month year display them spin boxes when application executed. consider following snippet code demonstrating same. File: guiCalendar.py creating objects IntVar class month_var IntVar(entry_frame) year_var IntVar(entry_frame) storing current month year information current_month date.today().month current_year date.today().year setting current month year IntVar objects month_var.set(current_month) year_var.set(current_year) creating spin boxes enter month year month_box Spinbox( entry_frame, from_ width "5", textvariable month_var year_box Spinbox( entry_frame, from_ 0000, 3000, width "5", textvariable year_var using place() method position spin boxes month_box.place(x 180, year_box.place(x 320, Explanation: above snippet code, have created some objects IntVar class their master parameter entry_frame frame. then used today() method retrieve current date month year attribute current month year stored them separate variables. have then used set() method these values objects IntVar class. have then used Spinbox() widget create spin boxes enter month year. have master parameter entry_frame frame. have also range these spin boxes along with width. have also used textvariable parameter initial value these spin boxes current month variable stored objects IntVar class. last, have used place() method position these spin boxes. will create textbox with help Text() widget. This textbox will display calendar. consider following snippet code demonstrating same. File: guiCalendar.py creating textbox display calendar calendar_field Text( result_frame, width height= font ("consolas", "14"), relief RIDGE, borderwidth using pack() method position textbox calendar_field.pack(expand False, fill None) Explanation: above snippet code, used Text() widget create textbox displaying calendar. have master parameter result_frame frame widget height parameters respectively. have also font style size text. have also type border RIDGE using relief parameter borderwidth parameter last, have used pack() method position textbox. will some buttons applications that will allow display calendar, reset entries output close application. These buttons created using Button() widget. will also command parameter this widget call functions created earlier. consider following snippet code demonstrating same. File: guiCalendar.py creating buttons application DISPLAY BUTTON display_button Button( button_frame, text "DISPLAY", "#191970", "#E0FFFF", command displayCalendar RESET BUTTON reset_button Button( button_frame, text "RESET", "#191970", "#E0FFFF", command reset CLOSE BUTTON close_button Button( button_frame, text "CLOSE", "#191970", "#E0FFFF", command close using place() method positions buttons display_button.place(x 140, reset_button.place(x 230, close_button.place(x 305, Explanation: above snippet code, have used Button() widget created some buttons application. have master parameter these widgets button_frame frame. have also included necessary text, background color foreground color. have then used command parameter their values functions defined earlier, which eventually called whenever clicked. last, have used place() method positions buttons. will mainloop() method with object Tk() class application. following snippet code illustrating same. File: guiCalendar.py using mainloop() method application guiWindow.mainloop() Explanation: above snippet code, have used mainloop() method along with guiWindow, object Tk() class. Hence, project code completed. save file following command command shell terminal output. Syntax: python guiCalendar.py Before output, consider complete code "GUI Calendar" project Python. Complete Project Code following snippet code "GUI Calendar" project Python programming language. File: guiCalendar.py importing required libraries modules from tkinter import importing methods, classes widgets from tkinter library from import ImageTk, Image importing ImageTk Image modules from library import calendar importing calendar module from datetime import date importing date module from datetime library defining necessary functions function display Calendar displayCalendar(): month year data from spin boxes month int(month_box.get()) year int(year_box.get()) using month() method from calendar module month info storing variable output_calendar calendar.month(year, month) using delete() method delete output calendar_field.delete(1.0, 'end') displaying resultant calendar calendar_field.insert('end', output_calendar) function reset entries reset(): using delete() method delete output calendar_field.delete(1.0, 'end') setting values IntVar objects current month year month_var.set(current_month) year_var.set(current_year) using config() method assigning textvariable parameter different IntVar objects month_box.config(textvariable month_var) year_box.config(textvariable year_var) function close application close(): using destroy() method close application guiWindow.destroy() main function __name__ "__main__": creating object Tk() class guiWindow Tk() setting title main window guiWindow.title("GUI Calendar JAVATPOINT") setting size position main window guiWindow.geometry('500x550+650+250') disabling resizable option guiWindow.resizable(0, setting background color #B0E0E6 guiWindow.configure(bg="#B0E0E6") setting bitmap icon application guiWindow.iconbitmap("icon_calendar.ico") creating objects Frame() widget header_frame Frame(guiWindow, "#B0E0E6") entry_frame Frame(guiWindow, "#B0E0E6") result_frame Frame(guiWindow, "#B0E0E6") button_frame Frame(guiWindow, "#B0E0E6") using pack() method positions frames header_frame.pack(expand True, fill "both") entry_frame.pack(expand True, fill "both") result_frame.pack(expand True, fill "both") button_frame.pack(expand True, fill "both") creating label display heading header_label Label( header_frame, text "CALENDAR", font ('verdana','25','bold'), "#B0E0E6", "#191970" using pack() method position label header_label.pack(expand True, fill "both") importing image application calendar_image ImageTk.PhotoImage(Image.open('calendar.png').resize((50, 50), Image.ANTIALIAS)) creating label display imported image image_label Label( header_frame, image calendar_image, "#B0E0E6" using pack() method position label image_label.pack(expand True, fill "both") creating labels display details month year month_label Label( entry_frame, text "Month:", font ("consolas", "10", "bold"), "#B0E0E6", "#000000" year_label Label( entry_frame, text "Year:", font ("consolas", "10", "bold"), "#B0E0E6", "#000000" using place() method position labels month_label.place(x 120, year_label.place(x 268, creating objects IntVar class month_var IntVar(entry_frame) year_var IntVar(entry_frame) storing current month year information current_month date.today().month current_year date.today().year setting current month year IntVar objects month_var.set(current_month) year_var.set(current_year) creating spin boxes enter month year month_box Spinbox( entry_frame, from_ width "5", textvariable month_var year_box Spinbox( entry_frame, from_ 0000, 3000, width "5", textvariable year_var using place() method position spin boxes month_box.place(x 180, year_box.place(x 320, creating textbox display calendar calendar_field Text( result_frame, width height= font ("consolas", "14"), relief RIDGE, borderwidth using pack() method position textbox calendar_field.pack(expand False, fill None) creating buttons application DISPLAY BUTTON display_button Button( button_frame, text "DISPLAY", "#191970", "#E0FFFF", command displayCalendar RESET BUTTON reset_button Button( button_frame, text "RESET", "#191970", "#E0FFFF", command reset CLOSE BUTTON close_button Button( button_frame, text "CLOSE", "#191970", "#E0FFFF", command close using place() method positions buttons display_button.place(x 140, reset_button.place(x 230, close_button.place(x 305, using mainloop() method application guiWindow.mainloop() Output: Next TopicPython Program Rotate Image prev next