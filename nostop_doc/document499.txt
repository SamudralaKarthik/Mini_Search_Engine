next prev Python pyautogui Library Automation Testing Using humans bored when same work multiple times. always look that overcome solution come before us: create something that this kind task with single click. Automation plays huge role lives, allows more task during process. Python provides many useful advanced libraries that make Python programmer's life easier. pyautogui library extensive collections useful methods. this tutorial, will learn about pyautogui library implement into code using features. without further delay, let's briefly introduce pyautogui Library. What pyautogui Library? Python pyautogui library automation library that allows mouse keyboard control. that facilitates automate movement mouse keyboard establish interaction with other application using Python script. provides many features, given below. move mouse click other applications' window. send keystrokes other applications. example filling form, typing search query browser, etc. also take snapshots give image. allows locate window application, move, maximize, minimize, resizes, close Display alert message boxes. Installation pyautogui Library Windows Operating System third-party library need install before using install using command. create virtual environment install globally. Open command prompt type following command. install pyautogui Operating System pip3 install pyobjc-core pip3 install pyobjc pip3 install pyautogui Linux Operating System pip3 install python3-xlib pip3 install pyautogui Once installation completed, good explore properties. Pyautogui Basic Functions this section, will cover some basic functions pyautogui library. First, create file import pyautogui library. import pyautogui size() method returns size primary monitor. Let's following example. Example import pyautogui screenWidth, screenHeight pyautogui.size() returns monitor size print("The Screen Width screenWidth) print("The Screen Height screenHeight) Output: Screen Width 1366 Screen Height position() method returns coordinate mouse. Let's understand following example. Example currentMouseX, currentMouseY pyautogui.position() print("X Cordinate currentMouseX) print("Y Cordinate currentMouseY) Output: Cordinate 839 Cordinate 635 onscreen() Method This method returns Boolean value whether points with coordinates exists screen. Let's understand following example. Example print(pyautogui.onScreen(500, 600)) print(pyautogui.onScreen(0, 1500)) Output: True False have provided 1500 which beyond screen's dimension that's returned False. Basic Mouse Functions This section will cover automate mouse using pyautogui library. Below some commonly used mouse manipulation methods like moving cursor from point another automatically clicking buttons. Let's following methods. moveTo() Method moves mouse coordinate. takes three parameters coordinates, duration (set duration given duration). pyautogui.moveTo(100, 150, duration cursor moves mentioned coordinates according given time duration when running above function. duration time seconds. passed seconds means cursor will take seconds locate coordinates. While using this method, following error encountered. Note Possible Error Traceback (most recent call last): File "gui.py", line <module> File "D:\PythonWithKafka\new\lib\site-packages\pyautogui\__init__.py", line 598, wrapper returnVal wrappedFunction(*args, **kwargs) File "D:\PythonWithKafka\new\lib\site-packages\pyautogui\__init__.py", line 1283, moveTo _mouseMoveDrag("move", duration, tween) File "D:\PythonWithKafka\new\lib\site-packages\pyautogui\__init__.py", line 1509, _mouseMoveDrag File "D:\PythonWithKafka\new\lib\site-packages\pyautogui\__init__.py", line 1722, failSafeCheck raise FailSafeException( pyautogui.FailSafeException: PyAutoGUI fail-safe triggered from mouse moving corner screen. disable this fail-safe, pyautogui.FAILSAFE False. DISABLING FAIL-SAFE RECOMMENDED. such error occurred, means that your computer's fail-safe enabled. overcome this error, need disable fail-safe. include below line start your code. pyautogui.FAILSAFE=False moveRel() Function moveRel() function allows move cursor relative current mouse position. Suppose cursor located (100, 100) screen, call moveRel() function with parameter (100, 100, position will (300, 300). pyautogui.moveRel(100, 100, above line will move cursor points right left seconds. click() Function click() method works same mouse's click button. Below syntax click() method. syntax given below. pyautogui.click(x, clicks, interval, button) Parameters x-coordinate point reach. y-coordinate point reach. clicks represents number clicks when cursor moves screen. Interval define interval between each mouse click. button specifies button that would press when cursor gets point screen. pass right, left, middle values. below. pyautogui.click(100, 100, 'right') following functions also used move mouse. pyautogui.rightClick(x, pyautogui.doubleClick(x, pyautogui.tripleClick(x, pyautogui.middleClick(x, This library also allows take more control over mouse clicks specifying when press mouse down, when release mouseDown mouseUp methods help that. Below example. Example These methods equivalent click(x,y) pyautogui.mouseDown(x=x, y=y, button='left') pyautogui.mouseUp(x=x, y=y, button='left') scroll() Function scroll() most important function, name suggest that used scroll down direction. syntax given below. Syntax pyautogui.scroll(amount_to_scroll, =x_movement, y=y_movement) positive value used define amount_to_scroll parameter scroll scroll down, need specify negative value. Below example. pyautogui.scroll(100, 200, 120) have discussed almost every function control mouse. Using these method, perform operations same with physical mouse. next section, will cover cover keyboard using various functions. There many functions available will discuss some important ones. Common Keyboard Operations pyautogui library provides facility press keyboard keys using Python script. Let's following code check available keys. pyautogui.KEYBOARD_KEYS Output: ['\t', '\n', '\r', '!', '"', '#', '$', '%', '&', "'", '(', ')', '*', '+', ',', '-', '.', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=', '>', '?', '@', '[', '\\', ']', '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '|', '}', '~', 'accept', 'add', 'alt', 'altleft', 'altright', 'apps', 'backspace', 'browserback', 'browserfavorites', 'browserforward', 'browserhome', 'browserrefresh', 'browsersearch', 'browserstop', 'capslock', 'clear', 'convert', 'ctrl', 'ctrlleft', 'ctrlright', 'decimal', 'del', 'delete', 'divide', 'down', 'end', 'enter', 'esc', 'escape', 'execute', 'f1', 'f10', 'f11', 'f12', 'f13', 'f14', 'f15', 'f16', 'f17', 'f18', 'f19', 'f2', 'f20', 'f21', 'f22', 'f23', 'f24', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'final', 'fn', 'hanguel', 'hangul', 'hanja', 'help', 'home', 'insert', 'junja', 'kana', 'kanji', 'launchapp1', 'launchapp2', 'launchmail', 'launchmediaselect', 'left', 'modechange', 'multiply', 'nexttrack', 'nonconvert', 'num0', 'num1', 'num2', 'num3', 'num4', 'num5', 'num6', 'num7', 'num8', 'num9', 'numlock', 'pagedown', 'pageup', 'pause', 'pgdn', 'pgup', 'playpause', 'prevtrack', 'print', 'printscreen', 'prntscrn', 'prtsc', 'prtscr', 'return', 'right', 'scrolllock', 'select', 'separator', 'shift', 'shiftleft', 'shiftright', 'sleep', 'space', 'stop', 'subtract', 'tab', 'up', 'volumedown', 'volumemute', 'volumeup', 'win', 'winleft', 'winright', 'yen', 'command', 'option', 'optionleft', 'optionright'] typewrite() Function typewrite() function used write something text field. syntax given below. Syntax pyautogui.typewrite(text, interval) text parameter text provided interval time seconds between each stroke. Below example. Example pyautogui.typewrite('Sachin Kumar', Sachin Kumar will written text field take pause second between each press. pass sequence keys that want press. following code. pyautogui.typewrite(['S', 'a', 'c', 'h', 'i', 'n', 'z', 'backspace', 'enter']) above code will enter text Sachin following removal trailing hotkey() Function Most time, keys pairs keys perform specific tasks like control copy text. cannot pass ['ctrl' typewrite() function. press button after simultaneously same press while holding Control copy something. hotkey() function that helps press more keys simultaneously. hotkey() function that helps press more keys same time. Let's following example. Example pyautogui.hotkey('shift', 'enter') pyautogui.hotkey('ctrl', symbol pyautogui.hotkey('ctrl', 'c') copy screenshot() Function screenshot() function used take screenshot screen instance. syntax given below. Syntax pyautogui.hotkey() will store object containing image variable. also store screenshot desired path below. pyautogui.screenshot(your_path/file_name.png) Message Functions These functions used pause/delay program until user clicks something also used display message user. alert() Function used display message with some text message button. Let's following example. Example import pyautogui pyautogui.alert(text='Hello message box', title='JavaTpoint', button='OK') Output: When click button, returns button text. 'OK' confirm() Function This method used display multiple options that Cancel buttons. Number text customized. returns text button clicked Let's below example. Example pyautogui.confirm(text='Hello message box', title='JavaTpoint', buttons=['OK', 'Cancel']) Output: 'Cancel' also more buttons need. just need pass into buttons list. 'Not Sure' prompt() Function used display message with text input Cancel Buttons returns text entered. Let's following example. Example import pyautogui pyautogui.password(text='Please Enter Your First Name', title='', default='', mask='*') Output: alert() Function name suggests, used display alert message screen. Let's following example. Example import pyautogui pyautogui.alert('To Continue, Click continue') Output: password() Function displays message with text input typed characters shows Let's following example. Example import pyautogui pyautogui.password('Enter password (text will hidden)') Output: Some Example Pyautogui Library Example below code, automates opening chrome using pyautogui library. Copy below code into your IDE. Code import pyautopyautogui, time crometest(): screenWidth, screenHeight pyautogui.size() pyautogui.moveTo(0,screenHeight) pyautogui.click() pyautogui.typewrite('Chrome', interval=0.25) pyautogui.press('enter') time.sleep(2) pyautogui.keyDown('alt') pyautogui.press(' pyautogui.press('x') pyautogui.keyUp('alt') pyautogui.click(250,22) pyautogui.click(371,51) pyautogui.typewrite('https://javatpoint.com/python-tutorial') pyautogui.press('enter') identifyloc(): while True: currentMouseX, currentMouseY pyautogui.position() print(currentMouseX,currentMouseY) time.sleep(3) crometest() Example import pyautogui import time from tkinter import from tkinter.filedialog import askopenfilename Tk().withdraw() filename askopenfilename() prints filename that opened print(filename) timeDelay int(input("Enter number seconds delay open file ").split()[0]) case input time designed break delay function, reset timeDelay back timeDelay timeDelay time.sleep(5) open(filename, "r") read each charater file type them time.sleep(timeDelay) gui.typewrite(w) gui.press("enter") When execute above code, opens windows where select file that opened. Finally, select file, terminal prints selected file name open after given number seconds. Conclusion this tutorial, have covered pyautogui Library important method. These methods help create automation Python. have also discussed installation different operating systems. this library automate your regular tasks. Next TopicHow Draw Mandelbrot Python prev next