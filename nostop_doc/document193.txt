next prev Method Resolution Order Python this tutorial, will learn about method resolution order, which also known MRO. essential concept Python inheritance. Method resolution order describes search path class which Python uses appropriate method classes that contain multi-inheritance. Introduction know that, class that being inherited called Subclass Parent class, while class that inherits known child class subclass. multi-inheritance, class consist many functions, method resolution order technique used search order which base class executed. simple words "The method attributes explored current class, method present current class, search moves parent classes, on". This example depth-first search. plays essential role multiple inheritance where same method found multiple superclasses. understand better way, let's Example class myname(self): print("I class class B(A): myname(self): print("I class class C(A): myname(self): print("I class C() print(c.myname()) Output: class Explanation There multiple inheritance above code. have defined three-class called these classes have same name method called myname(). created object class object invoked class class, while class inherited class method. order followed above code class class This technique known (method resolution order). Let's understand another example multiple inheritance. Example class 	def myname(self): 		print(" class class B(A): 	def myname(self): 		print(" class class C(A): 	def myname(self): 		print("I class classes ordering class D(B, 	pass	 D() d.myname() Output: class Explanation above code, have created another class without defining class attributes that inherited class. When invoked method myname(), goes class searches myname() function. class doesn't have declaration. Hence, search transfers class gets myname() function, returns result. search will take place follows. Class Class Class Class class wouldn't have method, will invoke class method. Here, suggesting remove class method check what happens. doing this, will idea method resolution works. Style Order Older version Python (2.1), restricted classes Python (2.2 continue), classes. default, Python original (new) classes. style class's first parent inherits from Python root 'object' class. Let's following example Example style class class OldStyleClass: 	pass style class class NewStyleClass(object): 	pass declaration style both classes different. method resolution, old-style classes follow depth-first left right algorithm (DLR), whereas style classes Linearization algorithm while performing multiple inheritance. Algorithm Python creates list classes while implementing multiple inheritance between classes. That list used determine which method called invoked instances. assume working name method resolution will search depth-first, then left right. Below example. Example class 	pass class 	pass class C(A, 	pass class D(B, 	pass class E(C,D): 	pass First, algorithm will search instance class invoked method. found, goes into first parents, there also found. will look into parent parent. This will continue till inheriting classes. above example, method resolution order will class class class class class But, cannot twice present class class class class This algorithm shows strange behavior time. Let's below example. Example class pass class pass class C(A, pass class D(B, pass class E(C,D): pass According Algorithm, order will There interchange classes class which very ambiguous. means algorithm doesn't preserve monotonicity property. Samuele Perdoni first person discovered inconsistency between algorithms. Linearization Algorithm Linearization Algorithm better version algorithm because removes inconsistency. This algorithm some restrictions that given below. Children must precede their parents. particular class inherits from more classes, they saved order specified tuple base class. Rules Linearization Algorithm structure method resolution order defines inheritance graph. User must visit super class only after methods local classes visited. Preserve Monotonicity Method Method Resolution class Python provides ways method resolution order class __mro__ attribute mro() method. With help these methods, display order method which they resolved. Let's understand following example. Example class 	def myname(self): 		print(" class class B(A): 	def myname(self): 		print(" class class C(A): 	def myname(self): 		print("I class classes ordering class D(B, 	pass	 prints lookup order print(D.__mro__) print(C.mro()) Output: (<class '__main__.D'>, <class '__main__.B'>, <class '__main__.C'>, <class '__main__.A'>, <class 'object'>) [<class '__main__.C'>, <class '__main__.A'>, <class 'object'>] above output, order method resolution order. such way, linearization algorithm work multiple inheritance. Next TopicMonkey Patching Python prev next