next prev Fast Tutorial: Framework Create APIs this tutorial, will learn about FastAPI framework create REST APIs. will learn FastAPI popular differs from other available frameworks. will also discuss create APIs that implement best practices default quickly. this tutorial, will able start creating production-ready APIs able deeper specific cases. assume that familiar with HTTP works, JSON, Python basics. let's move introduction FastAPI. What FastAPI? FastAPI popular, modern, high-performance web-framework creating services APIs. Python based framework comes with standard type hints. REST rules that outlines best practices sharing data between clients servers. name suggest, fast out-of-the-box support async feature Python 3.6+. This framework released 2018 created Sebastián Ramírez. interesting reason behind creating this project, happy with current available framework like Flask created framework using tools such Starlette Pydantic. Now, FastAPI quite popular demanding industry even tech giants like Uber, Netflix, Microsoft using FastAPI build their apps. FastAPI Features FastAPI provides many features over currently available framework. These features given below. High-performance FastAPI quite fast. considered fastest frameworks currently present. par with NodeJS also Starlette Pedantic. Fast code allows significant increases development speed. Robust well-written document, create production-ready APIs using reading documentation. Intuitive designed everyone understand easily, easy offers excellent editor support. Fewer Bugs reduces around 40% induced bugs. Plugins provides facility create plugins using dependency injection. Type Hints type hinting data validation conversion. Standard Based based open standards APIs, OpenAI JSON Schema. Straightforward straightforward, spend less time reading documentation. Flask FastAPI Now, will Flask different from FastAPI. Flask Python microframework with ORM, caching, authentication. designed build applications using Python, meant pretty straightforward, fast, reliable. Despite having such features, need FastAPI? Let's understand following pros cons. Advantages Flask flexible; manipulate most aspects Flask easy learn beginner friendly. built-in functionality, along with integrated support, allows seamless unit testing. Disadvantages doesn't come with data validation. this cause programs crash often. single source that handles requests turns, meaning that requests take some time addressed. Cases Flask most suitable such type projects Social Network Social media bots E-commerce systems Static websites let's FastAPI. FastAPI FastAPI modern, efficient, high-performing framework used build APIs. Advantages FastAPI comes with data validation. validate data type even nested JSON request. user exception handling easily. supports async code using async/wait Python keywords. Disadvantages mentioned earlier, FastAPI created using Pydantic used request validation. Sometimes user needs write their custom validator. Since framework market, smaller community than other frameworks. Cases commonly used Internal crisis management. used deploy machine learning models. Create accounts, logins, authentication application. Getting Started with FastAPI have done enough with theory, time some practical write "Hello World" using FastAPI. this section, will create minimal FastAPI app. before that, need install system. other Python project would best start creating virtual environment. Create virtual environment activate first step install FastAPI Uvicorn using pip. install fastapi uvicorn[standard] Once installation completed, ready learn them. FastAPI framework will create APIs, Unicorn server that will build server requests. Note face problem with above command, install them separately below. install fastapi install uvicorn Create First will create display Hello World message with server using Uvicorn. will explain internal part well. main.py from fastapi import FastAPI FastAPI() @app.get("/") async root(): return {"message": "Hello World"} Create main.py file paste above code into have fully functional application with some best practices. code won't work itself call using Python directly. need server program have installed uvicorn, which server. Application with Uvicorn live server using uvicorn. uvicorn main:app --reload INFO: Will watch changes these directories: ['C:\\Users\\DEVANSH SHARMA\\Desktop\\FastApiProject\\FastApi'] INFO: Uvicorn running http://127.0.0.1:8000 (Press CTRL+C quit) INFO: Started reloader process [17664] using StatReload INFO: Started server process [16172] INFO: Waiting application startup. INFO: Application startup complete. have highlighted where being served local machine. Check Response When open http://127.0.0.1:8000 browser, will send JSON response below. {"message": "Hello World"} let's breakdown code uvicorn main:app --reload uvicorn server library. main refers file name. refers object FastAPI created inside main.py file. --reload parameter that makes server restart after code changes. let's break down main.py code. Line First import FastAPI class that provides functionality API. Line initialize FastAPI class name app. refers uvicorn above command. Line create path. Line create async function that execute when user visit path. Line return response client whenever route accessed. Path Parameters pass parameter path declare type function using Python data. With help path parameters, don't need build body find resource, helps scope call down single resource. These parameters enclosed curly brackets they offer control representation specific resources. Let's following example. Example from fastapi import FastAPI FastAPI() @app.get("/students/{student_id}") async get_student(student_id: int): return {"student_id": student_id} used path parameter value student_id, which will passed argument student_id. Data Conversion When above visit http://127.0.0.1:8000/students/4, will following response. {'student_id': function received returned which integer, string ("3"). type declaration helps with automatic request parsing. Query Parameters Query parameters optional use. pass parameters function, path automatically interpreted query parameters. Let's understand following code. Example from fastapi import FastAPI FastAPI() student_names [{"student_name": "Sauvik"}, {"student_name": "Mathew"}, {"student_name": "Peter"}] @app.get("/courses/") get_students(start: int, end: int): return student_names[start start end] query key-value pair after question mark. separated ampersand &. http://localhost:8000/courses/?start=0&end=10 start with value with value query parameters. Request Body request body JSON data used send data from client API. almost always send response body. client don't necessary send response body time. There three most common methods send data put, patch, delete. also send data using preferable. FastAPI, pydantic models declare request body. Pydantic tool provides advantages methods. First, need import BaseModel from pydantic then create subclass defining schema data shape that want receive. Let's understand following example. Example from typing import Optional from fastapi import FastAPI from pydantic import BaseModel class Student(BaseModel): name: address: Optional[str] None branch: FastAPI() @app.post("/students/") create_student(student: Student): return student When navigate http://127.0.0.1:8000/docs gives following page. Let's breakdown above code First, import required packages. declare sub-class Student that inherited BaseModel class. class, define schema data. create instance FastAPI class. create POST path. request data model path. Conclusion this tutorial, have learned about FastAPI essential concepts. have seen create production-ready APIs. have discussed brief introduction FastAPI different from Flask. learned path parameters unique path item, pedantic receive JSON data request. Apart from that, FastAPI much functionality that will explore upcoming tutorial. However, start creating your high-performance APIs. Next TopicMirror Character String Python prev next