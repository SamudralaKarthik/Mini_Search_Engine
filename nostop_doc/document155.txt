next prev Merge Dictionaries Python Python Dictionary data structure that contains elements key-value pairs. Each key-value pair maps keys with their associative value. Hence also known associative array Python Dictionary. elements dictionary enclosed within curly braces Furthermore, colon symbol between key-value pairs that separate each from associative value. Dictionary elements arranged order changed dynamically Python program. this topic, will learn merge dictionaries using various methods Python dictionaries. Merge dictionaries using loop Here loop that iterates first dictionary simultaneously adds entries another dictionary merge them. Let's consider program merge given dictionaries using loop. forDict.py dict1 'Alexandra' given first dictionary key-value pairs 'Shelina Gomez' 'James' 'Peterson' dict2 'Jasmine' given second dictionary key-value pairs 'Maria' 'Helena' print("Before merging dictionary print("Dictionary dict1) print dict1 print("Dictionary dict2) print dict2 dict3 dict1.copy() Copy dict1 into dict3 using copy() method key, value dict2.items(): loop iterate dict2 into dict3 dictionary dict3[key] value print("After merging Dictionary print(dict3) print merge dictionary Output: Before merging dictionary Dictionary {'Alexandra': 'Selina Gomez': 'James': 'Peterson': Dictionary {'Jasmine': 'Maria': 'Helena': After merging Dictionary {'Alexandra': 'Selina Gomez': 'James': 'Peterson': 'Jasmine': 'Maria': 'Helena': Merge dictionaries using update() method update() method used Python Dictionary update current dictionary with second dictionary's content. Using update() method, avoid creating third dictionary store first dictionary element then update second dictionary element. Let's consider program merge given dictionaries Python without creating third dictionary. Update1.py {'Actress 'Jasmine Wiley', 'Cricketer' 'Nicholas Pooran', 'Basketball': 'Jordan', 'Football' 'Zindane' Defines dictionary {'Tennis 'Maria', 'Stadium 'Amsterdam', 'Basketball' 'Washington', 'Actress' 'Elizabeth'} d1.update(d2) append dictionary items into dictionary. print( "Merge dictionaries print(d1) print merge dictionary Output: {'Actress 'Jasmine Wiley', 'Cricketer': 'Nicholas Pooran', 'Basketball': 'Washington', 'Football': 'Zindane', 'Tennis 'Maria', 'Stadium 'Amsterdam', 'Actress': 'Elizabeth'} Merge dictionaries Python using Function Let's consider program merge given dictionaries Python using update() method function. proFun.py merge_twoDict(a, define merge_twoDict() function return (a.update(b)) append second dictionary first dictionary {'USA' 'New York', 'Jermany' 'Jakarta', 'England' 'London' 'India' 'Delhi', 'Russia' 'Russian', 'Australia' 'Sydney' merge_twoDict(a, pass dictionaries merge_twoDict() function print("Merged Dictionaries print(a) print merge dictionaries Output: Merged Dictionaries {'USA': 'New York', 'Germany': 'Jakarta', 'England': 'London', 'India': 'Delhi', 'Russia': 'Russian', 'Australia': 'Sydney'} Merge dictionaries using update() method when both dictionaries having same keys Let's consider program merge given dictionaries Python using update() method when both dictionaries contains same keys. sameDict.py Defines dictionary key- value pairs 'Cricketer' 'Nicholas Pooran', 'Basketball': 'Jordan', 'Football' 'Zindane', 'Actress' 'Jasmine Wiley' Defines dictionary key- value pairs 'Tennis' 'Maria', 'Stadium' 'Amsterdam', 'Basketball' 'Washington', 'Actress' 'Elizabeth' d1.update(d2) append dictionary items into dictionary. print( "Merge dictionaries print(d1) print merge dictionary Output: Merge dictionaries {'Cricketer': 'Nicholas Pooran', 'Basketball': 'Washington', 'Football': 'Zindane', 'Actress': 'Elizabeth', 'Tennis': 'Maria', 'Stadium': 'Amsterdam'} have same keys (Actress Basketball) both dictionaries. When perform update method, latest value second dictionary overrides first dictionary's values. When dictionary executed, prints Washington Elizabeth values Actress Basketball instead Jasmine Wiley Jordan. Merge dictionaries using Copy() Update() Method this method, copy elements first dictionary (d1) elements using copy() function then assign copied data into other dictionary (d3). After that, update dictionary with dictionary using update() function. Let's consider program merge given dictionaries using copy update() method Python. CopyUpdate.py dict1 'Student' 'Butler', 'Course' 'Computer Science', 'Address' 'Los Angeles' dict2 'Teacher' 'Rosy', 'Subject' 'Computer Science' Copy() function copy dict1 into dict3 dict3 dict1.copy() print("Before Merge") print(dict3) print dict3 dictionary update() dictionary function update dict3 using dict2. dict3.update(dict2) print("After Merge Dictionary dict3) Output: Before Merge {'Student': 'Butler', 'Course': 'Computer Science', 'Address': 'Los Angeles'} After Merge Dictionary {'Student': 'Butler', 'Course': 'Computer Science', 'Address': 'Los Angeles', 'Teacher': 'Rosy', 'Subject': 'Computer Science'} Merge dictionaries using operator Unpacking Operator unpacking operator used combine more dictionaries within single expression stored them third dictionary. Syntax: Res **dictF1, dictF2 Let's consider program merge given dictionaries using operator Python. Unpack.py dict1 'Student' 'Butler', 'Course' 'Computer Science', 'Address' 'Los Angeles' dict2 'Teacher' 'Rosy', 'Subject' 'Computer Science' dict3 'Country' 'England', 'State' 'California', 'mob' +3487434 operator Unpack Operator d5 {**dict1, **dict2} print("Merge dictionaries", d5) Merge dictionaries d4 **dict1, **dict2, **dict3 print("Merge more than dictionaries", d4) Merge multiples dictionaries Output: Merge dictionaries {'Student': 'Butler', 'Course': 'Computer Science', 'Address': 'Los Angeles', 'Teacher': 'Rosy', 'Subject': 'Computer Science'} Merge more than dictionaries {'Student': 'Butler', 'Course': 'Computer Science', 'Address': 'Los Angeles', 'Teacher': 'Rosy', 'Subject': 'Computer Science', 'Country': 'England', 'State': 'California', 'mob': 3487434} Merge dictionaries using dict() constructor dict() constructor method similar copy() update() Python Dictionary. dict() constructor copies first dictionary elements dictionary then followed update() method update dictionary second dictionary's element. Let's consider program merge given dictionaries using dict() method Python. Dict.py dict1 'Student' 'Butler', 'Course' 'Computer Science', 'Address' 'Los Angeles' dict2 'Teacher' 'Rosy', 'Subject' 'Computer Science' dict() constructor dict(dict1) print("Before Merge", d3.update(dict2) print("Merge dictionaries", Merge dictionaries Output: Before Merge {'Student': 'Butler', 'Course': 'Computer Science', 'Address': 'Los Angeles'} Merge dictionaries {'Student': 'Butler', 'Course': 'Computer Science', 'Address': 'Los Angeles', 'Teacher': 'Rosy', 'Subject': 'Computer Science'} Merge dictionaries using dict() constructor **kwargs shortcut method dict constructor that uses kwargs (**) operator dictionary another with help dict method. Syntax: dict(dict1, **dict) Let's consider program merge dictionaries using dict() constructor **kwargs operator Python. Kwarg.py dict1 'Student' 'Butler', 'Course' 'Computer Science', 'Address' 'Los Angeles' Second dictionary dict2 'Teacher' 'Rosy', 'Subject' 'Computer Science' dict() constructor dict(dict1, **dict2) print("Merge dictionaries", Merge dictionaries Output: Merge dictionaries {'Student': 'Butler', 'Course': 'Computer Science', 'Address': 'Los Angeles', 'Teacher': 'Rosy', 'Subject': 'Computer Science'} Merge dictionaries using Collections ChainMap function ChainMap collection multiple dictionaries that return single dictionary. faster method create dictionary multiple files compared update method. merge dictionaries Python, need import ChainMap from collections. ChainMap() function, pass dictionaries argument that returns ChainMap instances dictionaries using dict() constructor merge dictionaries. Let's consider program merge dictionaries using ChainMap function Python. Chain_map.py dict1 'Student' 'Butler', 'Course' 'Computer Science', 'Address' 'Los Angeles' dict2 'Teacher' 'Rosy', 'Subject' 'Computer Science' from collections import ChainMap import ChainMap from collections ChainMap() constructor dict(ChainMap(dict1, dict2)) passes parameters argument print("Merge dictionaries", Merge dictionaries Output: Merge dictionaries {'Teacher': 'Rosy', 'Subject': 'Computer Science', 'Student': 'Butler', 'Course': 'Computer Science', 'Address': 'Los Angeles'} Merge dictionaries using itertools chain() method makes iterative dictionary that returns element from first iterable dictionary until it's finished. then, proceeds next iterable further execution dictionary. Hence, represents consecutive sequences single sequence. Syntax: itertools.chain( *iterables Let's consider program merge dictionaries using chain function Python. Chain.py dict1 'Student' 'Butler', 'Course' 'Computer Science', 'Address' 'Los Angeles' dict2 'Teacher' 'Rosy', 'Subject' 'Computer Science' from itertools import chain import chain() function from itertools ChainMap() constructor dict(chain(dict1.items(), dict2.items())) passes parameters argument print("Merge dictionaries", Merge dictionaries Output: Merge dictionaries {'Student': 'Butler', 'Course': 'Computer Science', 'Address': 'Los Angeles', 'Teacher': 'Rosy', 'Subject': 'Computer Science'} Merge dictionaries using merge operator merge operator used merge dictionaries Python. Python 3.9 introduced merge operator dict class. Syntax: dict1 dict2 Let's write program merge dictionaries Python using merge operator (|). merge.py merge(dict1, dict): result dict1 dict2 merge operator return result dict1 {'A' 'Apple', 'Ball', 'Cat' define dict1 dict2 {'D' 'Dog', 'Elephant', 'Fish' define dict2 dict3 merge(dict1, dict2) call merge() function print (dict3) print dict3 Output: {'A': 'Apple', 'B': 'Ball', 'C': 'Cat', 'D': 'Dog', 'E': 'Elephant', 'F': 'Fish'} Next TopicMultithreading Python prev next