next prev Double Underscores Python following tutorial, will discuss Double Underscores Python programming language. before that, briefly discuss some aspects underscore well. Understanding Python Underscore character underscore simple Python. There many languages that underscores name functions variables snake case only; however, Python much more important Most probably, most might familiar with following syntax: range(20) __init__(self) underscore character conveys different meanings different conditions. There several uses Underscore that stated below: Using Underscore interpreter Using Underscore ignore values Using Underscore loops Using Underscore separate digits numbers Using Underscore naming purpose However, will only covering naming conventions used with double underscores only. These naming conventions classified into types: Double-leading Underscore: __var Double-leading trailing Underscore: __var__ Thus, let's started. Understanding Double-leading Underscore Double-leading underscore utilized mangling name. syntax Double-leading Underscore shown below: Syntax: __var Double-leading underscore tells interpreter Python rewrite name attribute subclasses order avoid conflicts naming. Name Mangling: Python interpreter alters name variable technique that challenging clatter during inheritance class. consider example based this functionality. Example: defining class class mySample(): using __init__() function __init__(self): self.first self._second self.__third instantiating class myObj mySample() printing directory object print(dir(myObj)) Output: ['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_mySample__third', '_second', 'first'] Explanation: above snippet code, have defined class mySample() used initializing function declare some values. have then instantiated class using myObj object. last, have printed directory object. result, above code block returns every attribute class object. Now, observe variables list attributes. variable self.first appears list without alterations. variable self._second also appears list without alterations. However, observe some alterations case variable self.__third. observe list attributes, will notice attribute known _mySample__third. This case name mangling. happens avoid overriding variable subclasses. understand working overriding using another example, where have created another class that inherits functionalities mySample class. Example: defining class class mySample(): using __init__() function __init__(self): self.first self._second self.__third defining child class class AnotherClass(mySample): __init__(self): super().__init__() self.first "Variable Overridden" self._second "Variable Overridden" self.__third "Variable Overridden" instantiating child class myobj AnotherClass() printing values variables print(myobj.first) print(myobj._second) print(myobj.__third) Output: Variable Overridden Variable Overridden Traceback (most recent call last): File "D:\Python\ternarypy.py", line print(myobj.__third) AttributeError: 'AnotherClass' object attribute '__third' Explanation: above snippet code, have defined class mySample() used initializing function declare some variables. have then defined child class mySample() class, where used super() function inherit variables from parent class overrode them. last, have instantiated child class print values overrode variables. result, messages first variables printed successfully; however, program raised exception case "__third" variable. This happens name mangling, which changed myObj.__third _AnotherClass__third. consider another example order print that element with help modified Attribute. Example: defining class class mySample(): using __init__() function __init__(self): self.first self._second self.__third defining child class class AnotherClass(mySample): __init__(self): super().__init__() self.first "Variable Overridden" self._second "Variable Overridden" self.__third "Variable Overridden" instantiating child class myobj AnotherClass() printing value(s) variable(s) print(myobj._AnotherClass__third) Output: Variable Overridden Explanation: above snippet code, observe that have used "_AnotherClass__third" variable instead "__third" variable access variable's value. access Double-leading Underscore variables with help methods class. consider example based this functionality. Example: defining class class myClass: initializing function __init__(self): self.__myVar "Welcome" defining another method return variable get_Var(self): return self.__myVar instantiating class myObj myClass() returns "Welcome" which __var print(myObj.get_Var()) here, error raised stated before. alters variable's name print(myObj.__myVar) Output: Welcome Traceback (most recent call last): File "D:\Python\ternarypy.py", line print(myObj.__myVar) AttributeError: 'myClass' object attribute '__myVar' Explanation: above snippet code, defined class used initializing function declare variable. have then defined method return value variable. last, have instantiated class print value variable using both ways. result, program returns "Welcome" statement while printing method. However, also raised exception another method alters name variable. also utilize Double-leading Underscore method names. consider example based this functionality. Example: defining class class myClass: defining double-leading underscore function __myfunction(self): return "Welcome" defining function call above function call_function(self): return self.__myfunction() instantiating class myObj myClass() printing value within function print(myObj.call_function()) raised error print(myObj.__myfunction()) Output: Welcome Traceback (most recent call last): File "D:\Python\ternarypy.py", line print(myObj.__myfunction()) AttributeError: 'myClass' object attribute '__myfunction' Explanation: above snippet code, have defined function followed double-leading underscore within class. have then defined another function call from that function printed result user. Now, understand another name mangling. First all, will declare variable with name _myClass__myVar, will attempt access that variable using Double-leading Underscore name. consider following example: Example: declaring variable _myClass__myVar "Welcome" defining class class myClass: defining function return declared variable call_function(self): return __myVar instantiating class myObj myClass() printing value variable print(myObj.call_function()) Output: Welcome Explanation: above snippet code, have declared variable defined class. have then defined function return value declared variable. last, have instantiated class called function print value that variable. Understanding Double-leading trailing Underscore Programming language like Python, will discover various names which begin with double underscore. These naming conventions known Magic methods Dunder methods. syntax Double-leading trailing Underscore shown below: Syntax: __var__ consider example based magic methods. Example: defining class class myClass: using magic method __init__(self): using magic method variable name self.__myNum__ instantiating class myObj myClass() printing value variable print(myObj.__myNum__) Output: Explanation: above snippet code, have defined class. have defined magic method __init__() function within class, also known initializing function. have then declared variable __num__. last, have instantiated class print value variable. result, this program works yields required output. However, good practice magic methods names variables this will lead clashes. Thus, better stay away from them. Next Topic# prev next