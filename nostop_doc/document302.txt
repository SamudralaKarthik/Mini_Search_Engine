next prev Context Manager Python this tutorial, will learn about "Context Manager" Python helpful managing resources, files descriptors, database connections. Managing Resources: users resources like file operations, database connections very common programming language. these resources have limit. Therefore, main problem make sure these resources will release after usage. Because they released, this could lead resources leakage, which cause either slow down system crash. machine system users, which automatically teardown resources, very helpful. Python, users achieve this using context managers, which used facilitating proper handling resources. most popular performing file operations using "with" keyword Python. Example with open("text_file.txt") file: data file.read() Let's example file management. When file opened, file descriptors will consumed, which limited resource. process open only limited number files time. Example file_descriptors range(10000): file_descriptors.append( open ('test_file.txt', 'w')) Output: OSError Traceback (most recent call last) file_descriptors range(10000): ----> file_descriptors.append( open ('test_file.txt', 'w')) OSError: [Errno many open files: 'test_file.txt' above example case file descriptors leakage. error occurred saying, "Too many open files". This happened because there many open files, they closed. There chance where users have forgot close open files. Manage Resources using Context Manager tough close file places block program raises exception complex algorithm with numerous return paths. Most time, users "try-except-finally" other programming languages while working with file make sure that file resource closed after usage, even there exception. Python, they "Context Manager" managing resources. users "with" keyword. When gets evaluated, will result object that perform context management. write context managers using classes functions with decorators. Create Context Manager: When user creates context manager, they need make sure that class following methods: __enter__() __exit__(). __enter__() method will return resource that managed. __exit__() method will return anything perform clean-up operations. Let's example: First, will create simple class named "context_manager" understanding basic structure creating context manager using class method. Example: class context_manager(): __init__(self): print ("The 'init' method called") __enter__(self): print ("The 'enter' method called") return self __exit__(self, exc_type, exc_value, exc_traceback): print ("The 'exit' method called") with context_manager() manager: print ("The 'with' statement block") Output 'init' method called 'enter' method called 'with' statement block 'exit' method called Example above code have created "context_manager" object. That assigned variable after "as" keyword, that manager. After running program, following methods executed sequence: __int__() __enter__() Body statement, which code inside "with" statement block. __exit__(), this method, parameters used managing exceptions. File Management using Context Manager: Now, will apply above concept creating class, which help file resource management. "file_manager" class will help open file, read write content, then close file. Example: class file_manager(): __init__(self, file_name, mode): self.filename file_name self.mode mode self.file None __enter__(self): self.file open(self.filename, self.mode) return self.file __exit__(self, exc_type, exc_value, exc_traceback): self.file.close() last, load file with file_manager('test_file.txt', 'w') file: file.write('JavaTpoint') print (file.closed) Output: True perform File Management using Context Manager "with" Statement After user execute "with" statement block, operations will executed following sequence: "file_manager" object will created with "text_file.txt" file name, (write) mode when __init__() method will executed. __enter__() method will open "text_file.txt" write mode returns "file_manager" object variable "file". text "JavaTpoint" will written into file. __exit__() method will take care closing file after exiting "with" statement block, which teardown operation. When "print (file.closed)" statement runs, users will output "True" "file_manager" would have already closed file, which otherwise would needed explicitly done. Manage Database Connection using Context Manger Now, will show create simple database connection management system. There limit opening number database connections time, sane File descriptors. Therefore, context manager, helpful managing connections database user might have forgotten close collection. Install pymongo: manage database connection through content manager, user first install "pymongo" library using following command: !pip3 instal pymongo Example: from pymongo import MongoClient moc class mongo_db_connection_manager(): __init__(self, host_name, port '27017'): self.hostname host_name self.port port self.connection None __enter__(self): self.connection moc(self.hostname, self.port) return self __exit__(self, exc_type, exc_value, exc_traceback): self.connection.close() Now, connect with localhost with mongo_db_connection_manager('localhost', 27017) mongo: collection_1 mongo.connection.SampleDb.test data_1 collection_1.find({'_id': 142}) print (data_1.get(name)) Output: Test Explanation: above code, after executing "with" statement block, following operations will happen sequence. "mongo_db_connection_manager" object will created with "localhost" "host_name" port equal "27017", when __init__() method executed. __enter__() method will open "mongodb" connection, will return "mongo_db_connection_manager" object variable "mongo". "SampleDB" database will access "test" connection, document with "_id 147" will retrieved. will print name filed document. __exit__() method will take care closing file after exiting "with" statement block, which teardown operation. Conclusion this tutorial, have discussed content manager Python, create Content Manager, help Resources Management, File management, managing Database connections. Next TopicCreate Calculator using Python prev next