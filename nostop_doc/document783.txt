next prev Rank-Based Percentile Calculator using PyQt5 Python this post, will know about build Rank based Percentile Calculator with PyQt5 library Python language. Steps implementing Make heading label with name calculator. Create label line edit pair total number students, with label indicating what user must input line edit allowing text entry. Create pair similarly rank. Construct button that will compute percentage. Create label display determined percentile. Back-end implementation procedures Change line edit only take numbers input; push button action. Within push button action, retrieve line edits' text. Determine line edit text empty zero, then return prevent continued execution procedure. Change value text integer. Determine percentile adjust label's value accordingly. Walking through Code import required libraries from PyQt5.QtWidgets import from PyQt5 import QtCore, QtGui from PyQt5.QtGui import from PyQt5.QtCore import import First all, will import modules into program from python standard library, these modules include QtWidgets, QtCore, QtGui sys. defining class class Window(QMainWindow): 	def __init__(self): 		super().__init__() Mentioning title 		self.setWindowTitle("Python Providing width window 		self.wd_width Providing height window 		self.wd_height Mentioning geometry 		self.setGeometry(100, 100, self.wd_width, self.wd_height) calling function 		self.UiComponents() displaying present widgets 		self.show() Then created class basic properties window created. Creating function components 	def UiComponents(self): creating top-most head label 		heading QLabel("Percentile Calculator", self) Providing geometry heading 		heading.setGeometry(0, 400, Setting font 		font QFont('Times', 		font.setBold(True) 		font.setItalic(True) 		font.setUnderline(True) Mentioning font heading label 		heading.setFont(font) Adding alignment heading 		heading.setAlignment(Qt.AlignCenter) Adding color effects heading 		color QGraphicsColorizeEffect(self) 		color.setColor(Qt.darkCyan) 		heading.setGraphicsEffect(color) Defining label 		tp_label QLabel("Total Participants", self) Adding properties label 		tp_label.setAlignment(Qt.AlignCenter) 		tp_label.setGeometry(20, 100, 170, 		tp_label.setStyleSheet("QLabel" 							"{" 							"border solid black;" 							"background rgba(70, 35);" 							"}") 		tp_label.setFont(QFont('Times', Setting QLineEdit object recieve total participants 		self.total QLineEdit(self) taking only numbers input 		intOnly QIntValidator() 		self.total.setValidator(intOnly) mentioning properties line edit 		self.total.setGeometry(200, 100, 180, 		self.total.setAlignment(Qt.AlignCenter) 		self.total.setFont(QFont('Times', Setting rank label 		rk_label QLabel("Rank self) Adding properties this label 		rk_label.setAlignment(Qt.AlignCenter) 		rk_label.setGeometry(20, 150, 170, 		rk_label.setStyleSheet("QLabel" 							"{" 							"border solid black;" 							"background rgba(70, 35);" 							"}") 		rk_label.setFont(QFont('Times', Defining QLineEdit object rank 		self.rank QLineEdit(self) taking only number input 		intOnly QIntValidator() 		self.rank.setValidator(intOnly) Adding properties line edit 		self.rank.setGeometry(200, 150, 180, 		self.rank.setAlignment(Qt.AlignCenter) 		self.rank.setFont(QFont('Times', Next, defined UIcomponents created labels their properties. Along with that, also colour effects fonts wherever required labels text fields. Defining push button 		calc QPushButton("Calc Percentile", self) Mentioning geometry push button 		calc.setGeometry(125, 220, 150, Entering action calc button 		calc.clicked.connect(self.calc_action) defining label show percentile 		self.result QLabel(self) Mentioning properties result label 		self.result.setAlignment(Qt.AlignCenter) 		self.result.setGeometry(50, 300, 300, 		self.result.setStyleSheet("QLabel" 								"{" 								"border solid black;" 								"background white;" 								"}") 		self.result.setFont(QFont('Arial', 11)) 	def calc_action(self): taking total students 		stdnts self.total.text() getting student's rank 		rnk self.rank.text() when input given, close method 		if len(stdnts) len(rnk) 			return converting students value into integer value 		stdnts int(stdnts) converting rank value into integer value 		rnk int(rnk) total value entered user then return method 		if stdnts 			return storing result upto decimal points 		res round((stdnts rnk) stdnts 100, Adding text label result 		self.result.setText("Percentile str(res)) Next, created push button getting results. Then, added function enabler which performs particular function being clicked. After that, created label show final result form text this field. creating pyqt5 application base QApplication(sys.argv) creating instance main Window window Window() starting application sys.exit(base.exec()) Finally, created instance main window then executed code start application created. Complete Code Python program create rank based percentile calculator using PyQt5 import required libraries from PyQt5.QtWidgets import from PyQt5 import QtCore, QtGui from PyQt5.QtGui import from PyQt5.QtCore import import defining class class Window(QMainWindow): 	def __init__(self): 		super().__init__() Mentioning title 		self.setWindowTitle("Python Providing width window 		self.wd_width Providing height window 		self.wd_height Mentioning geometry 		self.setGeometry(100, 100, self.wd_width, self.wd_height) calling function 		self.UiComponents() displaying present widgets 		self.show() Creating function components 	def UiComponents(self): creating top-most head label 		heading QLabel("Percentile Calculator", self) Providing geometry heading 		heading.setGeometry(0, 400, Setting font 		font QFont('Times', 		font.setBold(True) 		font.setItalic(True) 		font.setUnderline(True) Mentioning font heading label 		heading.setFont(font) Adding alignment heading 		heading.setAlignment(Qt.AlignCenter) Adding color effects heading 		color QGraphicsColorizeEffect(self) 		color.setColor(Qt.darkCyan) 		heading.setGraphicsEffect(color) Defining label 		tp_label QLabel("Total Participants", self) Adding properties label 		tp_label.setAlignment(Qt.AlignCenter) 		tp_label.setGeometry(20, 100, 170, 		tp_label.setStyleSheet("QLabel" 							"{" 							"border solid black;" 							"background rgba(70, 35);" 							"}") 		tp_label.setFont(QFont('Times', Setting QLineEdit object recieve total participants 		self.total QLineEdit(self) taking only numbers input 		intOnly QIntValidator() 		self.total.setValidator(intOnly) mentioning properties line edit 		self.total.setGeometry(200, 100, 180, 		self.total.setAlignment(Qt.AlignCenter) 		self.total.setFont(QFont('Times', Setting rank label 		rk_label QLabel("Rank self) Adding properties this label 		rk_label.setAlignment(Qt.AlignCenter) 		rk_label.setGeometry(20, 150, 170, 		rk_label.setStyleSheet("QLabel" 							"{" 							"border solid black;" 							"background rgba(70, 35);" 							"}") 		rk_label.setFont(QFont('Times', Defining QLineEdit object rank 		self.rank QLineEdit(self) taking only number input 		intOnly QIntValidator() 		self.rank.setValidator(intOnly) Adding properties line edit 		self.rank.setGeometry(200, 150, 180, 		self.rank.setAlignment(Qt.AlignCenter) 		self.rank.setFont(QFont('Times', Defining push button 		calc QPushButton("Calc Percentile", self) Mentioning geometry push button 		calc.setGeometry(125, 220, 150, Entering action calc button 		calc.clicked.connect(self.calc_action) defining label show percentile 		self.result QLabel(self) Mentioning properties result label 		self.result.setAlignment(Qt.AlignCenter) 		self.result.setGeometry(50, 300, 300, 		self.result.setStyleSheet("QLabel" 								"{" 								"border solid black;" 								"background white;" 								"}") 		self.result.setFont(QFont('Arial', 11)) 	def calc_action(self): taking total students 		stdnts self.total.text() getting student's rank 		rnk self.rank.text() when input given, close method 		if len(stdnts) len(rnk) 			return converting students value into integer value 		stdnts int(stdnts) converting rank value into integer value 		rnk int(rnk) total value entered user then return method 		if stdnts 			return storing result upto decimal points 		res round((stdnts rnk) stdnts 100, Adding text label result 		self.result.setText("Percentile str(res)) creating pyqt5 application base QApplication(sys.argv) creating instance main Window window Window() starting application sys.exit(base.exec()) Output: output following Rank Based Percentile Calculator using Pyqt5 Python been attached below form screenshot. Next Topic3D Scatter Plotting Python using Matplotlib prev next