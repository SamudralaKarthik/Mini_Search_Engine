next prev Deque Python Queue core library that allows users define list based FIFO (First In, First Out) principle. contrast, Deque Python owns opposite principle: LIFO (Last First Out) queue. following tutorial, will only understand what Deque Python with some examples. let's started. Understanding Deque Python Deque, also known Double-ended queue, attribute inserting deleting data elements from either end. deque module segment library known collections. contains attributes remove data elements that invoked directly with parameters. order declare deque, have import collections library first. consider following syntax understand deque module works Python. Syntax: importing deque module from collections library from collections import deque declaring deque list_name deque() Explanation: above snippet code, have imported deque module from collections library declared deque assigning name list, i.e., list_name above case, deque() module. Here also observe that need class order implement these in-built methods. They implemented directly. consider simple example based deque module. Example: importing deque module from collections library from collections import deque declaring deque fruit_list deque(['Apple', 'Mango', 'Peaches', 'Banana', 'Papaya']) printing deque print(fruit_list) Output: deque(['Apple', 'Mango', 'Peaches', 'Banana', 'Papaya']) Explanation: above example, have imported deque module from collections library. have then defined fruit list deque using deque module, specifying some fruit names. have then printed declared Deque users. result, declared Deque containing bunch fruit names printed successfully. Now, understand various Operations Deque. Some Operations Deque There various Operations that used Deque. Some them listed below with their descriptions: Operation Description append() append() function utilized addition data element parameter right deque. appendleft() appendleft() function utilized addition data element parameter left deque. pop() pop() function utilized deletion data element from right deque. popleft() popleft() function utilized deletion data element from right deque. index(element, begin, end) index() function utilized return first index value specified parameters, start search from begin till index. insert(i, insert() function utilized insert value described parameter index number mentioned parameters. remove() remove() function utilized remove first occurrence value specified parameters. count() count() function utilized count total number occurrences value specified parameters. extend(iterable) extend() function utilized insert multiple data elements right deque. parameter passed iterable. extendleft(iterable) extendleft() function utilized insert multiple data elements left deque. parameter passed iterable. Order also reversed output left appends. reverse() reverse() function utilized reverse Order deque data elements. rotate() rotate() function utilized rotate deque number mentioned parameters. mentioned number negative value, then rotation occurs left. Else rotation right. consider some examples based deque module. Example: importing collections library deque operations import collections declaring deque my_deque collections.deque([10, 50]) using append() function data element right inserting deque my_deque.append(60) printing resultant deque print( "The deque after appending right: print( my_deque using appendleft() function data element left inserting starting deque my_deque.appendleft(70) printing resultant deque print( "The deque after appending left: print( my_deque using pop() function remove data element from right removing from right deque my_deque.pop() printing resultant deque print( "The deque after removing from right: print( my_deque using popleft() function remove data element from left removing from left deque my_deque.popleft() printing resultant deque print("The deque after removing from left: print( my_deque Output: deque after appending right: deque([10, 60]) deque after appending left: deque([70, 60]) deque after removing from right: deque([70, 50]) deque after removing from left: deque([10, 50]) Explanation: above snippet code, have imported collections library declared deque. have then used operations like append() appendleft() order insert some data elements both ends deque printed modified deque users. Similarly, have then used operations such pop() popleft() order remove data elements from both ends deque printed resultant deque users. Example: importing collections library import collections declaring deque my_deque collections.deque(['Jan', 'Feb', 'Mar', 'Mar', 'Feb', 'April', 'Feb']) using index() function print first occurrence data element: print( "The first occurs 'Feb' position: print( my_deque.index('Feb', using insert() function insert data element 'Jan' position my_deque.insert(3,'Jan') printing resultant deque print( "The deque after inserting 'Jan' position: print( my_deque using count() function count occurrences data element 'Feb' print( "The count 'Feb' deque: print( my_deque.count('Feb') using remove() function remove first occurrence data element 'Mar' my_deque.remove('Mar') printing resultant deque print( "The deque after removing first occurrence 'Mar': print( my_deque Output: first occurs 'Feb' position: deque after inserting 'Jan' position: deque(['Jan', 'Feb', 'Mar', 'Jan', 'Mar', 'Feb', 'April', 'Feb']) count 'Feb' deque: deque after removing first occurrence 'Mar': deque(['Jan', 'Feb', 'Jan', 'Mar', 'Feb', 'April', 'Feb']) Explanation: above snippet code, have again imported collections library declared deque. have then used index() operation order check first occurrence data element 'Feb' between index numbers respectively. have then used insert() operation order insert data element 'Jan' position. have then used count() operation order count occurrence data element 'Feb' deque. last, have used remove() operation order remove first occurrence data element 'Mar' from deque printed resultant deque users. Next TopicDictionary Comprehension Python prev next