next prev Python Lambda Functions this tutorial, we'll study anonymous functions, commonly called lambda functions. We'll understand what they are, execute them, their syntax. What Lambda Functions Python? Lambda Functions Python anonymous functions, implying they don't have name. keyword needed create typical function Python, already know. also lambda keyword Python define unnamed function. Syntax Python Lambda Function lambda arguments: expression This function accepts count inputs only evaluates returns expression. Lambda functions used whenever function arguments necessary. addition other forms formulations functions, variety applications certain coding domains. It's important remember that according syntax, lambda functions limited single statement. Example Lambda Function Python example lambda function that adds input number shown below. Code Code demonstrate lambda function lambda num: print( add(6) Output: lambda function "lambda num: num+4" given programme. parameter num, computed returned equation There label this function. generates function object associated with "add" identifier. refer standard function. lambda statement, "lambda num: num+4", nearly same Code add( return print( add(6) Output: What's Distinction Between Lambda Functions? Let's glance this instance conventional defined function differs from function defined using lambda keyword. This program calculates reciprocal given number: Code Python code show reciprocal given number highlight difference between def() lambda(). reciprocal( return lambda_reciprocal lambda num: using function defined keyword print( "Def keyword: reciprocal(6) using function defined lambda keyword print( "Lambda keyword: lambda_reciprocal(6) Output: keyword: 0.16666666666666666 Lambda keyword: 0.16666666666666666 reciprocal() lambda_reciprocal() functions similarly expected preceding scenario. Let's take closer look sample above: Both these yield reciprocal given number without employing Lambda. However, wanted declare function with name reciprocal send number while executing def. were also required return keyword provide output from wherever function invoked after being executed. Using Lambda: Instead "return" statement, Lambda definitions always include statement given output. beauty lambda functions their convenience. need allocate lambda expression variable because place function requested. Using Lambda Function with filter() filter() method accepts arguments Python: function iterable such list. function called every item list, iterable list returned that holds just those elements that returned True when supplied function. Here's simple illustration using filter() method return only numbers from list. Code Code filter numbers from given list list_ [34, odd_list list(filter( lambda num: (num list_ print(odd_list) Output: [55, Using Lambda Function with map() method list passed Python's map() function. function executed elements within list, list produced with elements generated given function every item. map() method used square entries list this example. Code #Code calculate square each number list using map() function numbers_list squared_list list(map( lambda num: numbers_list print( squared_list Output: 100] Using Lambda Function with List Comprehension We'll apply lambda function combined with list comprehension lambda keyword with loop this instance. We'll attempt print square numbers range Code #Code calculate square each number list using list comprehension squares [lambda num: range(0, 11)] square squares: print( square(), Output: Using Lambda Function with if-else will lambda function with if-else block. Code Code lambda function with if-else Minimum lambda else print(Minimum( Output: Using Lambda with Multiple Statements Multiple expressions allowed lambda functions, construct lambda functions more afterward call second lambda expression argument first. Let's lambda discover third maximum element. Code Code print third-largest number given list using lambda function my_List [23, 87], sorting every sublist above list sort_List lambda sorted(n) Getting third largest number sublist third_Largest lambda num, func l[ len(l) func(num)] result third_Largest( my_List, sort_List) print( result Output: Next TopicPython Files prev next