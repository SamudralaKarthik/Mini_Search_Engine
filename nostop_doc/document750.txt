next prev Python Property Decorator this tutorial, will learn about property decorator Python. Previously, have discussed decorators Python; familiar with decorators, should read this tutorial before moving forward. Let's have introduction property decorators. Python @property Decorator Let's understand example Suppose have class Employee three properties first_name, last_name, department_name. have another function email() function that generates email address employee using first_name last_name. Let's following code. Example class Student: __init__(self, first_name, last_name, full_name): self.first_name =first_name self.last_name last_name self.department_name full_name generate email using first last name email(self): return '{}.{}@avenger.com'.format(self.first_name, self.last_name) create object class call email() function. Employee('Bruce', 'Banner', 'Bruce Banner') print("First Name is:", obj.first_name) print("Last Name is:", obj.last_name) print("Depatement Name is", obj.full_name) print(obj.email()) Output: First Name Bruce Last Name Banner Full Name Bruce Banner [email protected] above code, have defined three attributes first_name, last_name, department_name email() derived attributes. full_name declared variable email() declared function. When program, first_name, last_name, full_name. full_name derived from first_name last_name email Now, let's make some changes program. obj.first_name='Natasha' print("Full Name is", obj.full_name) print(obj.email()) Changing first_name Natasha printing full_name email will give following output. Output: Full Name Bruce Banner [email protected] that first name changed, email changes automatically. Still, full_name doesn't change despite using first_name attribute because email() function called when want email returned, while first_name time initialization object. this problem creating another function full_name created email(). Example class Employee: __init__(self, first_name, last_name): self.first_name =first_name self.last_name last_name full_name(self): return self.first_name self.last_name generate email using first last name email(self): return '{}.{}@avenger.com'.format(self.first_name, self.last_name) Employee('Bruce', 'Banner') print("First Name is:", obj.first_name) print("Last Name is:", obj.last_name) print(obj.full_name()) print(obj.email()) print('After changing first name:') obj.first_name='Natasha' print(obj.full_name()) print(obj.email()) Output: First Name Bruce Last Name Banner Bruce Banner [email protected] After changing first name: Natasha Banner [email protected] changed full_name updated email, Pythonic solving this problem. Here @property decorator comes into play resolve such problem. Using @property Decorator property decorator returns property attributes class from stated getter setter deletes them parameter. will @property decorator solve this problem. let's above example using @property decorator. Example class Employee: __init__(self, first_name, last_name): self.first_name =first_name self.last_name last_name @property full_name(self): return self.first_name self.last_name generate email using first last name email(self): return '{}.{}@avenger.com'.format(self.first_name, self.last_name) Employee('Bruce', 'Banner') print("First Name is:", obj.first_name) print("Last Name is:", obj.last_name) print("Full Name is:", obj.full_name) print("Email is:", obj.email()) print('After changing first name:') obj.first_name='Natasha' print("Full Name is:", obj.full_name) print("Email is:", obj.email()) Output: First Name Bruce Last Name Banner Full Name Bruce Banner Email [email protected] After changing first name: Full Name Natasha Banner Email [email protected] Explanation above code, @property decorator used full_name function, this function changed into attribute also work getter because @property decorator. setter deleter methods with @property Decorator function that applies @property decorator known getter. previous example, full_name acts getter. this section, will understand getter setter. name suggests, setter method value attributes deleter method deleter method removes attributes from memory. Let's implement setter getter method full_name attributes. Example class Student: __init__(self, name, age): self.name name self.age @property age(self): return self._age @age.setter age(self, value): value raise ValueError('Please Enter Positive Number') self._age value @age.deleter age(self): self.age None print("The deleted") @property name(self): return self._name @name.setter name(self, value): value.strip() raise ValueError('Please Enter Valid String') self._name value @name.deleter name(self): self.name None print("The name deleted") Student('Rishabh Pant', print(s1.age) print(s1.name) s1.name 'KL Rahul' print(s1.name s1.name print(s1.name) Output: Rishabh Pant KL Rahul Traceback (most recent call last): File "d:/Python Project/property.py", line 557, s1.name File "d:/Python Project/bubble_sort.py", line 544, name raise ValueError('Please Enter Valid String') ValueError: Please Enter Valid String Explanation above code, have initialized class Student where passed name constructor. First, created age() method that applied @property decorator; will returns. Then created setter method where checked user entered value negative then raised error. Then created deleter method age. same thing have done with name attributes. setter method, checked user enters name empty string raises error otherwise, given name. Example class Employee: __init__(self, first_name, last_name): self.first_name =first_name self.last_name last_name @property full_name(self): return self.first_name self.last_name #setter full_name @full_name.setter full_name(self, name): split name from space first_name, last_name name.split(" self.first first_name self.last last_name #deleter full_name @full_name.deleter full_name(self): self.first None self.last None print('Deleted full_name') generate email using first last name email(self): return '{}.{}@avenger.com'.format(self.first_name, self.last_name) Employee('Steve', 'Rogers') print('Fullname is:', obj.full_name) print('Email address obj.email()) updating object's first name obj.first_name 'Bruce' print('Fullname obj.full_name) print('And email address:', obj.email()) #setting value full_name obj.full_name 'Hello World' print('New Fullname is:', obj.full_name) #deleting full_name obj.full_name Output: Fullname Steve Rogers Email address [email protected] Fullname Bruce Rogers email address: [email protected] Fullname Peter Parker Deleted full_name above code, have created getter, setter, deleter using property decorator. property() Function property() function create getters, setters, deleter in-place @property decorator. syntax given below. Syntax property(fget=None, fset=None, fdel=None, doc) Parameters fget() used attribute's value same getters. fset() used value attributes same setters. fdel() used delete attribute value. doc() represents string that contains documentation (docstring) attributes. returns property attribute from given getter, setter, deleter. Let's understand following example. Example class Employee: __init__(self, first_name, last_name): self.first_name first_name self.last_name last_name self.full_name first_name+' '+last_name full_name_getter(self): return self.first_name +' '+ self.last_name full_name_setter(self,name): firstname, lastname name.split() self.first_name firstname self.last_name lastname full_name_deleter(self): self.first_name None self.last_name None print('Deleted full_name.') email(self): return '{}.{}@email.com'.format(self.first_name, self.last_name) full_name property() full_name full_name.getter(full_name_getter) full_name full_name.setter(full_name_setter) full_name full_name.deleter(full_name_deleter) this done single line full_name property(full_name_getter, full_name_setter, full_name_deleter) Employee('Nick', 'Fury') print('Full Name obj.full_name) print('Email Address: obj.email()) updating object's first name obj.first 'Oddin' print('Full Name obj.full_name) print('Email Address: obj.email()) #setting value full_name obj.full_name 'Bruce Banner' print('New Full Name obj.full_name) #deleting full_name obj.full_name Output: Full Name Nick Fury Email Address: [email protected] Full Name Nick Fury Email Address: [email protected] Full Name Bruce Banner Deleted full_name. also implement these methods using single line code. full_name property(full_name_getter, full_name_setter, full_name_deleter) Important Tips don't need create three methods every property code. define read-only properties only including getter method. also avoid deleter method getter setter. avoid setter method want attribute when instance created should modified within class. users free choose method depending their working context. Conclusion This tutorial covered property decorators their examples detail. property() method helps create getter, setter, deleter methods. define properties with @property decorator syntax, which more compatible straightforward. considered 'pythonic' define getters, setters, deleter. Using properties, modify class's internal implementation without affecting getter, setter, deleter help avoid accessing modifying data directly. Next TopicDFS (Depth First Search) Python prev next