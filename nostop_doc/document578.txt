next prev Check Given Linked List Circular Linked List this tutorial, will write Python program check whether given linked list circular linked list not. will understand various efficient methods determine circular linked list. understood that familiar with basic concept linked list Circular linked list (can skip introduction part). familiar with linked list, let's briefly overview linked list. What Linked List? linked list linear data structure that stores address next element. Each element known node, node consists data memory address next element. access linked list's element through pointer, first node known head. linked list provides advantage over array because stores element dynamically where array fixed size. linked list, insert delete element easily. Circular Linked List circular linked list type linked list which last following pointer field reference elements list. other hand, next pointer field pointer element null value. loop exists linked list when NULL reached traverse entire linked list. check Given Linked list Circular? definition both linked lists, find easily when traverse linked list. node pointing null. node linked list points towards head starting node, then linked list circular. Let's understand solution. Solution Follow below steps check whether given list circular not. Traverse entire linked list. Check node pointing head. returns true, means given linked list circular. Let's understand below code. Example class Node: Function initialise current object __init__(self, data): self.data data self.next None Linked List class contains current object class LinkedList: Function initialize head __init__(self): self.head None Circular(head): head==None: return True Next head current head.next This loop would stop both cases Circular circular while((current None) (current head)): current current.next return(current==head) node LinkedList() node.head Node(1) second Node(2) third Node(3) fourth Node(4) node.head.next second; second.next third; third.next fourth (Circular(node.head)): print('The given linked list circular list') else: print('The given linked list circular list') fourth.next node.head (Circular(node.head)): print('The given linked list circular list') else: print('The given linked list circular list') Output: given linked list circular list given linked list circular list Explanation above code, have created Node class initialize node linked list. Then created LinkedList class that will point head node linked list; initially, none. Finally, defined CircularList function that determines whether given linked list circular not. this function, checked head equal none. true, then returns True. head none, assign head's next element current zero. Then define while loop, which will until current none current head. loop terminates conditions, return current equal head. Solution Pointer Solution pointers with different speed determine whether given linked list circular linked list not. define slow pointer fast pointer. these pointers traverse linked list. slow pointer moves step time fast pointer moves steps time. linked list circular, fast pointer will reach element whose next pointer null. Let's understand approach. Check head null, returns false. not, create pointers slow, fast slow=head, fast head.next. loop, while slow equal fast. Inside loop, fast null next null then return false. then assign slow slow.next, fast fast.next.next. Returns true. Let's implement above approach into Python code. Example class Node: Function initialise current object __init__(self, data): self.data data self.next None Linked List class contains current object class LinkedList: Function initialize head __init__(self): self.head None circular_list(head): head None: return "The Given list circular list" slow head fast head.next while slow fast: fast None fast.next None: return "The Given list circular list" slow slow.next head fast.next.next return "The Given list circular list" node LinkedList() node.head Node(1) second Node(2) third Node(3) fourth Node(4) node.head.next second; second.next third; third.next fourth print(circular_list(node.head)) Output: Given list circular list Explanation have created Node LinkedList classes initialize node head above code. Then created circular_list() function, which takes head argument. There linked list head none; otherwise, assigned slow pointer head fast pointer head next element. Then iterate linked list till slow equal fast. loop, checked fast pointer None fast's next element None; condition true, returned linked list circular linked list. Otherwise, assigned slow.next element slow pointer fast.next.next element fast pointer. slow fast pointer became equal, means given linked list circular linked list. loop finished returns true indicate circular linked list. Complexity Analysis Pointer Solution linked list doesn't have cycle, fast pointer will reach end. Therefore time complexities will this case. linked list cycle, need calculate number steps make fast pointer catch slow pointer. Let's understand movement both pointers. slow pointer requires steps enter cycle where fast pointer already cycle element apart from slow pointer linked list direction. total time will (K+D), where number elements between head start element cycle. represents distance between pointers when slow pointer reaches cycle. space complexity (1). Conclusion this tutorial, have learned about check linked list circular linked list. have discussed solutions, first brute-force approach, second two-pointer solution. two-pointer solution easy implement also more efficient. Next TopicReverse Linked List Python prev next