next prev Stemming Words using Python following tutorial, will understand process stemming words using NLTK (Natural Language Toolkit) package Python programming language. Introduction Stemming Stemming significant part pipelining procedure Natural Language Processing. Stemming process generating morphological modifications root/base word. Stemming programs generally considered stemming algorithms stemmers. stemming algorithm reduces words like "retrieves", "retrieved", "retrieval" root word, "retrieve" "Choco", "Chocolatey", "Chocolates" reduce stem "chocolate". input stemmer tokenized words. where these tokenized words come from? Well, tokenization includes breaking down document into distinct words. know more about tokenization, refer tutorial "Tokenization Python". understand errors Stemming. Understanding Errors Stemming Errors Stemming mainly classified into categories: Over-stemming: This error arises when words stem from same root different stems. Over-stemming also regarded False positives. Under-stemming: This error raises when words stemmed from same root that different stems. Under-stemming also considered False negatives. look some applications Stemming. Understanding applications Stemming Some applications Stemming follows: Stemming search engine Information Recovery Systems. also Stemming order determine domain vocabularies Domain Analysis. Interesting fact that Google searched adopted word stemming year 2003. Previously search "fish" would have returned "fishes" "fishing". Understanding Stemming Algorithms Some Stemming Algorithms follows: Porter's Stemmer Algorithm Lovins Stemmer Dawson Stemmer Krovetz Stemmer Xerox Stemmer N-Gram Stemmer Snowball Stemmer Lancaster Stemmer discuss these Stemming Algorithms brief. Porter's Stemmer Algorithm Porter's Stemmer Algorithm among famous stemming method proposed year 1980. concept based principle that suffixes English language made combination smaller simpler suffixes. This stemmer popular speed simplicity. chief applications Porter Stemmer involve data mining data recovery. However, these applications only limited English words. Moreover, group stems mapped onto same stem, output stem necessarily meaningful word. algorithms quite lengthy called oldest stemmer. Suppose that EE means word least vowel consonant plus ending, change ending EE" 'agreed' becomes 'agree'. Advantage: produces best output compared other stemmers with less error rate. Limitation: Morphological modifications produced always real words. Lovins Stemmer proposed Lovins year 1968 that removes longest suffix from word, then word recorded order convert this stem into valid words. example, sitting sitt Advantage: Lovins Stemmer fast manages irregular plurals. example, 'teeth' 'tooth', etc. Limitation: process time-consuming frequently fails form words from stem. Dawson Stemmer extension Lovins stemmer which suffixes accumulated inverted order indexed their length last letter. Advantage: execution Dawson Stemmer fast covers more suffices. Limitation: implementation very complex. Krovetz Stemmer Krovetz Stemmer proposed year 1993 Robert Krovetz. This stemming algorithm follows some steps shown below: Converting plural form word singular form. Converting past tense word present tense removing suffix 'ing'. example, 'children' 'child' Advantage: Krovetz Stemmer light, pre-stemmer other stemmers. Limitation: This stemming algorithm inefficient case large documents. Xerox Stemmer Xerox Stemmer equipped manage large data generate valid words. However, over stemming high dependence lexicon makes language-dependent. Thus, main limitation this stemming algorithm that language-specific. example: children child understood understand whom best good N-Gram Stemmer N-Gram consecutive characters extracted from word which similar words will have high proportion n-grams general. example, 'INTRODUCTIONS' becomes: *I, TR, RO, OD, DU, UC, IO, ON, S* Advantage: This stemming algorithm based string comparisons language-dependent. Limitation: needs space create index n-grams, which time efficient. Snowball Stemmer Unlike Porter Stemmer, Snowball Stemmer non-English words too. Since this stemming algorithm supports multiple languages, call Snowball Stemmer multi-lingual stemmer. Snowball stemmer also imported from NLTK package. This algorithm based programming language known 'Snowball' that processes small strings most widely utilized Stemmer. This Stemming algorithm more aggressive than Porter Stemmer also considered Porter2 Stemmer. improvements included when compared Porter Stemmer, Snowball stemmer great computational speed. Lancaster Stemmer Lancaster stemmers more aggressive, dynamic compared other algorithms. This stemming algorithm fast; however, confusing when dealing with small words. However, there efficient Snowball Stemmers. Lancaster stemmers save rules externally fundamentally utilize iterative algorithm. Now, implementation Stemming using NLTK package Python programming language. Implementation Stemming Python consider following example demonstrating implementation Stemming using NLTK package Python. Example: importing required modules from nltk.stem import PorterStemmer from nltk.tokenize import word_tokenize creating object PorterStemmer class pStemmer PorterStemmer() selecting some words stemmed list_of_words ["consult", "consultant", "consulting", "consultantative", "consultants", "consulting"] words list_of_words: print(words pStemmer.stem(words)) Output: consult: consult consultant: consult consulting: consult consultantative: consult consultants: consult consulting: consult Explanation: above snippet code, have imported required modules. have then created object PorterStemmer class NLTK package. have then created list words that stemmed. have, last, used for-loop iterate through words list stemmed them using stem() function. observe, have used word_tokenize() function above example. consider another example demonstrating stemming along with word_tokenize() function. Example: importing required modules from nltk.stem import PorterStemmer from nltk.tokenize import word_tokenize creating object PorterStemmer class pStemmer PorterStemmer() given sentence sentence "People comes consultants office consult consultant" tokenizing sentence list_of_words word_tokenize(sentence) words list_of_words: print(words, pStemmer.stem(words)) Output: People peopl comes come consultants consult office offic consult consult consultant consult Explanation: above snippet code, have imported required modules created object PorterStemmer class. have then defined string that stemmed. have then used word_tokenize() function tokenize sentence. last, have used for-loop iterate through list words stemmed them using stem() function. Next TopicPython Program Word Guessing Game prev next