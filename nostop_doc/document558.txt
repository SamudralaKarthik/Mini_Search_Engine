next prev Cryptography package Python following tutorial, will learn about cryptography package with help different examples Python programming language. let's begun. Understanding cryptography package Cryptography practice securing useful information during transmission data from computer another storing data computer. Cryptography deals with encryption plain text into ciphertext decryption ciphertext into plain text. Python provides support cryptography package that allows encrypt decrypt data. fernet module cryptography package core functions generation key, encryption plain text into ciphertext, decryption ciphertext into plain text with help encrypt() decrypt() methods, respectively. Install Python cryptography package? order install Python package, need 'pip', framework manage packages required install modules from trusted public repositories. Once have 'pip', install cryptography library using command from Windows command prompt (CMD) terminal shown below: Syntax: install cryptography Verifying Installation Once module installed, verify creating empty Python program file writing import statement follows: File: verify.py import cryptography Now, save above file execute using following command terminal: Syntax: python verify.py above Python program file does return error, module installed properly. However, case where exception raised, reinstalling library, also recommended refer official documentation library. Understanding Fernet (symmetric encryption) Fernet implementation symmetric (also called "secret key") authenticated cryptography. Fernet guarantees that cannot manipulate read data encrypted using further without key. Fernet also provides support implementation rotation through MultiFernet. Fernet class some methods order understand concept Cryptography detail. class cryptography.fernet.Fernet(key) This class offers facilities encryption well decryption. This class accepts input parameter. This parameter URL-safe base64-encoded 32-byte key. This must kept secret. Anyone with this able create read messages. Now, before some methods Fernet class, consider simple example demonstrating Example importing Fernet class from fernet module cryptography package from cryptography.fernet import Fernet generating theKey Fernet.generate_key() variable holding value first Fernet(theKey) plain text converted into cipher text using encrypt() method theToken first.encrypt(b"Hello, Students! Welcome Python tutorial Javatpoint.com") printing encrypted message print("Encrypted Message: theToken) cipher text converted back into plain text using decrpyt() method decryptMsg first.decrypt(theToken) printing decrypted message print("\nDecrypted Message: decryptMsg) Output: Encrypted Message: b'gAAAAABiZAj1lcmLXPbRJng9wxgowFB731MLUFu-nstC8Sdnzn24y_lhu_h1QmR5N68d_DdpH8mIGNF6Y-7PgSmgUYkxwouw7R80lWk1k9IPp7MiKtv5O3OWmG6gk4rK4k5iNzE5sPd-L_ns0Zn8nmG2Zr--QDUi2Q==' Decrypted Message: b'Hello, Students! Welcome Python tutorial Javatpoint.com' Explanation: above snippet code, have imported Fernet class from fernet module cryptography package. have then used class method called generate_key() order generate key. then used this convert plain text into ciphertext with help encrypt() method printed encrypted message. then again used this convert ciphertext into plain text with help decrypt() method printed decrypted message user. observe that decrypted output front original message, which signifies byte format. However, remove this with help decode() method while printing original message. consider following example demonstrating implementation decode() method. Example importing Fernet class from fernet module cryptography package from cryptography.fernet import Fernet generating theKey Fernet.generate_key() variable holding value first Fernet(theKey) plain text converted into cipher text using encrypt() method theToken first.encrypt(b"This example demonstrates implementation decode() method.") printing encrypted message print("Encrypted Message: theToken) cipher text converted back into plain text using decrpyt() method decryptMsg first.decrypt(theToken) printing plain text using decode() method this method converts message from byte string print("\nDecrypted Message: decryptMsg.decode()) Output: Encrypted Message: b'gAAAAABiZrxrUg61HeVbOke04ftXTKnl17z3e8LjHfLMiCPQ2ZQ4Hz43bL1twbcS4cXcsclsUZKT-q3oyWVecKH39hgEgh1GQaB4E1gkMJr1Q6LbC93N97yeFq0kME_ttc-BVrXCGZBzNPRdW1zl45v7ow-d893kkMiab-y1OSMjbVFL9nK_iZE=' Decrypted Message: This example demonstrates implementation decode() method. Explanation: above snippet code, have imported Fernet class from fernet module cryptography package. have then used class method called generate_key() order generate key. then used this convert plain text into ciphertext with help encrypt() method printed encrypted message. then again used this convert ciphertext into plain text with help decrypt() method. last, have used decode() method convert message from byte string printed users. understand working method that used earlier. generate_key(): This method belongs Fernet class used generate fresh fernet key. necessary keep safe significant component decrypting ciphertext. lost, user longer decrypt message. Moreover, intruder hacker gets access key, they read data forge data. encrypt(data): This method allows encrypt data passed parameter. output this encryption known "Fernet token", which fundamentally ciphertext. encrypted token also consists current timestamp when produced plain text. encrypt method throws exception data bytes. Parameter(s): data (bytes)- This parameter contains message would like encrypt. Return Value(s): secure message ciphertext cannot read altered without key. This considered "Fernet token". URL-safe base64-encoded. Raise(s): TypeError This exception raised case data bytes. encrypt_at_time(data, current_time): This method used encrypt data passed with help explicitly passed current time. working this method similar encrypt() method that earlier. idea behind this method client code able text token expiration. Since utilize this method insecure manner, must ensure that time passed current_time outside testing correct, i.e., int(time.time()). Parameter(s): current_time (int)- This parameter represents current time Note: Similarly encrypt(), encrypted message consists timestamp plain text; this case, timestamp value current_time parameter. decrypt(token, None): This method used decrypt Fernet token passed parameter. token successfully decrypted, will original plain text. Else exception will raised. safe utilize this data immediately Fernet verifies that data been tampered with before returning Parameter(s): token (bytes) This parameter Fernet token. This outcome calling encrypt() (int) This optional parameter consisting number seconds message valid. message older than seconds (from when created), exception will raised. parameter provided None), message considered. Return Value(s): original plain text. Raise(s): This method raises following exceptions: cryptography.fernet.InvalidToken token just case invalid, this exception raised. token invalid several reasons: older than ttl, malformed, does contain valid signature. TypeError This exception raised token bytes. decrypt_at_time(token, ttl, current_time): This method used decrypt token with help explicitly passed current time. working this method similar decrypt() method that earlier. idea behind this method client code able test token expiration. Since this method insecure way, must ensure that time passed current_time parameter outside testing correct, i.e., int(time.time()). Parameter(s): current_time (int) This parameter represents current time. extract_timestamp(token): This method used timestamp token passed parameter. caller then decide token about expire and, instance, issue token. Parameter(s): token (bytes) This parameter fernet token. This outcome calling encrypt() Return Value(s): UNIX timestamp token. Raise(s): This method raises following exceptions: cryptography.fernet.InvalidToken token's signature invalid, this exception raised. TypeError This exception raised token bytes. Next TopicHangman Game Python prev next