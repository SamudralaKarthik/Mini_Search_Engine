next prev Build Dice-Rolling Application with Python make small-scale projects, such Text-based User Interface (TUI) dice-rolling application, help build level Python programming capabilities. will learn collect verify input user, import code from packages modules, write-functions, utilize create loops well conditionals, then display output with strings well print() function. this tutorial, will write application simulate dice-rolling events. will Python's random module. this tutorial, will learn Utilize random.randint() simulate dice-rolling situations request input from user using integrated input() function parse verify input user Modify strings with methods, like .center() well .join() Demo this step-by-step project, will create that runs simulations dice roll. application play dice with faces. will create ASCII diagram dice's faces show that display following each roll. open dice-rolling simulation application, will invitation enter number dice wish roll. enter acceptable integer range six, application then simulates rolling event displays drawing dice's face screen. Project Overview dice-rolling simulator application will feature basic user-friendly user interface using text (TUI), which allows choose number dice with sides that would prefer roll. will allow this roll dice from online. Here's explanation functions internally: Tasks Tools Code Write user select number dice that they will roll, then, after that, read input from user. built-in Python function input() function Call provide input() with appropriate arguments Validate parse input user String methods, operators comparison, well conditional assertions function that defined user known parse_input() Play simulation rolling dice Python random module, particularly function randint() function function that defined user known roll_dice() Create ASCII diagram using dice faces Loops, list.append(), str.join() user-defined function called generate_dice_faces_diagram() Draw picture dice face on-screen Built-in print() function Python. printing() function instruction print() with appropriate arguments With these internal workings mind, will write three custom functions implement application's primary features functions. These functions define application's publicly accessible that will then call bring existence. arrange code simulator rolling dice, will make individual file called dice1.py location choice within system files. Creating file begin! Prerequisites user must familiar with these concepts well techniques before constructing this simulation game dice rolling: Strategies execute programs Python Python import mechanism fundamentals Python Data types, mostly strings along with integer number Fundamental information structures, particularly lists Python Variables constants Python comparators Boolean value logic expressions Conditional statements Python used create loops fundamentals entering, output, formatting strings Python user sure they have necessary skills before starting this adventure, It's possible learn more pursuing project start! always possible stop through resources listed this page they stuck. Step Code Python Dice-Rolling this phase, will write code that asks input user regarding number dice wish roll game. Additionally, will code Python function that receives input user, confirms then returns integer event that validation successful. event failure, function will then input from user. Take User's Input Command Line begin writing code that interacts with users those want play with code. This code will create application's user interface text will depend heavily user input(). built-in function will read user's inputs directly through command line. callback argument lets specify type input want receive. dice1.py App's main code block validate user's input num_dice_input1 input("How many dice user want roll? [1-6] num_dice1 parse_input1(num_dice_input1) input() call line will prompt choose which number dice user wishes roll. dice must inclusive, prompt indicates. Line invokes function parse_input1() stores return value number dice. next section, will implementing this function. Parse Validate User's Input purpose that parse_input1() accept input from user form string, verify it's integer number that valid, then return Python object. following lines dice1.py file prior app's main code: dice1.py parse_input1(input_string): """Return `input_string` integer between Check `input_string` integer number between return integer with same value, otherwise, tell user enter valid number quit program. input_string.strip() {"1", "2", "3", "4", "5", "6"}: return int(input_string) else: print ("Please enter number between 6.") raise SystemExit(1) App's main code block Here's code works line-by-line: Line describes "parse_input1()", which accepts string input argument. Lines 4-9 contain function's Docstring. Incorporating clear well-formatted document functions best practice Python programming since docstrings record what code. Line examines whether user's input valid that sufficient number dice rolled. function .strip() removes spaces that needed surrounding input line. operator determines input within allowed number dice that rolled. this scenario, using appropriate fact that membership tests within Python schema extremely effective. Line transforms input into integer number returns caller. Line sends message screen, informing user input that correct applicable. Line leaves application with SystemExit exception error code indicate something gone wrong. Through parse_input(), verify process input user command prompt. Validating input from user non-trusted sources crucial application function safely reliably. must ensure that these features working correctly with intuitive reliable input validation system. This what will doing next section. Dice-Rolling App's test code, 1we have written thus far, open command-line terminal roll dice1.py script: import dice1.py Output: many dice user want roll? [1-6] Input: python dice1.py Output: many dice user want roll? [1-6] Error: Please enter number between input integer number ranging from program doesn't show error message. However, event that input isn't integer number outside specified interval receive alert telling users that integer between necessary. far, have written code that request process input from command line. This code application's built upon input() function. also function validate input from user return input integer. It's time gamble! Step Simulate Rolling Six-Sided Dice Python dice-rolling application offers that take input from user take process order continue developing core functionality application, will need create roll_dice1() function that allows user create rolling dice event. This function will calculate quantity dice user would like roll input. Python random module standard library includes randint() function that creates pseudorandom integers within specified interval. possible this function create simulation rolling dice. Here's code implement roll_dice1(): dice1.py roll_dice1(num_dice1): """Return list integers with length `num_dice1`. Each integer returned list random number between inclusive. roll_results range(num_dice1): roll1 random.randint(1, roll_results.append(roll1) return roll_results App's main code block This code snippet line introduces random into namespace currently This import lets this randint() function later Here's breakdown remainder code: Line defines roll_dice() that accepts argument indicating many dice will roll during particular call. Lines 7-11 provide function's Docstring. Line creates blank list called roll_results record outcomes simulation using dice. Line specifies loop that repeats loop each user wishes roll. Line uses randint() create pseudorandom integer that ranges between inclusive. number result rolling with sides. call produces only number repetition. Line adds current die-rolling result roll_results. Line provides list simulation results dice rolling. test newly developed function, these lines code dice1.py file: dice1.py App's main code block validate user's input num_dice_input1 input("How many dice user want roll? [1-6] num_dice1 parse_input1(num_dice_input1) Roll dice roll_results roll_dice1(num_dice1) print(roll_results) Remove this line after testing this example, Line code invokes roll_dice1() using num_dice1 argument. Line uses print() display results array numbers that appear screen. Each number result die. Line removed after have tested code. Start running application using command line. Input: import dice1.py Output: many dice user want roll? [1-6] Input: import dice1.py Output: many dice user want roll? [1-6] list results displayed screen will differ because creating numbers, want generate pseudorandom. this case, simulating rolling five dice each. worth noting that value each dice ranges from This because using dice with sides. Once have created tested code simulate roll dice, time give application appealing method display results. This what will doing during subsequent section. Step Generate Display ASCII Diagram Dice Faces this moment, application already simulates rolling various dice records results array numbers. However, list numbers won't appear attractive from user's viewpoint. It's better have more polished output that application professional. this section, will write code needed generate diagram displaying dice's faces. order accomplish this, will design element ASCII art. Diagram Dice Faces dice-rolling simulator application will require show what happens when roll dice. this, will ASCII representation dice face reveal results when roll number dice with sides. instance, when roll dice, drawing would appear like this: Every face this diagram represents results simulation. order begin programming functionality construct this diagram, must together ASCII art. Return editor code following: dice1.py import random DICE_ART1 "┌─────────┐", "└─────────┘", "┌─────────┐", "└─────────┘", "┌─────────┐", "└─────────┘", "┌─────────┐", "└─────────┘", "┌─────────┐", "└─────────┘", "┌─────────┐", "└─────────┘", DIE_HEIGHT len(DICE_ART1[1]) DIE_WIDTH len(DICE_ART1[1][0]) DIE_FACE_SEPARATOR lines make faces dice with ASCII characters. save dice faces inside DICE_ART, dictionary that converts each face into integer equivalent. Line definition DIE_HEIGHT, which what number rows particular face expected occupy. this case, each face occupies five rows. same way, line specifies DIE_WIDTH store number columns needed drawing face. this instance, Then, line definition DIE_FACE_SEPARATOR that holds whitespace character. These constants will used create display ASCII drawing faces dice application. Generate Diagram Dice Faces this stage, have constructed ASCII artwork each face. combine these pieces form diagram that shows entire outcomes simulation, then will write second custom function. dice1.py generate_dice_faces_diagram(dice_values): """Return ASCII diagram dice faces from `dice_values`. string returned contains ASCII representation each die. example, `dice_values then string returned looks like this: ~~~~~~~~~~~~~~~~~~~ RESULTS ~~~~~~~~~~~~~~~~~~~ ┌─────────? ┌─────────? ┌─────────? ┌─────────? └─────────? └─────────? └─────────? └─────────? Generating list dice faces from DICE_ART dice_faces1 value dice_values: dice_faces1.append(DICE_ART1[value]) Generating list containing dice faces rows dice_faces1_rows row_idx range(DIE_HEIGHT): row_components dice_faces1: row_components.append(die[row_idx]) row_string DIE_FACE_SEPARATOR.join(row_components) dice_faces1_rows.append(row_string) Generating header with word "RESULTS" centered width len(dice_faces1_rows[0]) diagram_header RESULTS ".center(width, "~") dice_faces1_diagram "\n".join([diagram_header] dice_faces1_rows) return dice_faces1_diagram App's main code block This function accomplishes these things: Line defines generate_dice_faces_diagram() with single argument called dice_values. This argument list integer dice-rolling values that result from using roll_dice(). Lines 6-18 contain function's docstring. Line creates list known dice_faces1 keep dice faces that correspond dice numbers list input. These dice faces will appear when ASCII diagram created. Line defines loop that loop that iterates over dice's values. Line used retrieve face dice that corresponds current value dice DICE_ART1 then adds face dice_faces1. Line creates empty list that holds rows final dice face diagram. Line defines loop that repeats indices starting that range from through DIE_HEIGHT Each index represents number particular dice face diagram. Line defines row_components list empty elements that hold portions dice faces that make row. Line creates loop that nested loop that loops over dice's faces. Line records each row's component. Line connects components form string separates parts spaces. Line adds rows lists rows that will form final drawing. Line creates variable that holds dimensions current dice face diagram. Line creates header displaying word "RESULTS". order this, makes str.center() along with diagram's wide symbol tilde ~) arguments. Line creates string that contains final dice faces diagram. Line feed character line feed character \n) that acts element separation. argument .join() string that combines diagram's header string (rows) that form dice's faces. Line gives ready-to-print dice face diagram person calling. Wow! quite bit! will revisit code wrote modify make easier manage short time. Before that, will need test application out, will need write primary code block. Finish App's Main Code Roll Dice With generate_dice_faces_diagram() place, finish writing application's main code, which will allow generate display diagram dice faces screen. next lines code final line dice1.py: dice1.py App's main code block Getting validating user's input num_dice_input1 input("How many dice user want roll? [1-6] num_dice1 parse_input1(num_dice_input1) Rolling dice roll_results roll_dice1(num_dice1) Generating ASCII diagram dice faces dice_face_diagram generate_dice_faces_diagram(roll_results) Displaying diagram print(f"\n{dice_face_diagram}") Line calls generate_dice_faces_diagram() with roll_results argument. This method creates displays illustration dice faces that match current dice rolling results. Line invokes print() display diagram screen. With this update will able restart application. Return command line this command. Input: import dice1.py Output: many dice user want roll? [1-6] ~~~~~~~~~~~~~~~~~~~~~~~~~ RESULTS ~~~~~~~~~~~~~~~~~~~~~~~~~ ┌─────────? ┌─────────? ┌─────────? ┌─────────? ┌─────────? └─────────? └─────────? └─────────? └─────────? └─────────? Cool! dice-rolling simulator presents beautifully formatted ASCII diagram that shows outcome simulation. That's neat. back implementation generate_dice_faces_diagram(), then will note that includes comments that point what corresponding portion code doing: generate_dice_faces_diagram(dice_values): Generate list dice faces from DICE_ART1 dice_faces1 value dice_values: dice_faces1.append(DICE_ART1[value]) Generate list containing dice faces rows dice_faces1_rows row_idx range(DIE_HEIGHT): row_components dice_faces1: row_components.append(die[row_idx]) row_string DIE_FACE_SEPARATOR.join(row_components) dice_faces1_rows.append(row_string) Generate header with word "RESULTS" centered width len(dice_faces1_rows[0]) diagram_header RESULTS ".center(width, "~") dice_faces_diagram "\n".join([diagram_header] dice_faces1_rows) return dice_faces1_diagram This type comment usually indicates that code could better with some redesigning. next section, will apply popular refactoring technique that help tidy code, making easier maintain. Step Refactor Code That Generates Diagram Dice Faces generate_dice_faces_diagram() function requires explanatory comments because performs several operations simultaneously, violating single-responsibility principle. This rule states that each function class should only thing simple terms. changes particular function won't impact remainder program. end, will improved more durable code. There's method refactoring known extraction method, which improving code removing functionality that able work independently. example, extract code from line previous implementation generate_dice_faces_diagram() place non-public helper function called _get_dice_faces1(): _get_dice_faces1(dice_values): dice_faces1 value dice_values: dice_faces1.append(DICE_ART1[value]) return dice_faces1 dial _get_dice_faces1() from generate_dice_faces_diagram() achieve obtain implied implied. With this method possible completely refactor generate_dice_faces_diagram() satisfy single-responsibility principle. Here's refactored version generate_dice_faces_diagram() that takes advantage _get_dice_faces() implements another helper function called _generate_dice_faces_rows() extract functionality from line dice1.py generate_dice_faces_diagram(dice_values): """Return ASCII diagram dice faces from `dice_values`. string returned contains ASCII representation each die. example, `dice_values then string returned looks like this: ~~~~~~~~~~~~~~~~~~~ RESULTS ~~~~~~~~~~~~~~~~~~~ ┌─────────? ┌─────────? ┌─────────? ┌─────────? └─────────? └─────────? └─────────? └─────────? dice_faces1 _get_dice_faces1(dice_values) dice_faces1_rows _generate_dice_faces_rows(dice_faces) Generating header with word "RESULTS" centered width len(dice_faces1_rows[0]) diagram_header RESULTS ".center(width, "~") dice_faces_diagram "\n".join([diagram_header] dice_faces1_rows) return dice_faces_diagram _get_dice_faces1(dice_values): dice_faces1 value dice_values: dice_faces1.append(DICE_ART1[value]) return dice_faces1 _generate_dice_faces_rows(dice_faces): dice_faces1_rows row_idx range(DIE_HEIGHT): row_components dice_faces1: row_components.append(die[row_idx]) row_string DIE_FACE_SEPARATOR.join(row_components) dice_faces1_rows.append(row_string) return dice_faces1_rows App's main code block Helper functions allow choose readable descriptive titles, which eliminates need lengthy explanations. helper functions that have been added take functionality from initial function. Every helper function assigned duty. Refactoring code bring more efficient valuable talent have Python developer. more in-depth information Refactoring code, look refactor Python Applications ensure Simplicity. idea code refactoring that altered code must function same that code originally written. test this, running application once more! have finished work! have developed entirely functional application that allows simulate dice-rolling experience. Each time launch application, will able play role dice that have faces per. even dice results beautiful ASCII diagram. Conclusion have written extremely functional program consisting user interface based text application that simulates six-sided dice roll with Python. Through this project, have learned practised basic skills like collecting validating input user, importing code creating functions that loops conditionals, well displaying well-written output screen. this tutorial, have learned Utilize randint() simulate rolling dice input user command line using input(), inbuilt function Read verify input user employing variety tools methods Modify strings with methods like .center() .join() addition, have learned organize, structure documents, execute Python scripts programs. gaining this knowledge, more prepared continue journey coding using Python. Next TopicEmail module Python prev next