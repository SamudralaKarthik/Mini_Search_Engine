next prev Adding key:value pair dictionary Python Python dictionaries collections key-value pairs that sorted. this article, we'll look expand dictionary that previously been created with key-value pairs. Dictionary Python list entries turned into dictionary Python enclosing them curly brackets separating them with commas. Dictionary pairs values kept pairs, where element other value. Values dictionaries type data replicated, unlike keys, which cannot repeated must immutable. structure enclosed curly brackets with commas separating elements colon separating each from value. write dictionary that words like follows: keys must immutable, such integers, tuples, strings. same name spelt differently regarded distinct Python dictionaries. Please aware that dictionary keys case-sensitive, meaning that they will treated differently even they have same name different case. might need update key/value pairs when utilising dictionary. Let's examine key-value pair addition process Python dictionary. Method Giving subscript designation Using subscript giving value, item dictionary. Example Python code demonstrate addition key:value pair existing dictionary dicts {'key-1':'Technology', 'key-2':'is'} print("The Current Dictionary dicts) using subscript notation Dicts_Name[New_Keys_Name] New_Keys_Value dicts['key-3'] 'very' dicts['key-4'] 'important' dicts['key-5'] 'for' dicts['key-6'] 'everyone' print("The Updated Dictionary dicts) Output Current Dictionary {'key-1': 'Technology', 'key-2': 'is'} Updated Dictionary {'key-1': 'Technology', 'key-2': 'is', 'key-3': 'very', 'key-4': 'important', 'key-5': 'for', 'key-6': 'everyone'} Method update() method key-value pair taken update() function immediately added dictionary that already exists. update function's parameter key-value pair. demonstrated below, also provide numerous values. Example Python code demonstrate addition key:value pair existing dictionary using update() method CountryCapitalDict {"India": "New Delhi", "France" "Paris" "Nepal" "Kathmandu", "Spain" "Madrid"} print("Current Dictionary :",CountryCapitalDict) CountryCapitalDict.update( {"United States America" "Washington DC"} print("Updated Dictionary :",CountryCapitalDict) Adding more value pairs updated CountryCapitalDict.update( [("Australia", "Canberra"),("Japan","Tokyo")] print("The Dictionary :",CountryCapitalDict) Output Current Dictionary {'India': 'New Delhi', 'France': 'Paris', 'Nepal': 'Kathmandu', 'Spain': 'Madrid'} Updated Dictionary {'India': 'New Delhi', 'France': 'Paris', 'Nepal': 'Kathmandu', 'Spain': 'Madrid', 'United States America': 'Washington DC'} Dictionary {'India': 'New Delhi', 'France': 'Paris', 'Nepal': 'Kathmandu', 'Spain': 'Madrid', 'United States America': 'Washington DC', 'Australia': 'Canberra', 'Japan': 'Tokyo'} Method Combining dictionaries combining dictionaries, also elements existing dictionary. Here too, update() method used, this time method's parameter dictionary. Example CountryCapitalDict1 {'India': 'New Delhi', 'France': 'Paris', 'Nepal': 'Kathmandu', 'Spain': 'Madrid'} CountryCapitalDict2 {'United States America': 'Washington DC', 'Australia': 'Canberra', 'Japan': 'Tokyo'} CountryCapitalDict1.update(CountryCapitalDict2) print("The Combined Dictionary :",CountryCapitalDict1) Output Combined Dictionary {'India': 'New Delhi', 'France': 'Paris', 'Nepal': 'Kathmandu', 'Spain': 'Madrid', 'United States America': 'Washington DC', 'Australia': 'Canberra', 'Japan': 'Tokyo'} Method Using Key:Value pair input key:value pair taken form input from user then inserted added existing dictionary. Example Taking input key:value into existing dictionary functional Creating dictionary class class my_dict(dict): __init__ function 	def __init__(self): 		self dict() Function key:value 	def add(self, keys, values): 		self[keys] values Main Function dict_objct my_dict() Taking input value Geek dict_objct.keys input("Enter dict_objct.values input("Enter value dict_objct.add(dict_objct.keys, dict_objct.values) dict_objct.add("John", print(dict_objct) Output Enter Ross Enter value {'Ross': '25', 'John': 26} Next Topicfit(), transform() fit_transform() Methods Python prev next