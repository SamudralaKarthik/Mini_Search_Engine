next prev File Explorer using Tkinter Python following tutorial, will learn build GUI-based File Explorer with help Tkinter, OS, Shutil modules Python programming language. This project suitable beginners, need some brief knowledge associated with libraries. will apply them real life with this project. let's begun. What File Explorer? File Explorer File Manager application that allows users manage files folders device. File manager applications allow users view, edit, copy, delete, move files folders. users also manage files folders attached disks well networked storage. Project Prerequisites order start building GUI-based File Explorer project Python, will require following libraries. Tkinter This library will allow create window. This library will allow perform different operations file path. Shutil This library will allow copy move file. Since these libraries come pre-installed with Python, there need install them separately. Building File Explorer using Tkinter Python procedure building File Explorer Python divided into several steps better understanding. steps will need execute follows: Step will start importing required modules. Step will then define functions execute different operations application. Step will then create main window application. Step will widgets window event triggers. understand these steps detail. Importing necessary modules Firstly, will import required modules project. These modules include modules widgets from Tkinter library, module, shutil module. consider following code snippet illustrating implementation same. File: fileExplorer.py importing required modules from tkinter import importing widgets modules from tkinter from tkinter import messagebox importing messagebox module from tkinter from tkinter import filedialog importing filedialog module from tkinter import importing module import shutil importing shutil module Explanation: have imported modules widgets from Tkinter library above code snippet. have also imported messagebox module from Tkinter library filedialog module fd. messagebox module compilation functions that display various kinds messages with different icons. filedialog module compilation open saves dialog functions. last, have then imported module shutil module. Defining functions necessary implement operations application Once required modules imported, time define various functions implement certain operations application. will define functions open file, copy file, delete file, rename file, open folder, delete folder, move folder, list files present folder. consider following code snippets understand implementation these functions. Opening File first function define will allow open selected file. will askopenfilename() method Tkinter's filedialog module select file. will then startfile() method module open selected file. following snippet code demonstrating same. File: fileExplorer.py ----------------- defining functions ----------------- function open file openFile(): selecting file using askopenfilename() method filedialog the_file fd.askopenfilename( title "Select file type", filetypes [("All files", "*.*")] opening file using startfile() method module os.startfile(os.path.abspath(the_file)) Explanation: above code snippet, have defined function openFile(). Within this function, have selected file with help filedialog's askopenfilename() method. have then used startfile() method module open selected file. have also used abspath() method selected file normalize version file path. Copying file will define another function copy file directory. will start selecting file copy destination paste will then copy() method shutil module return message displaying success message. consider following snippet code demonstrating same. File: fileExplorer.py function copy file copyFile(): using filedialog's askopenfilename() method select file fileToCopy fd.askopenfilename( title "Select file copy", filetypes=[("All files", "*.*")] using filedialog's askdirectory() method select directory directoryToPaste fd.askdirectory(title "Select folder paste file") using try-except method try: using copy() method shutil module paste selected file desired directory shutil.copy(fileToCopy, directoryToPaste) showing success message using messagebox's showinfo() method mb.showinfo( title "File copied!", message "The selected file been copied selected location." except: using showerror() method display error mb.showerror( title "Error!", message "Selected file unable copy selected location. Please again!" Explanation: above snippet code, have defined function copyFile(). Within this function, have used askopenfilename() method filedialog module selected file copy. have then used askdirectory() method select directory where will paste selected file. then used try-except method copy() method shutil module paste selected file desired directory. have also displayed message showing message successful operation using showinfo() method failed operation using showerror() method messagebox module. Deleting file will define function delete file from directory. will start selecting file from directory. will then delete that file using remove() method provided module display message showing success message. consider implementation same following code snippet. File: fileExplorer.py function delete file deleteFile(): selecting file using filedialog's askopenfilename() method the_file fd.askopenfilename( title "Choose file delete", filetypes [("All files", "*.*")] deleting file using remove() method module os.remove(os.path.abspath(the_file)) displaying success message using messagebox's showinfo() method mb.showinfo(title "File deleted!", message "The selected file been deleted.") Explanation: above snippet code, have defined function deleteFile(). Within this function, have used filedialog's askopenfilename() method select file from directory. have then used remove() method module delete selected file. have then used showinfo() method messagebox module display success message. Renaming file will define function rename file. will start creating pop-up window where user will select file from directory rename consider following snippet code illustrating same. File: fileExplorer.py function rename file renameFile(): creating another window rename_window Toplevel(win_root) setting title rename_window.title("Rename File") setting size position window rename_window.geometry("300x100+300+250") disabling resizable option rename_window.resizable(0, setting background color window #F6EAD7 rename_window.configure(bg "#F6EAD7") creating label rename_label Label( rename_window, text "Enter file name:", font ("verdana", "8"), "#F6EAD7", "#000000" placing label window rename_label.pack(pady creating entry field rename_field Entry( rename_window, width textvariable enteredFileName, relief GROOVE, font ("verdana", "10"), "#FFFFFF", "#000000" placing entry field window rename_field.pack(pady padx creating button submitButton Button( rename_window, text "Submit", command submitName, width relief GROOVE, font ("verdana", "8"), "#C8F25D", "#000000", activebackground "#709218", activeforeground "#FFFFFF" placing button window submitButton.pack(pady defining function file path getFilePath(): selecting file using filedialog's askopenfilename() method the_file fd.askopenfilename(title "Select file rename", filetypes [("All files", "*.*")]) returning file path return the_file defining function that will called when submit button clicked submitName(): getting entered name from entry field renameName enteredFileName.get() setting entry field empty string enteredFileName.set("") calling getFilePath() function fileName getFilePath() creating file name file newFileName os.path.join(os.path.dirname(fileName), renameName os.path.splitext(fileName)[1]) using rename() method rename file os.rename(fileName, newFileName) using showinfo() method display message show success message mb.showinfo(title "File Renamed!", message "The selected file been renamed.") Explanation: above code snippet, have defined function renameFile(). Within this function, have created pop-up window using Toplevel() class, specifying parameter win_root, application's main window. have then title, size, position window. have also disabled resizable option better background color #F6EAD7. have then created label, entry field, button with help Label(), Entry(), Button() widgets Tkinter library their master parameters object Toplevel() class, i.e., rename_window. have then positions these widgets window using pack() method. have textvariable parameter Entry() widget object StringVar() class, i.e., enteredFileName. have also command parameter Button() widget submitName() function, allowing rename file. have then defined another function getFilePath(). Within this function, have used askopenfilename() method filedialog module stored path file variable named the_file. have then returned this variable. Last function have defined submitName(). This function will called when user clicks submit button created renameFile() function. Within this function, have used get() method retrieve value from enteredFileName object set() method value empty string. have then called getFilePath() method stored returned path variable. have then used os.path.join() method append directory path with file name extension. then used rename() method rename file. last, have used messagebox's showinfo() method display success message users. Opening Folder will define function open folder. This function will askdirectory() method filedialog module select folder open file using startfile() method module. consider following snippet code illustrating same. File: fileExplorer.py defining function open folder openFolder(): using filedialog's askdirectory() method select folder the_folder fd.askdirectory(title "Select Folder open") using startfile() module open selected folder os.startfile(the_folder) Explanation: above code snippet, have defined function openFolder(). Within this function, have used filedialog's askdirectory() method select desired folder. have then used startfile() method module open selected folder. Deleting folder will define function delete selected folder. This function will rmdir() method module remove directory from system. consider following snippet code illustrating same. File: fileExplorer.py defining function delete folder deleteFolder(): using filedialog's askdirectory() method select folder folderToDelete fd.askdirectory(title 'Select Folder delete') using rmdir() method module delete selected folder os.rmdir(folderToDelete) displaying success message using showinfo() method mb.showinfo("Folder Deleted!", "The selected folder been deleted!") Explanation: above code snippet, have defined function deleteFolder(). have then used askdirectory() method filedialog module select desired folder. have then used rmdir() method module remove select folder from directory. have then displayed success message using messagebox's showinfo() method. Moving folder will define function move folder from location another location. This function will move() method shutil library move request folder desired destination. consider following snippet code illustrating same. File: fileExplorer.py defining function move folder moveFolder(): using askdirectory() method select folder folderToMove fd.askdirectory(title 'Select folder want move') using showinfo() method dislay mb.showinfo(message 'Folder been selected move. Now, select desired destination.') using askdirectory() method select destination fd.askdirectory(title 'Destination') #using try-except method try: using move() method shutil module move folder requested location shutil.move(folderToMove, des) displaying success message using messagebox's showinfo() method mb.showinfo("Folder moved!", 'The selected folder been moved desired Location') except: displaying failure message using messagebox's showerror() method mb.showerror('Error!', 'The Folder cannot moved. Make sure that destination exists') Explanation: above snippet code, have defined function moveFolder(). Within this function, have used askdirectory() method filedialog twice order select desired folder destination where folder will moved. have also displayed message using showinfo() method messagebox module. have then used try-except method, where utilized move() method specifying selected folder destination relocation. have also displayed success message with help showinfo() method failure message using showerror() method messagebox module. Listing files folder will define function list files folder. This done using listdir() method module, iterating through files printing them. also create pop-up window display file details. consider following snippet code illustrating same. File: fileExplorer.py defining function list files available folder listFilesInFolder(): declaring variable with initial value using askdirectory() method select folder the_folder fd.askdirectory(title "Select Folder") using listdir() method list files directory the_files os.listdir(os.path.abspath(the_folder)) creating object Toplevel class listFilesWindow Toplevel(win_root) specifying title pop-up window listFilesWindow.title(f'Files {the_folder}') specifying size position window listFilesWindow.geometry("300x500+300+200") disabling resizable option listFilesWindow.resizable(0, setting background color window #EC2FB1 listFilesWindow.configure(bg "#EC2FB1") creating list the_listbox Listbox( listFilesWindow, selectbackground "#F24FBF", font ("Verdana", "10"), background "#FFCBEE" placing list window the_listbox.place(relx rely relheight relwidth creating scroll the_scrollbar Scrollbar( the_listbox, orient VERTICAL, command the_listbox.yview placing scrollbar right side window the_scrollbar.pack(side RIGHT, fill setting yscrollcommand parameter listbox's config() method scrollbar the_listbox.config(yscrollcommand the_scrollbar.set) iterating through files folder while len(the_files): using insert() method insert file details list the_listbox.insert(END, str(i+1) the_files[i]) the_listbox.insert(END, the_listbox.insert(END, "Total Files: str(len(the_files))) Explanation: above code snippet, have defined function listFilesInFolder(). have then initialized variable with initial value have then used filedialog's askdirectory() method select desired folder. have then used listdir() method module stored list files variable. have then created object Toplevel() class Tkinter library. have also title, size, position, background color disabled resizable option. then created list using Listbox() widget place() method place list window. then created scrollbar using Scrollbar() widget used pack() method place right side list box. have then used config() method Listbox's object value yscrollcommand parameter the_scrollbar.set attribute. then used while loop iterate through list files insert() method insert details files list box. Creating main window application will create main window application. This window constructed using Tk() class Tkinter library. will also title, size, position, background color. consider following snippet code illustrating same. File: fileExplorer.py main function __name__ "__main__": creating object Tk() class win_root Tk() setting title main window win_root.title("File Explorer JAVATPOINT") size position window win_root.geometry("300x500+650+250") disabling resizable option win_root.resizable(0, setting background color #D8E9E6 win_root.configure(bg "#D8E9E6") Explanation: above code snippet, created object Tk() class. have then used title() method title application. have also used geometry() method size position application. have also parameter values zeroes resizable() method disable resizable option. last, have background color #D8E9E6 using configure() method. Adding Widgets main window setting event triggers Once application's main window created, time some widgets event triggers. will start adding frames window provide structure other widgets like labels buttons. will then label displaying heading different buttons manipulating functions created earlier. Creating Frames will begin adding some frames main window. These frames will provide structure widgets will define later. create frame with help Frame() widget Tkinter library. consider following snippet code illustrating implementation Frame() widget. File: fileExplorer.py creating frames using Frame() widget header_frame Frame(win_root, "#D8E9E6") buttons_frame Frame(win_root, "#D8E9E6") using pack() method place frames window header_frame.pack(fill "both") buttons_frame.pack(expand TRUE, fill "both") Explanation: above snippet code, have created some frames using Frame() widget. have also specified master parameter this widget win_root, object Tk() class background color #D8E9E6. then used pack() method place frames window. Creating Label will create label display heading application. label created using Label() widget. consider following code snippet illustrating implementation Label() widget. File: fileExplorer.py creating label using Label() widget header_label Label( header_frame, text "File Explorer", font ("verdana", "16"), "#D8E9E6", "#1A3C37" using pack() method place label window header_label.pack(expand TRUE, fill "both", pady Explanation: created label using Label() widget above code snippet. have master parameter this widget header_frame frame defined earlier. have also text, font style size, background color, foreground color. last, have used pack() method position this label window. Creating buttons will some buttons application using Button() widget. These buttons will allow manipulate functions created earlier. following snippet code illustrating implementation Button() widget. File: fileExplorer.py creating buttons using Button() widget open button open_button Button( buttons_frame, text "Open File", font ("verdana", "10"), width "#6AD9C7", "#000000", relief GROOVE, activebackground "#286F63", activeforeground "#D0FEF7", command openFile copy button copy_button Button( buttons_frame, text "Copy File", font ("verdana", "10"), width "#6AD9C7", "#000000", relief GROOVE, activebackground "#286F63", activeforeground "#D0FEF7", command copyFile delete button delete_button Button( buttons_frame, text "Delete File", font ("verdana", "10"), width "#6AD9C7", "#000000", relief GROOVE, activebackground "#286F63", activeforeground "#D0FEF7", command deleteFile rename button rename_button Button( buttons_frame, text "Rename File", font ("verdana", "10"), width "#6AD9C7", "#000000", relief GROOVE, activebackground "#286F63", activeforeground "#D0FEF7", command renameFile open folder button open_folder_button Button( buttons_frame, text "Open Folder", font ("verdana", "10"), width "#6AD9C7", "#000000", relief GROOVE, activebackground "#286F63", activeforeground "#D0FEF7", command openFolder delete folder button delete_folder_button Button( buttons_frame, text "Delete Folder", font ("verdana", "10"), width "#6AD9C7", "#000000", relief GROOVE, activebackground "#286F63", activeforeground "#D0FEF7", command deleteFolder move folder button move_folder_button Button( buttons_frame, text "Move Folder", font ("verdana", "10"), width "#6AD9C7", "#000000", relief GROOVE, activebackground "#286F63", activeforeground "#D0FEF7", command moveFolder list files button list_button Button( buttons_frame, text "List files Folder", font ("verdana", "10"), width "#6AD9C7", "#000000", relief GROOVE, activebackground "#286F63", activeforeground "#D0FEF7", command listFilesInFolder using pack() method place buttons window open_button.pack(pady copy_button.pack(pady delete_button.pack(pady rename_button.pack(pady open_folder_button.pack(pady delete_folder_button.pack(pady move_folder_button.pack(pady list_button.pack(pady Explanation: above code snippet, have created various buttons using Button() widget their master parameters buttons_frame, frame defined earlier. have also text display each button, along with font style size. have also button widget, background color, foreground color, button appearance, background foreground color when clicking button. have also value command parameter functions they will call. last, have used pack() method value pady parameter position buttons application. Running application Once structure application ready, time create object StringVar() class that will accept string entered entry field that will renaming file. will then call mainloop() method Tk() class application. consider following snippet code demonstrating implementation above statement. File: fileExplorer.py creating object StringVar() class enteredFileName StringVar() running window win_root.mainloop() Explanation: above snippet code, have created object StringVar() class used mainloop() method along with win_root, object Tk() class, application. Hence, have successfully created file explorer with using Tkinter Python. save Python project file execute following command result. Syntax: python fileExplorer.py Before output, complete snippet code "File Explorer using Tkinter" project Python. Complete Project Code following complete snippet code "File Explorer using Tkinter" project Python. File: fileExplorer.py importing required modules from tkinter import importing widgets modules from tkinter from tkinter import messagebox importing messagebox module from tkinter from tkinter import filedialog importing filedialog module from tkinter import importing module import shutil importing shutil module ----------------- defining functions ----------------- function open file openFile(): selecting file using askopenfilename() method filedialog the_file fd.askopenfilename( title "Select file type", filetypes [("All files", "*.*")] opening file using startfile() method module os.startfile(os.path.abspath(the_file)) function copy file copyFile(): using filedialog's askopenfilename() method select file fileToCopy fd.askopenfilename( title "Select file copy", filetypes=[("All files", "*.*")] using filedialog's askdirectory() method select directory directoryToPaste fd.askdirectory(title "Select folder paste file") using try-except method try: using copy() method shutil module paste select file desired directory shutil.copy(fileToCopy, directoryToPaste) showing success message using messagebox's showinfo() method mb.showinfo( title "File copied!", message "The selected file been copied selected location." except: using showerror() method display error mb.showerror( title "Error!", message "Selected file unable copy selected location. Please again!" function delete file deleteFile(): selecting file using filedialog's askopenfilename() method the_file fd.askopenfilename( title "Choose file delete", filetypes [("All files", "*.*")] deleting file using remove() method module os.remove(os.path.abspath(the_file)) displaying success message using messagebox's showinfo() method mb.showinfo(title "File deleted!", message "The selected file been deleted.") function rename file renameFile(): creating another window rename_window Toplevel(win_root) setting title rename_window.title("Rename File") setting size position window rename_window.geometry("300x100+300+250") disabling resizable option rename_window.resizable(0, setting background color window #F6EAD7 rename_window.configure(bg "#F6EAD7") creating label rename_label Label( rename_window, text "Enter file name:", font ("verdana", "8"), "#F6EAD7", "#000000" placing label window rename_label.pack(pady creating entry field rename_field Entry( rename_window, width textvariable enteredFileName, relief GROOVE, font ("verdana", "10"), "#FFFFFF", "#000000" placing entry field window rename_field.pack(pady padx creating button submitButton Button( rename_window, text "Submit", command submitName, width relief GROOVE, font ("verdana", "8"), "#C8F25D", "#000000", activebackground "#709218", activeforeground "#FFFFFF" placing button window submitButton.pack(pady defining function file path getFilePath(): selecting file using filedialog's askopenfilename() method the_file fd.askopenfilename(title "Select file rename", filetypes [("All files", "*.*")]) returning file path return the_file defining function that will called when submit button clicked submitName(): getting entered name from entry field renameName enteredFileName.get() setting entry field empty string enteredFileName.set("") calling getFilePath() function fileName getFilePath() creating file name file newFileName os.path.join(os.path.dirname(fileName), renameName os.path.splitext(fileName)[1]) using rename() method rename file os.rename(fileName, newFileName) using showinfo() method display message show success message mb.showinfo(title "File Renamed!", message "The selected file been renamed.") defining function open folder openFolder(): using filedialog's askdirectory() method select folder the_folder fd.askdirectory(title "Select Folder open") using startfile() module open selected folder os.startfile(the_folder) defining function delete folder deleteFolder(): using filedialog's askdirectory() method select folder folderToDelete fd.askdirectory(title 'Select Folder delete') using rmdir() method module delete selected folder os.rmdir(folderToDelete) displaying success message using showinfo() method mb.showinfo("Folder Deleted!", "The selected folder been deleted!") defining function move folder moveFolder(): using askdirectory() method select folder folderToMove fd.askdirectory(title 'Select folder want move') using showinfo() method dislay mb.showinfo(message 'Folder been selected move. Now, select desired destination.') using askdirectory() method select destination fd.askdirectory(title 'Destination') #using try-except method try: using move() method shutil module move folder requested location shutil.move(folderToMove, des) displaying success message using messagebox's showinfo() method mb.showinfo("Folder moved!", 'The selected folder been moved desired Location') except: displaying failure message using messagebox's showerror() method mb.showerror('Error!', 'The Folder cannot moved. Make sure that destination exists') defining function list files available folder listFilesInFolder(): declaring variable with initial value using askdirectory() method select folder the_folder fd.askdirectory(title "Select Folder") using listdir() method list files directory the_files os.listdir(os.path.abspath(the_folder)) creating object Toplevel class listFilesWindow Toplevel(win_root) specifying title pop-up window listFilesWindow.title(f'Files {the_folder}') specifying size position window listFilesWindow.geometry("300x500+300+200") disabling resizable option listFilesWindow.resizable(0, setting background color window #EC2FB1 listFilesWindow.configure(bg "#EC2FB1") creating list the_listbox Listbox( listFilesWindow, selectbackground "#F24FBF", font ("Verdana", "10"), background "#FFCBEE" placing list window the_listbox.place(relx rely relheight relwidth creating scroll the_scrollbar Scrollbar( the_listbox, orient VERTICAL, command the_listbox.yview placing scroll right side window the_scrollbar.pack(side RIGHT, fill setting yscrollcommand parameter listbox's config() method scrollbar the_listbox.config(yscrollcommand the_scrollbar.set) iterating through files folder while len(the_files): using insert() method insert file details list the_listbox.insert(END, str(i+1) the_files[i]) the_listbox.insert(END, the_listbox.insert(END, "Total Files: str(len(the_files))) main function __name__ "__main__": creating object Tk() class win_root Tk() setting title main window win_root.title("File Explorer JAVATPOINT") size position window win_root.geometry("300x500+650+250") disabling resizable option win_root.resizable(0, setting background color #D8E9E6 win_root.configure(bg "#D8E9E6") creating frames using Frame() widget header_frame Frame(win_root, "#D8E9E6") buttons_frame Frame(win_root, "#D8E9E6") using pack() method place frames window header_frame.pack(fill "both") buttons_frame.pack(expand TRUE, fill "both") creating label using Label() widget header_label Label( header_frame, text "File Explorer", font ("verdana", "16"), "#D8E9E6", "#1A3C37" using pack() method place label window header_label.pack(expand TRUE, fill "both", pady creating buttons using Button() widget open button open_button Button( buttons_frame, text "Open File", font ("verdana", "10"), width "#6AD9C7", "#000000", relief GROOVE, activebackground "#286F63", activeforeground "#D0FEF7", command openFile copy button copy_button Button( buttons_frame, text "Copy File", font ("verdana", "10"), width "#6AD9C7", "#000000", relief GROOVE, activebackground "#286F63", activeforeground "#D0FEF7", command copyFile delete button delete_button Button( buttons_frame, text "Delete File", font ("verdana", "10"), width "#6AD9C7", "#000000", relief GROOVE, activebackground "#286F63", activeforeground "#D0FEF7", command deleteFile rename button rename_button Button( buttons_frame, text "Rename File", font ("verdana", "10"), width "#6AD9C7", "#000000", relief GROOVE, activebackground "#286F63", activeforeground "#D0FEF7", command renameFile open folder button open_folder_button Button( buttons_frame, text "Open Folder", font ("verdana", "10"), width "#6AD9C7", "#000000", relief GROOVE, activebackground "#286F63", activeforeground "#D0FEF7", command openFolder delete folder button delete_folder_button Button( buttons_frame, text "Delete Folder", font ("verdana", "10"), width "#6AD9C7", "#000000", relief GROOVE, activebackground "#286F63", activeforeground "#D0FEF7", command deleteFolder move folder button move_folder_button Button( buttons_frame, text "Move Folder", font ("verdana", "10"), width "#6AD9C7", "#000000", relief GROOVE, activebackground "#286F63", activeforeground "#D0FEF7", command moveFolder list files button list_button Button( buttons_frame, text "List files Folder", font ("verdana", "10"), width "#6AD9C7", "#000000", relief GROOVE, activebackground "#286F63", activeforeground "#D0FEF7", command listFilesInFolder using pack() method place buttons window open_button.pack(pady copy_button.pack(pady delete_button.pack(pady rename_button.pack(pady open_folder_button.pack(pady delete_folder_button.pack(pady move_folder_button.pack(pady list_button.pack(pady creating object StringVar() class enteredFileName StringVar() running window win_root.mainloop() Output: Image main window File Explorer Application Image 2.1: Opening File Image 2.2: Displaying selected file Image 3.1: Copying file Image 3.2: Selecting folder paste file Image 3.3: Displaying message print success message copying file destined location. Image 4.1: Deleting file from directory Image 4.2: Displaying message print success message deletion file. Image 5.1: Renaming File Image 5.2: Selecting file rename Image 5.3: Displaying message print success message renaming file. Image 6.1: Opening folder Image 6.2: Displaying selected folder Image 7.1: Deleting folder from directory Image 7.2: Displaying message print success message deletion folder. Image 8.1: Moving folder. Image 8.2: Displaying message print success message selection desired folder. Image 8.3: Selecting destination moving folder. Image 8.4: Displaying message print success message moving file. Image 9.1: Selecting folder list files. Image 9.2: Displaying list window listing files available selected folder. Next TopicAutomated Trading Python prev next