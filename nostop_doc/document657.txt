next prev Python Execute Shell Command Automating repetitive jobs great idea. Developers system administrators frequently shell scripts automate recurring processes like health checks file backups. However, shell scripts could become more difficult maintain those activities more complicated. Thankfully, Python used automation instead shell scripts. same capability those shell scripts available Python through methods running shell commands. Python's ability execute shell commands opens door systematic, scalable automation computer processes. Here examples using Python shell commands advantageous: Importing necessary modules simple interactive Python. These techniques used launch external file, such an.exe, program. Python provides programmers with more flexibility power. aids process automation. Python shell scripts used accomplish numerous monotonous chores that lack originality productivity developers' lives, such disc scanning, deleting unneeded cache files, backup, recovery, many more. Understanding Shell: phrase that frequently misused shell. shell computing piece software that offers user interface using features operating system. Based features fundamental functioning device, operating system's shell either (Graphical User Interface) (Command Line Interface). shell Windows program that enables communicate with operating system through "command line," sometimes referred terminal Linux Mac. access Unix system using Shell. provide input, uses that input programs. output program shown once completed running. execute commands, programs, shell scripts shell environment. Similar there several operating systems, there numerous shell variations. Each type shell unique collection widely used commands features. command-line interpreter, sometimes referred shell, enables Linux Unix users manage their operating systems using command-line interfaces. Shells provide users ability interface with their operating systems effectively directly. Despite being single language, shell scripting simple learn even those without background programming since employs certain commands from everyday English. plan more intricate tasks, shells require skill because each dialect shell scripting regarded language. easiest methods establishing automation shell scripting. Shell scripting allows data scientists, DevOps, TechOps professionals repeat operations using conditional loop control structures using Linux Unix commands. There several names shell scripts. Shell scripts include Bash (the most popular), csh, tesh. Shell scripts known EXEC IBM's operating system, batch files what shell scripts known DOS. command-line shell graphical shell types shells. Command-line interfaces used access command-line shells, which used show output when computers receive input form human-readable instructions. Graphical shells graphical user interface (GUI) carry interactions crucial tasks including opening, closing, saving files. Shell widely used almost every effectiveness simplicity updating. does routine backups system monitoring your computer without having worry about Because shell's syntaxes commands same those placed command line, there need move between them. Shell scripts also created fast easily since they rapidly simple troubleshoot. Using os.system Command Using os.system() method Python, instantly shell command that saved string. This module offers portable method using functionality that dependent operating system. Open() used simply read write file, os.path module used change paths, file input module used read every line every command-line file. tempfile module should used create temporary files directories, shutil module should handle high-level file directory operations. Regardless matter whether Windows Platform, Macintosh, Linux, underlying Operating System chores thanks features module offers. will through these functions what accomplish with them this lesson. Code: Sample python code that will used execute operating system commands batch commands with help module provided Python. import import class ExecuteCommand: Constructor written that will used initialize various class variables which getting used across various functions __init__(self): self.command_to_run None this function used name operating system which those particular commands getting executed get_os_name(self): os_name os.name print("The name {}".format(os_name)) this command function main role this function command from user which needs executed user provide various arguments which present that command augments provided valid those will executed successfully otherwise exception occur get_command(self): print("Enter command that want execute::") input() self.command_to_run this actual function that actually executes particular command, command that entered user previous function executed this function execution that command successful then result that command stored other hand command execution faced exception error then user printed with particular error message that command execution been failed that exception execute_command(self): try: command output.txt".format(self.command_to_run) os.system(command) print("Command executed successfully") except Exception: print("Command execution faced exception.") this output function main role this function print output which obtained result command which executed previous function. get_output_of_command(self): with open("output.txt", "r") reader: output reader.read() print("Output command {}".format( self.command_to_run, output)) end, mean function written, this main function user printed with menu showing different options, various options that printed this menu that user select from like print name operating system which program getting executed, enter shell command that user wants execute, actually execute command which entered user, then print result obtained from execution particular command. these options listed represent different function that written inside above-written class, object above-written class created that object used call various functions. main(): shell_handler ExecuteCommand() while(True): from listed below list operations select operations print("Go selecting options") print("0. print name Operating System which program getting executed.") print("1. enter shell command that want execute.") print("2. execute command entered previous step.") print("3. print output previously executed command.") print("4. exit from code execution.") menu_choice input() menu_choice int(menu_choice) menu_choice shell_handler.get_os_name() elif menu_choice shell_handler.get_command() elif menu_choice shell_handler.execute_command() elif menu_choice shell_handler.get_output_of_command() elif menu_choice sys.exit() print( "For printing again choice menu enter want halt enter [n]") continue_or_exit input() continue_or_exit continue_or_exit 'Y': pass elif continue_or_exit continue_or_exit 'N': sys.exit() __name__ '__main__': main() Output: selecting options print name Operating System which program getting executed. enter shell command that want execute. execute command entered previous step. print output previously executed command. exit from code execution. name printing again choice menu enter want halt enter selecting options print name Operating System which program getting executed. enter shell command that want execute. execute command entered previous step. print output previously executed command. exit from code execution. Enter command that want execute:: printing again choice menu enter want halt enter selecting options print name Operating System which program getting executed. enter shell command that want execute. execute command entered previous step. print output previously executed command. exit from code execution. Command executed successfully. printing again choice menu enter want halt enter selecting options print name Operating System which program getting executed. enter shell command that want execute. execute command entered previous step. print output previously executed command. exit from code execution. output command 07/10/2022 11:12 07/10/2022 11:12 07/10/2022 08:22 batch.bat 07/10/2022 08:22 clean.sh 07/10/2022 08:21 2,304 code.py 07/10/2022 08:22 file_src.cpp 07/10/2022 11:12 output.txt 07/10/2022 08:22 program_c1.c 07/10/2022 08:22 program_c2.c 07/10/2022 08:22 program_c3.c 07/10/2022 08:22 program_c4.c 07/10/2022 11:12 sou.srt 07/10/2022 08:22 src.pdf File(s) 2,304 bytes Dir(s) 396,554,895,360 bytes free printing again choice menu enter want halt enter selecting options print name Operating System which program getting executed. enter shell command that want execute. execute command entered previous step. print output previously executed command. exit from code execution. Enter command that want execute:: date printing again choice menu enter want halt enter selecting options print name Operating System which program getting executed. enter shell command that want execute. execute command entered previous step. print output previously executed command. exit from code execution. Command executed successfully printing again choice menu enter want halt enter selecting options print name Operating System which program getting executed. enter shell command that want execute. execute command entered previous step. print output previously executed command. exit from code execution. output date command current date 07/10/2022 Enter date: (mm-dd-yy) printing again choice menu enter want halt enter selecting options print name Operating System which program getting executed. enter shell command that want execute. execute command entered previous step. print output previously executed command. exit from code execution. Explanation: above-written code, have written main function user printed with menu showing different options, various options that printed this menu that user select from like print name operating system which program getting executed, enter shell command that user wants execute, actually execute command which user enters, then print result obtained from execution particular command. these options listed represent different function that written inside above-written class, object above-written class created that object used call various functions. Using subprocess module: launch processes using subprocess module, connect their input/output/error pipes, their return codes. Using library functions like those subprocess modules like os.fork(), subprocess.Popen(), etc., program start processes. These processes, referred subprocesses, operate independently another, each having private system state primary thread execution. subprocess runs simultaneously with main process since autonomous. other words, while subprocess works tasks background, main process continue working other tasks. subprocess module enables developers launch processes applications directly from Python. other words, subprocess module launch apps provide inputs them. replace module's collection os.popen, os.spawn, os.system functions well popen2 previous commands module, subprocess module first introduced Python 2.4. Code: Sample python code that will used execute operating system commands batch commands with help subprocess module provided Python. import subprocess import import class ExecuteCommand: Constructor written that will used initialize various class variables which getting used across various functions __init__(self): self.command_to_run list() self.output None this function used name operating system which those particular commands getting executed get_os_name(self): os_name os.name print("The name {}".format(os_name)) this command function main role this function command from user which needs executed user provide various arguments which present that command augments provided valid those will executed successfully otherwise exception occur get_command(self): print("Enter command that want execute::") input() self.command_to_run.append(cmd) print("Are there parameters command? [y/n]".format(cmd)) args_flag input() args_flag 'y': print("Enter args command".format(cmd)) args input() self.command_to_run.append(args) this actual function that actually executes particular command, command that entered user previous function executed this function execution that command successful then result that command stored other hand command execution faced exception error then user printed with particular error message that command execution been failed that exception execute_command(self): try: command self.command_to_run op subprocess.run(command) self.output op.stdout print("Command executed successfully") except Exception print(e) print("Command execution faced exception.") this output function main role this function print output which obtained result command which executed previous function get_output_of_command(self): print("Output command {}".format( self.command_to_run, self.output)) end, mean function written, this main function user printed with menu showing different options, various options that printed this menu that user select from like print name operating system which program getting executed, enter shell command that user wants execute, actually execute command which user enters, then print result obtained from execution particular command. these options listed represent different function that written inside above-written class, object above-written class created that object used call various functions. main(): shell_handler ExecuteCommand() while(True): from listed below list operations select operations print("Go selecting options") print("0. print name Operating System which program getting executed.") print("1. enter shell command that want execute.") print("2. execute command entered previous step.") print("3. print output previously executed command.") print("4. exit from code execution.") menu_choice input() menu_choice int(menu_choice) menu_choice shell_handler.get_os_name() elif menu_choice shell_handler.get_command() elif menu_choice shell_handler.execute_command() elif menu_choice shell_handler.get_output_of_command() elif menu_choice sys.exit() print( "For printing again choice menu enter want halt enter [n]") continue_or_exit input() continue_or_exit continue_or_exit 'Y': pass elif continue_or_exit continue_or_exit 'N': sys.exit() __name__ '__main__': main() Output: selecting options print name Operating System which program getting executed. enter shell command that want execute. execute command entered previous step. print output previously executed command. exit from code execution. name printing again choice menu enter want halt enter selecting options print name Operating System which program getting executed. enter shell command that want execute. execute command entered previous step. print output previously executed command. exit from code execution. Enter command that want execute:: there parameters command? [y/n] Enter args command /L printing again choice menu enter want halt enter selecting options print name Operating System which program getting executed. enter shell command that want execute. execute command entered previous step. print output previously executed command. exit from code execution. Command executed successfully printing again choice menu enter want halt enter selecting options print name Operating System which program getting executed. enter shell command that want execute. execute command entered previous step. print output previously executed command. exit from code execution. Output ['dir', '/L'] command 07/12/2022 07:06 <DIR> 07/12/2022 07:06 <DIR> 07/10/2022 08:22 batch.bat 07/10/2022 08:22 clean.sh 07/12/2022 07:06 2,635 code.py 07/10/2022 08:22 file_src.cpp 07/10/2022 11:13 output.txt 07/10/2022 08:22 program_c1.c 07/10/2022 08:22 program_c2.c 07/10/2022 08:22 program_c3.c 07/10/2022 08:22 program_c4.c 07/10/2022 11:12 sou.srt 07/10/2022 08:22 src.pdf File(s) 2,704 bytes Dir(s) 396,486,488,064 bytes free printing again choice menu enter want halt enter selecting options print name Operating System which program getting executed. enter shell command that want execute. execute command entered previous step. print output previously executed command. exit from code execution. Enter command that want execute:: there parameters command? [y/n] printing again choice menu enter want halt enter selecting options print name Operating System which program getting executed. enter shell command that want execute. execute command entered previous step. print output previously executed command. exit from code execution. Command executed successfully printing again choice menu enter want halt enter selecting options print name Operating System which program getting executed. enter shell command that want execute. execute command entered previous step. print output previously executed command. exit from code execution. Output ['dir', '/L', 'dir'] command 07/10/2022 11:12 <DIR> 07/10/2022 11:12 <DIR> 07/10/2022 08:22 batch.bat 07/10/2022 08:22 clean.sh 07/10/2022 08:21 2,304 code.py 07/10/2022 08:22 file_src.cpp 07/10/2022 11:12 output.txt 07/10/2022 08:22 program_c1.c 07/10/2022 08:22 program_c2.c 07/10/2022 08:22 program_c3.c 07/10/2022 08:22 program_c4.c 07/10/2022 11:12 sou.srt 07/10/2022 08:22 src.pdf File(s) 2,304 bytes Dir(s) 396,554,895,360 bytes free printing again choice menu enter want halt enter selecting options print name Operating System which program getting executed. enter shell command that want execute. execute command entered previous step. print output previously executed command. exit from code execution. Explanation: above-written code, have written main function user printed with menu showing different options, various options that printed this menu that user select from like print name operating system which program getting executed, enter shell command that user wants execute, actually execute command which user enters, then print result obtained from execution particular command. these options listed represent different function that written inside above-written class, object above-written class created that object used call various functions. Conclusion: this article, have understood execute shell command using various modules provided python have also implemented code modules presenting those functionalities. Next TopicFile Explorer using Tkinter Python prev next