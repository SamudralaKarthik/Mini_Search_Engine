next prev __add__ Method Python this tutorial, will discuss operator overloading, advantages, overload operator. Before discussing about __add__ method, understand what operator overloading Operator overloading enables create definition existing operators that them user-defined data types well. Consider following examples- 10+2 first example, operator used integers. 'JavaTpoint' 'Tutorials' second example, operator used concatenate strings. iii) list1+list2 third example, operator used combine elements lists. This makes clear that based data type, operator works differently different situations. Advantages Operator Overloading same operator used different user-defined objects. syntactic support which observed case built-in data types provided user-defined types well. This concept essential role understanding scientific computations. program looks lucid easy comprehend. It's time deep dive into world applications where will operator overloaded. function that will same __add__. first program, will discuss complex numbers. Example class Complex: __init__(self): self.real=0 self.imag=0 decValue(self,real,imag): self.real=real self.imag=imag __add__(self,C): temp=Complex() temp.real=self.real+C.real temp.imag=self.imag+C.imag return temp display(self): print("(",self.real, "+", self.imag,"i)") C1=Complex() C1.decValue(10,12) C2=Complex() C2.decValue(8,6) C3=Complex() C3=C1+C2 print("The result addition complex numbers C3.display() Output: result addition complex numbers Explanation above program, have created class named 'Complex' defined some class methods. first method uses __init__ which class constructor, important this since initializes variables class object. Next, keyword 'self' here which refers object itself. next method, decValue used pass values real imag. Moving next, will complex numbers where real part first number will added real part second number imaginary part first number will added imaginary part second number. Finally, display method would display desired output provided format. class Student: __init__(self,name,marks): self.name=name self.marks=marks display(self): print(self.name,self.marks) __add__(self,S): temp=Student(S.name,[]) range(len(self.marks)): temp.marks.append(self.marks[i]+S.marks[i]) return temp S1=Student("Aarav",[90,91,88]) S2=Student("Aarav",[88,86,87]) S1.display() S2.display() S3=Student("",[]) S3=S1+S2 S3.display() Output: Aarav [90, 88] Aarav [88, Aarav [178, 177, 175] Explanation above program, have created class named 'Student' defined some class methods. first method uses __init__ which class constructor, important this since initializes variables class object. Next, keyword 'self' here which refers object itself. Moving next, will marks students, this have used loop append marks list. Finally, display method would display desired output provided format. this article, learned __add__ Python program. Next TopicEthical Hacking with Python prev next