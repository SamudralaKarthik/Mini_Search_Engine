next prev Python Exceptions When Python program meets error, stops execution rest program. error Python might either error syntax expression Python exception. will what exception Also, will difference between syntax error exception this tutorial. Following that, will learn about trying except blocks raise exceptions make assertions. After that, will Python exceptions list. What Exception? exception Python incident that happens while executing program that causes regular course program's commands disrupted. When Python code comes across condition can't handle, raises exception. object Python that describes error called exception. When Python code throws exception, options: handle exception immediately stop quit. Exceptions versus Syntax Errors When interpreter identifies statement that error, syntax errors occur. Consider following scenario: Code #Python code after removing syntax error string "Python Exceptions" string: print( Output: SyntaxError: invalid syntax arrow output shows where interpreter encountered syntactic error. There unclosed bracket this case. Close rerun program: Code #Python code after removing syntax error string "Python Exceptions" string: print( Output: string "Python Exceptions" string: ----> print( NameError: name defined encountered exception error after executing this code. When syntactically valid Python code produces error, this kind error that arises. output's last line specified name exception error code encountered. Instead displaying just "exception error", Python displays information about sort exception error that occurred. NameError this situation. Python includes several built-in exceptions. However, Python offers facility construct custom exceptions. Except Statement Catching Exceptions Python, catch exceptions handle them using except code blocks. clause contains code that raise exception, while except clause contains code lines that handle exception. Let's access index from array, which more than array's length, handle resulting exception. Code Python code catch exception handle using except code blocks ["Python", "Exceptions", "try except"] try: #looping through elements array choosing range that goes beyond length array range( print( "The index element from array is", a[i] error occurs block, then except block will executed Python interpreter except: print ("Index range") Output: index element from array Python index element from array Exceptions index element from array except Index range code blocks that potentially produce error inserted inside clause preceding example. value greater than attempts access list's item beyond length, which present, resulting exception. except clause then catches this exception executes code without stopping Raise Exception condition does meet criteria correct according Python interpreter, intentionally raise exception using raise keyword. customized exception conjunction with statement. wish raise generate exception when given condition happens, follows: Code #Python code show raise exception Python len(num) raise Exception( f"Length given list must less than equal {len(num)}" Output: len(num) ----> raise Exception( f"Length given list must less than equal {len(num)}" Exception: Length given list must less than equal implementation stops shows exception output, providing indications what went incorrect. Assertions Python When we're finished verifying program, assertion consistency test that switch off. simplest understand assertion compare with if-then condition. exception thrown outcome false when expression evaluated. Assertions made assert statement, which added Python latest keyword. Assertions commonly used beginning function inspect valid input calling function inspect valid output. assert Statement Python examines adjacent expression, preferably true when finds assert statement. Python throws AssertionError exception result expression false. syntax assert clause assert Expressions[, Argument] Python uses ArgumentException, assertion fails, argument AssertionError. try-except clause catch handle AssertionError exceptions, they aren't, program will stop, Python interpreter will generate traceback. Code #Python program show assert keyword defining function square_root( Number assert Number "Give positive integer" return Number**(1/2) #Calling function passing values print( square_root( print( square_root( Output: #Calling function passing values ----> print( square_root( print( square_root( Input [23], square_root(Number) square_root( Number ----> assert Number "Give positive integer" return Number**(1/2) AssertionError: Give positive integer with Else Clause Python also supports else clause, which should come after every except clause, try, except blocks. Only when clause fails throw exception Python interpreter goes else block. Here instance clause with else clause. Code Python program show else clause with except clauses Defining function which returns reciprocal number reciprocal( num1 try: reci num1 except ZeroDivisionError: print( cannot divide zero" else: print reci Calling function passing values reciprocal( reciprocal( Output: 0.25 cannot divide zero Finally Keyword Python finally keyword available Python, always used after try-except block. finally code block always executed after block terminated normally after block terminated some other reason. Here example finally keyword with try-except clauses: Code Python code show finally clause Raising exception block try: print( this block will handle exception raised except ZeroDivisionError: print( "Atepting divide zero" this will always executed matter exception raised finally: print( 'This code finally clause' Output: Atepting divide zero This code finally clause User-Defined Exceptions inheriting classes from typical built-in exceptions, Python also lets design customized exceptions. Here illustration RuntimeError. this case, class that derives from RuntimeError produced. Once exception detected, this display additional detailed information. raise user-defined exception block then handle exception except block. example class EmptyError created using variable var. Code class EmptyError( RuntimeError __init__(self, argument): self.arguments argument Once preceding class been created, following raise exception: Code try: raise EmptyError( "The variable empty" except (EmptyError, var): print( var.arguments Output: try: ----> raise EmptyError( "The variable empty" except (EmptyError, var): EmptyError: variable empty Python Exceptions List Here complete list Python in-built exceptions. Sr.No. Name Exception Description Exception Exception exceptions Python have base class. StopIteration next() method returns null iterator, this exception raised. SystemExit sys.exit() procedure raises this value. StandardError Excluding StopIteration SystemExit, this base class Python built-in exceptions. ArithmeticError mathematical computation errors belong this base class. OverflowError This exception raised when computation surpasses numeric data type's maximum limit. FloatingPointError floating-point operation fails, this exception raised. ZeroDivisionError numeric data types, value raised whenever number attempted divided zero. AssertionError Assert statement fails, this exception raised. AttributeError This exception raised variable reference assigning value fails. EOFError When endpoint file approached, interpreter didn't input value raw_input() input() functions, this exception raised. ImportError This exception raised using import keyword import module fails. KeyboardInterrupt user interrupts execution program, generally hitting Ctrl+C, this exception raised. LookupError LookupErrorBase base class search errors. IndexError This exception raised when index attempted accessed found. KeyError When given found dictionary found this exception raised. NameError This exception raised when variable isn't located either local global namespace. UnboundLocalError This exception raised when access local variable inside function, variable been assigned value. EnvironmentError exceptions that arise beyond Python environment have this base class. IOError input output action fails, like when using print command open() function access file that does exist, this exception raised. SyntaxError This exception raised whenever syntax error occurs program. IndentationError This exception raised when made improper indentation. SystemExit This exception raised when sys.exit() method used terminate Python interpreter. parser exits situation addressed within code. TypeError This exception raised whenever data type-incompatible action function tried executed. ValueError This exception raised parameters built-in method particular data type correct type have been given wrong values. RuntimeError This exception raised when error that occurred during program's execution cannot classified. NotImplementedError abstract function that user must define inherited class defined, this exception raised. Summary learned about different methods raise, catch, handle Python exceptions after learning distinction between syntax errors exceptions. learned about these clauses this tutorial: throw exception line code using raise keyword. Using assert keyword, check specific condition fulfilled raise exception not. statements carried clause until exception found. clause's exception(s) detected handled using except function. exceptions thrown code block, write code executed else code block. Here syntax try, except, else, finally clauses. Syntax: try: Code block These statements those which probably have some error except: This block optional. block encounters exception, this block will handle else: there exception, this code block will executed Python interpreter finally: Python interpreter will always execute this code. Next TopicPython Date Time prev next