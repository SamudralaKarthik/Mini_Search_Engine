next prev Shut Down, Restart, computer using Tkinter Python know, Python standard scripting language because multipurpose features. following tutorial, will understand build application order Shut Down, Restart computer with help tkinter modules Python programming language. before started, have quick overview module. Understanding module brief module built-in Python module that allows users interact with Operating System. module Python offers functions work with directories, manipulate their contents, work with system. order start interacting with underlying Operating System, first required import module. syntax same shown below: File: test.py importing module import Explanation: above snippet code, have used import statement import module. understand shut down, restart, computer system using module. module offers system() method execute command string) subshell. This method executed calling Standard function system(), which same restrictions. command produces output, forwarded interpreter's standard output stream. particular shell Operating System opened whenever this method utilized, command executed consider syntax system() method module. Syntax: os.system(command) Parameter(s): command: command string-type parameter that informs which command execute. Return Value: return value Unix Operating System process's exit status. contrast, return value Windows Operating System value returned system shell after running command. that have understood what os.system() method does, time understand will shut down, restart, computer system. will system's shutdown command followed argument shut down system, restart system, system. also argument followed some integer value timer executing operation. consider following syntax illustrating same. Syntax: using os.system() method os.system('shutdown shut down computer os.system('shutdown restart computer os.system('shutdown /l') computer Prerequisites Project There some libraries modules that will need creation Shut down, restart, computer Python. These libraries briefly described follows: tkinter: tkinter library will allow provide application with graphical user interface (GUI). module will allow interact with Operating System. pillow: pillow library Python Imaging Library that allows image processing capabilities Python interpreter. webbrowser: webbrowser module offers high-level interface allow showing web-based documents Since Tkinter library along with webbrowser modules comes preinstalled with Python, there need install externally. However, install pillow (PIL) library using installer typing following command command prompt terminal. Syntax: installing pillow library install pillow Once installation complete, verify whether pillow library installed properly creating python program file importing pillow (PIL) module. following snippet code illustrating same. File: verify.py import Now, save file following command command prompt terminal. Syntax: python verify.py library been installed successfully program does return importing error. case exception raised, reinstalling library consider checking their official documentation. start building project. Building Shut Down, Restart, computer using Tkinter Python have divided complete project code creating this Application Python into several steps better understanding. These steps shown below: Step Importing necessary modules Step Defining required functions execute different operations Step Creating main window application. Step Adding necessary widgets window setting event triggers. understand steps mentioned above more elaborate way. Importing necessary modules first, will start importing required modules, which include widgets modules from tkinter module, Image ImageTk modules from module, module webbrowser module. consider following snippet code illustrating same. File: appToClose.py importing required modules from tkinter import importing widgets modules from Tkinter from import Image, ImageTk importing Image ImageTk modules from import importing module import webbrowser importing webbrowser module Explanation: above snippet code, have imported widgets modules from tkinter module work with Graphical User Interface. then imported Image ImageTk modules from module images program them Tkinter application. then imported module system commands. last, have imported webbrowser module website link application. Defining necessary functions execute different operations that have imported required modules project, time define some functions execute different operations. These functions include displaying information, executing desired command, canceling action, accessing help. understand implementation these functions detail. Function Display Information first function define will allow display information. This function will check selected options menu display information related selected option user. following snippet code demonstrating same. File: appToClose.py ---------------------------- defining functions ---------------------------- function display information display_info(*args): This function checks selected option menu displays information about that selected option user. iterating through keys MENU dictionary MENU: selectedOption.get() key: displaying information from INFO list selected option displayedInfo.set(INFO[list(MENU.keys()).index(key)]) Explanation: above snippet code, have defined function display_info() with variable-length argument. Within this function, have iterated through keys MENU dictionary using for-loop. have then used set() method display information label from INFO list selected option. Function Execute Desired Command will define function execute system's shutdown command with different arguments requirement. This function will system() method module execute system's shutdown command with appropriate argument selected option from menu. consider following snippet code demonstrating same. File: appToClose.py function execute desired command execute_command(): This function uses module execute system shutdown command with appropriate argument selected option from menu iterating through keys MENU dictionary MENU: selectedOption.get() key: using system() method module execute shutdown command with argument present value that selected MENU dictionary os.system("shutdown {}".format(MENU[key])) Explanation: above snippet code, have defined function execute_command(). Within this function, have iterated through keys available MENU dictionary checked selected option equal MENU. have used system() method execute system's shutdown command, followed argument available value that respective key. Function cancel action will define function cancel terminate action. will destroy() method close application. following snippet code illustrating same. File: appToClose.py function cancel action cancel(): "This function closes application" using destroy() method close application gui_root.destroy() Explanation: above snippet code, have defined function cancel(). Within this function, have used destroy() method along with gui_root, object Tk() class close application. Function access help will define function open providing help support. will open() method webbrowser module open required URL. consider following snippet code demonstrating same. File: appToClose.py function access help help(): "This function opens official website support" using open() method webbrowser module access requested webbrowser.open("https://support.microsoft.com/en-us/windows") Explanation: above snippet code, have defined function help(). Within this function, have used open() method webbrowser module access providing help support. Creating main window application that have defined necessary functions execute operations, time create main window where widgets will added. will create window using Tk() class tkinter module. will also title, size, position, background color, icon. consider following snippet code illustrating same. File: appToClose.py ---------------------------- main function ---------------------------- __name__ "__main__": creating object Tk() class gui_root Tk() setting title application gui_root.title("Shut Down Windows JAVATPOINT") setting size position window gui_root.geometry("600x325+650+250") disabling resizable option better gui_root.resizable(0, configuring background color window gui_root.config(bg "#FFFAF0") setting icon application gui_root.iconbitmap("windows.ico") Explanation: above snippet code, have created main window instantiating Tk() class gui_root. then used title() method title window. have also size position window using geometry() method disabled resizable option better setting values parameters resizable() method have configured background color window with help config() method. last, have used iconbitmap() method icon window. Adding necessary widgets window setting event triggers Since main window application created successfully, will necessary widgets window event triggers. These widgets include frames structure other widgets, labels display important information, entry fields insert data, buttons manipulate entered data call functions. understand addition these widgets detail. Adding Frames Images will start adding frames main window. These frames will help structure other widgets. These frames created using Frame() widget tkinter module. will also import some images program using Image ImageTk module module. These images will display some information application. consider following snippet code demonstrating same. File: appToClose.py ---------------------------- adding widgets application ---------------------------- adding frames window heading_frame Frame(gui_root, "#FFFAF0") menu_frame Frame(gui_root, "#FFFAF0") buttons_frame Frame(gui_root, "#FFFAF0") using pack() method position above frames heading_frame.pack() menu_frame.pack(expand True, fill "both") buttons_frame.pack(side RIGHT) importing images from directory purpose Tkinter application imageOne ImageTk.PhotoImage(Image.open("Windows_11.png").resize((400, 75), Image.ANTIALIAS)) imageTwo ImageTk.PhotoImage(Image.open("computer.png").resize((50, 50), Image.ANTIALIAS)) Explanation: above snippet code, have added some frames window using Frame() widget their master parameters gui_root, object Tk() class. then used pack() method position these frames. then used open() method Image module PhotoImage() method ImageTk module import images from directory Tkinter application. Adding widget heading_frame Frame will label this Frame using Label() widget display heading. consider following snippet code demonstrating same. File: appToClose.py ----------------------- heading_frame frame ----------------------- using Label() widget label application imageLabelOne Label( heading_frame, image imageOne, "#FFFAF0" using pack() method position label imageLabelOne.pack(pady Explanation: above snippet code, have used Label() widget image label application. then used pack() method position this label. Adding widgets menu_frame Frame will define dictionary display options performed through application. will also define list display information associated with each option. will then widgets like labels display some information options menu user select operation performed using Label() OptionMenu() widgets. consider following snippet code demonstrating same. File: appToClose.py ----------------------- menu_frame frame ----------------------- defining dictionary display options arguments perform associated function MENU 'Sign Out' '/l', 'Shut down' 'Restart' defining list display information INFO 'Closes apps signs out.', 'Closes apps turns PC.', 'Closes apps, turns then turns again.' creating object list() function default_key list(MENU) creating objects StringVar class selectedOption StringVar() displayedInfo StringVar() using set() method values object StringVar class selectedOption.set(default_key[1]) displayedInfo.set(INFO[1]) creating some labels using Label() widget display imported image some descriptions imageLabelTwo Label( menu_frame, image imageTwo, "#FFFAF0" headingLabel Label( menu_frame, text "What want computer do?", "#FFFAF0", "#000000" infoLabel Label( menu_frame, textvariable displayedInfo, "#FFFAF0", "#000000" creating dropdown menu using OptionMenu() widget dropdown OptionMenu( menu_frame, selectedOption, *MENU.keys(), command display_info configuring width, background color anchor option menu dropdown.config(width "#F8F8FF", anchor using grid() method position labels option menu imageLabelTwo.grid(row column padx pady rowspan headingLabel.grid(row column padx pady sticky infoLabel.grid(row column padx pady sticky dropdown.grid(row column padx sticky Explanation: above snippet code, have defined dictionary MENU, displaying options arguments perform associated operation. have then defined list INFO displaying information regarding each operation. have then created object List() function MENU dictionary. have then created some objects StringVar class initial values these objects. have added some labels using Label() widget setting their master parameters menu_frame frame. have then used OptionMenu() widget create drop down menu display keys MENU dictionary their master parameters menu_frame frame. have also used config() method configure width, background color, anchor menu. last, have used grid() method position labels option menu grid format. Adding widgets buttons_frame frame will necessary buttons this frame. will Button() widget buttons application that will allow user execute operation, cancel action, access help. consider following snippet code demonstrating same. File: appToClose.py ----------------------- buttons_frame frame ----------------------- creating some buttons using Button() widget ok_button Button( buttons_frame, text "OK", width relief GROOVE, "#9BFF92", "#000000", activebackground "#C0FEBA", command execute_command cancel_button Button( buttons_frame, text "Cancel", width relief GROOVE, "#F29C9D", "#000000", activebackground "#FFD7D8", command cancel help_button Button( buttons_frame, text "Help", width relief GROOVE, "#A9EFFF", "#000000", activebackground "#D9F8FF", command help creating empty label using Label() widget anonymousLabel Label( buttons_frame, text "#FFFAF0" using grid() method position buttons label ok_button.grid(row column padx pady cancel_button.grid(row column padx pady help_button.grid(row column padx pady anonymousLabel.grid(row column padx pady Explanation: above snippet code, have used Button() widget buttons application master parameter buttons_frame frame. have then command parameter these widgets functions defined earlier. have also used Label() widget empty label application master parameter buttons_frame frame. last, have used grid() method position these buttons label grid format. Running Application will mainloop() method along with object Tk() class application. consider following snippet code demonstrating same. File: appToClose.py running application using mainloop() method gui_root.mainloop() Explanation: above snippet code, have used mainloop() method with gui_root, object Tk() class, application. Hence, project code complete. will save this python program file following command command prompt terminal output. Syntax: python youTubeDownloader.py before output, complete project code 'GUI Shut down, Restart, computer using Tkinter' shown below. Complete Project Code following project code 'GUI Shut down, Restart, computer using Tkinter Python'. File: appToClose.py importing required modules from tkinter import importing widgets modules from Tkinter from import Image, ImageTk importing Image ImageTk modules from import importing module import webbrowser importing webbrowser module ---------------------------- defining functions ---------------------------- function display information display_info(*args): This function checks selected option menu displays information about that selected option user. iterating through keys MENU dictionary MENU: selectedOption.get() key: displaying information from INFO list selected option displayedInfo.set(INFO[list(MENU.keys()).index(key)]) function execute desired command execute_command(): This function uses module execute system shutdown command with appropriate argument selected option from menu iterating through keys MENU dictionary MENU: selectedOption.get() key: using system() method module execute shutdown command with argument present value that selected MENU dictionary os.system("shutdown {}".format(MENU[key])) function cancel action cancel(): "This function closes application" using destroy() method close application gui_root.destroy() function access help help(): "This function opens official website support" using open() method webbrowser module access requested webbrowser.open("https://support.microsoft.com/en-us/windows") ---------------------------- main function ---------------------------- __name__ "__main__": creating object Tk() class gui_root Tk() setting title application gui_root.title("Shut Down Windows JAVATPOINT") setting size position window gui_root.geometry("600x325+650+250") disabling resizable option better gui_root.resizable(0, configuring background color window gui_root.config(bg "#FFFAF0") setting icon application gui_root.iconbitmap("D:\Learn Coding\Python Projects\Shutdown Windows\windows.ico") ---------------------------- adding widgets application ---------------------------- adding frames window heading_frame Frame(gui_root, "#FFFAF0") menu_frame Frame(gui_root, "#FFFAF0") buttons_frame Frame(gui_root, "#FFFAF0") using pack() method position above frames heading_frame.pack() menu_frame.pack(expand True, fill "both") buttons_frame.pack(side RIGHT) importing images from directory purpose Tkinter application imageOne ImageTk.PhotoImage(Image.open("D:\Learn Coding\Python Projects\Shutdown Windows\Windows_11.png").resize((400, 75), Image.ANTIALIAS)) imageTwo ImageTk.PhotoImage(Image.open("D:\Learn Coding\Python Projects\Shutdown Windows\computer.png").resize((50, 50), Image.ANTIALIAS)) ----------------------- heading_frame frame ----------------------- using Label() widget label application imageLabelOne Label( heading_frame, image imageOne, "#FFFAF0" using pack() method position label imageLabelOne.pack(pady ----------------------- menu_frame frame ----------------------- defining dictionary display options arguments perform associated function MENU 'Sign Out' '/l', 'Shut down' 'Restart' defining list display information INFO 'Closes apps signs out.', 'Closes apps turns PC.', 'Closes apps, turns then turns again.' creating object list() function default_key list(MENU) creating objects StringVar class selectedOption StringVar() displayedInfo StringVar() using set() method values object StringVar class selectedOption.set(default_key[1]) displayedInfo.set(INFO[1]) creating some labels using Label() widget display imported image some descriptions imageLabelTwo Label( menu_frame, image imageTwo, "#FFFAF0" headingLabel Label( menu_frame, text "What want computer do?", "#FFFAF0", "#000000" infoLabel Label( menu_frame, textvariable displayedInfo, "#FFFAF0", "#000000" creating dropdown menu using OptionMenu() widget dropdown OptionMenu( menu_frame, selectedOption, *MENU.keys(), command display_info configuring width, background color anchor option menu dropdown.config(width "#F8F8FF", anchor using grid() method position labels option menu imageLabelTwo.grid(row column padx pady rowspan headingLabel.grid(row column padx pady sticky infoLabel.grid(row column padx pady sticky dropdown.grid(row column padx sticky ----------------------- buttons_frame frame ----------------------- creating some buttons using Button() widget ok_button Button( buttons_frame, text "OK", width relief GROOVE, "#9BFF92", "#000000", activebackground "#C0FEBA", command execute_command cancel_button Button( buttons_frame, text "Cancel", width relief GROOVE, "#F29C9D", "#000000", activebackground "#FFD7D8", command cancel help_button Button( buttons_frame, text "Help", width relief GROOVE, "#A9EFFF", "#000000", activebackground "#D9F8FF", command help creating empty label using Label() widget anonymousLabel Label( buttons_frame, text "#FFFAF0" using grid() method position buttons label ok_button.grid(row column padx pady cancel_button.grid(row column padx pady help_button.grid(row column padx pady anonymousLabel.grid(row column padx pady running application using mainloop() method gui_root.mainloop() Output: Next TopicGUI extract Lyrics from song Using Tkinter Python prev next