next prev Accuracy_Score Sklearn crucial stage data science workflow measure model's accuracy using appropriate metric. this tutorial, we'll learn methods calculating source sample's predicted class accuracy: manually using Python's scikit-learn library. Here rundown topics have discussed this tutorial. Manually calculating accuracy_score Calculating accuracy_score using scikit learn Scikit learn accuracy_score's examples does scikit learn accuracy_score work? What Accuracy? widely used metrics that computes performance classification models accuracy. percentage labels that model successfully predicted represented accuracy. instance, model accurately classified labels, accuracy would 0.80. Creating Function Compute Accuracy Score Let's create Python function compute predicted values accuracy score, given that already have sample's true labels labels predicted model. Code Python program define function compute accuracy score model's predicted class Defining function which takes true values sample values predicted model compute_accuracy(Y_true, Y_pred): correctly_predicted iterating over every label checking with true sample true_label, predicted zip(Y_true, Y_pred): true_label predicted: correctly_predicted computing accuracy score accuracy_score correctly_predicted len(Y_true) return accuracy_score above function accepts values classification model's predicted labels true labels sample arguments computes accuracy score. Here, iterate through each pair true predicted labels parallel record number correct predictions. then divide that number total number labels compute accuracy score. will apply function sample now. Code Python program compute accuracy score using function compute_accuracy Importing required libraries import numpy from sklearn.model_selection import train_test_split from sklearn.svm import from sklearn.datasets import load_iris Loading dataset load_iris(return_X_y True) Splitting dataset training test data X_train, X_test, Y_train, Y_test train_test_split(X, test_size 0.3, random_state Training model using Support Vector Classification class sklearn SVC() svc.fit(X_train, Y_train) Computing accuracy score model Y_pred svc.predict(X_test) score compute_accuracy(Y_test, Y_pred) print(score) Output: 0.9777777777777777 0.978 accuracy score Support Vector Classification model's predictions. Note that using numpy arrays vectorize equality computation make code mentioned above more efficient. Accuracy using Sklearn's accuracy_score() accuracy_score() method sklearn.metrics, accept true labels sample labels predicted model parameters computes accuracy score float value, which likewise used obtain accuracy score Python. There several helpful functions compute typical evaluation metrics sklearn.metrics class. Let's sklearn's accuracy_score() function compute Support Vector Classification model's accuracy score using same sample dataset earlier. sklearn.metrics.accuracy_score(y_true, y_pred, normalize=True, sample_weight=None) this computing accuracy score classification. This method calculates subgroup accuracy multi-label classification; dataset's predicted subset labels must precisely match actual dataset labels y_true. Parameters y_true array-like, array indicating label sparse matrix): These true labels given sample. y_pred array-like, array indicating label sparse matrix): Predicted labels that classification model returned. normalize (bool, default True): gives number successfully classified predicted samples answer False. Returns proportion correctly classified predicted samples True. sample_weight (array-like shape (n,), default None): Sample weights. Returns score (float): gives ratio successfully classified samples (float) normalise True; otherwise, returns count successfully classified predicted samples (int). 100% accuracy normalise True count samples provided with normalise False. Example Accuracy_score Code Python program compute accuracy score using function accuracy_score Importing required libraries import numpy from sklearn.model_selection import train_test_split from sklearn.metrics import accuracy_score from sklearn.svm import from sklearn.datasets import load_iris Loading dataset load_iris(return_X_y True) Splitting dataset training test data X_train, X_test, Y_train, Y_test train_test_split(X, test_size 0.3, random_state Training model using Support Vector Classification class sklearn SVC() svc.fit(X_train, Y_train) Computing accuracy_score model Y_pred svc.predict(X_test) score accuracy_score(Y_test, Y_pred) print(score) Output: 0.9777777777777777 When using binary label indicators with multiple labels: Code Python program show calculate accuracy score multi-label data import numpy accuracy_score(np.array([[1, 1]]), np.ones((2, 2))) Output: scikit learn accuracy_score works accuracy_score method sklearn.metrics package assigns subset accuracy multi-label classification. required that labels model predicted given sample true labels sample match exactly. Accuracy describes model's behaviour across classes. classes comparably significant, helpful. ratio count accurate predictions total number samples total number predictions used determine model's accuracy. Code: code below imports libraries. importing sklearn.metrics predicting model accuracy numpy libraries. true values sample y_true ["1", "1", "0", "0", "1", "1", "0"]. ["1", "1", "0", "0", "1", "1", "0"] these model's predicted values sample data. Accuracy matrix[0][0] matrix[-1][-1] numpy.sum(matrix) used classification model's accuracy score. accuracy score displayed output using print(accuracy). Code Pythpn program show accuracy_score works import libraries import numpy import sklearn.metrics Creating true predicted sample Y_true ["1", "1", "0", "0", "1", "1", "0"] Y_pred ["1", "0", "1", "1", "0", "1", "1"] finding confusion matrix matrix sklearn.metrics.confusion_matrix(Y_true, Y_pred) matrix np.flip(matrix) print("Confusion Matrix: \n", matrix) accuracy (matrix[0][0] matrix[-1][-1]) np.sum(matrix) print(accuracy) Output: Confusion Matrix: 0.2857142857142857 this tutorial, learnt scikit-learn accuracy_score Python examined some implementation examples. Next TopicK-Fold Cross-Validation Sklearn prev next