next prev Simple FLAMES game using PyQt5 Python This post will demonstrate PyQt5 develop flames calculator. Based algorithm provided names, this flames calculator evaluates relationships forecasts they turn out. most well-liked effective programming language Python. Python strong developer community tonne packages. Simplicity creating code primary strengths. used practically industry. term FLAMES stands Friends, Lovers, Affectionate, Marriage, Enemies, Sibling. Although outcome this game cannot used determine person suited you, playing with friends entertaining. This game just recreation purpose based real-life scenarios. source entertainment group friends nothing more than that. before that, must know some important basics PyQt5 Python. Introduction basics PyQt Python programming language library were combined create toolkit known PyQt. most popular Frameworks Python, PyQt strong community tonne excellent documentation. QWidget class, which implements Widget, PyQt's fundamental classes. fundamental components user interfaces components widgets. label, button, menu, combo box, scroller, toolbar, file dialogue, etc. examples widgets. Widgets many, getting used them requires some time. We'll using most frequently used widgets this project, which nearly always included PyQt applications. building programmes, PyQt offers broad selection widgets. However, there have been changes licencing reorganisation classes into several modules with PyQt5. Consequently, it's important have broad understanding PyQt5's structure. This section explains internal structure PyQt5, well many modules, libraries, classes that offers. installing PyQt5 need follow this. PyQt framework must first installed using package manager before used. install most recent version PyQt, command below already installed your computer install pyqt6 Steps implementing Make label saying "Enter player name" give colour geometric shape. obtain first name, place QLineEdit widget front first name label. same manner, make second label that reads "Enter player name" give colour geometric shape. obtain second name, place QLineEdit widget front this label. Create label display outcome modify font, shape, border. Create result push button bottom. Implementation steps back Make push button anything Obtain names both players inside push button action. Eliminate white space between names. get() result function obtain outcome. obtain result method, delete letter technique characters that often used sentences. After determining number characters left, letters ["F", "L", "A", "M", "E", "S"] represent FLAMES. Using count obtained, begin eliminating letters. final letter procedure outcome; provide outcome setText function result label. Walking through code Now, will taking step step order understand each every section code before implementing entire code. import required libraries from PyQt5.QtWidgets import from PyQt5 import QtCore, QtGui from PyQt5.QtGui import from PyQt5.QtCore import import Firstly, will import required files into program from standard python library PyQt5. These files needed imported only once beginning program used throughout program. These files include QtCore, QtGui, qtwidgets sys. class Window(QMainWindow): 	def __init__(self): 		super().__init__() Give title 		self.setWindowTitle("Python geometry 		self.setGeometry(100, 100, 320, 400) calling func 		self.UiComponents() displaying widgets 		self.show() Then, will create class called Window initialize window along with setting title window geometry window. Then will call UiComponents() method that contains components window like labels, widgets, buttons text fields will then display widgets present there using show() method. func components 	def UiComponents(self): create label asking user enter first name 		name1st_lbl QLabel("Enter Player Name self) border colour label 		name1st_lbl.setStyleSheet("border solid black 									background lightgrey;") geometry 		name1st_lbl.setGeometry(10, 140, create label asking user enter second name 		name2nd_lbl QLabel("Enter Player Name self) border colour label 		name2nd_lbl.setStyleSheet("border solid black 									background lightgrey;") geometry 		name2nd_lbl.setGeometry(10, 140, Next, will define components method will then create labels. First label will name1st_lbl asking user enter first name the, will border, colour geometry. second label will name2nd_lbl asking user enter second name the, will border, colour geometry. create line edit first name 		self.name1st QLineEdit(self) geometry 		self.name1st.setGeometry(160, 150, create another line edit second name 		self.name2nd QLineEdit(self) geometry 		self.name2nd.setGeometry(160, 150, Then, will create line editors introduce text field area input first second name. Later, setting their geometry create label display result 		self.answer QLabel("Find Relationship Status", self) geometry answer label 		self.answer.setGeometry(20, 160, 280, border background color 		self.answer.setStyleSheet("border solid black; 									background white;") alignment answer 		self.answer.setAlignment(Qt.AlignCenter) font answer 		self.answer.setFont(QFont('Times', 11)) create push button result 		self.push QPushButton("Get Result", self) geometry button 		self.push.setGeometry(80, 260, 140, action push button 		self.push.clicked.connect(self.do_actn) Next, will create label order display final relationship result. Then, will geometry, alignments, font styles, border background colour. will also create push button getting result user along with setting geometry adding respective action that needs perform being pressed. action called push button 	def do_actn(self): getting names 		name1st self.name1st.text() 		name2nd self.name2nd.text() removing empty spaces form name 		name1st.replace(" 		name2nd.replace(" func removing common chars present with their respective appearances 		def remove_same_chars(list01, list02): 			for range(len(list01)): 				for range(len(list02)): 					# common chars found 					# then remove that certain char 					# return list concatenated 					# list with True Flag 					if list01[i] list02[j]: 						c list01[i] 						# removing chars from list 						list01.remove(c) 						list02.remove(c) 						# concatenating list elements with 						# acting border mark here 						list3 list01 ["*"] list02 						# returning concatenated list with True flag 						return [list3, True] 						# common characters found 			# returning concatenated list with False flag 			list3 list01 ["*"] list02 			return [list3, False] Then, will create function which defines actions methods that need performed after push button pressed. will first intake names remove empty spaces between them. Then, function created remove common characters present both names using else conditions loops. After that, names will stored list different list, First, lists concatenated then converted into final list. func finding result 		def find_relationship(p01_list, p02_list): 			# taking flag value True initially 			proceed True 			# stop calling remove_same_chars func 			# until common chars found 			# keep loop going until proceed flag remains True 			while proceed: 				# method calling storing return value 				retrn_list remove_same_chars(p01_list, p02_list) 				# taking concatenated list from return list 				conct_list retrn_list[0] 				# taking flag value from return list 				proceed retrn_list[1] 				# finding index border mark 				str_indx conct_list.index("*") 				# performing slicing lists 				# every char before stored p01_list 				p01_list conct_list[: str_indx] 				# Every char after stored p02_list 				p02_list conct_list[str_indx 				# counting total chars remaining 			count len(p01_list) len(p02_list) 			# list FLAMES acronyms 			result ["Friends" "Love" "Affection" "Marriage" "Enemy" "Siblings"] Next, will create function find relationship status between entered names. will then initial value flag true will start while loop keep going until same characters removed. Then, this list will stored will operator slice concatenated list will separate different lists will count total number characters left both lists. Next, will introduce acronyms list word FLAMES which will include relations Friends, Love, Affection, Marriage, Enemy Siblings. this will final relationship status. keep loop running only item 			# left final list 			while len(result) 				# storing index value 				# where will performing slicing. 				split_indx (count len(result) 				# done order perform 				# anti-clockwise circular counting. 				if split_indx 					# slicing lists 					right_side result[split_indx 					left_side result[: split_indx] 					# concatenating lists 					result right_side left_side 				else: 					result result[: len(result) 			# printing final result 			return result[0] calling find relation method here 		result find_relationship(list(name1st), list(name2nd)) setting text answer label 		self.answer.setText("Relationship result) Then, will keep loop going until last selected letter eliminated after every round slicing list using operator. After slicing done, selected character removed. Then again, remaining characters list again concatenated form single list. This process keeps repeating until know final result. final result gives acronym from word FLAMES then appropriate acronym displayed outcome form relationship status allotted label. creating pyqt5 application Base QApplication(sys.argv) creating instance window window Window() starting application sys.exit(base.exec()) Finally, will create PyQt5 application which will contain these components. will create instance window that will dis[played user's screen will ultimately, call exit method order start application execute code desired output. Complete code Python program create simple Flames game using PyQt5 import required libraries from PyQt5.QtWidgets import from PyQt5 import QtCore, QtGui from PyQt5.QtGui import from PyQt5.QtCore import import class Window(QMainWindow): 	def __init__(self): 		super().__init__() Give title 		self.setWindowTitle("Python geometry 		self.setGeometry(120, 120, 340, 420) calling func 		self.UiComponents() displaying widgets 		self.show() func components 	def UiComponents(self): create label asking user enter first name 		name1st_lbl QLabel("Enter Player Name self) border colour label 		name1st_lbl.setStyleSheet("border solid black 									background lightgrey;") geometry 		name1st_lbl.setGeometry(10, 140, create label asking user enter second name 		name2nd_lbl QLabel("Enter Player Name self) border colour label 		name2nd_lbl.setStyleSheet("border solid black 									background lightgrey;") geometry 		name2nd_lbl.setGeometry(10, 140, create line edit first name 		self.name1st QLineEdit(self) geometry 		self.name1st.setGeometry(160, 150, create another line edit second name 		self.name2nd QLineEdit(self) geometry 		self.name2nd.setGeometry(160, 150, create label display result 		self.answer QLabel("Find Relationship Status", self) geometry answer label 		self.answer.setGeometry(20, 160, 280, border background color 		self.answer.setStyleSheet("border solid black; 									background white;") alignment answer 		self.answer.setAlignment(Qt.AlignCenter) font answer 		self.answer.setFont(QFont('Times', 11)) create push button result 		self.push QPushButton("Get Result", self) geometry button 		self.push.setGeometry(80, 260, 140, action push button 		self.push.clicked.connect(self.do_actn) action called push button 	def do_actn(self): getting names 		name1st self.name1st.text() 		name2nd self.name2nd.text() removing empty spaces form name 		name1st.replace(" 		name2nd.replace(" func removing common chars present with their respective appearances 		def remove_same_chars(list01, list02): 			for range(len(list01)): 				for range(len(list02)): 					# common chars found 					# then remove that certain char 					# return list concatenated 					# list with True Flag 					if list01[i] list02[j]: 						c list01[i] 						# removing chars from list 						list01.remove(c) 						list02.remove(c) 						# concatenating list elements with 						# acting border mark here 						list3 list01 ["*"] list02 						# returning concatenated list with True flag 						return [list3, True] 						# common characters found 			# returning concatenated list with False flag 			list3 list01 ["*"] list02 			return [list3, False] func finding result 		def find_relationship(p01_list, p02_list): 			# taking flag value True initially 			proceed True 			# stop calling remove_same_chars func 			# until common chars found 			# keep loop going until proceed flag remains True 			while proceed: 				# method calling storing return value 				retrn_list remove_same_chars(p01_list, p02_list) 				# taking concatenated list from return list 				conct_list retrn_list[0] 				# taking flag value from return list 				proceed retrn_list[1] 				# finding index border mark 				str_indx conct_list.index("*") 				# performing slicing lists 				# every char before stored p01_list 				p01_list conct_list[: str_indx] 				# Every char after stored p02_list 				p02_list conct_list[str_indx 				# counting total chars remaining 			count len(p01_list) len(p02_list) 			# list FLAMES acronyms 			result ["Friends" "Love" "Affection" "Marriage" "Enemy" "Siblings"] 			# keep loop running only item 			# left final list 			while len(result) 				# storing index value 				# where will performing slicing. 				split_indx (count len(result) 				# done order perform 				# anti-clockwise circular counting. 				if split_indx 					# slicing lists 					right_side result[split_indx 					left_side result[: split_indx] 					# concatenating lists 					result right_side left_side 				else: 					result result[: len(result) 			# printing final result 			return result[0] calling find relation method here 		result find_relationship(list(name1st), list(name2nd)) setting text answer label 		self.answer.setText("Relationship result) creating pyqt5 application Base QApplication(sys.argv) creating instance window window Window() starting application sys.exit(base.exec())	 Output: output above presented code simple FLAMES game using PyQt5 Python been attached below form screenshot. Next TopicTree view widgets Tree view scrollbar Tkinter-Python prev next