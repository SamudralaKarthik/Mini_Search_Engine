next prev Bisect Module Python this tutorial, will learn about bisect algorithm, which written Python. source code written within lines. Let's through introduction bisect module. Introduction basically bisection algorithm find insertion point adding given element sorted list. However, crucial remember that functions take sorted list argument. list must sorted ascending order. passed list ascending order, function will throw error, result might unexpected. let's understand methods. Important Methods Let's understand some essential methods bisect methods. bisect_left(a, lo=0, hi=None) returns index where must inserted value such that given restore order. value already appears list, index would just before leftmost value already there. Let's understand following example. Example import bisect import module [23, 100, list integers ascending order number insort bisect.bisect_left(a, call method print("The element inserted place:", Output: element inserted place: Explanation above code, have defined list want insert want insert that kept ordered. called bisect_left() method, which returned where given value must inserted. Considering above snippet, insert value list calling insert() method object list. Example [23, 100, list integers ascending order number insert bisect.bisect_left(a, a.insort(i, insort list index print(a) Output: [23, 100, Explanation shown above code, have inserted value index Let's another example where will bisects that Bisect Module provides. Now, will insert element that already present list. Additionally, will parameters. Let's understand following example Example import bisect import module [23, 100, list integers ascending order number insort bisect.bisect_left(a, print("The element insorted at:", a.insort(i, insort list index print(a) Output: element insorted [23, 100, Explanation mentioned earlier, bisect_left method corresponds list's first match value (82). parameters used specify starting ending index list that want consider. don't pass these parameters, whole list considered, seen earlier example. Let's understand example hi. Example import bisect import module [23, 100, list integers ascending order number insort bisect.bisect_left(a, lo=2, hi=7) print("The element inserted at:", a.insort(i, insert list index print(a) Output: element inserted [23, 100, Explanation were passed bisect_left() method list consider would a[2:7] what corresponds [23, 100, 14]. bisect_left finds index this slice then returns index based whole list. insort_right(a, lo=0, hi=None) works same insort_left(), except that uses bisect_right() function find where value needs inserted. Let's understand following example. Example import bisect [10, bisect.insort_right(a, print(a) Output: [10, bisect_right method, will same result. best function Bisect Module. essential specify that time complexity bisect_left bisect_right O(log(n)) since their implementation uses Binary Search Algorithm. However, time complexity insort_left insort_right depends complexity insert method. time complexity these methods O(n). above examples, have used integers, also list floats strings. what tuple string? bisect_right() bisect_left(). insort_left insort_right string tuple, will error. Because tuples strings immutable objects, these objects have implemented insert method, which modifies immutable object list place. bisect_right insort_right have aliases, bisect_right called bisect insort_right insort. Problems Related Bisect Module Let's solve some interesting problems using bisect module. Problem Write Python program find three integers which gives zero given array using Binary Search (bisect) Example from bisect import bisect, bisect_left from collections import Counter class Solution: triplet_sum(self, nums): triplets len(nums) return triplets num_freq Counter(nums) nums sorted(num_freq) Sorted unique numbers max_num nums[-1] enumerate(nums): num_freq[v] comp comp num_freq: comp num_freq[v] triplets.append([v] [comp]) When numbers different. Only when smallest two_sum Lower/upper bound smaller remainingtwo. lb bisect_left(nums, two_sum max_num, ub bisect(nums, two_sum lb) nums[lb ub]: comp two_sum comp num_freq comp: triplets.append([v, comp]) return triplets nums [-20, -20, -40, Solution() result s.triplet_sum(nums) print(result) nums result s.triplet_sum(nums) print(result) Output: [[-40, 40], [-20, -20, 40], [-20, 20]] [[-6, [-6, Problem Write Python program find first occurrence given number sorted list using Binary Search (bisect). Solution import bisect import module Binary_Search(a, bisect.bisect_left(a, len(a) a[i] return else: return nums num_position Binary_Search(nums, num_position print(x, present.") else: print("First occurrence of", present index", num_position) Output: First occurrence present index Problem Write Python program find index position last occurrence given number sorted list using Binary Search (bisect). Example import bisect import module Binary_Search(a, bisect.bisect_right(a, len(a)+1 a[i-1] return (i-1) else: return nums num_position Binary_Search(nums, num_position print(x, present.") else: print("First occurrence of", present index", num_position) Output: Last occurrence present index Conclusion above tutorial, have detailed discussion over bisect module methods. have seen some examples learned about bisect_right bisect_left methods. This module used solve binary search-related problems. Next TopicBoruvka's Algorithm Minimum Spanning Trees prev next