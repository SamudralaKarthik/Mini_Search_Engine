next prev Python Tkinter Tutorial Tkinter tutorial provides basic advanced concepts Python Tkinter. Tkinter tutorial designed beginners professionals. Python provides standard library Tkinter creating graphical user interface desktop based applications. Developing desktop based applications with python Tkinter complex task. empty Tkinter top-level window created using following steps. import Tkinter module. Create main application window. widgets like labels, buttons, frames, etc. window. Call main event loop that actions take place user's computer screen. Example !/usr/bin/python3 from tkinter import #creating application main window. Tk() #Entering event main loop top.mainloop() Output: Tkinter widgets There various widgets like button, canvas, checkbutton, entry, etc. that used build python applications. Widget Description Button Button used various kinds buttons python application. Canvas canvas widget used draw canvas window. Checkbutton Checkbutton used display CheckButton window. Entry entry widget used display single-line text field user. commonly used accept user values. Frame defined container which, another widget added organized. Label label text used display some message information about other widgets. ListBox ListBox widget used display list options user. Menubutton Menubutton used display menu items user. Menu used menu items user. Message Message widget used display message-box user. Radiobutton Radiobutton different from checkbutton. Here, user provided with various options user select only option among them. Scale used provide slider user. Scrollbar provides scrollbar user that user scroll window down. Text different from Entry because provides multi-line text field user that user write text edit text inside Toplevel used create separate window container. Spinbox entry widget used select from options values. PanedWindow like container widget that contains horizontal vertical panes. LabelFrame LabelFrame container widget that acts container MessageBox This module used display message-box desktop based applications. Python Tkinter Geometry Tkinter geometry specifies method using which, widgets represented display. python Tkinter provides following geometry methods. pack() method grid() method place() method Let's discuss each them detail. Python Tkinter pack() method pack() widget used organize widget block. positions widgets added python application using pack() method controlled using various options specified method call. However, controls less widgets generally added less organized manner. syntax pack() given below. syntax widget.pack(options) list possible options that passed pack() given below. expand: expand true, widget expands fill space. Fill: default, fill NONE. However, determine whether widget contains extra space. size: represents side parent which widget placed window. Example !/usr/bin/python3 from tkinter import parent Tk() redbutton Button(parent, text "Red", "red") redbutton.pack( side LEFT) greenbutton Button(parent, text "Black", "black") greenbutton.pack( side RIGHT bluebutton Button(parent, text "Blue", "blue") bluebutton.pack( side blackbutton Button(parent, text "Green", "red") blackbutton.pack( side BOTTOM) parent.mainloop() Output: Python Tkinter grid() method grid() geometry manager organizes widgets tabular form. specify rows columns options method call. also specify column span (width) rowspan(height) widget. This more organized place widgets python application. syntax grid() given below. Syntax widget.grid(options) list possible options that passed inside grid() method given below. Column column number which widget placed. leftmost column represented Columnspan width widget. represents number columns which, column expanded. ipadx, ipady represents number pixels widget inside widget's border. padx, pady represents number pixels widget outside widget's border. number which widget placed. topmost represented rowspan height widget, i.e. number which widget expanded. Sticky cell larger than widget, then sticky used specify position widget inside cell. concatenation sticky letters representing position widget. EW, ES. Example !/usr/bin/python3 from tkinter import parent Tk() name Label(parent,text "Name").grid(row column Entry(parent).grid(row column password Label(parent,text "Password").grid(row column Entry(parent).grid(row column submit Button(parent, text "Submit").grid(row column parent.mainloop() Output: Python Tkinter place() method place() geometry manager organizes widgets specific coordinates. Syntax widget.place(options) list possible options given below. Anchor: represents exact position widget within container. default value (direction) NW (the upper left corner) bordermode: default value border type INSIDE that refers ignore parent's inside border. other option OUTSIDE. height, width: refers height width pixels. relheight, relwidth: represented float between indicating fraction parent's height width. relx, rely: represented float between that offset horizontal vertical direction. refers horizontal vertical offset pixels. Example !/usr/bin/python3 from tkinter import Tk() top.geometry("400x250") name Label(top, text "Name").place(x 30,y email Label(top, text "Email").place(x password Label(top, text "Password").place(x 130) Entry(top).place(x Entry(top).place(x Entry(top).place(x 130) top.mainloop() Output: Prerequisite Before learning Tkinter, must have basic knowledge Python. Audience Python Tkinter tutorial designed help beginners professionals. Problem assure that will find problem this Tkinter tutorial. there mistake, please post problem contact form. Next TopicPython Tkinter Button prev next