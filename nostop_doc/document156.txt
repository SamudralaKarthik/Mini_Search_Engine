next prev Multithreading Python thread smallest unit program process executed independently scheduled Operating System. computer system, Operating System achieves multitasking dividing process into threads. thread lightweight process that ensures execution process separately system. Python when multiple processors running program, each processor runs simultaneously execute tasks separately. Python Multithreading Multithreading threading technique Python programming multiple threads concurrently rapidly switching between threads with help (called context switching). Besides, allows sharing data space with main threads inside process that share information communication with other threads easier than individual processes. Multithreading aims perform multiple tasks simultaneously, which increases performance, speed improves rendering application. Note: Python Global Interpreter Lock (GIL) allows running single thread time, even machine multiple processors. Benefits Multithreading Python Following benefits create multithreaded application Python, follows: ensures effective utilization computer system resources. Multithreaded applications more responsive. shares resources state with sub-threads (child) which makes more economical. makes multiprocessor architecture more effective similarity. saves time executing multiple threads same time. system does require much memory store multiple threads. When Multithreading Python? very useful technique time-saving improving performance application. Multithreading allows programmer divide application tasks into sub-tasks simultaneously them program. allows threads communicate share resources such files, data, memory same processor. Furthermore, increases user's responsiveness continue running program even part application length blocked. achieve multithreading Python? There main modules multithreading used handle threads Python. thread module threading module Thread modules started with Python designated obsolete, only accessed with _thread that supports backward compatibility. Syntax: thread.start_new_thread function_name, args[, kwargs] implement thread module Python, need import thread module then define function that performs some action setting target with variable. Thread.py import thread import thread module import time import time module cal_sqre(num): define cal_sqre function print(" Calculate square root given number") num: time.sleep(0.3) each iteration waits time print(' Square cal_cube(num): define cal_cube() function print(" Calculate cube given number") num: time.sleep(0.3) each iteration waits time print(" Cube given array time.time() total time execute functions cal_sqre(arr) call cal_sqre() function cal_cube(arr) call cal_cube() function print(" Total time taken threads time.time() print total time Output: Calculate square root given number Square Square Square Square Square Calculate cube given number Cube Cube Cube Cube Cube Total time taken threads 3.005793809890747 Threading Modules threading module high-level implementation multithreading used deploy application Python. multithreading, need import threading module Python Program. Thread Class Methods Methods Description start() start() method used initiate activity thread. calls only once each thread that execution thread begin. run() run() method used define thread's activity overridden class that extends threads class. join() join() method used block execution another code until thread terminates. Follow given below steps implement threading module Python Multithreading: Import threading module Create thread importing threading module, shown. Syntax: import threading threading module made Thread class, which instantiated create Python thread. Declaration thread parameters: contains target function, argument, kwargs parameter Thread() class. Target: defines function name that executed thread. Args: defines arguments that passed target function name. example: import threading print_hello(n): print("Hello, threading.Thread( target print_hello, args =(18, above code, invoked print_hello() function target parameter. print_hello() contains parameter which passed args parameter. Start thread: start thread Python multithreading, call thread class's object. start() method called once each thread object; otherwise, throws exception error. Syntax: t1.start() t2.start() Join method: join() method used thread class halt main thread's execution waits till complete execution thread object. When thread object completed, starts execution main thread Python. Joinmethod.py import threading print_hello(n): 	Print("Hello, you? threading.Thread( target print_hello, args (20, T1.start() T1.join() Print("Thank you") Output: Hello, you? Thank When above program executed, join() method halts execution main thread waits until thread completely executed. Once successfully executed, main thread starts execution. Note: join() method, interpreter execute print statement inside Python program. Generally, executes first print statement because interpreter executes lines codes from program's start. Synchronizing Threads Python thread synchronization mechanism that ensures threads simultaneously execute particular segment inside program access shared resources. situation termed critical sections. race condition avoid critical section condition, which threads access resources same time. Let's write program threading module Python Multithreading. Threading.py import time import time module import threading from threading import cal_sqre(num): define square calculating function print(" Calculate square root given number") num: loop time.sleep(0.3) each iteration waits time print(' Square cal_cube(num): define cube calculating function print(" Calculate cube given number") num: loop time.sleep(0.3) each iteration waits time print(" Cube given array time.time() total time execute functions #cal_cube(ar) #cal_sqre(ar) threading.Thread(target=cal_sqre, args=(ar, threading.Thread(target=cal_cube, args=(ar, th1.start() th2.start() th1.join() th2.join() print(" Total time taking threads time.time() print total time print(" Again executing main thread") print(" Thread Thread have finished their execution.") Output: Calculate square root given number Calculate cube given number Square Cube Square Cube Square Cube Square Cube Square Cube Total time taken threads 1.5140972137451172 Again executing main thread Thread Thread have finished their execution. Next TopicStatic Python prev next