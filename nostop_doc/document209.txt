next prev Enum class Python Enum class Python used developing enumerations. Enumeration symbolic members names which bounded constant unique values. members enumeration equated using these symbolic names. enumeration repeated itself over them. characteristics Enum class are: users check types Enum using type() method. using 'name' keyword, users display name Enum. Enum evaluable string representation object known repr(). Example: import enum will enum class creating enumerations class Weekdays(enum.Enum): Sunday Monday Tuesday Wednesday Thursday Friday Saturday will print enum member string print member Enum class string ",end print (Weekdays.Monday) will print enum member repr object print member Enum class repr ",end print (repr(Weekdays.Sunday)) will check type enum member print type member Enum class ",end print (type(Weekdays.Saturday)) will print name enum member print name member Enum class ",end print (Weekdays.Friday.name) Output: member Enum class string Weekdays.Monday member Enum class repr type member Enum class name member Enum class Friday print Enum Iterable list users print Enum class iterable list. following example, will loop print members Enum class. Example: import enum will user enum class creating enumerations class Weekdays(enum.Enum): Sunday Monday Tuesday Wednesday Thursday Friday Saturday will print enum members using loop print member Enum class weekday (Weekdays): print(weekday) Output: member Enum class Weekdays.Sunday Weekdays.Monday Weekdays.Tuesday Weekdays.Wednesday Weekdays.Thursday Weekdays.Friday Weekdays.Saturday Hash Enum Class members Enum class called Enumeration, also hashable. Therefore, these members used sets dictionaries. following example, will show users hash Enum class. Example: import enum will enum class creating enumerations class Days(enum.Enum): Sunday Monday will Hash creating dictionary Daytype Daytype[Days.Sunday] 'Sun God' Daytype[Days.Monday] 'Mon God' will Check hashing successful Daytype =={Days.Sunday:'Sun God',Days.Monday:'Mon God'}: print Enum class hashed else: print Enum class hashed Output: Enum class hashed access Enum members users access members Enum class using value name member items. following example, will show users access value name where have used name Enum index. Example: import enum will enum class creating enumerations class Days(enum.Enum): Sunday Monday Tuesday Wednesday Thursday Friday Saturday print('The member Enum class accessed name: print (Days['Monday']) print('The member Enum class accessed name: print (Days['Friday']) print('The member Enum class accessed Value: print (Days(1)) print('The member Enum class accessed Value: print (Days(5)) Output: member Enum class accessed name: Days.Monday member Enum class accessed name: Days.Friday member Enum class accessed Value: Days.Sunday member Enum class accessed Value: Days.Thursday Compare Enums users compare Enums simply using comparison operator. example: import enum will enum class creating enumerations class Days(enum.Enum): Sunday Monday Tuesday Wednesday Thursday Friday Saturday Days.Sunday Days.Tuesday: print('Match') else: print ('Do Match') Days.Monday Days.Tuesday: print('Do Match') else: print ('Match') Days.Wednesday Days.Friday: print('Match') else: print ('Do Match') Days.Thursday Days.Friday: print('Do Match') else: print ('Match') Output: Match Match Match Match Conclusion this article, have discussed Enum class Python characteristics. also showed user could print Enum class iterable list. users hash access members Enum class. Next TopicDestructors Python prev next