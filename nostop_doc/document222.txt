next prev Python Asynchronous Programming asyncio await asyncio module. asyncio module comes with excellent features that allow write more efficient Python asynchronous applications. will explore manage async event loop Python. Before dive deep into this topic, let's understand what asynchronous programming What Asynchronous Programming? synchronous programming, methods written perform task time. function depends other function's output, wait finish execution that function. program essentially stopped until function finishes execution. means that program executed time. This slows down program forced stop wait something finish. Many processors available system, waste resources other tasks rather than ideal sit. overcome this, asynchronous programming concept comes into play. behaves differently; also takes execution time. system wait finish execution move next step. means processor doesn't ideal program will perform another task while previous hasn't finished still running elsewhere. this tutorial, will explain need such type programming. What asyncio Asynchronous I/O? asyncio Python library which used concurrent code using async/wait. foundation Python asynchronous framework that offers connection libraries, network web-servers, database distributed task queues, high-performance, etc. This module provides framework that works around event loop also take care such things system events. Coroutines Tasks asyncio Python library used concurrent code using async/wait. foundation Python asynchronous framework that offers connection libraries, network, web-servers, database distributed task queues, high-performance, etc. This module provides framework that works around event loop takes care such things system events. Example import asyncio async main(): print ("Waiting seconds. range(5): await asyncio.sleep(1) print ("Hello") print ("Finished waiting.") asyncio.run(main()) Output: Waiting seconds. Hello Hello Hello Hello Hello Finished waiting. Explanation above code have imported asyncio module access Python async functionality. Then create primary() function write async keyword front that. This will allow program task asynchronously. used loop called sleep() method, which forced wait second. program prints "Hello" after second. Program should have .run() function well .main() function. also schedule tasks objects that bind coroutine help them run. Let's understand following example. Example import asyncio import time async execute(delay, value): await asyncio.sleep(delay) print(value) async main(): print(f"started {time.strftime('%X')}") await execute(1, 'hello') await execute(2, 'world') print(f"finished {time.strftime('%X')}") asyncio.run(main()) Output: started 11:11:54 hello world finished 11:11:57 Explanation above code, have imported asyncio time module. Then defined execute() function with delay value arguments. prints delay time using sleep() method. main() function, have passed arguments: first delay time, second value print. program starts execution prints exact execution time, print 'hello' then wait seconds print 'world' stop. Now, let's make some changes above code result. Example Creating Tasks async execute(delay, value): await asyncio.sleep(delay) print(value) async main(): Using asyncio.create_task() method coroutines concurrently asyncio task1 asyncio.create_task( execute(1, 'hello')) task2 asyncio.create_task( execute(2, 'world')) print(f"started {time.strftime('%X')}") Wait until both tasks completed (should take around seconds.) await task1 await task2 print(f"finished {time.strftime('%X')}") asyncio.run(main()) Output: started 15:43:30 hello world finished 15:43:32 that second faster than previous program. create.task() method will event loop, with result task. have scheduled tasks returned them using await. Manage async event loop Python Asyncio also used managing async event loop. event loop object that runs async functions callbacks. When want execute coroutines, event will crucial asynchronous functions when asyncio.run() method; event loop object created automatically. implement more advanced server, will need lower-level access event loop. need work directly with event loop's internals. event loop comes with following features. register, execute, cancel delayed calls (asynchronous functions) create client server transports communication create subprocesses transports communication with another program. Delegate function calls pool threads. Let's following example. Example import asyncio async speech_async(): print('This asynchronicity!') loop asyncio.get_event_loop() loop.run_until_complete(speech_async()) loop.close() Output: This asynchronicity! event loop starts getting asyncio.get_event_loop() scheduling running async task close event loop when done with running. Read Write Data with Stream Python asyncio module offers stream which used perform high-level network I/O. behave server network requests. best long-running network operations where application block waiting some other resources return result. There classes, StreamReader StreamWriter asyncio. These classes used read write from network high level. read from network, need open network using asyncio.open_connection(). StreamReader StreamWriter objects function return tuple, would .read() .write() method each connection. asyncio.start_server() method used receive connection from remote hosts. This function takes callback function, client_connected_cb arguments. called whenever function received request. Synchronization tasks Python have discussed earlier, Asynchronous program runs separately, sometimes would want communicate with each other. asyncio module offers queue various other methods establish synchronization between tasks. Let's understand following implementation method. Queues asyncio queues facilitate asynchronous functions line Python objects consumed other async functions. example workload distributed between function behavior. Synchronization Primitive asyncio's features locks, events, conditions, semaphores conventional Python counterparts. Here, point should always keep mind that these methods thread-safe. This isn't issue async tasks running same event loop. need thread module share information between tasks. When asynchronous programming? following scenario, asynchronous programming. When want complete work quick time. delay involves waiting (disk network) operations, computation. When many operations happing once. asyncio module allows perform multiple tasks parallel iterate through them efficiently, without blocking rest application. Some tasks given below, which work well with asyncio. scraping. Network Services (web server framework) Simultaneous Database Some Important Functions Asyncio Below some essential methods that used while doing asynchronous programming. Running asyncio Program asyncio.run(coro, debug False) This function used block execution delay seconds. suspends current task allows another task run. delay argument that shows number seconds. Example async main(): await asyncio.sleep(1) print('hello') asyncio.run(main()) Creating Tasks create_task(coro, name None) This function wraps Coroutines into Task schedule execution. returns task object. Example async coro(): Python 3.7+ task asyncio.create_task(coro()) task asyncio.ensure_future(coro()) Sleeping sleep(delay, result None, loop None) This function used block execution delay seconds. suspends current task allows other task run. delay argument which shows number seconds. Example import asyncio async main(): range(3): await asyncio.sleep(1) print ("Hello") asyncio.run(main()) Timeouts coroutinewait_for(aw, timeout, loop None) This function used wait aw coroutine automatically schedule Task) awaitable complete with timeout. Example async myfunc(): Sleep minutes await asyncio.sleep(600) print('hello!') async main(): Wait most second try: await asyncio.wait_for(myfunc(), timeout=1.0) except asyncio.TimeoutError: print('timeout!') asyncio.run(main()) Conclusion This tutorial includes concept asynchronous programming using Python asyncio module. asyncio gives programmatic control when context when context switches. That means handle many complex issues that occur with threaded programming. powerful valuable tool, only asynchronous type programming. have discussed Coroutines tasks with their respective example. have also discussed managing event loop reading writing data with stream Python. also includes essential methods. Next TopicPython main() function prev next