next prev Python Coroutines this tutorial, going learn about coroutine Python. will discuss coroutines, subroutine, execution coroutines, closing coroutine Python details. Before start learning about coroutine, must have basic understanding subroutines Python. will start with Python subroutine this tutorial. Python subroutines known with functions Python, know that these Python functions also known procedure, subprocess, subroutines. Generally, function Python packed sequence instructions that work unit perform certain task code. When divide complex function's logic into several steps that self-contained work like unique function (nested functions etc.), then these helpers nested functions main function called subroutines Python. call subroutines main function Python that responsible coordination while using subroutines function. subroutines Python have only single entry point, i.e., starting main function. Main Function After seeing figure given above, easily conclude that main function required coordinate between subroutines while using them, main function also only entry point subroutines Python. What Coroutines? Now, this section, will talk about coroutines that basically generalization subroutines. Coroutines generally used cooperative multitasking process that voluntarily giving away (yield) control over period time (periodically). coroutine also used when idle enable running multiple applications simultaneously. Coroutines different from thread coroutines; programmer programming language that decides when coroutines switched, whereas case threads, operating system schedule switching between threads. Difference between Coroutines Subroutines Coroutines Subroutines Unlike subroutines, Coroutines have multiple entry points. Subroutines have only single entry point, i.e., main function. only suspend resume execution Python subroutines from single point, only resumed only from starting point. suspend resume execution coroutines Python from multiple points function, also, resume execution from where have suspended last. Unlike subroutines, don't have main function Python coroutines order coordinate their execution particularly. Python subroutines, main function coordinates between multiple subroutines controls their executions. Coroutines corporative they together form pipeline structure while executing them. Subroutines form linear execution structure. Coroutines, have coroutine that displays result input data. subroutines, processing result data given them displayed main function. Coroutines Python Coroutines very similar generators present Python coroutines come with modifications yield (give away) statement some extra methods given Python coroutines also able consume input data, whereas generators were only able produce data iteration function. Python having versions higher than 2.5, observe slight change introduced yield statement coroutines, after this change, yield statement used expression. Example: Assignment yield right side, i.e., LineOfCode (yield) value that send coroutine program will captured coroutine return only through yield expression. send value coroutine only send() function. Consider given coroutines below program that will print names only that have 'Officer' their prefix will send names coroutines using send() function. Example: Default function search prefix print_name(prfx): print("Coroutine object searching prefix: {}".format(prfx)) Searching prefix while True: GivenName (yield) prfx GivenName: required prefix match print(GivenName) Print given name CorouteObject print_name("Officer") Taking prefix Officer coroutine object Taking names input from user Name1 input("Enter first name: Name2 input("Enter second name: Name3 input("Enter third name: CorouteObject.__next__() using _next_() method call coroutine sending input data coroutine with send() method CorouteObject.send(Name1) CorouteObject.send(Name2) CorouteObject.send(Name3) Output: Enter first name: Alex Enter second name: Officer Steve Rogers Enter third name: Officer Natasha Widow Coroutine object searching prefix: Officer Officer Steve Rogers Officer Natasha Widow Explanation above program that have taken three names from user input data, have sent user input data coroutine defined function send() method. have used "Officer" keyword coroutine search names that have officer prefix their name, coroutine will only print these matched names only output. Execution Coroutines Python, execution coroutine very similar generators. Nothing will happen when call coroutine program; will only following responses: send() next() function. clearly observe above example; coroutine starts executing only after called _next_() method program. After coroutine called, execution advances yield first expression. After that, execution coroutine pauses waits value send coroutine object. After first value sent coroutine object, checks required prefix present, then object will print name with prefix. after printing name, goes through continuous loop till encounters, name (yield) expression again. Closing Coroutine close coroutine, have close() function program. When close coroutine, will produce exception, i.e., GeneratorExit exception that catch normal catching exception. Example Default function search prefix print_name(prfx): print("Coroutine object searching prefix: {}".format(prfx)) Searching prefix Using excption handling except try: while True: GivenName (yield) prfx GivenName: required prefix match print(GivenName) Print given name except GeneratorExit: Handling GeneratorExit exception print("Now have closed coroutine!!") CorouteObject print_name("Officer") Taking preifx Officer coroutine object CorouteObject.__next__() using _next_() method sending input data coroutine with send() method CorouteObject.send("Alexa") CorouteObject.send("Officer Tony Stark") CorouteObject.send("Officer Steve Rogers") closing coroutine CorouteObject.close() Output: Coroutine object searching prefix: Officer Officer Tony Stark Officer Steve Rogers have closed coroutine!! have remember that send values coroutine objects after closing coroutine, program will raise StopIteration exception output. Creating Pipeline Structure Chaining Coroutine coroutine create pipe structure. After chain together coroutine, push given data through created pipe structure using push() method. create pipe structure program with coroutines, have take care following things: have give initial source, i.e., producer, that will derive complete pipeline structure. Generally, producers coroutine itself, they just simple method. have create sink pipeline, sink will endpoint pipeline. sink point coroutine pipeline, which might collect input data displays Understand following program coroutine with pipeline structure. Example: Defining producer pipeline producer(GivenSentence, NextCoroutine): tokens GivenSentence.split(" splitting sentence token tokens: iterating over tokens NextCoroutine.send(token) NextCoroutine.close() closing coroutine Defining pattern filter pipeline structure pattern_filter(SearchPattern "ing", NextCoroutine None): print("In input sentence, searching words that with{}".format(SearchPattern)) Searching pattern try: while True: token (yield) yielding tokens SearchPattern token: NextCoroutine.send(token) Sending tokens except GeneratorExit: Exception handling GeneratorExit exception print("We done with filtering given input sentence!!") Defining sink pipeline print_token(): print("I'm sink pipeline used print tokens given.") try: while True: token (yield) yielding tokens print(token) printing tokens from sink except GeneratorExit: print("Now done with printing!") Taking sink variable PrintToken print_token() PrintToken.__next__() calling sink Taking Pattern filter variable PatternFilter pattern_filter(NextCoroutine PrintToken) PatternFilter.__next__() calling pattern filter Taking sentence producer pipeline GivenSentence "Steve rogers running very fast chase down train moving with high speed" producer(GivenSentence, PatternFilter) calling producer Output: sink pipeline, used printing tokens given. input sentence, searching words that with running moving done with filtering given input sentence!! Explanation That's pipeline created with multiple coroutines filtering input data. filtered resultant data will displayed sink pipeline, above output. Next TopicDouble Underscores Python prev next