next prev Tokens Character Python Python high-level, all-purpose coding language. syntax enables developers articulate their notions minimal lines code, referred scripts. built with focus script readability. Character sets tokens included these scripts. shall discover more about various character sets tokens this tutorial. Character character Python collection legal characters that scripting language will recognize when writing script. referring Python coding language this instance. Therefore, character Python legitimate collection characters that Python language recognize. These represent Python scripting language's supported characters. Python compatible with ASCII Unicode characters, including: Alphabets: These include small (a-z) capital (A-Z) alphabets. Digits: includes single digits 0-9. Special Symbols: includes types special characters," White Spaces: White spaces also part character set. These space, newline, blank space, carriage return. Other: Python supports types ASCII UNICODE characters that constitute Python character set. Tokens smallest distinct element Python program called token. Tokens used construct each phrase command program. different Python tokens include: Keywords computer language, keywords English words with particular importance meaning. cannot utilize them arbitrary reason, including names functions variables. They utilized their unique qualities. keywords Python include, among others: try, break, continue, except, False, True, class, and, assert, print, import, raise, while, for, not, elif, etc. Code Python program show keywords work string "This Python Tutorial character sets" using keyword loop will calculate length string using keyword range(len(string)): Printing index string will this using print keyword string[x] string[x] 'o': print(x) Output: Identifiers names assigned variable, class, function, list, method, etc., their recognition known identifiers. Python certain guidelines naming identifiers case-sensitive programming language. create identifier, follow these guidelines: Python case-sensitive, already mentioned. when defining identifiers, case important. Thus, terms "python" "Python" interchangeable. capital alphabet (A-Z), small alphabet (a-z), underscore precedes word "identifier." other character used starting point. Digits also allowed member identifier, along with letters underscores, they cannot initial character. additional special symbols whitespace must avoided when creating identity. keyword cannot identifier. Code Python program show create identifiers Here, String identifiers String 'Hello' "Javatpoint" print(String) print(s) These also identifiers having digit underscore String1 "World" String_1 "!!" print(String1) print(String_1) Output: Hello Javatpoint World Literals Values constant values data objects utilized source program known literals. Various types literal supported Python, including: String Literals: Python string literals represented text enclosed solo, double, triple quotations. Examples include "Computer Programming," "sigma," etc. Multi-line phrases also written using triple quotations. Code Python program show create string literals Examples string literals string 'Hello' "World" "'Python high-level general purpose language'" print(string) print(s) print(A) Output: Hello World Python high-level general purpose language Character Literals: Another string literal called character literal, which encloses letter single double quotes. Numeric Literals: These literals that have been written numbers. Python supports following three numerical literals: Integer Literal: Contains well positive negative values. There fractional pieces included. addition, literals binary, decimal, octal, hexadecimal permitted. Float Literal: contains real numbers positive negative ranges. Fractional portions also part Complex Literal: This contains numerals a+bi, where stands fundamental component complex component. Code Python program show numeric literals work Examples numeric literals 13.3 will print literal type print(f"literal {n1} type {type(n1)}") print(f"literal {n2} type {type(n2)}") print(f"literal {n3} type {type(n3)}") Output: literal type <class 'int'> literal 13.3 type <class 'float'> literal type <class 'int'> Boolean Literals Python, Boolean tokens only have possible values. Every these true false. Code Python program show Boolean literals work Examples Boolean Literals True False True Printing above literals i.e., their boolean value print(f"The Boolean value {v}") print(f"The Boolean value {w}") print(f"The Boolean value {y}") print(f"The value {z}") Output: Boolean value True Boolean value False Boolean value True value Special Literals special literal "None" Python exists. employed signify emptiness, lack values, nothingness. Code Python program show special literals work Examples special literal None print(var) Output: None Literals Collections List, dictionary, tuple, sets examples Python literal collections. List: comma-separated list components enclosed square brackets. These elements data type changed. Tuple: round brackets, this similar list having comma-separated items values. values fixed have Python data type. Dictionary: This data structure unordered key-value combinations. Set: group components enclosed curly braces, "{}" Code Python program show literal collections work Examples literal collections list literal collection my_list [23, "Python", 1.2, 'Character'] tuple literal collection my_tuple 'world') dictionary literal collection my_dict {'a': 'b': 'c': literal collection my_set {5, Printing literals along with their data structure type print(f"Literal {my_list} type {type(my_list)}") print(f"Literal {my_tuple} type {type(my_tuple)}") print(f"Literal {my_dict} type {type(my_dict)}") print(f"Literal {my_set} type {type(my_set)}") Output: Literal [23, 'Python', 1.2, 'Character'] type <class 'list'> Literal 'world') type <class 'tuple'> Literal {'a': 'b': 'c': type <class 'dict'> Literal {9, type <class 'set'> Operators These represent tokens expression charge carrying operation. Operands elements which operation executed. Operators come binary unary forms. Unary operators operate single argument, such complementing others. same time, operands binary operators require two. Code Python program show different types operators equal operator print('x multiplication operator print('x Bitwise operator print('x Bitwise operator print('x assign operator print('x divide assign operator print('x Output: False Next TopicWeb Development Project Python prev next