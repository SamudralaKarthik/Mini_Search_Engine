next prev Python Requests Module HTTP Request this tutorial, will learn about Python request module handle requests using Python requests library. request module standard making HTTP requests Python. will also discuss features request. Finally, will learn optimize customize those features different situations. This tutorial includes following topics. Introduction Python Request Module Request POST Request Status Code JSON Response Request Header Message Body Other Important HTTP Method Conclusion Let's understand basic introduction request library. Introduction Generally, look some information from website. want access social media accounts, checking mails, watching online videos. likely send request using browser, webserver returns desired result from webserver. information from Internet, need send request through browser. example search Python tutorial Google. Then request sends HTTP request Google server, server returns searched result with status code. There main components initiate communication Client Server. HTTP (Hypertext Transfer Protocol), which enables communication between client server over Internet. Python provides requests module, which allows make these requests using Python script. Python Request Module most powerful tool Python that allows send requests web. includes many features methods send HTTP requests. system that sends requests known client, system that holds webserver known server. While working with requests, will come across following methods. used request data from server. POST used submit some data server processing Python request module consists many simple that helpful handle those requests. These many features such adding headers, sending custom headers, passing parameters with URLs, many others. start working with requests, first step install request module Python using following command. install requests also Pipenv (Python packaging tool) install request module. Type following command. pipenv install requests Import requests module file check whether successfully installed not. import requests Now, ready start journey learn request Python. Request POST methods determine user action pages. most general-purpose methods Python requests module. specifies that user attempting retrieve data from specified resource. other words, used send request URL. invoke request, following syntax. requests.get(url, param {key:value}, args) above method, argument particular website where user sends request. param argument used send query string dictionary args multiple named arguments. When request successfully sent, method will return requests.Response object. This object saves response received from server. assign get() request result variable. This object saves response received from server. Therefore, assign get() request results variable. Making Requests quite easy make HTTP request using requests module. Following code making request. Here response object will store information. Below essential properties. content returns content data responses. status_code returns status request. example means made successful request, FOUND means resource found. cookies uses obtaining CookieJar object having cookies from server. Example import requests requests.get('http://www.javatpoint.com/') print(req.encoding) returns 'utf-8' print(req.status_code) returns print(req.elapsed) returns datetime.timedelta(0, 666890) print(req.url) returns 'https://edureka.co/' print(req.history) print(req.headers['Content-Type']) Output: ISO-8859-1 0:00:01.007097 https://www.javatpoint.com/ text/html;charset=ISO-8859-1 POST Request POST method used send information using post() method. basic syntax given below. Syntax requests.post(url, data={key: value}, json={key: value}, args) Following important parameters. mandatory parameter that indicates where want send some data. data specifies dictionary, file object, tuple that want send URL. optional parameter. json This JSON object sent URL. POST method returns requests.Response object. Status Code Status code response that after making POST request. status code informs status request. There many status codes available responses. example, when request successful status code will 201, status code request page looking found. also this information make decision code. response.status_code 200: print('Success!') elif response.status_code 404: print('Not Found.') status code then will print Success, result 404, program will print found. point should never forget that this method does verify that status code equal 200. This because other status codes within range, such CONTENT, also considered successful sense. example will indicate successful request, there's content return message body. JSON Response JSON represents JavaScript Object Notation which most popular transmitting data format. JSON data easily readable web-browser. data stored dictionary form (key, value pair). convert JSON Python Dictionary? r.json() method create Python dictionary from JSON response. Let's following example. Example import requests json_data {'username':'mathew','password':'1234'} requests.post('https://httpbin.org/post',data json_data) print(r.json()) Output: {'args': 'data': 'files': 'form': {'password': '1234', 'username': 'mathew'}, 'headers': {'Accept': '*/*', 'Accept-Encoding': 'gzip, deflate', 'Content-Length': '29', 'Content-Type': 'application/x-www-form-urlencoded', 'Host': 'httpbin.org', 'User-Agent': 'python-requests/2.25.1', 'X-Amzn-Trace-Id': 'Root=1-60b711e8-60f535db7df2f6a61f710e29'}, 'json': None, 'origin': '132.154.100.245', 'url': 'https://httpbin.org/post'} Storing variable JSON data converted Python dictionary also store variable. Let's understand following example. Example import requests json_data {'username':'mathew','password':'1234'} requests.post('https://httpbin.org/post',data json_data) r_dictionary= r.json() print(r_dictionary['form']) Output: {'password': '1234', 'username': 'mathew'} Request Header create custom header using get() method. dictionary HTTP header passed get() using headers parameter. Let's understand following example. Example import requests response requests.get( 'https://api.github.com/search/repositories', params={'q': 'requests+language:python'}, headers={'Accept': 'application/vnd.github.v3.text-match+json'}, json_result response.json() repo json_result['items'][0] print(f'Text matches: {repo["text_matches"]}') Output: Text matches: [{'object_url': 'https://api.github.com/repositories/4290214', 'object_type': 'Repository', 'property': 'description', 'fragment': 'Requests Gevent <3', 'matches': [{'text': 'Requests', 'indices': 8]}]}] Explanation above code, Accepts header content type that application handle. example, have used header value application/vnd.github.v3.text-match+json, proprietary GitHub Accept header. content header JSON format. Other Important HTTP Methods Apart from POST methods, there essential methods HTTP, including PUT, DELETE, HEAD, PATCH, OPTIONS. These methods used create, read, update, delete CRUD) operations. Below summarize table HTTP methods. HTTP Method CRUD Entire Collection Specific Item POST Create shows (created) location header with link customer resource already exists, shows (Not Found). GET	Read shows 200, list customers, pagination 404, found invalid. Update shows 405, unless want replace every resource. 404, found invalid. PATCH Update shows 405, unless want modify entire collection itself. 404, found invalid. DELETE Delete shows 405, unless want delete whole collection. 404, found invalid. Message Body message body used pass data instead parameters query string. These data passed POST, less common patch. data dictionary, list tuple, bytes, file-like object. Using requests, will pass payload corresponding function's data parameter. request content type application/x-www-form-urlencoded, data will send dictionary. requests.post('https://httpbin.org/post', data={'key':'value'}) also send same data using list tuple. requests.post('https://httpbin.org/post', data=[('key', 'value')]) Conclusion have discussed basic details about Python request module which will very helpful make basic server request. main point get() method less secure than post() method because request only passed through URL. sensitive password breached hackers. have also mentioned important HTTP methods send request using custom header. want learn more about request module then visit well-written request documentation. Next TopicShutil Module Python prev next