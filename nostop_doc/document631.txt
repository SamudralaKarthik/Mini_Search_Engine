next prev Encapsulation Python Encapsulation most fundamental concepts object-oriented programming (OOP). This concept wrapping data methods that work with data unit. This prevents data modification accidentally limiting access variables methods. object's method change variable's value prevent accidental changes. These variables called private variables. Encapsulation demonstrated class which encapsulates data, such member functions, variables, forth. Take look real-world example encapsulation. There many sections company, such accounts finance sections. finance section manages financial transactions keeps track data. sales section also handles sales-related activities. They keep records sales. Sometimes, finance official need sales data specific month. this instance, permitted access data from sales section. First, will need contact another officer from sales section request data. This encapsulation. data sales section, well employees manipulate wrapped together under single name "sales section". Encapsulation another hide data. This example shows that data sections such sales, finance, accounts hidden from other sections. Protected Members Protected members Java members class that only accessed within class cannot accessed anyone outside This done Python following convention prefixing name with single underscore. protected variable accessed from class derived classes also modified derived classes), customary access class body. __init__ method, which constructor, runs when object type instantiated. Example: Python program demonstrating protected members first, will create base class class Base1: 	def __init__(self): protected member 		self._p here, will create derived class class Derived1(Base): 	def __init__(self): now, will call constructor Base class 		Base1.__init__(self) 		print ("We will call protected member base class: 			self._p) Now, will modifing protected variable: 		self._p 		print ("we will call modified protected member outside class: 			self._p) obj_1 Derived1() obj_2 Base1() here, will call protected member this accessed should done because convention print ("Access protected member obj_1: obj_1._p) here, will access protected variable outside print ("Access protected member obj_2: obj_2._p) Output: will call protected member base class: will call modified protected member outside class: Access protected member obj_1: Access protected member obj_2: Private Members Private members same protected members. difference that class members have been declared private should accessed anyone outside class base classes. Python does have Private instance variable variables that accessed outside class. However, define private member, prefix member's name with double underscore "__". Python's private secured members accessed from outside class using Python name mangling. Example: class Base1: __init__(self): self.p "Javatpoint" self.__q "Javatpoint" Creating derived class class Derived1(Base1): __init__(self): Calling constructor Base class Base1.__init__(self) print("We will call private member base class: print(self.__q) Driver code obj_1 Base1() print(obj_1.p) Output: Javatpoint Next TopicPolymorphism Python prev next