next prev Python memory-profiler Module have heard about slow processing slow execution application, ever have tried understand reason behind There possible reason time application taking process execute commands, what about usage? memory system very much essential processing execution time application, nobody actually talks about much memory (RAM) used while executing processing command also affects application's execution speed. This sound ridiculous insignificant plays very important role performance system applications installed Therefore, quite common that applications that have less will take high time execute compared applications that have more RAM. This same thing applicable while executing program, that's very important much memory used while executing program. This will help manage memory usage design program better keep memory usage mind. now, some questions will come mind, such this, track program's memory usage, find which functions program more memory make execution slow? have memory profiling module Python, which helps track memory usage program functions. going learn about Python memory-profiler module this tutorial, will learn this module track used with distribution while executing program. Introduction memory-profiler Module Python memory-profiler open-source Python module that offers functions track memory consumption program while execution, even monitor memory consumption with line-by-line analysis program functions program. memory-profiler module also helps analyze performance Python much performance execution speed affected consumption during execution. Here, will discuss installation implementation memory-profiler module with help example programs, first, will learn about what advantages features this module. memory-profiler Module Python: Advantages Features Most have seen many people complaining that Python slow programming language compared others, takes more time execute program application. Well, have asked them what approach they using calculate speed execution, first answer will receive total time spent Python execute code part code something like this. will that none them will talk about usage much used while executing that particular part code. seem like very insignificant information regarding program's execution speed, actually, very important, which affects speed Python executing program. Therefore, equally important analyze memory usage during execution program which becomes possible because memory-profiler module Python. Python memory-profiler module following features advantages regarding monitoring analyzing memory usage program during execution: This module helps tracking memory usage Python program during execution that know reason behind performance speed even track memory usage particular part program with help memory-profiler module even monitor line-by-line consumption memory program while executed These some advantages using memory-profiler module, also helps improve performance Python. memory-profiler Module Python: Installation memory-profiler Module Python in-built module, that's want understand implementation development process, have install this module system make sure that this module properly installed system. memory-profiler present system, install through various methods, simplest which choose installing through installer. Therefore, this installation part, going install memory-profiler module through installer using following command: install memory-profiler First, have write command given above command prompt terminal shell, after that, have press 'enter' start installation process. Once installation process starts, will take some time, have wait until successfully installed system. see, memory-profiler successfully installed system, move further with implementation even this module development purposes. Note: implementation part this tutorial, will request module with memory-profiler module example programs understand real-life implementation usage memory tracking analysis through memory-profiler module. Therefore, before move forward with implementation part, should make sure that request module present system, present system, install from installer using following command terminal: install requests see, requests module already present system, that's requirement already satisfied message displayed memory-profiler Module Python: Implementation will here examples understand implementation memory-profiler module, will analyze memory usage program when result displayed output. Let's have look following example programs understand implementation memory-profiler module: Implementation Analysing memory usage from default function: this implementation part, will create default function example program define some variables after that, will perform some operations these variables. will then analyze memory usage each line program when result displayed output. Let's look following example program understand this implementation part memory-profiler module. Example Importing memory-profiler module program from memory_profiler import profile Profile Decorator class @profile default function check memory usage defFunc(): Some random variables var1 var2 var3 Operations variable var3 var1 return var2 __name__ '__main__': Calling default function defFunc() Print confirmation message print("We have successfully inspected memory usage from default function!") Output: Filename: C:\Users\Manish\memoryexample.py Line usage Increment Occurences Line Contents ============================================================ 40.2 40.2 @profile default function check memory usage defFunc(): Some random variables 40.2 var1 40.2 var2 40.2 var3 Operations variable 40.2 var3 40.2 var1 40.2 return var2 have successfully inspected memory usage from default functi see, memory usage every line program displayed with confirmation statement last. Explanation: have first imported profile decorator class from memory-profiler module program. After that, used profile decorator, then defined default function with name 'defFunc.' Inside this default function, have defined three variables, after that, then deleted first third variables returned second variable from function. Then, called default function, after that, have used print statement like confirmation message. output above example, multiple columns which represent multiple properties that defined below: Line #: This column represents line number program whose memory usage displayed Usage: This column represents memory used till particular line code during entire execution process Increment: This column displays difference seen memory usage current line compared previous line code, basically displays Occurences: This line displays number times code line against this particular line number executed Line Contents: represents Python code written that particular line that's understand analysis memory usage Python program even particular line program that will know this function line code affecting performance execution time. Implementation Analysing memory usage during execution process: This implementation part will cover practical implementation memory-profiler module monitoring analyzing memory usage Python program. this implementation part, first, will create Python file with following example program Example Import memory_profiler module from memory_profiler import profile Importing request module program import requests Creating base extractor class class baseExtr: Using profile decorator monitoring memory usage 	@profile Default function parsing words from list 	def parseList(self, array): Creating file type object system 		sampleFile open('wordParsing.txt', 'w') Looping over file with loop 		for parsedWords array: 			# Writing words example file 			sampleFile.writelines(parsedWords) 	@profile Another default function fetching 	def parseURL(self, url): Fetching response from file 		response requests.get(url).text 		with open('url.txt', 'w') sampleFile: 			# Writing fetched responses example file 			sampleFile.writelines(response) After writing program given above, will save file with 'memoryexample' name, will create another file where will import this file write following Python program Import baseExtr class from memoryexample file from memoryexample import baseExtr __name__ "__main__": importing word list 	url 'https://raw.githubusercontent.com/dwyl/english-words/master/words.txt' Array word from text file 	array ['five', 'four', 'three', 'two', 'one'] Initializing Extractor object from baseExtr() class 	wordExtract baseExtr() Calling parseURL() function from baseExtr class 	wordExtract.parseURL(url) Calling pasreList() function 	wordExtract.parseList(array) Now, done with program writing part, when second file, will following output: Filename: C:\Users\Manish\memoryexample.py Line usage Increment Occurences Line Contents ============================================================ 44.6 44.6 	@profile parseURL(self, url): fetches response 51.9 7.3 	response requests.get(url).text 51.9 	with open('url.txt', 'w') sampleFile: writing response file 52.5 	sampleFile.writelines(response) Filename: C:\Users\Manish\memoryexample.py Line usage Increment Occurences Line Contents ============================================================ 47.9 47.9 @profile Default function parsing words from list parseList(self, array): Creating file type object 47.9 sampleFile open('wordParsing.txt', 'w') looping over file 47.9 parsedWords array: Writing words example file 47.9 sampleFile.writelines(parsedWords) [Finished 27.1s] total memory usage during execution process, extraction process words from file displayed output. That's analyze understand program's memory usage affecting performance execution speed program. Next TopicPython Phonenumbers Module prev next