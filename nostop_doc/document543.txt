next prev guppy/heapy Python guppy3 Python package that offers user status current heap objects available heap. This detail support developer with memory profiling analysis. guppy package consists sub-package named heapy. heapy sub-package offers list significant methods current heap status. When called heap status, guppy3 package provides special C-nodesets object. This C-nodesets object consists heap status each object available memory. guppy3 package also consists details associated with reachable unreachable objects available heap special type list. also provides details related number objects, percentage memory occupied object, size bytes, type information. Apart from this, guppy3 package offers list useful methods that allow access individual element heap status, find difference between heap statuses, find size objects Bytes, many other functionalities. will understand usage guppy3 package order gather information associated with memory usage Python through different examples part following tutorial. let's started. Understanding guppy3 package guppy3 package Python Programming Environment Heap analysis toolset. This package consists following sub-packages: heapy sets descriptions above sub-packages given below: This sub-package supports modules consisting Glue protocol module. This sub-package contains implementation Guppy Specification Language. This sub-package used create documents tests from common source. heapy This sub-package supports heap analysis toolset. utilized find details associated with objects heap show detail different ways. sets This sub-package supports Bitsets 'nodesets' implemented language. guppy3 package fork Guppy-PE, created Sverker Nilsson Python Requirements guppy3 package should have Python version 3.6, 3.7, 3.8, 3.9. guppy3 package CPython only; thus, PyPy other Python implementations supported. obtain support Python from guppy-pe Sverker Nilsson, from which this package forked. graphical browser this package with help Tkinter library. Moreover, threading also required order utilize remote monitoring feature. install guppy3 package? install guppy3 package either with help installer using conda. Both methods shown below: Installation using install guppy3 Installation using conda conda install conda-forge guppy3 Verifying Installation Once module installed, verify creating empty Python program file writing import statement follows: File: verify.py import guppy Now, save above file execute using following command terminal: Syntax: python verify.py above Python program file does return error, module installed properly. However, case where exception raised, reinstalling module, also recommended refer official documentation module. Understanding some methods attributes guppy3 package following table consists methods attributes available through guppy3 package Methods Attributes Description guppy.hpy() guppy module method named hpy(), which provides access heapy object. heapy object also consists common interface accessing heap status performing other operations. heap() This method offers list objects accessible from root heap which reachable visible. access this method through object created calling hpy() method. returned output displayed table format. Note that does include objects utilized part guppy. setref() This method also accessed through object created calling hpy() method. utilized reference point object created after this reference point will available next call heap method heap status. will include objects present heap; however, only once created after reference point. heapu() access this method through object created calling hpy() method guppy module. This method offers heap status about list objects which reachable from root heap. object returned heapu() method status object (guppy.heapy.Part.Stat) which stats about unreachable objects. diff() This method available segment heap status object, which accepts input another heap status order find object's difference between statuses. returns object type guppy.heapy.Part.Stat. disjoint() This method accessible through heap status object that accepts input from another heap status returns True/False based whether heap status disjoint not. count This attribute heap status object used return integer signifying total number objects available when status accepted. size This attribute heap status object used return integer signifying total size heap when status accepted. referents This attribute used return another heap status object with only entry objects referred other objects. referrers This attribute used return another heap status object that only entries object referring other objects. stat This attribute used return guppy.heapy.Part.Stat objects looped detail associated with individual entry heap status. dump() This method accepts filename input which heap status will dumped. load() This method accepts filename input from which heap status will loaded. called over object created calling hpy() method. used return guppy.heapy.Part.Stat object heap status present file. bytype This attribute heap status object groups heap status entries type object. dict entries will combined into entry. byrcs This attribute heap status object groups heap status entries type referrers. bymodule This attribute heap status object groups heap status entries module. bysize This attribute heap status object groups heap status entries individual size object. byunity This attribute heap status object groups heap status entries total size. byvia This attribute heap status object groups heap status entries objects they referred. byidset This attribute heap status object groups heap status entries idset. byid This attribute heap status object groups heap status entries memory address. iso() This method accepts single object multiple objects input returns status signifying object size. considers complex objects such lists dictionaries object. idset() This method accepts single multiple objects input returns status signifying object size. considers complex object, such list dictionary, list individual object. consider some examples understand usage above methods attributes guppy3 package purpose profiling memory usage Python. Some examples based Python guppy3 package Example following example, will understand method accessing heap status using guppy.hpy(), heap() setref() methods guppy module. Code: import guppy from guppy import import numpy the_heap hpy() print("Heap Status Starting heapStatusOne the_heap.heap() print("Heap Size heapStatusOne.size, bytes\n") print(heapStatusOne) the_heap.setref() print("\nHeap Status After Setting Reference Point heapStatusTwo the_heap.heap() print("Heap Size heapStatusTwo.size, bytes\n") print(heapStatusTwo) range(1500)] np.random.randint(1,150, (1500,)) print("\nHeap Status After Creating Objects heapStatusThree the_heap.heap() print("Heap Size heapStatusThree.size, bytes\n") print(heapStatusThree) print("\nMemory Usage After Creation Objects heapStatusThree.size heapStatusTwo.size, bytes") Output: Heap Status Starting Heap Size 12023800 bytes Partition 85790 objects. Total size 12023800 bytes. Index Count Size Cumulative Kind (class dict class) 25003 4135160 4135160 18832 1346584 5481744 tuple 6269 1107919 6589663 types.CodeType 12133 916798 7506461 bytes 5748 781728 8288189 function 734088 9022277 type 494712 9516989 dict module 461784 9978773 dict type 1319 415880 10394653 dict owner) 219792 10614445 <282 more rows. Type e.g. '_.more' view.> Heap Status After Setting Reference Point Heap Size bytes Partition objects. Total size bytes. Index Count Size Cumulative Kind (class dict class) types.FrameType function builtins.weakref Heap Status After Creating Objects Heap Size 56632 bytes Partition 1333 objects. Total size 56632 bytes. Index Count Size Cumulative Kind (class dict class) 1328 37184 37184 12728 49912 list 6104 56016 numpy.ndarray 56424 types.FrameType 56560 function 56632 builtins.weakref Memory Usage After Creation Objects 56016 bytes Explanation: above snippet code, have explained usage guppy.hpy(), heap() setref() methods. first collected heap status start script. have then reference point retrieved heap status again. created some objects such list, string, NumPy array random numbers. Once creation these objects done, have again called heap() method heap status which detail regarding these objects. output shown above shows that consists detail regarding number objects total size whole heap object count, size, percentage memory utilized that object type, type information. second heap status does show much information since nothing much happened after setting reference point. third heap status object information regarding objects created after setting reference point. Example following example, will understand method accessing objects which unreachable from root heap using heapu() method. Code: import guppy from guppy import the_heap hpy() print("GC Collectable Objects Which Reachable from Root Heap") the_stats the_heap.heapu() print("Total Objects the_stats.count) print("Total Size the_stats.size, Bytes") print("Number Entries the_stats.numrows) print("Entries print("Index Count Size Cumulative Size Object Name") the_row the_stats.get_rows(): print("%5d%5d%8d%8d%30s"% (the_row.index, the_row.count, the_row.size, the_row.cumulsize, the_row.name)) print("\nFirst Entries print("Index Count Size Cumulative Size Object Name") the_row the_stats.rows[:5]: print("%5d%5d%8d%8d%30s"%(the_row.index, the_row.count, the_row.size, the_row.cumulsize, the_row.name)) print("\nDirectly Printing Results Without Iteration") print(the_heap.heapu(stat print("\nMeasuring Unreachable Objects From This Reference Point Onwards") the_heap.setref() print(the_heap.heapu(stat Output: Collectable Objects Which Reachable from Root Heap Total Objects 587 Total Size 82948 Bytes Number Entries Entries Index Count Size Cumulative Size Object Name 29088 29088 dict 18768 47856 type 9360 57216 types.WrapperDescriptorType 4888 62104 tuple 4160 66264 types.MemberDescriptorType 4072 70336 list 3906 74242 bytes 3744 77986 types.MethodDescriptorType 2610 80596 1512 82108 types.BuiltinMethodType 384 82492 types.GetSetDescriptorType 82652 sys.flags 82796types.ClassMethodDescriptorType 82860 types.MethodType 82908encodings.utf_8.IncrementalDecoder 82932 builtins.stderrprinter 82948 Token.MISSING First Entries Index Count Size Cumulative Size Object Name 29088 29088 dict 18768 47856 type 9360 57216 types.WrapperDescriptorType 4888 62104 tuple 4160 66264 types.MemberDescriptorType Directly Printing Results Without Iteration Partition objects. Total size 99179 bytes. Index Count Size Cumulative Type 34496 34496 dict 22032 56528 type 10584 67112 types.WrapperDescriptorType 6064 73176 tuple 5328 78504 types.MethodDescriptorType 4224 82728 types.MemberDescriptorType 4072 86800 list 3906 90706 bytes 3089 93795 2880 96675 types.BuiltinMethodType more rows. Type e.g. '_.more' view.> Measuring Unreachable Objects From This Reference Point Onwards Partition objects. Total size 99179 bytes. Index Count Size Cumulative Type 34496 34496 dict 22032 56528 type 10584 67112 types.WrapperDescriptorType 6064 73176 tuple 5328 78504 types.MethodDescriptorType 4224 82728 types.MemberDescriptorType 4072 86800 list 3906 90706 bytes 3089 93795 2880 96675 types.BuiltinMethodType more rows. Type e.g. '_.more' view.> Explanation: above snippet code, have first retrieved list unreachable objects from heap then utilized different methods order access individual status retrieve information associated with individual data type. Example following example, will understand method retrieving individual entry from whole heap status object. Code: import guppy from guppy import import numpy the_heap hpy() print("Heap Status Starting listOne [n*n range(1500)] listTwo np.random.randint(1,150, (1500, 1500)) heapStatusOne the_heap.heap() print(heapStatusOne) print("\nAccessing Individual Element Heap") print("\nFirst Element print(heapStatusOne[0]) print("\nSecond Element print(heapStatusOne[1]) print("\nThird Element print(heapStatusOne.parts[2]) convertSize(the_size): the_size 1024: return the_size elif (the_size 1024) (the_size (1024 1024)): return "%.2f KB" %(the_size/1024) elif (the_size (1024 1024)) (the_size (1024 1024 1024)): return "%.2f MB" %(the_size/(1024 1024)) else: return "%.2f GB" %(the_size/(1024 1024 1024)) print("\nTotal Heap Size convertSize(heapStatusOne.size), "\n") range(15): print("Size Object %n, convertSize(heapStatusOne[n].size)) Output: Heap Status Starting Partition 87291 objects. Total size 21079156 bytes. Index Count Size Cumulative Kind (class dict class) 9007150 9007150 numpy.ndarray 25008 4135434 13142584 18834 1346760 14489344 tuple 6270 1108095 15597439 types.CodeType 12135 916976 16514415 bytes 5748 781728 17296143 function 734088 18030231 type 494712 18524943 dict module 461784 18986727 dict type 1319 415880 19402607 dict owner) <282 more rows. Type e.g. '_.more' view.> Accessing Individual Element Heap First Element Partition objects. Total size 9007150 bytes. Index Count Size Cumulative Kind (class dict class) 9007150 9007150 numpy.ndarray Second Element Partition 25008 objects. Total size 4135434 bytes. Index Count Size Cumulative Kind (class dict class) 25008 4135434 13142584 Third Element Partition 18834 objects. Total size 1346760 bytes. Index Count Size Cumulative Kind (class dict class) 18834 1346760 14489344 1076 tuple Total Heap Size 20.10 Size Object 8.59 Size Object 3.94 Size Object 1.28 Size Object 1.06 Size Object 895.48 Size Object 763.41 Size Object 717.28 Size Object 483.12 Size Object 450.96 Size Object 406.13 Size Object 214.64 Size Object 151.73 Size Object 132.05 Size Object 98.14 Size Object 91.27 Explanation: have retrieved heap status after creating some lists above snippet code. individual object also accessed from heap status object with help list indexing. have then printed different individual entries heap status. have also created simple method that accepts size bytes input returns size KB/MB/GB. Example following example, will understand find difference between heap status check total number objects created between calls heap status. this example, will using diff() method disjoint() method. Code: import guppy from guppy import import numpy the_heap hpy() print("Heap Status Starting heapStatusOne the_heap.heap() print("Heap Size heapStatusOne.size, bytes\n") print(heapStatusOne) range(1500)] np.random.randint(1, 150, (1500, print("\nHeap Status After Creating Objects heapStatusTwo the_heap.heap() print("Heap Size heapStatusTwo.size, bytes\n") print(heapStatusTwo) print("\nMemory Usage After Creation Objects heapStatusTwo.size heapStatusOne.size, bytes") print("\nFinding Difference Between Heap Status the_stats heapStatusTwo.diff(heapStatusOne) print("Whether Heap Status Disjoint heapStatusOne.disjoint(heapStatusTwo)) print("Total Objects the_stats.count) print("Total Size the_stats.size, Bytes") print("Number Entries the_stats.numrows) print("Entries print("Index Count Size Cumulative Size Object Name") the_row the_stats.get_rows(): print("%5d%5d%8d%8d%30s" (the_row.index, the_row.count, the_row.size, the_row.cumulsize, the_row.name)) Output: Heap Status Starting Heap Size 12024920 bytes Partition 85803 objects. Total size 12024920 bytes. Index Count Size Cumulative Kind (class dict class) 25016 4136028 4136028 18832 1346712 5482740 tuple 6269 1107919 6590659 types.CodeType 12133 916898 7507557 bytes 5748 781728 8289285 function 734088 9023373 type 494712 9518085 dict module 461784 9979869 dict type 1319 415880 10395749 dict owner) 219792 10615541 <282 more rows. Type e.g. '_.more' view.> Heap Status After Creating Objects Heap Size 12081288 bytes Partition 87135 objects. Total size 12081288 bytes. Index Count Size Cumulative Kind (class dict class) 25016 4136028 4136028 18832 1346712 5482740 tuple 6269 1108167 6590907 types.CodeType 12133 916898 7507805 bytes 5748 781728 8289533 function 734088 9023621 type 494712 9518333 dict module 461784 9980117 dict type 1319 415880 10395997 dict owner) 219792 10615789 <282 more rows. Type e.g. '_.more' view.> Memory Usage After Creation Objects 56120 bytes Finding Difference Between Heap Status Whether Heap Status Disjoint False Total Objects 1332 Total Size 56368 Bytes Number Entries Entries Index Count Size Cumulative Size Object Name 1329 37216 37216 12728 49944 list 6104 56048 numpy.ndarray 56296 types.CodeType 56368 builtins.weakref 56368 ctypes.CFunctionType 56368 ctypes._FuncPtr 56368 dict ctypes._FuncPtr Explanation: above snippet code, first took heap status beginning. have then created some lists objects string objects. Once these objects created, have again taken another heap status. have then called diff() method second heap status object, passing first heap status object order difference between screenshots heap. have then looped through stats object printed difference objects. Example following example, will understand usage some attributes like count, size, referents, referrers, stat along with some methods like dump() load(). Code: import guppy from guppy import import numpy the_heap hpy() heapStatusOne the_heap.heap() print("\nFew Important Properties/Methods Heap Status Object(%s) "%type(heapStatusOne)) print("\nCount Objects Heap heapStatusOne.count) print("\nHeap Size heapStatusOne.size, bytes") print("\nHeap Entry print(heapStatusOne.parts[0]) print("\nSet Objects Referred Objects \n") print(heapStatusOne.referents) print("\nSet Objects Directly Refer Objects \n") print(heapStatusOne.referrers) print("\nStat Object print(heapStatusOne.stat) print("First Entries print("Index Count Size Cumulative Size Object Name") the_row list(heapStatusOne.stat.get_rows())[:5]: print("%5d%5d%8d%8d%30s" (the_row.index, the_row.count, the_row.size, the_row.cumulsize, the_row.name)) print("\nDumping Heap Status File heapStatusOne.dump("guppy_heap_status.out") print(open("guppy_heap_status.out").readlines()[:5]) loadedHeapStat the_heap.load("guppy_heap_status.out") print("First Entries From Loaded File print("Index Count Size Cumulative Size Object Name") the_row list(loadedHeapStat.get_rows())[:5]: print("%5d%5d%8d%8d%30s" (the_row.index, the_row.count, the_row.size, the_row.cumulsize, the_row.name)) Output: Important Properties/Methods Heap Status Object() Count Objects Heap 85798 Heap Size 12024638 bytes Heap Entry Partition 25016 objects. Total size 4136095 bytes. Index Count Size Cumulative Kind (class dict class) 25016 4136095 4136095 Objects Referred Objects Partition 85796 objects. Total size 12019590 bytes. Index Count Size Cumulative Kind (class dict class) 25016 4136095 4136095 18830 1346552 5482647 tuple 6268 1107991 6590638 types.CodeType 12132 916913 7507551 bytes 5749 781864 8289415 function 734496 9023911 type 494712 9518623 dict module 461784 9980407 dict type 1315 410360 10390767 dict owner) 219792 10610559 <282 more rows. Type e.g. '_.more' view.> Objects Directly Refer Objects Partition 44131 objects. Total size 6711964 bytes. Index Count Size Cumulative Kind (class dict class) 18826 1346712 1346712 tuple 6269 1108167 2454879 types.CodeType 5749 781864 3236743 function 864 735560 3972303 type 494712 4467015 dict module 461784 4928799 dict type 911 389432 5318231 dict owner) 216768 5534999 2158 155376 5690375 types.WrapperDescriptorType 113912 5804287 dict function <241 more rows. Type e.g. '_.more' view.> Stat Object Partition 85798 objects. Total size 12024638 bytes. Index Count Size Cumulative Kind (class dict class) 25016 4136095 4136095 18830 1346552 5482647 tuple 6268 1107743 6590390 types.CodeType 12132 916913 7507303 bytes 5748 781728 8289031 function 734088 9023119 type 494712 9517831 dict module 461784 9979615 dict type 1319 415880 10395495 dict owner) 219792 10615287 <282 more rows. Type e.g. '_.more' view.> First Entries Index Count Size Cumulative Size Object Name 025016 4136095 4136095 118830 1346552 5482647 tuple 6268 1107743 6590390 types.CodeType 312132 916913 7507303 bytes 5748 781728 8289031 function Dumping Heap Status File ['.loader: _load_stat\n', '.format: SetFormat\n', '.timemade: 1649769632.860880\n', '.count: 85798\n', '.size: 12024638\n'] First Entries From Loaded File Index Count Size Cumulative Size Object Name 025016 4136095 4136095 118830 1346552 5482647 tuple 6268 1107743 6590390 types.CodeType 312132 916913 7507303 bytes 5748 781728 8289031 function Explanation: above snippet code, have explained usage attributes like count, size, referents, referrers, stat along with some methods like dump() load(). Example following example, will understand different attributes available through heap status object, which allows group heap status entries basis different attributes such type, size, referrers, memory address, more. Code: from guppy import the_heap hpy() heapStatusOne the_heap.heap() print("=========== Heap Status Starting ============") print(heapStatusOne) print("\n============ Heap Status Grouped Type ==========") print(heapStatusOne.bytype) print("\n==== Heap Status Grouped Referrers kind(class/dict class) ===") print(heapStatusOne.byrcs) print("\n========== Heap Status Grouped Module ============") print(heapStatusOne.bymodule) print("\n========== Heap Status Grouped Individual Size ==============") print(heapStatusOne.bysize) print("\n========= Heap Status Grouped Total Size ============") print(heapStatusOne.byunity) print("\n======= Heap Status Grouped Referred =============") print(heapStatusOne.byvia) print("\n========= Heap Status Grouped IDset ============") print(heapStatusOne.byidset) print("\n======== Heap Status Grouped Address ==========") print(heapStatusOne.byid) Output: =========== Heap Status Starting ============ Partition 42072 objects. Total size 5086505 bytes. Index Count Size Cumulative Kind (class dict class) 12893 1168594 1168594 8414 582912 1751506 tuple 515280 2266786 type 2910 514056 2780842 types.CodeType 5565 396264 3177106 bytes 2669 362984 3540090 function 297456 3837546 dict type 174272 4011818 dict module 169136 4180954 377 134664 4315618 dict owner) <147 more rows. Type e.g. '_.more' view.> ============ Heap Status Grouped Type ========== Partition 42072 objects. Total size 5086505 bytes. Index Count Size Cumulative Type 12893 1168594 1168594 1766 736256 1904850 dict 8414 582912 2487762 tuple 515280 3003042 type 2910 514056 3517098 types.CodeType 5565 396264 3913362 bytes 2669 362984 4276346 function 169136 4445482 1170 84240 4529722 types.WrapperDescriptorType 941 67752 4597474 builtins.weakref <96 more rows. Type e.g. '_.more' view.> ==== Heap Status Grouped Referrers kind(class/dict class) Partition 42072 objects. Total size 5087009 bytes. Index Count Size Cumulative Referrers Kind (class dict class) 11255 824572 824572 types.CodeType 5314 667128 1491700 function 5040 533219 2024919 dict type 1972 410976 2435895 type 5191 365199 2801094 tuple 1480 247408 3048502 dict module 186655 3235157 dict module, tuple 718 181110 3416267 function, tuple 153856 3570123 dict _frozen_importlib_external.FileFinder 2251 138361 3708484 <546 more rows. Type e.g. '_.more' view.> ========== Heap Status Grouped Module ============ Partition 42072 objects. Total size 5087526 bytes. Index Count Size Cumulative Module 41966 5079894 5079894 ~module 5079966 __main__ 5080038 _abc 5080110 _ast 5080182 _bootlocale 5080254 _codecs 5080326 _collections 5080398 _ctypes 5080470 _functools 5080542 _heapq <97 more rows. Type e.g. '_.more' view.> ========== Heap Status Grouped Individual Size ============== Partition 42072 objects. Total size 5087894 bytes. Index Count Size Cumulative Individual Size 2809 494752 494752 426664 921416 1064 2734 371824 1293240 4836 348192 1641432 2709 173376 1814808 2919 163464 1978272 614 142448 2120720 2575 123600 2244320 117760 2362080 110544 2472624 1176 <625 more rows. Type e.g. '_.more' view.> ========= Heap Status Grouped Total Size ============ Partition 42072 objects. Total size 5087931 bytes. Index Count Size Cumulative 42072 5087931 5087931 ======= Heap Status Grouped Referred ============= Partition 42072 objects. Total size 5088145 bytes. Index Count Size Cumulative Referred Via: 1359 506095 506095 '.__dict__' 2529 447756 953851 '.__code__' 2910 274420 1228271 '.co_code' 2230 180816 1409087 '.co_names' 698 179824 1588911 '.__doc__', '[0]' 595 175017 1763928 "['__doc__']" 2000 140714 1904642 '.__qualname__' 2264 139011 2043653 'list(_)[0]' 1701 121032 2164685 '.co_consts' 2618 120252 2284937 '.co_lnotab' <7259 more rows. Type e.g. '_.more' view.> ========= Heap Status Grouped IDset ============ Partition 42072 objects. Total size 5090746 bytes. Index Count Size Cumulative identity 32984 32984 set: 0x1df4279a2e0> 32984 65968 set: 0x1df4279a4a0> 9312 75280 dict owner): 0x1df422f3ec0*313> 9312 84592 dict owner): 0x1df42518f40*326> 8408 93000 set: 0x1df42388740> 8408 101408 set: 0x1df423889e0> 8408 109816 set: 0x1df42388c80> 8408 118224 set: 0x1df42388e40> 8408 126632 set: 0x1df4279ae40> 8408 135040 set: 0x1df427b6120> <42062 more rows. Type e.g. '_.more' view.> ======== Heap Status Grouped Address ========== 42072 objects. Total size 5090834 bytes. Index Size Cumulative Brief 32984 32984 set: 0x1df4279a2e0 32984 65968 set: 0x1df4279a4a0 9312 75280 dict owner): 0x1df422f3ec0*320 9312 84592 dict owner): 0x1df42518f40*326 8408 93000 set: 0x1df42388740 8408 101408 set: 0x1df423889e0 8408 109816 set: 0x1df42388c80 8408 118224 set: 0x1df42388e40 8408 126632 set: 0x1df4279ae40 8408 135040 set: 0x1df427b6120 <42062 more rows. Type e.g. '_.more' view.> Explanation: above snippet code, have explained usage attributes like bytype, byrcs, bymodule, bysize, byunity, byvia, byidset, byid. Example following example, will understand usage supporting methods available through heap objects. These methods iso() idset(). Code: import guppy from guppy import import numpy the_heap hpy() range(1500000)] "JAVATPOINT" print("============== Method Examples ====================") print() print(the_heap.iso(p)) print() print(the_heap.iso(q)) print() print(the_heap.iso(r)) print() print(the_heap.iso([])) print() print(the_heap.iso("")) print("\n============== IDSET Method Examples ===================") print() print(the_heap.idset(p)) print() print(the_heap.idset(q)) print() print(the_heap.idset(r)) print() print(the_heap.idset([])) print() print(the_heap.idset("")) Output: ============== Method Examples ==================== Partition object. Total size 12029656 bytes. Index Count Size Cumulative Kind (class dict class) 12029656 12029656 list Partition object. Total size bytes. Index Count Size Cumulative Kind (class dict class) Partition object. Total size bytes. Index Count Size Cumulative Kind (class dict class) Partition object. Total size bytes. Index Count Size Cumulative Kind (class dict class) list Partition object. Total size bytes. Index Count Size Cumulative Kind (class dict class) ============== IDSET Method Examples =================== Partition 1500000 objects. Total size 41999996 bytes. Index Count Size Cumulative Kind (class dict class) 1500000 41999996 41999996 Index Count Size Cumulative Kind (class dict class) Partition objects. Total size bytes. Index Count Size Cumulative Kind (class dict class) Explanation: above snippet code, have explained usage iso() idset() methods which accept single multiple objects input return status specifying object size. also observe difference between results methods. Example following example, will understand checking specific methods/attributes objects available through guppy. Code: from guppy import the_heap hpy() heapStatusOne the_heap.heap() print("============== Heap Documents ====================") print(the_heap.doc) print("Doc Individual Method/Function/Class print("\nISO Method \n") print(the_heap.doc.iso) print("\nRoot Class \n") print(the_heap.doc.Root) print("============= Heap Status Documents ================") print(heapStatusOne.doc) print("Doc Individual Method/Function/Class print("\nDoc parts Property Heap Status \n") print(heapStatusOne.doc.parts) print("\nDoc byrcs Property Heap Status \n") print(heapStatusOne.doc.byrcs) Output: ============== Heap Documents ==================== level interface Heapy. Available attributes: Anything Prod iso Clodo Rcs load Root findex monitor Idset Size heap Module Type heapu setref Nothing Unity idset test the_heap.doc. info Individual Method/Function/Class Method iso( 0..*:node: Any+) IdentitySet[1] Create objects based identity. Argument node: Any+ kind objects valid arguments. Note This method same idset[2] except argument. References heapy_Use.html#heapykinds.Use.iso heapy_UniSet.html#heapykinds.IdentitySet heapy_Use.html#heapykinds.Use.idset Root Class Root: RootStateType This attribute symbolic root containing attributes from which reachable objects heap reached. only value singleton) kind; description attributes. References heapy_Use.html#heapykinds.Use.Root heapy_RootState.html#heapykinds.RootStateType ============= Heap Status Documents ================ byvia get_render pathsout biper count get_rp prod brief dictof get_shpaths referents diff imdom referrers byclodo disjoint indisize rp byid kind shpaths byidset dominos maprox size bymodule domisize more byprod dump nodes stat byrcs er owners test_contains bysize fam partition theone bytype get_ckc parts byunity get_examples pathsin Individual Method/Function/Class parts Property Heap Status iterable object, that used iterate over 'parts' self. iteration order determined sorting order has, table printed when partitioned. byrcs Property Heap Status copy self, with 'Rcs' equivalence relation. Explanation: above snippet code, have accessed document heap calling attribute heap object. will display documentation whole heap object listing methods/attributes available through that object. have also accessed individual method/attribute document calling that method attribute's name attribute. have also accessed documentation heap status object. Next TopicMicroservices Python Python Microservices with gRPC prev next