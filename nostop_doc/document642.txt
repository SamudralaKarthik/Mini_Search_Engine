next prev Python Operator There operators Python-'Logical AND' 'Bitwise AND'. This article discusses both operators differentiates them. Logical AND: This 'AND' belongs Logical operators. These operators mainly deal with decision-making needs along with conditional statements like if-else. There three logical operators Python: Logical Logical Logical Now, understanding about Logical operator: Basic: languages like Java, "&&" represents operator, Python, "and" without using special symbol. Syntax: Return value: This operator either returns "True" "False," depending operands. Operation: operands/ expressions participating true, returns True. least operands false, returns False. Truth tale "AND" Operator: Expression Expression (Expression Expression returns: True True True True False False False True False False False False Need operator: Suppose trying write code find number greater than even. need check conditions: even Both conditions must satisfied. Generally, write (input ("Enter number: (num 20): (num print (num, greater than even") Output: took lines code. functionality operator: (input ("Enter number: (num print (num, greater than even") Output: Understanding: line (num first left condition checked. true; hence right condition checked divisible Both conditions satisfied. print statement executed. have even divisible will printed. Both conditions must true "and" true. take another example with real-time application: Suppose organizing coding competition b-tech m-tech students; student take part, must between younger older person strictly allowed enter competition. need check both conditions enroll student. Code: name input ("Please enter participant's name: (input ("Please enter valid participant: (age 28): print ("Congratulations!, eligible competition") else: print("Only students between allowed competition. Sorry! can't enroll in") Output: "and" with just numbers: what happens give decimal integers both sides "and" operator: Pre-requisite: Generally, "and" checks both operands True. number greater than represents True, represents False. num1 (input ("Enter number: num2 (input ("Enter another number: print (num1 num2) Sample Output: Understanding: first case: Both numbers greater than True True condition. Hence, "and" returns True. condition "and" that both operands should true. Hence, after confirming that first number- (>0) true, checks second number-4 (>0), which true. returns "True" with second number. second case: False True condition first number 0-False. There should "False" "and" True. Hence, once confirms that first number "False", without checking second number, returns "False". third case: first number 0-False. Immediately, "and" returns False. False False condition another example: (input ("Enter number: (num 10): print ("num between 10") elif (num 50): print ("num between 50") else: print ("num either less than greater than 50") Sample Output: Understanding: checked belongs intervals number doesn't belong both intervals, number either less than greater than "and" with multiple operands: num1 (input ("Enter first value: num2 (input ("Enter second value: num3 (input ("Enter third value: print (num1 num2 num3) Output: Understanding: First, num1 checked True, second number num2 checked True. But, third number num3 False, hence, num1 num2 num3 returned False. With multiple expressions: num1 (input ("Enter first value: num2 (input ("Enter second value: num3 (input ("Enter third value: print (num1 num2 num3 Output: Understanding: first condition, num1 itself False. Hence, directly False printed. Even first condition turned true, second condition False; that also true, third False. Hence, three conditions False given values num1, num2, num3. Bitwise (&): There another "and" operator Python. bitwise operator. represent "&". Binary language language computer. inner mechanisms happen with respect bits. Bitwise operators operators that allow programmer perform bitwise operations integers. There bitwise operators: Bitwise Bitwise Bitwise Bitwise Bitwise right shift Bitwise left shift difference between (logical bitwise or), (logical and, bitwise and), (logical not, bitwise not) lies word 'bitwise' itself. bitwise operator, first, integer converted into binary bits, then will perform operation bit-by-bit. Here, represents True, represents False. After operation, binary number will converted decimal returned output. operation bitwise and: given integers converted into bits (binary), 'and' operate every corresponding numbers. (operand (operand Return value take example: num1 num2 Performing &: perform logical we'll True will returned: num1= (input ("Enter number: num2 (input ("Enter another number: print (num1 num2) print (num1 num2) Output: These "and" operators available Python language. difference between these operators: Logical Bitwise Logical Bitwise Logical represented "and." Bitwise represented "&." defined only Boolean values; even expressions, they evaluated True False. defined integer values well Boolean values Print (True False) False searches False value; finds one, doesn't evaluate rest expression returns "False". This called "Lazy evaluation". Even operator finds False value, continues evaluating rest expressions. This operator mostly used decision-making truth testing. Bitwise operators designed lower-level manipulations. Every number greater than evaluates "True" every number evaluate "False" represents "True," represents "False". operator hierarchy, Bitwise operators have higher precedence than logical operators. Next TopicPython Operator prev next