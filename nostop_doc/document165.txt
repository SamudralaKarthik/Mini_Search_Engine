next prev Atom Python Introduction Atom universal fact that Time does pause anyone, consistently have upgrade tools order keep with this immeasurably rapid era. Software development among chief professions that need most resourceful environments programmers write code efficiently produce software. Thus, comes requirement effective Text Editor (Integrated Development Environment). With respect Python Programming Language, Atom serves best terms IDE. Atom free Open-Source Integrated Development Environment specially designed Python developers their endeavor. before deeper into concept, have quick look topics will covering tutorial: Understanding need Atom Python Understanding Atom Text Editor Downloading Installing Atom Python Code Execution Atom Python Atom Python Theming Atom Python Experimenting Python Specific Configurations begin with understanding actual importance Python Atom IDE. Understanding need Atom Python most fundamental method order create execute Python program creating empty file using extension that stands Python. After that, have Command line shell terminal order point that file using following syntax: python file_name.py other hand, utilize IDLE Integrated Development Learning Environment Python), default application executing Python's code. However, order something productive, these primary options would appear like good choice. will require something more productive reliable. Thus, when Atom Python comes handy. Atom does contain special features traditional sense; instead, builds packages that store hackable core. These packages include features such code lines, auto-complete, code highlights. Now, let's head understanding remarkable Atom Text Editor. Understanding Atom Text Editor Atom free, open-source, multi-platform text editor which supports NodeJS developed packages embedded control. Most extending packages freely available developed open-source communities. Atom based Electron Framework (previously called Atom Shell). electron framework allows developers desktop application multiple platforms such Linux, MacOS, Windows, with help NodeJS Chromium. Atom written Less CoffeeScript, developed maintained GitHub. Atom Text Editors also known Hackable Text Editor Twenty-First Century developers fully customizable HTML, JavaScript, CSS. Now, download install Atom Text Editor. Downloading Installing Atom Python Text Editor download Atom Python Text Editor from official website: https://atom.io/. will automatically detect current operating system configuration display corresponding setup file download. order download setup file, click Download. Once download process completed, open setup file order install application System. Since installation process automatic, there need manual. Atom will open automatically default directory once gets installed successfully, application shortcut will also created start menu. Now, have install required plugins packages order execute Python code. understand configuration Atom Python access from directory user's preference standard method. Atom also provides features such theme package installation with help welcome guide. closing welcome guide unchecking 'Show Welcome Guide when opening Atom' option. result, welcome guide will appear next time when launch atom application. directory, right-click folder file, select "Open with Atom" option. option available context menu, launch from programs. have File menu Atom. Settings. also shortcut key: Ctrl Comma (Ctrl+,) order open settings Atom. Settings, have click System Check options follows: Show File Context Menus Show Folder Context Menus After this, context menu will start displaying 'Open with Atom' option. Now, open selected file folder directly Atom. When open Atom application, tree view left. However, tree view visible, view menu click Toggle Tree View. also shortcut: Ctrl Ctrl This tree view contains files present linked folder, from which double click python file content. Code Execution Atom Python Generally, command prompt terminal execute Python programs. However, Atom provides plugin known platformio-ide-terminal order execute python code. this plugin navigating File Menu bar. Settings. Click Install Tab. Now, search bar, search install platformio-ide-terminal plugin. above method order install other packages, plugins well themes. Once plugin successfully installed, terminal will integrated within Atom text editor. toggle this terminal using icon available bottom-left corner editor. Splitting Editor open multiple files Atom split window navigating View Menu bar. Panes select Split Right option order send present file right half window. This will help users enhance productivity while working with more than file. Atom Python Theming Atom provides types themes, called, Syntax themes themes. Syntax themes used determine color code highlight details syntax. contrast, themes used change style dropdowns, buttons, more. check installed themes navigating Settings present File menu clicking Themes tab. Theme will display relevant output. also download variety themes available market clicking Install Settings searching desired theme. Formatting also change font's default settings again navigating Settings clicking Editor tab. following tab, find many options related Editor style, which includes font size, font style, more. change font using Font Family order style choice. Atom Python Experimenting There various things that also experiment with using options follows: line-height: Line-height generally defined spacing between lines. also change line-height navigating Editor changing requirement. Scroll Past End: Generally, only scroll through code until last line, which also referred bottom screen. cannot usually scroll beyond this limit. However, enable Scroll Past package, view bottom line screen's top. This package provides blank space bottom users comfortably work with their codes. Show Indent Guide: Indent Guide used display vertical lines, which denotes that indentations should appear. enable Show Indent Guide from Editor Settings. There various other options experiment with. now, head onto understanding some Python-specified configurations. Python particular Configurations order boost productivity Python, some extremely beneficial plugins follows: Script: Script package designed display document related details other packages like shortcuts, commands, many more. always change these default shortcuts feels uncomfortable navigating view code tab, which stores keymaps folder. Then, have open script.cson file update preferences. instance, have changed shortcut Ctrl Once updating processing done, close windows restart Atom IDE. After restart, Python Script using customized shortcut, output also appeared bottom. also customize this output shown below: Settings File menu click Themes tab. link customize stylesheet visible towards top. This link will navigate stylesheet. Once stylesheet opened, paste following snippet code increase size font script console. .script-view .line{ font-size: 20px; atom-file-icons: atom-file-icons package used insert icons leading files tree view shown below: Before Installing atom-file-icons package After Install atom-file-icons package autocomplete-python: autocomplete-python package displays suggestions window respect what give impression when reach specific point while writing code. Flake: Flake acts Python linter used find errors within script highlight them all. enable flake package installing flake8 using following command command shell terminal: install flake8 Once installation completed, will view little icon bottom left corner Atom IDE. This icon will display error list that encountered during writing. python-autopep8: python-autopep8 package used code formatting. enable from autopep8 plugin settings checking Format Save option. Now, understand python code execution Atom IDE. execute Python code Atom IDE? understand Python code execution Atom writing simple code abstract class. Example: File: inter.py import class Marine_Animals (abc.ABC): @abc.abstractmethod Breathe( self pass class Fish Marine_Animals Breathe( self print("Fishes breathe with their gills.") class Aerial_Animals (abc.ABC): @abc.abstractmethod Breathe( self pass class Bird Aerial_Animals Breathe( self print("Birds breathe through their mouth their nostrils.") goldie Fish() birdy Bird() print( isinstance(goldie, Marine_Animals)) print( isinstance(goldie, Aerial_Animals)) print( isinstance(birdy, Marine_Animals)) print( isinstance(birdy, Aerial_Animals)) Once done with writing code, will look like following image: move onto code execution using terminal have installed earlier. terminal, click icon located bottom left. Now, type following command program: Output: python inter.py True False False True same viewed following image: Now, understand code. Explanation: above example, have defined abstract classes: Marine_Animals Aerial_Animals, respectively. have also defined abstract method, namely Breathe(), these classes. have also defined child classes, namely Fish Bird, that inherit above abstract classes' attributes methods. Finally, have instantiated both classes using objects goldie birdy, respectively, isinstance() function check object instance class. Next TopicContains Python prev next