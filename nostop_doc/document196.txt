next prev Python heapq module Introduction Heaps Priority Queues Priority Queues Heaps quite unpopular astonishingly beneficial data structures. These data structures provide pretty easy highly effective solutions problems like finding best element dataset more. heapq module Python segment Standard Library. This module implements low-level heap operations some common high-level utilization heaps. Data structure like priority queue plays essential role powerful tool solving problems such writing e-mail scheduler, merging files, finding shortest path map. know, Programming full problem optimization where goal find best element Priority queues, functions Python heapq module often serve solution that. following tutorial, will learn what heaps priority queues they associate with each other. will also discover what type problems resolved using heap Python heapq module order solve these problems. begin with understanding heaps. Understanding Heaps Heaps concrete data structures, while priority queues abstract data structures. Concrete data structure expresses implementation, whereas abstract data structure governs interface. generally heaps order implement priority queues. They most famous concrete data structure used implement abstract data structures like priority queues. Concrete data structures also indicate performance guarantees. Performance guarantees ensure relationship between structure size time taken operations. These performance guarantees allow predict time taken program input size change. Understanding heapq module Python know, data structure 'heap' generally utilized represent priority queue. perform this implementation using heapq module Python standard library. property heap data structure Python smallest heap element every time (min-heap). Whenever data elements popped pushed, heap structure maintained. heap[0] element also delivers smallest data element every time. understand some Operations heap: Operation Function Description heapify(iterable) heapify() function utilized converting iterable into heap data structure. heappush(heap, element) heappush() function utilized inserting data element specified parameters into heap. order adjusted maintain heap structure. heappop(heap) heappop() function utilized removing returning smallest data element from heap. order also adjusted maintain heap structure. heappushpop(heap, element) heappushpop() function used combine working both push operations single statement that results increased efficiency. Once operation complete, Heap order maintained. heapreplace(heap, element) heapreplace() function used insert data elements single statement; however, differs from function stated above. this function, data element popped first, then data element pushed. Thus, value element more prominent than value pushed element returned. heapreplace() function used genuinely return smallest value heap regardless element pushed instead heappushpop() function. nlargest(x, iterable, essential fun) nlargest() function utilized returning most prominent elements from iterable determined that also satisfies included. nsmallest(x, iterable, fun) nsmallest() function utilized returning minor elements from iterable determined that also satisfies included. Now, understand working these functions heapq module following sections. Creating Heap create heap utilizing data elements list with help heapify() function. consider example understand working heapify() function, where list data elements provided, function rearranges data elements. brings smallest element first position. Example: importing heapq module import heapq defining list mylist [14, Using heapify() function rearrange data elements heapq.heapify(mylist) printing list print(mylist) Output: Explanation: above example, have imported heapq module defined list data elements. have then used heapify() function rearrange data elements bring smallest data element first position. last, have printed list users. result, data elements list rearranged, smallest element been brought first position. inserting data elements into heap. Insertion data elements into heap insert data element into heap using heappush() function. element inserted into list always adds last index. However, heapify() function again order bring newly inserted data element first index only appears smallest value. consider example demonstrating working heappush() function. Example: importing heapq module import heapq defining list mylist [14, Using heapify() function rearrange data elements heapq.heapify(mylist) printing list print(mylist) inserting element list heapq.heappush(mylist, printing final list print(mylist) Output: Explanation: above example, have again imported heapq module defined list. have then converted list heap printed list user. have then used heappush() function element list printed final list user. result, data element inserted last index list. Now, removing element from heap. Removal data element from heap remove data element first index with help heappop() function. consider following example understand process removing data element carried away. Example: importing heapq module import heapq defining list mylist [14, Using heapify() function rearrange data elements heapq.heapify(mylist) printing list print(mylist) inserting element list heapq.heappop(mylist) printing final list print(mylist) Output: Explanation: above example, have again imported heapq module, defined list, convert heap. have then used heappop() function remove first index element from list. result, element removed successfully. Now, understand replace element heap Replacing data element heap order replace data element, heapreplace() function. This function always removes smallest data element presenting heap adds incoming element some place defined order. consider example understand concept replacing element heap. Example: importing heapq module import heapq defining list mylist [14, Using heapify() function rearrange data elements heapq.heapify(mylist) printing list print(mylist) replacing element list heapq.heapreplace(mylist, printing final list print(mylist) Output: Explanation: above example, have again imported heapq module, defined list, created heap. have then used heapreplace() function replace data element list with defined parameter. result, smallest element replaced successfully. Next TopicPython Substring prev next