next prev Python Algorithms algorithm goes further than computational thinking. step-by-step process that specifies list commands carried specific order intended result. execute single algorithm many programming languages because algorithms typically constructed irrespective supporting languages. What Algorithms? Algorithms finite sets rules developed executed defined sequence solve problems produce desired outcomes, They provide problem-solving pseudocode before writing main code written support particular language, them with many different languages. Write Algorithms? Typically, user-friendly language popular coding languages used write algorithms. Although they frequently documented steps, necessarily required There guidelines creating algorithms, should bear following things mind: Determine what question precisely. Choose where should begin. Identify necessary stopping point. Create stepping stones between. Examine your actions. Binary Search short, this search method utilizes components that have already been sorted dismissing half after only comparison. middle element compared. return middle element's index matches middle element. Otherwise, does match with middle element bigger than middle element, only located right half (where elements greater) subarray. method then used once more right side. must located left half (where elements smaller) smaller. method then used left side. Code Python program execution binary search algorithm function will return index element present, otherwise, will return Defining function binary_search(array, lower higher len(array) middle while lower higher: middle (higher lower) greater than middle element, ignoring left half array[middle] lower middle smaller than middle element, ignoring right half elif array[middle] higher middle This means present middle else: return middle loop ends without returning, then element present list return Implementing code array Case Element present list Calling function index binary_search(array, index print(f"The given element present index", str(index)) else: print(f"The given element present array") Case Element present array Calling function index binary_search(array, index print(f"The given element present index", str(index)) else: print(f"The given element present array") Output: given element present index given element present array Linear Search straightforward method perform linear search, that compare every member array[] time Return position matches element array. Returning does match array's elements. Code Python program execution linear search algorithm function will loop over every element return index matches. otherwise, will return Defining function linear_search(array, looping over every element range(len(array)): Comparing element array[i] return found, index returning return Implementing code array Case Element present list Calling function index linear_search(array, index print(f"The given element present index", str(index)) else: print(f"The given element present array") Case Element present array Calling function index linear_search(array, index print(f"The given element present index", str(index)) else: print(f"The given element present array") Output: given element present index given element present array Insertion Sort straightforward sorting algorithm called insertion sort operates similarly arrange playing cards. Code Python program execution insertion sort algorithm Defining function insertion_sort(array): Traversing through length array range(1, len(array)): array[i] Moving elements array[0..i-1], that bigger than key, index ahead their current index i-1 while array[c] array[c array[c] array[c Implementing code #sorting array using insertion_sort array [23, Calling function insertion_sort(array) Creating empty list store sorted elements print("The sorted array range(len(array)): Adding elements sorted order l.append(array[i]) print(l) Output: sorted array Selection Sort selection sort technique sorts given array repeatedly picking element with lowest value unsorted segment placing beginning (while making ascending order). lowest element from unsorted subarray always selected moved arranged subarray during selection sort (while making ascending order). Code Python code show implement selection sort Defining function selection_sort(array): Looping through every element array range(len(array)): Searching minimum element remaining subarray min_ind range(i len(array)): array[min_ind] array[j]: min_ind Swaping minimum element first element array[i], array[min_ind] array[min_ind], array[i] Implementing above code array [23, Calling function selection_sort(array) print("The sorted array print(array) Output: sorted array Bubble Sort items wrong order, simplest sorting method, Bubble Sort, repeatedly swaps nearby components. Code Python code implement bubble sort Defining function bubble_sort(array): length len(array) Looping through every element given array range(length): Last elements array sorted first range(0, length looping through array from length-i-1 Swapping elements which unsorted order array[k] array[k array[k], array[k array[k array[k] Implementing above code array [23, Calling function bubble_sort(array) print("The sorted array print(array) Output: sorted array Merge Sort Divide-and-Conquer technique Merge Sort. original array split half, recursive calls made each half, ordered halves combined. combine portions, will loop. Code Python code implementing Merge Sort Defining function mergeSort(array): len(array) Determining middle array middle len(array)//2 Dividing elements into halves left array[:middle] right array[middle:] Sorting given array's first half mergeSort(left) Sorting given array's second half mergeSort(right) Coping elements temporary arrays left right while len(left) len(right): left[a] right[b]: array[c] left[a] else: array[c] right[b] Checking element remaining while len(left): array[c] left[a] while len(right): array[c] right[b] Implementing code array [23, print("The given array is", "\n") print(array) Calling sorting function mergeSort(array) print("The sorted array "\n") print(array) Output: given array [23, sorted array Quick Sort Quick Sort Divide-and-conquer algorithm, just like Merge Sort. chooses element hinge divides supplied array from chosen hinge. There numerous variations quickSort that select hinges various ways. Code Python code implementation Quick Sort Defining function give partition array takes start points array partition_function(s, array): start, initializing pivot's index p_index array[p_index] This loop executes till start less than ending pointer Once completed, will swap elements pivot index pointer while Incrementing start pointer until finds element greater than pivot while len(array) array[s] Decrementing pointer until finds element lesser than pivot while array[e] starting ending pointers have overpassed each other, swapping elements start pointer if(s array[s], array[e] array[e], array[s] Swapping pivot element with element pointer. This will pivot correct place. array[e], array[p_index] array[p_index], array[e] Returning pointer divide given array into return Defining function implement Quick Sort quick_sort(s, array): part partitioning index array[part] right position part partition_function(s, array) Sorting elements before partition after partition quick_sort(s, part array) quick_sort(part array) Implementing code array [23, Calling function quick_sort(0, len(array)-1, array) print(f'The sorted array {array}') Output: sorted array Next TopicPython descriptors prev next