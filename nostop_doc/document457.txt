next prev rarfile module Python following tutorial, will discuss rarfile module Python programming language. will understand different classes rarfile module along with some examples. let's started. Understanding Python rarfile module rarfile module Python used read archive. interface built zipfile-like possible. basic functionalities rarfile module: This module parses archive structure with Python programming language. extracts non-compressed files using Python. also extracts files that compressed using unrar. Optionally, also write compressed data temp file order speed unrar; otherwise, requires scanning entire archive every execution. Now, before start working with module, install install rarfile module Python? order install rarfile module, will using installer following command shown below: Syntax: pip3 install rarfile order verify module installed properly, create file import statement returns errors not. File: verify.py import rarfile Now, save Python file execution command using command prompt: Syntax: python verify.py above Python file does raise import error, good head onto Facebook messenger building procedure. However, does raise exception, recommended reinstall module refer official documentation. Now, understand basics rarfile module. Classes rarfile module rarfile module provides multiple classes that requirements. These classes are: RarFile class RarInfo class RarExtFile class nsdatetime class will discuss these classes brief. Understanding RarFile class RarFile class rarfile module used parse structure, providing access files archive. syntax execution RarFile class shown below: Syntax: class rarfile.RarFile(file, mode='r', charset=None, info_callback=None, crc_check=True, errors='stop', part_only=False) Some methods attributes RarFile class shown below: comment= None This attribute used state archive comment. value either Unicode string None. filename= None This attribute used provide name file, available. value either Unicode string None. __enter__() This method used open context. __exit__(type, value, traceback) This method used exit context. __iter__() This method used iterate over members. setpassword(pwd) This method used password used during extraction. needs_password() This method returns True case archive entries need password extraction. namelist() This method returns list containing names file archive. infolist() This method returns RarInfo objects files/directories archive. volumelist() This method returns filenames archive volumes. archive only single volume, list consists name main archive file. getinfo(name) This method returns RarInfo file. open(name, mode 'r', None) This method returns file-like object (RarExtFile) from where data read. object implements io.RawIOBase interface, further wrap with io.BufferReader io.TextIOWrapper. previous versions Python, where module available, implements only read(), seek(), tell(), close() methods. object seek-able, although seeking quick only uncompressed files. compressed files, seeking implemented reading ahead restarting decompression. Parameters: name This parameter name file instance RarInfo. mode This parameter mode which file opened. must 'r'. This parameter includes password that used extraction. read(name, None) This method returns uncompressed data archive entry. recommended open() method larger files. Parameters: name This parameter name file instance RarInfo. This parameter includes password that used extraction. close() This method used release open resources. printdir(file None) This method used print list files archive stdout given file. extract(member, path None, None) This method used extract single file into current directory. Parameters: member This parameter name file instance RarInfo. path This optional parameter that includes destination path. This another optional parameter that includes password utilize. extractall(path None, members None, None) This method used extract files into current directory. Parameters: path This optional parameter that includes destination path. members This another optional parameter that includes name file instance RarInfo. This another optional parameter that includes password utilize. testrar(pwd None) This method used read files test CRC. strerror() This method returns error string parsing fails None exception occurred. Understanding RarInfo class RarInfo class rarfile module used entry archive. Timestamps datetime without time zone RAR3, with zone RAR5 archives syntax execution RarInfo class shown below: Syntax: class rarfile.RarInfo Some methods attributes RarInfo class shown below: filename This attribute contains name file with relative path. value this attribute always Unicode string specifying path separated Path separator '/'. date_time This attribute consists timestamp File modification. used tuple (year, month, day, hour, minute, second). RAR5 allows archives where missing, it's None then. comment This attribute includes optional file comment field. value consists Unicode string. (RAR3-only) file_size This attribute used specify uncompressed size. compress_size This attribute used specify compressed size. compress_type This attribute used specify method compression: RAR_M0, RAR_M5 constants. extract_version This attribute consists minimal version that required decompression. (major*10 minor), 2.9 RAR3: RAR5 does have such field archive, host_os This attribute specifies Host type, RAR_OS_* constants. RAR3: RAR_OS_WIN32, RAR_OS_UNIX, RAR_OS_MSDOS, RAR_OS_OS2, RAR_OS_BEOS RAR5: RAR_OS_WIN32, RAR_OS_UNIX mode This attribute used specify file attributes. either dos-style unix-style, depending host_os. mtime This attribute used specify time file modification. value same date_time attribute; however, datetime object with extended precision. ctime This attribute optional time field specifying time creation. also acts datetime object. atime This attribute also optional time field specifying time last access. also acts datetime object. arctime This attribute also optional time field specifying archival time. also acts datetime object. (RAR3-only) This attribute used specify CRC-32 uncompressed file. value this attribute unsigned int. RAR5: None. blake2sp_hash This attribute used specify Blake2SP hash over decompressed data. (RAR5-only) volume This attribute used specify volume nr, beginning from volume_file This attribute used specify volume file name where file begins. file_redir This attribute consists tuple (type, flags, target). (RAR5-only). None, file link some sort. (RAR5-only) Type constants: RAR5_XREDIR_UNIX_SYMLINK: Unix symlink RAR5_XREDIR_WINDOWS_SYMLINK: Windows symlink RAR5_XREDIR_WINDOWS_JUNCTION: Windows junction RAR5_XREDIR_HARD_LINK: hard link target RAR5_XREDIR_FILE_COPY: current file copy another archive entry Flags contain bits: RAR5_XREDIR_ISDIR: Symlink points directory is_dir() This method used return True entry directory. version 4.0. is_symlink() This method used return True entry symlink. version 4.0. is_file() This method used return True entry normal file. version 4.0. needs_password() This method used return True data stored password protected. isdir() This method used return True entry directory. Deprecated since version 4.0. Understanding RarExtFile class RarExtFile class rarfile module works base class objects similar file that RarFile.open() returns. Bases: io.RawIOBase syntax RarExtFile class shown below: Syntax: class rarfile.RarExtFile This class provides public methods common checking Behavior: short reads read(), readinfo() read much requested. internal buffer; have BufferedReader that. Some attributes methods RarExtFile class shown below: name= None This attribute used specify file name archive entry read(n=-1) This method used read specified amount data from archive entry. close() This method used close open resources. readinto(buf) This method used define zero-copy read directly into buffer. Returns bytes read. tell() This method returns current reading position uncompressed data. seek(offset, whence This method used seek data. uncompressed files, seeking works actual seek, fast. compressed files, slow forward seeking happens reading ahead, backward re-opening decompressing from start. readable() This method returns True writable() This method returns False writing supported. seekable() This method returns True seeking supported, although it's slow compressed files. readall() This method used read remaining data fileno() This method returns underlying file descriptor exists. OSError raised object does utilize file descriptor. isatty() This method returns this 'interactive' stream. also returns False can't determined. readline() This method used read return line from stream. line terminator always b'n' binary files; text files, newlines argument open order select line terminator(s) recognized. size given, size bytes will read most. readlines() This method used return list lines from stream. specify hint control number lines read: more lines will read total size bytes/characters) lines exceeds hint. Understanding nsdatetime class nsdatetime class rarfile module represents Datetime that carries nanoseconds. This class does support Arithmetic will lose nanoseconds. Bases: datetime.datetime version syntax nsdatetime class shown below: Syntax: class rarfile.nsdatetime Some attributes methods nsdatetime class shown below: nanosecond This attribute consists number nanoseconds ranging from 999999999. isoformat(sep 'T', timespec 'auto') This method used format with nanosecond precision default. astimezone(tz=None) This method used convert time zone. replace(year None, month None, None, hour None, minute None, second None, microsecond None, tzinfo None, fold None, nanosecond None) This method used return timestamp with given fields replaced. Functions rarfile module Some functions rarfile module follows: Functions Descriptions rarfile.is_rarfile(xfile) This function used check file archive. Rarfile.is_rarfile_sfx(xfile) This function used check file archive with support SFX.It will read 2M from file. Constants rarfile module Some constants rarfile module follows Constants Descriptions rarfile.RAR_M0 This constant represents compression. rarfile.RAR_M1 This constant represents compression level m1, Fastest compression. rarfile.RAR_M2 This constant represents compression level m2. rarfile.RAR_M3 This constant represents compression level m3. rarfile.RAR_M4 This constant represents compression level m4. rarfile.RAR_M5 This constant represents compression level m5, which also maximum compression. rarfile.RAR_OS_WIN32 This constant represents type Operating System, i.e., Windows. rarfile.RAR_OS_UNIX This constant represents type Operating System, i.e., UNIX. rarfile.RAR_OS_MACOS This constant represents type Operating System, i.e., MacOS (Only RAR3). rarfile.RAR_OS_BEOS This constant represents type Operating System, i.e., BeOS (Only RAR3). rarfile.RAR_OS_OS2 This constant represents type Operating System, i.e., OS2 (Only RAR3). rarfile.RAR_OS_MSDOS This constant represents type Operating System, i.e., MS-DOS (Only RAR3). Warnings Exceptions rarfile module Some Warnings Exceptions rarfile module follows: Warnings Exceptions Descriptions class rarfile.UnsupportedWarning This warning occurs when archive uses feature that supported rarfile module.New Version 4.0. class rarfile.Error This exception base class rarfile errors. class rarfile.BadRarFile This exception raises when there incorrect data present archive. class rarfile.NotRarFile This exception raises when file archive. class rarfile.BadRarName This exception raises when system cannot guess multipart name components. class rarfile.NoRarEntry This exception raises when file found RAR. class rarfile.PasswordRequired This exception raises when file requires password. class rarfile.NeedFirstVolume(msg, volume) This exception raises when have start from first volume. class rarfile.NoCrypto This exception raises when cannot parse encrypted headers crypto available. class rarfile.RarExecError This exception raises when problem reported unrar/rar. class rarfile.RarWarning This exception raises when there non-fatal error. class rarfile.RarFatalError This exception raises when there fatal error. class rarfile.RarCRCError This exception raises when there error during unpacking. class rarfile.RarLockedArchiveError This exception raises when modify locked archive. class rarfile.RarWriteError This exception raises when writing file. class rarfile.RarOpenError This exception raises when opening file. class rarfile.RarUserError This exception represents user error. class rarfile.RarMemoryError This exception represents memory error. class rarfile.RarCreateError This exception represents creation error. class rarfile.RarNoFilesError This exception raises when there files that match patterns were found. class rarfile.RarUserBreak This exception raises when user stops. class rarfile.RarWrongPassword This exception raises incorrect passwords. class rarfile.RarUnknownError This exception represents unknown exit code. class rarfile.RarSignalExit This exception raises when unrar exited with signal. class rarfile.RarCannotExec This exception raises when there executable found. Working rarfile module consider following example demonstrating working rarfile module. Example: importing required module import rarfile using RarFile class myRarFile rarfile.RarFile("myfolder.rar") iterating through files archive file myRarFile.infolist(): printing filenames file sizes print(file.filename, file.file_size) checking readme file file.filename "myfolder/readme.txt": reading file print(myRarFile.read(file)) Output: myfolder/helloWorld.py myfolder/image.jpg 281466 myfolder/readme.txt b'Hello Python learners!\r\nWelcome Javatpoint.com' myfolder/ Explanation: above snippet code, have imported required module. have then used RarFile class select archive. have then used for-loop iterate through files present archive print filenames along with their sizes. have then used conditional statement check archive contains readme.txt file. last, have read file using read() method. Next TopicStemming Words using Python prev next