next prev compare lists Python Python provides multiple ways compare lists. Comparison process when data items checked against another data item list, whether they same not. list1 [11, list2 [11, Output lists equal methods comparing lists given below. cmp() function set() function operator sort() function operator collection.counter() function reduce() map() function cmp() function Python cmp() function compares Python objects returns integer values according comparison. Note doesn't Python version. set() function operator Python set() function manipulate list into without taking care order elements. Besides, equal operator (==) compare data items list. Let's understand following example. Example list1 [11, list2 [12, set(list1) set(list2) print("The list1 list2 equal") else: print("The list1 list2 equal") Output: list1 list2 equal Explanation: above example, have declared lists compared with each other. converted those lists into compared each element with help operator. elements equal both lists, then block executed printed result. sort() method with operator Python sort() function used sort lists. same list's elements same index position means; lists equal. Note sort() method, pass list items order because sorting list before comparison. Let's understand following example Example import collections list1 [10, list2 [10, list3 [50, Sorting list list1.sort() list2.sort() list3.sort() list1 list2: print("The list1 list2 same") else: print("The list1 list3 same") list1 list3: print("The list1 list2 same") else: print("The list1 list2 same") Output: list1 list3 same list1 list2 same collection.counter() function collection module provides counter(), which compare list efficiently. stores data dictionary format <value>:<frequency> counts frequency list's items. Note order list's elements doesn't matter this function. Example import collections list1 [10, list2 [10, list3 [50, collections.Counter(list1) collections.Counter(list2): print("The lists same") else: print("The lists same") collections.Counter(list1) collections.Counter(list3): print("The lists same") else: print("The lists same") Output: lists list1 list2 same lists list1 list3 same reduce() map() map() function accepts function Python iterable object (list, tuple, string, etc) arguments returns object. function implements each element list returns iterator result. Besides, reduce() method implements given function iterable object recursively. Here, will both methods combination. map() function would implement function user-define lambda function) every iterable object reduce() function take care that would apply recursive manner. Note need import functool module reduce() function. Let's understand following example. Example import functools list1 [10, list2 [10, list3 [10, functools.reduce(lambda map(lambda list1, list2), True): print("The list1 list2 same") else: print("The list1 list2 same") functools.reduce(lambda map(lambda list1, list3), True): print("The list1 list3 same") else: print("The list1 list3 same") Output: list1 list2 same list1 list3 same this section, have covered various methods comparing lists Python. Next TopicHow convert string Python prev next