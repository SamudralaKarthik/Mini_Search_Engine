next prev Generate HTML using tinyhtml Module Python this tutorial, will learn generate HTML using Python code. will learn about tinyhtml module generate some HTML. Creating HTML very hectic challenging, sometimes takes lots time debug error-prone. While creating HTML page, forget close many other silly mistakes, avoid chances errors using tinyhtml module. This module provides advanced methods classes that help render html5 using Python code. allows group several HTML tags. Using this module, also publish unescaped HTML, providing functionality looping type conversion using builders. Installation this library, need install using below command. install tinyhtml will following functions html() marks beginning html code. h(): most utility function allows render attributes, standard elements, void/self-closing elements. raw(): used print unescaped html strings. frag(): groups several HTML tags together. render(): processes converts input html. Let's understand following example Example from tinyhtml import html, html_content html(lang="en")( h("head")( (h("h1")("hello Learners!!")), ).render() print(html_content) Output: <!DOCTYPE html><html lang="en"><head><h1>hello Learners!!</h1></head></html> above code, have constructed HTML using html() h(). also h() also supported. Let's understand another example Example from tinyhtml import html, frag, using frag() group fncs. print("Working frag() function html_content html(lang="en")( frag(h("h1")("Welcome Javatpoint"), h("p")("You\ will found here best tutorials latest technology\ "))).render() print(html_content) print("\n") prints unescaped HTML. print("The unescaped HTML content print(raw('<h1>Printing HTML</h1><p> Don?t escape <<>>>> </p>')) Output: Working frag() function <!DOCTYPE html><html lang="en"><h1>Welcome Javatpoint</h1><p>You will found here best tutorials latest technology</p></html> unescaped HTML content <h1>Printing HTML</h1><p> Don?t escape <<>>>> </p> Using Classes Labels HTML this section, "klass" operator initialize class. other labels which coincide with naming Python reserved keywords, trailing underscore appended. Let's understand following code. Example from tinyhtml import using klass initialize class print("Working with klass operator class_inp h("div", klass="jtp")() print(class_inp) using escape loop operator print("Working with label escaping keyword label_inp h("label", for_="Javatpoint")("JTP") print(label_inp) Output Working with klass operator <div class="jtp"></div> Working with label escaping keyword <label for="Javatpoint">JTP</label> Working with Loop Conditional Python loops conditional statements generate HTML content. Let's understand following example. Example from tinyhtml import initializing loop elements print("Using loop elements loop_ele h("ul")(h("li")(idx) range(10)) print(loop_ele) print("\n") using conditionals print("Using conditional elements conditional_element h("ul")( h("li")("jtp") False else "JTP", h("li")("java")) print(conditional_element) Output Using loop elements <ul><li>0</li><li>1</li><li>2</li><li>3</li><li>4</li><li>5</li><li>6</li><li>7</li><li>8</li><li>9</li></ul> Using conditional elements <ul>JTP<li>java</li></ul> Conclusion this tutorial, have used tinyhtml generate HTML tags. have shown some simple tags, modify according need. also check official documentation. Next TopicGoogle Search Packages using Python prev next