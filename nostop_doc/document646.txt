next prev __init__ python have been working with Object-oriented programming, might have come across _init_ word quite times. __init__ Python method. similar constructors languages like Java C++. Knowing classes objects Python will make __init__ method understandable. Here some required pre-requisite knowledge: class like blueprint with variables/ attributes functions/ methods declared. class, need create objects created class. Using objects, call methods class access declared attributes. Every object have values attributes class. pass values want arguments when creating object. Here simple example class object: class planet: var1 "Planet" var2 "Solar system" function (self): print ("I'm earth") print ("I'm self. var1, "in", self. var2) earth planet print (earth. var1) print (earth. var2) earth. function Output: Analysis: created class named planet. class: declared variables, var1 var2. created function where printed strings with declared variables inside class. Now, created object earth accessed variables method from class without passing arguments. object created doesn't have variables. Now, what self class? When create object class call function, self replaced with created object. like placeholder object. class created, have variables common objects create. Hence, even called variables with object name, will same values objects. Now, understand what '__init__' discussed above that every object could have values attributes class. This functionality achieved using __init__ method. constructor, allowing class hold objects with different values. need call like call normal method. similar method inside class. executed soon object created class. Now, above example with __init__ method: class planet: __init__ (self, name, number): self. name name self. number number function (self): print am", self. name) print the", self. number, "planet solar system") earth planet ('earth', earth. function Output: Understanding: passed arguments object when created discussed earlier, when object created: __init__ method executed. 'self' replaced with created object. When created object 'earth': __init__ (earth, 'earth', 	earth. name 'earth' 	earth. number This inner mechanism __init__ method. This way, object earth have attributes. Now, create another object: venus planet ('venus', venus. function Hence, create number objects, every object have values attributes. This functionality __init__ method object-oriented programming Python. more example: take values inputs from user then pass them attributes object. class Student: 	def __init__ (self, name, age, email): 		self. name name 		self. 		self. email email name input ("Please enter name student1: (input ("Please enter student1: stud Student (name, age, 'Jeevani@gmail.com') name input ("Please enter name student2: (input ("Please enter student2: stud2 Student (name, age, 'Harini@gmail.com') print ("Stud_1. name stud. name) print ("Stud_2. name stud2. name) Output: Understanding: program, created class called "Student" with three attributes: name, email. Using self variable, defined attributes __init__ method. created objects, stud stud2. both objects, already gave value email asked user inputs name attributes then passed values objects. Note: create number objects number attributes functions inside class. But, there only explicit __init__ method inside class. Even write multiple __init__ methods, latest will overwrite previous __init__ methods. Next Topic__dict__ Python prev next