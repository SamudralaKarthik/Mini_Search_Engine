next prev Python JSON JSON stands JavaScript Object Notation, which widely used data format data interchange web. JSON ideal format organizing data between client server. syntax similar JavaScript programming language. main objective JSON transmit data between client server. easy learn most effective interchange data. used with various programming languages such Python, Perl, Java, etc. JSON mainly supports types data type JavaScript: String Number Boolean Null Object Array JSON built structures: stores data name/value pairs. treated object, record, dictionary, hash table, keyed list. ordered list values treated array, vector, list, sequence. JSON data representation similar Python dictionary. Below example JSON data: "book": "id": "language": "English", "edition": "Second", "author": "Derrick Mwiti" 	"id": "language": "French", "edition": "Third", "author": "Vladimir" Working with Python JSON Python provides module called json. Python supports standard library marshal pickle module, JSON behaves similarly these library. Python natively supports JSON features. encoding JSON data called Serialization. Serialization technique where data transforms series bytes transmitted across network. deserialization reverse process decoding data that converted into JSON format. This module includes many built-in functions. Let's have look these functions: import json print(dir(json)) Output: ['JSONDecodeError', 'JSONDecoder', 'JSONEncoder', '__all__', '__author__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__path__', '__spec__', '__version__', '_default_decoder', '_default_encoder', 'codecs', 'decoder', 'detect_encoding', 'dump', 'dumps', 'encoder', 'load', 'loads', 'scanner'] this section, will learn following methods: load() loads() dump() dumps() Serializing JSON Serialization technique convert Python objects JSON. Sometimes, computer need process lots information good store that information into file. store JSON data into file using JSON function. json module provides dump() dumps() method that used transform Python object. Python objects converted into following JSON objects. list given below: Python Objects JSON Dict Object list, tuple Array String int, float Number True true False false None null dump() function Writing JSON Data into File Python provides dump() function transmit(encode) data JSON format. accepts positional arguments, first data object serialized second file-like object which bytes needs written. Let's consider simple serialization example: Import json Key:value mapping student "Name" "Peter", "Roll_no" "0090014", "Grade" "A", "Age": "Subject": ["Computer Graphics", "Discrete Mathematics", "Data Structure"] with open("data.json","w") write_file: json.dump(student,write_file) Output: {"Name" "Peter", "Roll_no" "0090014" "Grade" "A", "Age" "Subject" ["Computer Graphics", "Discrete Mathematics", "Data Structure"] above program, have opened file named data.json writing mode. opened this file write mode because file doesn't exist, will created. json.dump() method transforms dictionary into JSON string. dumps function dumps() function used store serialized data Python file. accepts only argument that Python data serialization. file-like argument used because aren't writing data disk. Let's consider following example: import json Key:value mapping student "Name" "Peter", "Roll_no" "0090014", "Grade" "A", "Age": json.dumps(student) print(b) Output: {"Name": "Peter", "Roll_no": "0090014", "Grade": "A", "Age": JSON supports primitive data types, such strings numbers, well nested list, tuples objects. import json #Python list conversion JSON Array print(json.dumps(['Welcome', "to", "javaTpoint"])) #Python tuple conversion JSON Array print(json.dumps(("Welcome", "to", "javaTpoint"))) Python string conversion JSON String print(json.dumps("Hello")) Python conversion JSON Number print(json.dumps(1234)) Python float conversion JSON Number print(json.dumps(23.572)) Boolean conversion their respective values print(json.dumps(True)) print(json.dumps(False)) None value null print(json.dumps(None)) Output: ["Welcome", "to", "javaTpoint"] ["Welcome", "to", "javaTpoint"] "Hello" 1234 23.572 true false null Deserializing JSON Deserialization process decode JSON data into Python objects. json module provides methods load() loads(), which used convert JSON data actual Python object form. list given below: SR. JSON Python Object dict Array list String number(int) true True false False null None above table shows inverse serialized table technically perfect conversion JSON data. means that encode object decode again after sometime; same object back. Let's take real-life example, person translates something into Chinese another person translates back into English, that exactly translated. Consider simple example: import json (10,20,30,40,50,60,70) print(type(a)) json.dumps(a) print(type(json.loads(b))) Output: <class 'tuple'> <class 'list'> load() function load() function used deserialize JSON data Python object from file. Consider following example: import json Key:value mapping student "Name" "Peter", "Roll_no" "0090014", "Grade" "A", "Age": with open("data.json","w") write_file: json.dump(student,write_file) with open("data.json", "r") read_file: json.load(read_file) print(b) Output: {'Name': 'Peter', 'Roll_no': '0090014', 'Grade': 'A', 'Age': above program, have encoded Python object file using dump() function. After that read JSON file using load() function, where have passed read_file argument. json module also provides loads() function, which used convert JSON data Python object. quite similar load() function. Consider following example: Import json ["Mathew","Peter",(10,32.9,80),{"Name" "Tokyo"}] Python object into JSON json.dumps(a) JSON into Python Object json.loads(b) print(c) Output: ['Mathew', 'Peter', [10, 32.9, 80], {'Name': 'Tokyo'}] json.load() json.loads() json.load() function used load JSON file, whereas json.loads() function used load string. json.dump() json.dumps() json.dump() function used when want serialize Python objects into JSON file json.dumps() function used convert JSON data string parsing printing. Python Pretty Print JSON Sometimes need analyze debug large amount JSON data. done passing additional arguments indent sort_keys json.dumps() json.dump() methods. Note: Both dump() dumps() functions accept indent short_keys arguments. Consider following example: import json person '{"Name": "Andrew","City":"English", "Number":90014, "Age": 23,"Subject": ["Data Structure","Computer Graphics", "Discrete mathematics"]}' per_dict json.loads(person) print(json.dumps(per_dict, indent sort_keys= True)) Output: "Age": "City": "English", "Name": "Andrew", "Number": 90014, "Subject": "Data Structure", "Computer Graphics", "Discrete mathematics" above code, have provided spaces indent argument keys sorted ascending order. default value indent None default value sort_key False. Encoding Decoding Encoding technique transforming text values into encrypted form. Encrypted data only used preferred user decoding Encoding also known serialization decoding also called deserialization. Encoding decoding done JSON(object) format. Python provides popular package such operations. install Windows following command: install demjson Encoding demjson package provides encode() function that used convert Python object into JSON string representation. syntax given below: demjson.encode(self,obj,nest_level Example:1 Encoding using demjson package import demjson [{"Name": 'Peter',"Age":20, "Subject":"Electronics"}] print(demjson.encode(a)) Output: [{"Age":20,"Name":"Peter","Subject":"Electronics"}] Decoding-The demjson module provides decode() function, which used convert JSON object into Python format type. syntax given below: Import demjson "['Peter', 'Smith', 'Ricky', 'Hayden']" print(demjson.decode(a)) Output: ['Peter', 'Smith', 'Ricky', 'Hayden'] this tutorial, have learned about Python JSON. JSON most effective transmit data between client server. Next TopicPython Itertools prev next