next prev Python String Till now, have discussed numbers standard data-types Python. this section tutorial, will discuss most popular data type Python, i.e., string. Python string collection characters surrounded single quotes, double quotes, triple quotes. computer does understand characters; internally, stores manipulated character combination 1's. Each character encoded ASCII Unicode character. that Python strings also called collection Unicode characters. Python, strings created enclosing character sequence characters quotes. Python allows single quotes, double quotes, triple quotes create string. Consider following example Python create string. Syntax: Python Here, check type variable using Python script print(type(str)), then will print string (str). Python, strings treated sequence characters, which means that Python doesn't support character data-type; instead, single character written treated string length Creating String Python create string enclosing characters single-quotes double- quotes. Python also provides triple-quotes represent string, generally used multiline string docstrings. #Using single quotes str1 'Hello Python' print(str1) #Using double quotes str2 "Hello Python" print(str2) #Using triple quotes str3 '''Triple quotes generally used represent multiline docstring''' print(str3) Output: Hello Python Hello Python Triple quotes generally used represent multiline docstring Strings indexing splitting Like other languages, indexing Python strings starts from example, string "HELLO" indexed given below figure. Consider following example: "HELLO" print(str[0]) print(str[1]) print(str[2]) print(str[3]) print(str[4]) returns IndexError because index doesn't exist print(str[6]) Output: IndexError: string index range shown Python, slice operator used access individual characters string. However, (colon) operator Python access substring from given string. Consider following example. Here, must notice that upper range given slice operator always exclusive i.e., 'HELLO' given, then str[1:3] will always include str[1] 'E', str[2] nothing else. Consider following example: Given String "JAVATPOINT" Start Oth index print(str[0:]) Starts 1th index index print(str[1:5]) Starts index index print(str[2:4]) Starts index print(str[:3]) #Starts index print(str[4:7]) Output: JAVATPOINT AVAT VA JAV TPO negative slicing string; starts from rightmost character, which indicated second rightmost index indicates Consider following image. Consider following example 'JAVATPOINT' print(str[-1]) print(str[-3]) print(str[-2:]) print(str[-4:-1]) print(str[-7:-2]) Reversing given string print(str[::-1]) print(str[-12]) Output: OIN ATPOI TNIOPTAVAJ IndexError: string index range Reassigning Strings Updating content strings easy assigning string. string object doesn't support item assignment i.e., string only replaced with string since content cannot partially replaced. Strings immutable Python. Consider following example. Example "HELLO" str[0] print(str) Output: Traceback (most recent call last): File "12.py", line <module> str[0] "h"; TypeError: 'str' object does support item assignment However, example string assigned completely content specified following example. Example "HELLO" print(str) "hello" print(str) Output: HELLO hello Deleting String know that strings immutable. cannot delete remove characters from string.Â  delete entire string using keyword. "JAVATPOINT" str[1] Output: TypeError: 'str' object doesn't support item deletion deleting entire string. str1 "JAVATPOINT" str1 print(str1) Output: NameError: name 'str1' defined String Operators Operator Description known concatenation operator used join strings given either side operator. known repetition operator. concatenates multiple copies same string. known slice operator. used access sub-strings particular string. known range slice operator. used access characters from specified range. known membership operator. returns particular sub-string present specified string. also membership operator does exact reverse returns true particular substring present specified string. r/R used specify string. strings used cases where need print actual meaning escape characters such "C://python". define string string, character followed string. used perform string formatting. makes format specifiers used programming like their values python. will discuss formatting done python. Example Consider following example understand real Python operators. "Hello" str1 world" print(str*3) prints HelloHelloHello print(str+str1)# prints Hello world print(str[4]) prints print(str[2:4]); prints print('w' str) prints false present print('wo' str1) prints false wo present str1. print(r'C://python37') prints C://python37 written print("The string %s"%(str)) prints string Hello Output: HelloHelloHello Hello world False False C://python37 string Hello Python String Formatting Escape Sequence Let's suppose need write text They said, "Hello what's going on?"- given statement written single quotes double quotes will raise SyntaxError contains both single double-quotes. Example Consider following example understand real Python operators. "They said, "Hello what's going on?"" print(str) Output: SyntaxError: invalid syntax triple quotes accomplish this problem Python provides escape sequence. backslash(/) symbol denotes escape sequence. backslash followed special character interpreted differently. single quotes inside string must escaped. apply same double quotes. Example using triple quotes print('''They said, "What's there?"''') escaping single quotes print('They said, "What\'s going on?"') escaping double quotes print("They said, \"What's going on?\"") Output: They said, "What's there?" They said, "What's going on?" They said, "What's going on?" list escape sequence given below: Escape Sequence Description Example \newline ignores line. print("Python1 Python2 Python3") Output: Python1 Python2 Python3 Backslash print("\\") Output: Single Quotes print('\'') Output: \\'' Double Quotes print("\"") Output: ASCII Bell print("\a") ASCII Backspace(BS) print("Hello World") Output: Hello World ASCII Formfeed print("Hello World!") Hello World! ASCII Linefeed print("Hello World!") Output: Hello World! ASCII Carriege Return(CR) print("Hello World!") Output: World! ASCII Horizontal print("Hello World!") Output: Hello World! ASCII Vertical print("Hello World!") Output: Hello World! \ooo Character with octal value print("\110\145\154\154\157")Output: Hello 	13 	\xHH 	Character with value. 	print("\x48\x65\x6c\x6c\x6f") Output: Hello Here simple example escape sequence. print("C:\\Users\\DEVANSH SHARMA\\Python32\\Lib") print("This multiline quotes") print("This \x48\x45\x58 representation") Output: C:\Users\DEVANSH SHARMA\Python32\Lib This multiline quotes This HEX representation ignore escape sequence from given string using string. this writing front string. Consider following example. print(r"C:\\Users\\DEVANSH SHARMA\\Python32") Output: C:\\Users\\DEVANSH SHARMA\\Python32 format() method format() method most flexible useful method formatting strings. curly braces used placeholder string replaced format() method argument. Let's have look given example: Using Curly braces print("{} both best friend".format("Devansh","Abhishek")) #Positional Argument print("{1} best players ".format("Virat","Rohit")) #Keyword Argument print("{a},{b},{c}".format(a "James", "Peter", "Ricky")) Output: Devansh Abhishek both best friend Rohit Virat best players James,Peter,Ricky Python String Formatting Using Operator Python allows format specifiers used printf statement. format specifiers Python treated same they treated However, Python provides additional operator which used interface between format specifiers their values. other words, that binds format specifiers values. Consider following example. Integer Float 1.290 String "Devansh" print("Hi Integer value %d\nHi float value %f\nHi string value %s"%(Integer,Float,String)) Output: Integer value float value 1.290000 string value Devansh Python String functions Python provides various in-built functions that used string handling. Many String 	Method 	Description 	capitalize() capitalizes first character String. This function deprecated python3 	casefold() returns version suitable case-less comparisons. 	center(width ,fillchar) returns space padded string with original string centred with equal number left right spaces. 	count(string,begin,end) counts number occurrences substring String between begin index. 	decode(encoding 'UTF8', errors 'strict') 	Decodes string using codec registered encoding. 	encode() 	Encode using codec registered encoding. Default encoding 'utf-8'. 	endswith(suffix ,begin=0,end=len(string)) returns Boolean value string terminates with given suffix between begin end. 	expandtabs(tabsize defines tabs string multiple spaces. default space value 	find(substring ,beginIndex, endIndex) returns index value string where substring found between begin index index. 	format(value) returns formatted version using passed value. 	index(subsring, beginIndex, endIndex) throws exception string found. works same find() method. 	isalnum() returns true characters string alphanumeric i.e., alphabets numbers there least character. Otherwise, returns false. 	isalpha() returns true characters alphabets there least character, otherwise False. 	isdecimal() returns true characters string decimals. 	isdigit() returns true characters digits there least character, otherwise False. 	isidentifier() returns true string valid identifier. 	islower() returns true characters string lower case, otherwise false. 	isnumeric() returns true string contains only numeric characters. 	isprintable() returns true characters printable empty, false otherwise. 	isupper() returns false characters string Upper case, otherwise False. 	isspace() returns true characters string white-space, otherwise false. 	istitle() returns true string titled properly false otherwise. title string which first character upper-case whereas other characters lower-case. 	isupper() returns true characters string(if exists) true otherwise returns false. 	join(seq) merges strings representation given sequence. 	len(string) returns length string. 	ljust(width[,fillchar]) returns space padded strings with original string left justified given width. 	lower() converts characters string Lower case. 	lstrip() removes leading whitespaces string also used remove particular character from leading. 	partition() searches separator returns part before separator itself, part after separator found, return empty strings. 	maketrans() returns translation table used translate function. 	replace(old,new[,count]) replaces sequence characters with sequence. characters replaced given. 	rfind(str,beg=0,end=len(str)) similar find traverses string backward direction. 	rindex(str,beg=0,end=len(str)) same index traverses string backward direction. 	rjust(width,[,fillchar]) 	Returns space padded string having original string right justified number characters specified. 	rstrip() removes trailing whitespace string also used remove particular character from trailing. 	rsplit(sep=None, maxsplit same split() processes string from backward direction. returns list words string. Separator specified then string splits according white-space. 	split(str,num=string.count(str)) 	Splits string according delimiter str. string splits according space delimiter provided. returns list substring concatenated with delimiter. 	splitlines(num=string.count('\n')) returns list strings each line with newline removed. 	startswith(str,beg=0,end=len(str)) returns Boolean value string starts with given between begin end. 	strip([chars]) used perform lstrip() rstrip() string. 	swapcase() inverts case characters string. 	title() used convert string into title-case i.e., string meEruT will converted Meerut. 	translate(table,deletechars translates string according translation table passed function 	upper() converts characters string Upper Case. 	zfill(width) 	Returns original string leftpadded with zeros total width characters; intended numbers, zfill() retains sign given (less zero). 	rpartition() Next TopicPython Lists prev next