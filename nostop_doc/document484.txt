next prev Creating Updating PowerPoint Presentation using Python following tutorial, will understand create update PowerPoint Presentation with help Python programming language. order accomplish task, will using python-pptx library. let's started. Understanding python-pptx library python-pptx Python library used create edit PowerPoint (.pptx) files. This library compatible with Microsoft Office 2003 earlier versions. insert shapes, paragraphs, texts, slides perform many other activities with help this library. typical utilization would generating customized PowerPoint presentation from database content, downloadable clicking link application. Some developers have utilized this library automate production presentation-ready engineering status reports basis information held their work management system. also make bulk updates library presentations automate production slide that would tiresome when done manually. Some Features python-pptx library python-pptx library following features, with many more roadmap: This library round-trip Open presentation (.pptx file) including elements. This library also slides. This library also populate text placeholders. example, create bullet slide. This library insert textbox slide helps manipulating text font size bold. table slide using This library allows insert auto shapes (For example, polygons, flowchart shapes, many more) into slide. even manipulate columns, bar, line, charts. Using this library, also access alter core document properties like title subject. install python-pptx library? order install Python module, need 'pip', framework manage packages required install modules from trusted public repositories. Once have 'pip', install python-pptx module using command from Windows command prompt (CMD) terminal shown below: Syntax: install python-pptx Verifying Installation Once module installed, verify creating empty Python program file writing import statement follows: File: verify.py import python-pptx Now, save above file execute using following command terminal: Syntax: python verify.py above Python program file does return error, module installed properly. However, case where exception raised, reinstalling module, also recommended refer official documentation module. understand working python-pptx library using examples. Creating PowerPoint file with title subtitle slide create PowerPoint file using Presentation class pptx library. then create slide layout using slide_layouts attribute create slide object presentation file using add_slide() method. title subtitles slide using title placeholder attributes specifying text under text attribute. consider following snippet code demonstrating same: Example: importing Presentation class from pptx library from pptx import Presentation creating object Presentation class myPPT Presentation() creating slide layout firstLayout myPPT.slide_layouts[0] creating slide object file mySlide myPPT.slides.add_slide(firstLayout) adding title slide myTitle mySlide.shapes.title adding subtitle slide mySubtitle mySlide.shapes.placeholders[1] inserting text title subtitle myTitle.text First Presentation" mySubtitle.text "Using python-pptx library" saving file myPPT.save('myPPT.pptx') Output: Explanation: above snippet code, have imported Presentation class from pptx library. have then created object Presentation class. have then created layout first slide using slide_layouts[n] attribute, where index slide file. have then used add_slide() method create slide object file. then have title placeholders[n] attributes title subtitle slide. last, have added text title subtitle using text attribute saved file. Creating Bullet Slide also create Bullet slide using Presentation class python-pptx library. consider following example demonstrating same: Example: importing Presentation class from pptx library from pptx import Presentation creating object Presentation class myPPT Presentation() creating slide layout bulletLayout myPPT.slide_layouts[1] creating slide object file secondSlide myPPT.slides.add_slide(bulletLayout) accessing attributes shapes myShapes secondSlide.shapes adding title subtitle slide titleShape myShapes.title bodyShape myShapes.placeholders[1] adding text title titleShape.text 'Adding Bullet Slide' using text_frame attribute tFrame bodyShape.text_frame tFrame.text 'Finding bullet slide layout' using add_paragraph() function para tFrame.add_paragraph() para.text 'Using _TextFrame.text attribute first bullet' specifying level para.level using add_paragraph() function para tFrame.add_paragraph() para.text 'Using _TextFrame.add_paragraph() function subsequent bullets' specifying level para.level saving file myPPT.save('myPPT.pptx') Output: Explanation: above snippet code, have imported Presentation class from pptx library. have then created object Presentation class. have then created layout first slide using slide_layouts[n] attribute, where index slide file. have then used add_slide() method create slide object file. then have title placeholders[n] attributes title subtitle slide. have then added text title subtitle using text attribute. have then used text_frame attribute text frame slide. have then used add_paragraph() insert paragraph text frame specifying levels with help level attribute. last, have saved file. shapes consist text; however, those that always have least paragraph, even that paragraph empty text visible within shape. _BaseShape.has_text_frame attribute allows determine whether shape consist text (All shapes subclass _BaseShape.) When value _BaseShape.has_text_frame True, _BaseShape.text_frame.paragraphs[0] returns first paragraph. text first paragraph with help text_frame.paragraphs[0].text attribute. shortcut, library offers some writable properties like _BaseShape.text _TextFrame.text accomplish same thing. Note that these last calls delete paragraphs shape except first before setting text consists Adding textbox PowerPoint Presentation also textbox slide using add_textbox() method. This method accepts multiple parameters named left, top, width, height. consider following example demonstrating same: Example: importing Presentation class from pptx library from pptx import Presentation importing Inches from util class pptx library from pptx.util import Inches, creating object Presentation class myPPT Presentation() creating slide layout adding slide slideLayout myPPT.slide_layouts[6] mySlide myPPT.slides.add_slide(slideLayout) specifying values parameters add_textbox() method left width height Inches(1) using add_textbox() method textBox mySlide.shapes.add_textbox(left, top, width, height) creating text frame textFrame textBox.text_frame inserting text text frame textFrame.text "This text inside textbox" adding paragraph text frame para textFrame.add_paragraph() para.text "This second paragraph that's bold" making paragraph bold para.font.bold True adding another paragraph text frame para textFrame.add_paragraph() para.text "This third paragraph that's big" specifying font size paragraph para.font.size Pt(40) saving file myPPT.save('myPPT.pptx') Output: Explanation: above snippet code, have imported required things from library created slide. have then specified value parameters add_textbox() method used create textbox. have then created text frame. have added some paragraphs text frame included some unique properties like making paragraph bold increasing font size. last, have saved presentation file. Adding Image into PowerPoint File add_picture() method insert image into PowerPoint Presentation file. consider following example demonstrating same: Example: importing Presentation class from pptx library from pptx import Presentation importing Inches from util class pptx library from pptx.util import Inches defining path image file imgPath "opmImage.jpg" creating object Presentation class myPPT Presentation() creating slide layout adding slide slideLayout myPPT.slide_layouts[6] mySlide myPPT.slides.add_slide(slideLayout) specifying values parameters add_picture() method left Inches(1) using add_picture() method myImage mySlide.shapes.add_picture(imgPath, left, top) saving file myPPT.save('myPPT.pptx') Output: Explanation: above snippet code, have imported required things from library defined path image file. have then instantiated Presentation class created layout slide. Once done creating object slide, have defined measurements inches left top. have then used add_picture() method that accepts multiple parameters, including image file path, value left, top. last, have saved presentation. Adding Tables PowerPoint File Presentation class python-pptx library also offers method called add_table() that allows tables PowerPoint File. consider following snippet code demonstrating same: Example: importing required things from library from pptx import Presentation from pptx.util import Inches creating slide myPPT Presentation() slideLayout myPPT.slide_layouts[5] mySlide myPPT.slides.add_slide(slideLayout) shapes mySlide.shapes shapes.title.text 'Adding Table' specifying rows, columns, other measurements rows cols left Inches(2.0) width Inches(6.0) height Inches(0.8) using add_table() method myTable shapes.add_table(rows, cols, left, top, width, height).table setting column widths myTable.columns[0].width Inches(2.0) myTable.columns[1].width Inches(4.0) writing column headings myTable.cell(0, 0).text 'S.No.' myTable.cell(0, 1).text 'Name' writing body cells myTable.cell(1, 0).text myTable.cell(1, 1).text 'John' saving file myPPT.save('myPPT.pptx') Output: Explanation: above snippet code, have imported required things from library instantiated Presentation class. have then created layout slide slide object. have then added title slide. have then specified rows columns measurement left, top, width, height. have used these values add_table() method parameters. have then column widths, heading, body cell. last, have saved presentation file. Adding shapes PowerPoint File add_shape() method order shapes PowerPoint presentation. consider following example demonstrating same: Example: importing required things from pptx library from pptx import Presentation from pptx.enum.shapes import MSO_SHAPE from pptx.util import Inches creating slide myPPT Presentation() slideLayout myPPT.slide_layouts[3] mySlide myPPT.slides.add_slide(slideLayout) myShapes mySlide.shapes myShapes.title.text 'Inserting AutoShape' specifying measurements left Inches(0.93) 0.93" centers this overall shapes Inches(3.0) width Inches(1.75) height Inches(1.0) creating shape myShape myShapes.add_shape(MSO_SHAPE.PENTAGON, left, top, width, height) myShape.text 'Step changing some values left left width Inches(0.4) width Inches(2.0) chevrons need more width visual balance using for-loop range(2, adding some more shapes myShape myShapes.add_shape(MSO_SHAPE.CHEVRON, left, top, width, height) myShape.text 'Step left left width Inches(0.4) saving presentation myPPT.save('myPPT.pptx') Output: Explanation: above snippet code, have imported required things from library instantiated Presentation class. have then created layout slide slide object. have then added title slide. have then defined left, top, width, height measurements used add_shape() method. This method defines constant representing available auto shapes (for example, MSO_SHAPE.PENTAGON, MSO_SHAPE.ROUNDED_RECT, MSO_SHAPE.CHEVRON, many more) along with measurements parameters. have then added some text image. Later, changed value left width used for-loop create more shapes text them. last, have saved file. Next TopicHow change size figure drawn with matplotlib prev next