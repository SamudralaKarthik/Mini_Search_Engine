next prev Queue Python this tutorial, will discuss Queue's basic concepts built-in Queue class implement using Python code. What Queue? queue linear type data structure used store data sequentially. concept queue based FIFO, which means "First First Out". also known "first come first severed". queue ends front rear. next element inserted from rear removed from front end. example There computers computer science connected single printer. students want print their paper; printer will print first task second, last line, need wait until other tasks completed that ahead ours. operating system manages queue processing various processes within computer. Operations Python perform following operations Queue. Enqueue enqueue operation where items queue. queue full, condition Queue time complexity enqueue O(1). Dequeue dequeue operation where remove element from queue. element removed same order inserted. queue empty, condition Queue Underflow. time complexity dequeue O(1). Front element inserted front end. time complexity front O(1). Rear element removed from rear end.. time complexity rear O(1). Methods Available Queue Python provides following methods, which commonly used perform operation Queue. put(item) This function used insert element queue. get() This function used extract element from queue. empty() This function used check whether queue empty not. returns true queue empty. qsize This function returns length queue. full() queue full returns true; otherwise false. will learn these functions below sections. built-in Python List list used queue, suitable performance perspective. Python provides built-in methods insert() pop() function remove elements. Lists quite slow because insert element list, elements require shifting one. takes O(n) time. lists recommended in-place queue. Let's understand following example list used queue. Example que.append('Apple') que.append('Mango') que.append('Papaya') print(que) List slow! print(que.pop(0)) Output: ['Apple', 'Mango', 'Papaya'] Apple Explanation have defined empty list above code inserted elements using append() method. will element list. Adding Element Queue (Enqueue) element from rear end. This process also called enqueue. create Queue class where will implement First-in-First-Out concept. Let's understand following example. Example class Queue: __init__(self): self.queue list() add_element(self,val): Insert method element self.queue: self.queue.insert(0,val) return True return False size(self): return len(self.queue) TheQueue Queue() TheQueue.add_element("Apple") TheQueue.add_element("Mango") TheQueue.add_element("Guava") TheQueue.add_element("Papaya") print("The length Queue: ",TheQueue.size()) Output: length Queue: Removing Element from Queue (Dequeue) remove element form rear end. This process called dequeue. following example, built-in pop() method remove element from list. Example class Queue: __init__(self): self.queue list() add_element(self,val): Insert method element self.queue: self.queue.insert(0,val) return True return False method remove element remove_element(self): len(self.queue)>0: return self.queue.pop() return ("Queue Empty") Queue() que.add_element("January") que.add_element("February") que.add_element("March") que.add_element("April") print(que) print(que.remove_element()) print(que.remove_element()) Output: January February Explanation above code, have defined class named Queue constructor assigned list constructor queue variable. Then, defined methods add_element() remove_element(). add_element() block, check condition value Queue. value present, insert element. remove_element() function block, check condition whether queue underflow. returns false, then remove element one. Sorting Queue following example, have sorted elements queue. Example import queue queue.Queue() q.put(14) q.put(27) q.put(11) q.put(4) q.put(1) Here, bubble sort algorithm sorting q.qsize() range(n): Remove element q.get() range(n-1): Remove element q.get() smaller element beginning queue q.put(y) else: smaller start queue q.put(x) greater element replaced check again q.put(x) while (q.empty() False): print(q.queue[0], q.get() Output: Queue Module Python provides queue module implement multi-producer, multi-consumer queues. queue module offers Queue class which especially used threaded programming. Queue class implements required locking semantics. perform operation using in-built queue class. Working With queue.Queue Class queue module contains several classes. Queue important classes them. This very useful parallel computing multiprogramming. Let's understand following example queue. Queue class0uii Example from queue import Queue Queue() que.put('Apple') que.put('Mango') que.put('Papaya') print(que) print(que.get()) print(que.get()) print(que.get()) print(que.get_nowait()) print(que.get()) Output: <queue.Queue object 0x00000114B30656A0> Apple Mango Papaya Traceback (most recent call last): File "C:/Users/DEVANSH SHARMA/PycharmProjects/Hello/Queue.py", line <module> print(que.get_nowait()) File "C:\Python\lib\queue.py", line 198, get_nowait return self.get(block=False) File "C:\Python\lib\queue.py", line 167, raise Empty _queue.Empty Working With collection.deque Class collection.deque class used implement double-ended queue that supports adding removing element from both ends. takes O(1) time complete process. deque class used both Queue stacks because removes adds elements effectively. collection.deque good choice queue data structure Python's standard library. Example from collections import deque deque() que.append('Apple') que.append('Mango') que.append('Banana') print(que) deque(['Apple 'Mango', 'Banana']) print(que.popleft()) print(que.popleft()) print(que.popleft()) que.popleft() Output: deque(['Apple', 'Mango', 'Banana']) Apple Mango Banana Traceback (most recent call last): File "C:/Users/DEVANSH SHARMA/PycharmProjects/Hello/Queue.py", line 101, <module> que.popleft() IndexError: from empty deque multiprocessing.Queue Class multiprocessing.Queue class used implement queued items processed parallel multicurrent workers. multiprocessing.Queue shares data between processes store pickle-able object. Let's understand following example. Example from multiprocessing import Queue Queue() que.put('Apple') que.put('Mango') que.put('Banana') print(que) print(que.get()) print(que.get()) print(que.get()) Output: <multiprocessing.queues.Queue object 0x000002CA073356A0> Apple Mango Banana Priority Queue Python priority queue special type queue data-structure. name suggest, sorts elements dequeues elements based their priorities. Unlike normal queue, retrieves highest-priority element instead next element. priority individual elements decided ordering applied their keys. Priority queues most beneficial handling scheduling problems where some tasks will happen based priorities. example operating system task best example priority queue executes high precedence over lower-priority tasks (downloading updates background). task scheduler allow highest-priority tasks first. There various ways implement priority queue Python. Let's understand following ways. Manually Sorted List sorted Python list priority queue quickly identify delete smaller largest element. inserting element slow takes O(n) operations. Therefore sorted list effective when there will insertions into priority queue. Let's understand following example Example pri_que pri_que.append((2, 'Apple')) pri_que.append((1, 'Mango')) pri_que.append((3, 'Banana')) NOTE: Remember re-sort every time element inserted. pri_que.sort(reverse=True) while pri_que: next_item pri_que.pop() print(next_item) Output: 'Mango') 'Apple') 'Banana') queue.PriorityQueue Class This priority queue implements uses heapq internally shares same time space complexities. difference priority queue coordinated delivers locking semantics backing multiple concurrent events consumers. Example from queue import PriorityQueue PriorityQueue() q.put((2, 'Apple')) q.put((1, 'Banana')) q.put((3, 'Mango')) while q.empty(): next_item q.get() print(next_item) Output: 'Banana') 'Apple') 'Mango') choose priority queue implementation Python program keep mind that queue.PriorityQueue good default choice. Conclusion have discussed basic concepts queue implementation. similar standard list, performance-wise always better. have also defined priority queue various ways implementation. Next TopicStack Python prev next