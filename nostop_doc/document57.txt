next prev Python Multiprocessing this article, will learn achieve multiprocessing using Python. also discuss advanced concepts. What Multiprocessing? Multiprocessing ability system more processes parallel. simple words, multiprocessing uses more within single computer system. This method also capable allocate tasks between more than process. Processing units share main memory peripherals process programs simultaneously. Multiprocessing Application breaks into smaller parts runs independently. Each process allocated processor operating system. Python provides built-in package called multiprocessing which supports swapping processes. Before working with multiprocessing, must aware with process object. Multiprocessing? Multiprocessing essential perform multiple tasks within Computer system. Suppose computer without multiprocessing single processor. assign various processes that system same time. will then have interrupt previous task move another keep processes going. simple chef working alone kitchen. several tasks cook food such cutting, cleaning, cooking, kneading dough, baking, etc. Therefore, multiprocessing essential perform several task same time without interruption. also makes easy track tasks. That concept multiprocessing arise. Multiprocessing represented computer with more than central processor. Multi-core processor refers single computing component with more independent units. multiprocessing, assign multiple tasks each task processor. Multiprocessing Python Python provides multiprocessing module perform multiple tasks within single system. offers user-friendly intuitive work with multiprocessing. Let's understand simple example multiple processing. Example from multiprocessing import Process disp(): print ('Hello Welcome Python Tutorial') __name__ '__main__': Process(target=disp) p.start() p.join() Output: 'Hello Welcome Python Tutorial' Explanation: above code, have imported Process class then create Process object within disp() function. Then started process using start() method completed process with join() method. also pass arguments declared function using args keywords. Let's understand following example multiprocessing with arguments. Example Python multiprocessing example importing multiprocessing module import multiprocessing cube(n): This function will print cube given number print("The Cube {}".format(n square(n): This function will print square given number print("The Square {}".format(n __name__ "__main__": creating processes process1 multiprocessing.Process(target= square, args=(5, process2 multiprocessing.Process(target= cube, args=(5, Here start process process1.start() Here start process process2.start() join() method used wait process complete process1.join() used wait process complete process2.join() Print both processes completed print("Both processes finished") Output: Cube Square Both processes finished Explanation above example, created functions cube() function calculates given number's cube, square() function calculates square given number. Next, defined process object Process class that arguments. first argument target that represents function executed, second argument args that represents argument passed within function. process1 multiprocessing.Process(target= square, args=(5, process2 multiprocessing.Process(target= cube, args=(5, have used start() method start process. process1.start() process2.start() output, waits completion process then process last statement executed after both processes finished. Python Multiprocessing Classes Python multiprocessing module provides many classes which commonly used building parallel program. will discuss main classes Process, Queue Lock. have already discussed Process class previous example. will discuss Queue Lock classes. Let's simple example number CPUs currently system. Example import multiprocessing print("The number currently working system multiprocessing.cpu_count()) Output: ('The number currently woking system above number CPUs vary your pc. number cores Python Multiprocessing Using Queue Class know that Queue important part data structure. Python multiprocessing precisely same data structure queue, which based "First-In-First-Out" concept. Queue generally stores Python object plays essential role sharing data between processes. Queues passed parameter Process' target function allow process consume data. Queue provides put() function insert data get() function data from queues. Let's understand following example. Example Importing Queue Class from multiprocessing import Queue fruits ['Apple', 'Orange', 'Guava', 'Papaya', 'Banana'] count creating queue object queue Queue() print('pushing items queue:') fruits: print('item count, fr) queue.put(fr) count print('\npopping items from queue:') count while queue.empty(): print('item count, queue.get()) count Output: pushing items queue: ('item 'Apple') ('item 'Orange') ('item 'Guava') ('item 'Papaya') ('item 'Banana') popping items from queue: ('item 'Apple') ('item 'Orange') ('item 'Guava') ('item 'Papaya') ('item 'Banana') Explanation above code, have imported Queue class initialized list named fruits. Next, assigned count count variable will count total number elements. Then, created queue object calling Queue() method. This object will used perform operations Queue. loop, inserted elements queue using put() function increased count with each iteration loop. Python Multiprocessing Lock Class multiprocessing Lock class used acquire lock process that hold other process execute similar code until lock been released. Lock class performs mainly tasks. first acquire lock using acquire() function second release lock using release() function. Python Multiprocessing Example Suppose have multiple tasks. create queues: first queue will maintain tasks, other will store complete task log. next step instantiate processes complete task. discussed previously, Queue class already synchronized, don't need acquire lock using Lock class. following example, will merge multiprocessing classes together. Let's below example. Example from multiprocessing import Lock, Process, Queue, current_process import time import queue jobTodo(tasks_to_perform, complete_tasks): while True: try: block catch task from queue. get_nowait() function used raise queue.Empty exception queue empty. task tasks_to_perform.get_nowait() except queue.Empty: break else: exception been raised, else block will execute task completion print(task) complete_tasks.put(task done current_process().name) time.sleep(.5) return True main(): total_task total_number_of_processes tasks_to_perform Queue() complete_tasks Queue() number_of_processes range(total_task): tasks_to_perform.put("Task str(i)) defining number processes range(total_number_of_processes): Process(target=jobTodo, args=(tasks_to_perform, complete_tasks)) number_of_processes.append(p) p.start() completing process number_of_processes: p.join() print output while complete_tasks.empty(): print(complete_tasks.get()) return True __name__ '__main__': main() Output: Task Task Task Task Task Task Task Task Task done Process-1 Task done Process-3 Task done Process-2 Task done Process-1 Task done Process-3 Task done Process-2 Task done Process-1 Task done Process-3 Python Multiprocessing Pool Python multiprocessing pool essential parallel execution function across multiple input values. also used distribute input data across processes (data parallelism). Consider following example multiprocessing Pool. Example from multiprocessing import Pool import time (["V", ["X", ["Y", ["Z", work_log(data_for_work): print(" Process name waiting time seconds" (data_for_work[0], data_for_work[1])) time.sleep(int(data_for_work[1])) print(" Process Executed." data_for_work[0]) handler(): Pool(2) p.map(work_log, w) __name__ '__main__': handler() Output: Process name waiting time seconds Process Executed. Process name waiting time seconds Process Executed. Process name waiting time seconds Process Executed. Process name waiting time seconds Process Executed. Let's understand another example multiprocessing Pool. Example from multiprocessing import Pool fun(x): return x*x __name__ '__main__': with Pool(5) print(p.map(fun, 3])) Output: Proxy Objects proxy objects referred shared objects which reside different process. This object also called proxy. Multiple proxy objects might have similar referent. proxy object consists various methods which used invoked corresponding methods referent. Below example proxy objects. Example from multiprocessing import Manager manager Manager() manager.list([i*i range(10)]) print(l) print(repr(l)) print(l[4]) print(l[2:5]) Output: <ListProxy object, typeid 'list' 0x7f063621ea10> 16] proxy objects picklable pass them between processes. These objects also used level control over synchronization. Commonly Used Functions Multiprocessing far, have discussed basic concepts multiprocessing using Python. Multiprocessing broad topic itself essential performing various tasks within single system. defining essential functions that commonly used achieve multiprocessing. Method Description pipe() pipe() function returns pair connection objects. run() run() method used represent process activities. start() start()method used start process. join([timeout]) join() method used block process until process whose join() method called terminates. timeout optional argument. is_alive() returns process alive. terminate() name suggests, used terminate process. Always remember terminate() method used Linux, Windows, TerminateProcess() method. kill() This method similar terminate() using SIGKILL signal Unix. close() This method used close Process object releases resources associated with qsize() returns approximate size queue. empty() queue empty, returns True. full() returns True, queue full. get_await() This method equivalent get(False). get() This method used elements from queue. removes returns element from queue. put() This method used insert element into queue. cpu_count() returns number working within system. current_process() returns Process object corresponding current process. parent_process() returns parent Process object corresponding current process. task_done() This function used indicate that enqueued task completed. join_thread() This method used join background thread Next TopicPython OOPs Concepts prev next