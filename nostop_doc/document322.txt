next prev Number Plate Recognition using Python following tutorial, will understand recognize License number plates using Python programming language. will utilize OpenCV this project order identify license number plates python pytesseract characters digits extraction from plate. will build Python program that automatically recognizes License Number Plate this tutorial. Understanding Automatic License Number Plate Recognition System Automatic License Number Plate Recognition Systems available shapes sizes: ANPR executed measured lighting situations with predictable number plate types utilize basic techniques image processing. More advanced ANPR systems dedicated object detectors, like HOG Linear SVM, SSDs, YOLO, Faster R-CNN localize license number plates images. State-of-the-art ANPR software uses Recurrent Neural Networks (RNNs) Long Short-Term Memory networks (LSTMs) order better OCRing text from number plates themselves. Even more advanced ANPR systems utilize specialized neural network architectures order preprocess clean images before they OCRed, thereby developing accuracy ANPR. fact that makes Automatic License Number Plate Recognition more complicated require operating real-time. instance, consider ANPR system that mounted toll road. able detect number plate each vehicle passing characters plate, then store this data database vehicle's owner billed toll. compounding factors make ANPR extremely challenging, involving finding data utilize order train custom model ANPR. Large, robust datasets ANPR that utilized train state-of-the-art models tightly guarded hardly ever) released publicly: These datasets consist sensitive identifying details associated with vehicle, driver, location. datasets ANPR tedious curate, needing unbelievable time investment staff hours interpret. contracts ANPR with local federal governments tend extremely reasonable. often trained model that valuable; however, instead dataset that specified company curated. same cause, will observe ANPR industries acquired their ANPR system data itself. Pre-requisites project will Python OpenCV library. open-source library machine learning offers common infrastructure computer vision. will also Pytesseract project. Pytesseract Tesseract-OCR Engine read images type extract details available image. Installation install OpenCV library using installer with help following syntax: Syntax: install opencv-python same procedure will followed order install Pytesseract engine. syntax same shown below: Syntax: install pytesseract Features OpenCV following Python project, will utilize following features OpenCV order identify number plate input image: Gaussian Blur: Here, will Gaussian Kernel image smoothening. This technique quite efficient removal Gaussian noise. OpenCV offers function called GaussianBlur() function this task. Morphological Transformation: These operations grounded image shapes processed binary images. fundamental morphological operations include Opening, Closing, Erosion, Dilation many more. Some functions offered OpenCV follows: cv2.erode() cv2.dilate() cv2.morphologyEx() Sobel: Here, will calculate derivatives from image. This feature significant various tasks based vision computer. With help these derivatives, calculate gradients higher alteration gradient denotes noteworthy change image. OpenCV offers Sobel() function order calculate Sobel operators. Contours: Contours curves that consist continuous points same intensity. These curves quite useful utilities recognition object. OpenCV offers findContours() function this feature. Understanding Python code Since have covered theory part project, into coding part. have divided whole source code project into different steps better understanding clarity. Step Importing required modules First all, have import OpenCV pytessaract along with matplotlib, glob File: anpr.py importing required modules import pytesseract import matplotlib.pyplot import import glob import Note: name file must exact number respective image license plate. instance, number license plate "FTY348U", then name image file will "FTY348U.jpg". Step Performing using Tesseract Engine Number Plates following step, have perform with help Tesseract Engine License Number plates. same observed following snippet code. File: anpr.py specifying path number plate images folder shown below file_path os.getcwd() "/license_plates/**/*.jpg" NP_list predicted_NP file_path glob.glob(file_path, recursive True): NP_file file_path.split("/")[-1] number_plate, os.path.splitext(NP_file) Here will append actual number plate list NP_list.append(number_plate) Reading each number plate image file using openCV NP_img cv2.imread(file_path) will then pass each number plate image file Tesseract engine utilizing Python library wrapper back predicted_res number plate. append predicted_res list compare with original number plate predicted_res pytesseract.image_to_string(NP_img, lang ='eng', config ='--oem --psm tessedit_char_whitelist ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789') filter_predicted_res "".join(predicted_res.split()).replace(":", "").replace("-", predicted_NP.append(filter_predicted_res) Explanation: above snippet code, have specified path image files License number plate using module. have also defined empty lists NP_list predicted_NP. have then appended actual number plate list using append() function. then used OpenCV module read each number plate image file stored them NP_img variable. have then passed each number plate image file Tesseract engine with help Python library wrapper. have then back predicted_res number plate append list compare with genuine one. Now, since have plates predicted don"t know prediction. order view data prediction, will perform visualization, shown below. will also estimating accuracy prediction without help core function. File: anpr.py print("Original Number Plate", "\t", "Predicted Number Plate", "\t", "Accuracy") print("--------------------", "\t", "-----------------------", "\t", "--------") estimate_predicted_accuracy(ori_list, pre_list): ori_plate, pre_plate zip(ori_list, pre_list): "0 number_matches ori_plate pre_plate: "100 else: len(ori_plate) len(pre_plate): zip(ori_plate, pre_plate): number_matches str(round((number_matches len(ori_plate)), 100) print(ori_plate, "\t", pre_plate, "\t", acc) estimate_predicted_accuracy(NP_list, predicted_NP) Output: Original Number Plate Predicted Number Plate Accuracy -------------------- ----------------------- -------- DL3CAM0857 DL3CAM0857 MD06NYW MDOGNNS TN21TC706 TN21TC706 TN63DB5481 TN63DB5481 UP14DR4070 UP14DR4070 W5KHN WSKHN Explanation: above snippet code, have defined function calculating predicted accuracy. Within function, used for-loop iterate through list original number plates predicted ones checked they matched. have also checked accuracy basis number's length getting better appropriate results. observe that Tesseract engine mostly predicts license plates correctly with rate 100% accuracy. Tesseract engine predicted incorrectly number plates, will apply image processing technique those number plate files pass them Tesseract again. increase accuracy rate Tesseract Engine number plates incorrectly predicted number plates applying techniques image processing. Step Techniques Image Processing consider following snippet code understand technique Image Processing. File: anpr.py import matplotlib.image mpimg os.listdir("D://Python//License_Plate"): test_NP mpimg.imread("W5KHN.jpg") plt.imshow(test_NP) plt.axis('off') plt.title('W5KHN license plate') plt.show() Output: Explanation: above snippet code, have imported image module from matplotlib library used for-loop extract image from designated folder. have then used imread() function read extracted image. have then used plot module matplotlib library display image users. Image Resizing: resize image file factor 2x both horizontal vertical directions with help resize. Converting Gray-scale: Then, convert resized image file grayscale order optimize detection reduce number colours available image drastically, which will allow detect number plates easily. Denoising Image: Gaussian Blur technique denoise images. makes edges image clearer smoother, making characters more readable. consider following example understand same. File: anpr.py image resizing resize_test_NP cv2.resize( test_NP, None, fx fy interpolation cv2.INTER_CUBIC) converting image grayscale grayscale_resize_test_NP cv2.cvtColor( resize_test_NP, cv2.COLOR_BGR2GRAY) denoising image gaussian_blur_NP cv2.GaussianBlur( grayscale_resize_test_NP, Explanation: above snippet code, have some tools OpenCV module resize image, convert into grayscale, denoise image. Once above steps complete, pass transformed license plate file Tesseract engine view predicted result. same observed following snippet code. File: anpy.py new_pre_res_W5KHN pytesseract.image_to_string(gaussian_blur_NP, lang ='eng') filter_new_pre_res_W5KHN "".join(new_pre_res_W5KHN.split()).replace(":", "").replace("-", print(filter_new_pre_res_W5KHN) Output: W5KHN Explanation: above snippet code, passed final processed image Tesseract engine extract number from license number plate. Similarly, perform this image process other license number plates with 100% accuracy. Thus, number plate recognition model ready. Next TopicObfuscating Python program prev next