next prev bokeh.plotting.figure.diamond_cross() Function Python Bokeh library Python which used data visualization plotting graphs charts. output obtained different platforms such Notebook, HTML, JavaScript, browser. Figure Class used creating figure graph, subclass bokeh.plotting that simplifies plot creation with default axes, grids, tools, etc. bokeh.plotting.figure.diamond_cross() Function diamond_cross() method bokeh.plotting module bokeh library Configuring adding DiamondCross glyphs this Graphs. Syntax: syntax diamond_cross() function diamond_cross(x, size angle 0.0, angle_units 'rad', fill_alpha 1.0, fill_color 'gray', line_alpha 1.0, line_cap 'butt', line_color 'black', line_dash line_dash_offset line_join 'bevel', line_width name None, tags **kwargs) Parameters: This x-coordinates lines. This y-coordinates lines. line_alpha: takes percentage value line alpha; default value line_cap: takes value line line; default value butt. line_color: takes color line input; default value black. line_dash: takes value line dash such solid, dashed, dotted, dot-dash, dash-dot [Its default value solid]. line_dash_offset: takes value line dash offset input; default value line_join: takes value line join input; default value bevel. line_width: takes value width line input; default value mode: takes three values mode input: ["before", "after", "centre"]. name: takes user-supplied name model input. tags: takes user-supplied values model input. Other Parameters: alpha: used setting alpha keyword arguments once. color: used setting color keyword arguments once. legend_field: takes name column input data source that should used. legend_group: takes name column input data source that should used. legend_label: used labeling legend entry. muted: used determining whether glyph should rendered muted not; default value False. name: used optional user-supplied name attaching renderer. source: user-supplying data source. view: used view filtering data source. visible: used determining whether glyph should rendered not; default value True. x_range_name: used name extra range mapping x-coordinates. y_range_name: used name extra range mapping y-coordinates. level: used specifying render level order this glyph. Return: return diamond_cross() function object class GlyphRenderer. Below examples illustrate bokeh.plotting.figure.diamond_cross() function bokeh.plotting: Example First, will import required modules import numpy from bokeh.plotting import figure from bokeh.plotting import output_file from bokeh.plotting import show Here, will create file saving model OF("javaTpoint.html") Now, will instantiate figure object plot_1 fig(plot_width 300, plot_height 300, title "Diamond figure Graph using Bokeh") plot_1.diamond_cross(x size fill_color "Blue", line_color "Yellow", alpha 1.0) display model show(plot_1) Output: Example First, will import required modules import numpy from bokeh.plotting import figure from bokeh.plotting import output_file from bokeh.plotting import show Here, will create file saving model OF("javaTpoint.html") Now, will instantiate figure object plot_1 fig(plot_width 300, plot_height 300, title "Diamond figure Graph using Bokeh") plot_1.line(x, line_width plot_1.diamond_cross(x, fill_color "Orange", line_color "Black", size show(plot_1) Output: Conclusion this tutorial, discussed, with help examples, bokeh.plotting.figure.diamond_cross() Function Python. Next TopicHow Plot Rays Graph using Bokeh Python prev next