next prev Python Dash module have surely heard many times that Python dynamically typed programming language, maybe know that also Python development purposes. Yes, right, Python development, there many modules present Python which help this task. this tutorial, going discuss such Python module, i.e., Dash module, which help perform development tasks using Python. will first look introduction Dash module, then will build basic dashboard application using Python dash module. Introduction Python Dash Module Dash Python module framework used create many analytical applications, build analytical dashboards using dash framework. With help Dash module, easily create very fast responsive dashboards, which also very good look (Having Great User Interface). When using Dash module, build these interactive dashboards without having prior knowledge some mandatory complex front-end frameworks such JavaScript, HTML, etc. Now, have learned what Dash module completed introduction part; time that should build first dashboard using Dash module. But, before building application dashboard using Dash framework, have install dash module system built-in module Python). Once installation process this module done, will proceed application part Dash module. Installation Dash Module: this section, will learn install Dash module system that import into Python program functions framework. have follow following steps install Dash module system: Step Open command prompt terminal device locate directory (using mkdir command) where Python installed system. Step write following command terminal install Dash module with installer: install dash Step When press enter key, installer will start installing Dash module system defined path. see, Dash module successfully installed system, start working with importing into program. Application Dash Module will learn applications Dash module building basic dashboard, after that, will also build application using callbacks that analytical features With help these basic implementations, will learn that dash framework build applications that very fast have very good will create following simple applications using Dash module this part: Basic Dashboard applications with callbacks Creating Basic Dashboard: this section, will create simple dashboard using Dash module libraries their functions inside Python module. Dashboard will create this section will simple static responsive dashboard. dashboard, will build static responsive graph page using dash module. will build simple dashboard using Dash module following these given below steps: Step Import required libraries: First, will have import required libraries inside Python program that required functions building dashboard. have first import following dash library components program: Dash library Dash core components Dash HTML components import these above-mentioned required libraries Python program using following code: Importing dash library import dash Importing dash core components import dash_core_components Importing html components from dash import dash_html_components dash core components provide with following core components dash: Inputs graphs buttons etc. dash HTML component following HTML function components: Paragraph tags Body tags Meta tags etc. Step Design Layout: this step, will design layout application building using Dash's HTML components, core components, library functions. After creating layout, will make graph, graph create will have various parameters. Following such parameters that will while creating graph with Dash HTML components: figure (which will graph itself) this, will assign unique particular graph) layout includes basic layout graph, data both Y-axis, title graph etc.) Now, look following part code where have created layout graph application: Initializing variable application webApp dsh.Dash() Creating layout dashboard webApp.layout dhc.Div(children dhc.H1("Tutorial building application using Dash"), Title page dc2.Graph( ="graphExample", graph figure Creating Graph figure 'data':[ {'x':[1, 13], 'y':[7, 'type':'line', 'name':'Trucks'}, {'x':[1, 13], 'y':[6, 'type':'bar', 'name':'Ships'} 'layout':{ Layout graph 'title':'A Basic Graph Dashboard' Title graph above program, have html components like dhc.h1 dhc.div actually like components HTML where dhc.h1 like heading HTML dhc.div like class HTML. also interpret following points from above-given part program: easily understand that figure parameter essentially dictionary which define elements like name, type, etc. name parameter used above code refers name associated with axis graph. type parameter used referred type graph want project dashboard, line, etc. single value list values (where values inside referred X-axis Y-axis, respectively). Step Create Server: dashboard completely ready after created layout application, need server where Therefore, will server using following part code program dashboard server will created: Creating server dashboard __name__ '__main__': webApp.run_server() When program, will show default port link output, have open default browser link inside application have built. Output: that have created application, basic static application. this application, user cannot take control application, can't even take inputs from user. That's going build application where callbacks (that provided Dash) take input from user give results according Creating Application with Dash Callbacks: this section, will create application using Dash functions components Dash like used while creating basic dashboard. will also callbacks from dash create application that take user input dashboard build. Here, will build application step-by-step earlier. will first look following program where have created application with callbacks, then will understand implementation function callbacks program: Importing dash library import dash Importing dash core components import dash_core_components Importing html components from dash import dash_html_components Importing dependencies using input output from dash.dependencies import Input, Output webApp dsh.Dash() Layout application webApp.layout dhc.Div(children Using input take input dc2.Input(id 'input'), Creating class output dhc.Div(id ='output') Using dash callback input output @webApp.callback( Returning output Output(component_id 'output', component_property 'children'), Taking input value [Input(component_id 'input', component_property 'value')] default function perform operation with input value update_value(input_data): try: return str(float(input_data) Cube Input value except: return "Error, input value given numeric value" input value number Creating server dashboard __name__ '__main__': webApp.run_server() When above program, server will redirect localhost with default port 8050, have open default browser system that application. Output: When server opened application dashboard browser with default port, application asked input value. When give input value inside box, application will calculate cube given number give result operation output value this output image). Explanation: above example, used similar logic used first example, have used many different functions logic too. First all, have imported additional library this function, i.e., dash dependencies, input output function application. While creating layout, here, have created dialogue where defined input output division class. After that, have used dash callback that take input from user perform operation produce output where output will result operation. used exception handling that input value number, raise error. last, created server application Conclusion have applications this tutorial which with static graph, other uses callbacks from dash. Maybe these applications useful with help these application's implementation, understand functions Dash library Dash module building application. Next TopicPython Emoji Module prev next