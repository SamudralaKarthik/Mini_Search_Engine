next prev Read Operation SELECT statement used read values from databases. restrict output select query using various clause like where, limit, etc. Python provides fetchall() method returns data stored inside table form rows. iterate result individual rows. this section tutorial, will extract data from database using python script. will also format output print console. Example import mysql.connector #Create connection object myconn mysql.connector.connect(host "localhost", user "root",passwd "google",database "PythonDB") #creating cursor object myconn.cursor() try: #Reading Employee data cur.execute("select from Employee") #fetching rows from cursor object result cur.fetchall() #printing result result: print(x); except: myconn.rollback() myconn.close() Output: ('John', 101, 25000.0, 201, 'Newyork') ('John', 102, 25000.0, 201, 'Newyork') ('David', 103, 25000.0, 202, 'Port spain') ('Nick', 104, 90000.0, 201, 'Newyork') ('Mike', 105, 28000.0, 202, 'Guyana') Reading specific columns read specific columns mentioning their names instead using star (*). following example, will read name, salary from Employee table print console. Example import mysql.connector #Create connection object myconn mysql.connector.connect(host "localhost", user "root",passwd "google",database "PythonDB") #creating cursor object myconn.cursor() try: #Reading Employee data cur.execute("select name, salary from Employee") #fetching rows from cursor object result cur.fetchall() #printing result result: print(x); except: myconn.rollback() myconn.close() Output: ('John', 101, 25000.0) ('John', 102, 25000.0) ('David', 103, 25000.0) ('Nick', 104, 90000.0) ('Mike', 105, 28000.0) fetchone() method fetchone() method used fetch only from table. fetchone() method returns next result-set. Consider following example. Example import mysql.connector #Create connection object myconn mysql.connector.connect(host "localhost", user "root",passwd "google",database "PythonDB") #creating cursor object myconn.cursor() try: #Reading Employee data cur.execute("select name, salary from Employee") #fetching first from cursor object result cur.fetchone() #printing result print(result) except: myconn.rollback() myconn.close() Output: ('John', 101, 25000.0) Formatting result format result iterating over result produced fetchall() fetchone() method cursor object since result exists tuple object which readable. Consider following example. Example import mysql.connector #Create connection object myconn mysql.connector.connect(host "localhost", user "root",passwd "google",database "PythonDB") #creating cursor object myconn.cursor() try: #Reading Employee data cur.execute("select name, salary from Employee") #fetching rows from cursor object result cur.fetchall() print("Name Salary"); result: print("%s %d"%(row[0],row[1],row[2])) except: myconn.rollback() myconn.close() Output: Name Salary John 25000 John 25000 David 25000 Nick 90000 Mike 28000 Using where clause restrict result produced select statement using where clause. This will extract only those columns which satisfy where condition. Consider following example. Example: printing names that start with import mysql.connector #Create connection object myconn mysql.connector.connect(host "localhost", user "root",passwd "google",database "PythonDB") #creating cursor object myconn.cursor() try: #Reading Employee data cur.execute("select name, salary from Employee where name like 'J%'") #fetching rows from cursor object result cur.fetchall() print("Name Salary"); result: print("%s %d"%(row[0],row[1],row[2])) except: myconn.rollback() myconn.close() Output: Name Salary John 25000 John 25000 Example: printing names with 101, 102, import mysql.connector #Create connection object myconn mysql.connector.connect(host "localhost", user "root",passwd "google",database "PythonDB") #creating cursor object myconn.cursor() try: #Reading Employee data cur.execute("select name, salary from Employee where (101,102,103)") #fetching rows from cursor object result cur.fetchall() print("Name Salary"); result: print("%s %d"%(row[0],row[1],row[2])) except: myconn.rollback() myconn.close() Output: Name Salary John 25000 John 25000 David 2500 Ordering result ORDER clause used order result. Consider following example. Example import mysql.connector #Create connection object myconn mysql.connector.connect(host "localhost", user "root",passwd "google",database "PythonDB") #creating cursor object myconn.cursor() try: #Reading Employee data cur.execute("select name, salary from Employee order name") #fetching rows from cursor object result cur.fetchall() print("Name Salary"); result: print("%s %d"%(row[0],row[1],row[2])) except: myconn.rollback() myconn.close() Output: Name Salary David 25000 John 25000 John 25000 Mike 28000 Nick 90000 Order DESC This orders result decreasing order particular column. Example import mysql.connector #Create connection object myconn mysql.connector.connect(host "localhost", user "root",passwd "google",database "PythonDB") #creating cursor object myconn.cursor() try: #Reading Employee data cur.execute("select name, salary from Employee order name desc") #fetching rows from cursor object result cur.fetchall() #printing result print("Name Salary"); result: print("%s %d"%(row[0],row[1],row[2])) except: myconn.rollback() myconn.close() Output: Name Salary Nick 90000 Mike 28000 John 25000 John 25000 David 25000 Next TopicUpdate Operation prev next