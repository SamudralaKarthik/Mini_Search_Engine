next prev Email module Python email package email message management library. email package's overall structure broken down into three basic components, plus fourth component that regulates behaviour others. package's main component "object model" that represents email messages. primary interface which application interacts with package object model interface described message sub-module. generator converts EmailMessage back serialised byte stream. (The parser generator also handle streams text characters, this discouraged because it's easy messages that aren't valid some way.) policy module control component. Every EmailMessage, generator, parser policy object that governs behaviour. policy usually only specified when EmailMessage formed, either directly instantiating EmailMessage create email parsing input stream parser. However, when message serialised using generator, policy altered. This allows, example, generic email message processed from disc serialised when sent email server using typical SMTP settings. email package keeps application's knowledge many controlling RFCs minimum. programme should theoretically able treat email message hierarchical tree Unicode text binary attachments without having worry about they serialised. practice, however, typically necessary know least some rules controlling MIME messages their structure, particularly names nature MIME "content types" they identify multipart documents. main feature email module explained brief this article. policy controls then discussed, bringing treatment library's primary components close. header registry content manager sub-components, which provide capabilities more detailed header payload manipulation, respectively, next discussed. Both these components provide functionality consuming creating non-trivial messages documentation their extensibility APIs, which will useful advanced applications. above represents email package's modern (Unicode friendly) API. Starting with Message class, subsequent sections describe historical compat32 API, which considerably more intimately concerned with intricacies email messages represented. built-in smtplib module Python allows send emails using Simple Mail Transfer Protocol (SMTP). SMTP, smtplib employs 821 protocol. Gmail SMTP server will used examples this lesson, same ideas apply other email services. Although most email providers utilise same connection ports those described this tutorial, double-check yours with simple Google search. local SMTP debugging server help troubleshoot email issues ensure that your email operations bug-free before sending emails. Gmail account development SMTP debugging server that rejects emails prints them command prompt instead started with this guide. Both possibilities outlined table below. look sample code: Code: import smtplib, from email.mime.text import MIMEText from email.mime.multipart import MIMEMultipart import class written that will used have functions that will used getting various details which required sending mail finally sending mail class MyMail: constructor written initialise required class variables value these class variables none __init__(self): self.sender_email None self.receiver_email None self.sender_password None self.email_subject None self.email_body None function written details sender various details that captured this function email address sender corresponding password associated with that entered email get_sender_details(self): print("Enter email sender::") self.sender_email input() print("Enter Password sender::") self.sender_password input() another function written that used retrieve receiver details various receiver details that captured this functions email receiver get_reciever_details(self): print("Enter email receiver::") self.receiver_email input() another function written that particularly capturing details email various aspects which captured this function subject sending email body sending email get_email_details(self): print("Enter Subject sending email::") self.email_subject input() print("Enter Body sending email::") self.email_body input() this function used print details Android user like sender email receiver email email subject email body verify those details print_details(self): print("Sender Mail::") print(self.sender_email) print("Receiver Mail::") print(self.receiver_email) print("Email Subject::") print(self.email_subject) print("Email Body::") print(self.email_body) finally function written that actually used send email specified receiver email address specified input sender email address along with corresponding subject email body email there attachment that also sent with email send_email(self): message MIMEMultipart("alternative") message["Subject"] self.email_subject message["From"] self.sender_email message["To"] self.receiver_email text """\\{}""".format(self.email_body) html """\ <html> <body> <p>Hi,<br> this test email Nirnay!<br> </p> </body> </html> obj1 MIMEText(text, "plain") obj2 MIMEText(html, "html") HTML/plain-text parts MIMEMultipart message email client will render last part first message.attach(obj1) message.attach(obj2) context_obj ssl.create_default_context() with smtplib.SMTP_SSL("smtp.gmail.com", 465, context=context_obj) server: server.login(self.sender_email,self.sender_password) server.sendmail(self.sender_email, self.receiver_email, message.as_string()) print("Email sent successfully.") main function written that will used call these functions creating object above-written class main(): mailer MyMail() while(True): print("Please choose below-listed options::") print("1. enter details sender. [Sender email sender Password]") print("2. enter details receiver. [Receiver email]") print("3. enter sending email's subject.") print("4. enter body sending email.") print("5. send email.") print("6. verify entered details. [Sender email, Sender Password, Receiver email, Email Subject Email Body.") print("7. exit from code execution.") menu_choice input() menu_choice int(menu_choice) menu_choice mailer.get_sender_details() elif menu_choice mailer.get_reciever_details() elif menu_choice mailer.get_email_details() elif menu_choice mailer.get_email_details() elif menu_choice mailer.send_email() elif menu_choice mailer.print_details() elif menu_choice sys.exit() print("wanna proceed with program want exit program [Y/n]") continue_or_exit input() continue_or_exit continue_or_exit 'Y': pass elif continue_or_exit continue_or_exit 'N': sys.exit() __name__ '__main__': main() Output: [email protected]:~$ python3 mail1.py Please choose below-listed options:: enter details sender. [Sender email sender Password] enter details receiver. [Receiver email] enter sending email's subject. enter body sending email. send email. verify entered details. [Sender email, Sender Password, Receiver email, Email Subject Email Body. exit from code execution. Enter email sender:: [email protected] Enter Password sender:: [email protected] wanna proceed with program want exit program [Y/n] Please choose below-listed options:: enter details sender. [Sender email sender Password] enter details receiver. [Receiver email] enter sending email's subject. enter body sending email. send email. verify entered details. [Sender email, Sender Password, Receiver email, Email Subject Email Body. exit from code execution. Enter email receiver:: [email protected] wanna proceed with program want exit program [Y/n] Please choose below-listed options:: enter details sender. [Sender email sender Password] enter details receiver. [Receiver email] enter sending email's subject. enter body sending email. send email. verify entered details. [Sender email, Sender Password, Receiver email, Email Subject Email Body. exit from code execution. Enter Subject sending email:: Test EMail Sub Enter Body sending email:: message from Nirnay wanna proceed with program want exit program [Y/n] Please choose below-listed options:: enter details sender. [Sender email sender Password] enter details receiver. [Receiver email] enter sending email's subject. enter body sending email. send email. verify entered details. [Sender email, Sender Password, Receiver email, Email Subject Email Body. exit from code execution. Enter Subject sending email:: Test Email Subject Enter Body sending email:: message from Nirnay. wanna proceed with program want exit program [Y/n] Please choose below-listed options:: enter details sender. [Sender email sender Password] enter details receiver. [Receiver email] enter sending email's subject. enter body sending email. send email. verify entered details. [Sender email, Sender Password, Receiver email, Email Subject Email Body. exit from code execution. Sender Mail:: [email protected] Receiver Mail:: [email protected] Email Subject:: Test Email Subject Email Body:: message from Nirnay. wanna proceed with program want exit program [Y/n] Please choose below-listed options:: enter details sender. [Sender email sender Password] enter details receiver. [Receiver email] enter sending email's subject. enter body sending email. send email. verify entered details. [Sender email, Sender Password, Receiver email, Email Subject Email Body. exit from code execution. Email sent successfully. wanna proceed with program want exit program [Y/n] Please choose below-listed options:: enter details sender. [Sender email sender Password] enter details receiver. [Receiver email] enter sending email's subject. enter body sending email. send email. verify entered details. [Sender email, Sender Password, Receiver email, Email Subject Email Body. exit from code execution. Explanation: output above-written code, have executed program. After executing code, user prompted with seven different options representing seven different functionalities code. various functionalities that offered user medium multi-option menu entering details sender, which sender email, getting receiver's email whom email going sent, enter subject body email, last most important functionality that displayed sending email which details been entered. more option there print entered details like sender credentials from which mail will sent, receiver's email, subject body sending email; with help this option, user verify details entered, case something faulty found user easily correct simply adding that detail again. Eventually saving users from sending wrong data over email. after completing operations, code execution exited selecting last option that will exit program. Suppose want send attachment with python code. code same Code: import email, smtplib, from email import encoders from email.mime.base import MIMEBase from email.mime.text import MIMEText from email.mime.multipart import MIMEMultipart import class written that will used have functions that will used getting various details which required sending mail finally sending mail class MyMail: constructor written initialise required class variables value these class variables none __init__(self): self.sender_email None self.receiver_email None self.sender_password None self.email_subject None self.email_body None self.path_to_attachment None function written details sender various details that captured this function email address sender corresponding password associated with that entered email get_sender_details(self): print("Enter email sender::") self.sender_email input() print("Enter Password sender::") self.sender_password input() another function written that used retrieve receiver details various receiver details that captured this functions email receiver get_reciever_details(self): print("Enter email receiver::") self.receiver_email input() another function written that particularly capturing details email various aspects which captured this function subject sending email body sending email get_email_details(self): print("Enter Subject sending email::") self.email_subject input() print("Enter Body sending email::") self.email_body input() this function used attachment which will sent with email get_attachment(self): print("Enter path attachment sending email::") self.path_to_attachment input() this function used print details Android user like sender email receiver email email subject email body verify those details print_details(self): print("Sender Mail::") print(self.sender_email) print("Receiver Mail::") print(self.receiver_email) print("Email Subject::") print(self.email_subject) print("Email Body::") print(self.email_body) finally function written that actually used send email specified receiver email address specified input sender email address along with corresponding subject email body email there attachment that also sent with email send_email(self): message MIMEMultipart("alternative") message["Subject"] self.email_subject message["From"] self.sender_email message["To"] self.receiver_email text """\\{}""".format(self.email_body) html """\ <html> <body> <p>Hi,<br> this test email Nirnay!<br> </p> </body> </html> obbj1 MIMEText(text, "plain") objj2 MIMEText(html, "html") HTML/plain-text parts MIMEMultipart message email client will render last part first message.attach(objj1) message.attach(objj2) with open(self.path_to_attachment, "rb") attachment: file application/octet-stream Email client usually download this automatically attachment part MIMEBase("application", "octet-stream") part.set_payload(attachment.read()) encoders.encode_base64(part) header key/value pair attachment part part.add_header( "Content-Disposition", f"attachment; filename= {self.path_to_attachment}", attachment message convert message string message.attach(part) context111 ssl.create_default_context() with smtplib.SMTP_SSL("smtp.gmail.com", 465, context=context111) server: server.login(self.sender_email,self.sender_password) server.sendmail(self.sender_email, self.receiver_email, message.as_string()) print("Email sent successfully.") main function written that will used call these functions creating object above-written class main(): mailer MyMail() while(True): print("Please choose below-listed options::") print("1. enter details sender. [Sender email sender Password]") print("2. enter details receiver. [Receiver email]") print("3. enter Subject Body sending email.") print("4. enter attachment sending email.") print("5. send email.") print("6. verify entered details. [Sender email, Sender Password, Receiver email, Email Subject Email Body.") print("7. exit from code execution.") menu_choice input() menu_choice int(menu_choice) menu_choice mailer.get_sender_details() elif menu_choice mailer.get_reciever_details() elif menu_choice mailer.get_email_details() elif menu_choice mailer.get_attachment() elif menu_choice mailer.send_email() print("Email sent successfully.") elif menu_choice mailer.print_details() elif menu_choice sys.exit() print("wanna proceed with program want exit program [Y/n]") continue_or_exit input() continue_or_exit continue_or_exit 'Y': pass elif continue_or_exit continue_or_exit 'N': sys.exit() __name__ '__main__': main() Output: [email protected]:~$ python3 mail2.py Please choose below-listed options:: enter details sender. [Sender email sender Password] enter details receiver. [Receiver email] enter Subject Body sending email. enter attachment sending email. send email. verify entered details. [Sender email, Sender Password, Receiver email, Email Subject Email Body. exit from code execution. Enter email sender:: [email protected] Enter Password sender:: [email protected] wanna proceed with program want exit program [Y/n] Please choose below-listed options:: enter details sender. [Sender email sender Password] enter details receiver. [Receiver email] enter Subject Body sending email. enter attachment sending email. send email. verify entered details. [Sender email, Sender Password, Receiver email, Email Subject Email Body. exit from code execution. Enter email receiver:: [email protected] wanna proceed with program want exit program [Y/n] Please choose below-listed options:: enter details sender. [Sender email sender Password] enter details receiver. [Receiver email] enter Subject Body sending email. enter attachment sending email. send email. verify entered details. [Sender email, Sender Password, Receiver email, Email Subject Email Body. exit from code execution. Enter Subject sending email:: Test Email Enter Body sending email:: This body sending email Nirnay wanna proceed with program want exit program [Y/n] Please choose below-listed options:: enter details sender. [Sender email sender Password] enter details receiver. [Receiver email] enter Subject Body sending email. enter attachment sending email. send email. verify entered details. [Sender email, Sender Password, Receiver email, Email Subject Email Body. exit from code execution. Enter path attachment sending email:: file_to_attach.txt wanna proceed with program want exit program [Y/n] Please choose below-listed options:: enter details sender. [Sender email sender Password] enter details receiver. [Receiver email] enter Subject Body sending email. enter attachment sending email. send email. verify entered details. [Sender email, Sender Password, Receiver email, Email Subject Email Body. exit from code execution. Sender Mail:: [email protected] Receiver Mail:: [email protected] Email Subject:: Test Email Email Body:: This body sending email Nirnay wanna proceed with program want exit program [Y/n] Please choose below-listed options:: enter details sender. [Sender email sender Password] enter details receiver. [Receiver email] enter Subject Body sending email. enter attachment sending email. send email. verify entered details. [Sender email, Sender Password, Receiver email, Email Subject Email Body. exit from code execution. Email sent successfully. wanna proceed with program want exit program [Y/n] Please choose below-listed options:: enter details sender. [Sender email sender Password] enter details receiver. [Receiver email] enter Subject Body sending email. enter attachment sending email. send email. verify entered details. [Sender email, Sender Password, Receiver email, Email Subject Email Body. exit from code execution. Explanation: output above-written code, have executed program. After executing code, user prompted with seven different options representing seven different functionalities code. various functionalities that offered user medium multi-option menu entering details sender, which sender email, getting receiver's email whom email going sent, enter subject body email, additional option specify attachment that will associated with sending email last most important functionality that displayed sending email which details been entered. more option there print entered details like sender credentials from which mail will sent, receiver's email, subject body sending email; with help this option, user verify details entered, case something faulty found user easily correct simply adding that detail again. Eventually saving users from sending wrong data over email. after completing operations, code execution exited selecting last option that will exit program. Conclusion: this article, have understood email module have seen various case scenarios same. Next TopicEssential Recursion Programs Python prev next