next prev Memoization using Decorators Python this tutorial, will discuss advance concepts Python decorator. assume that, have basic understanding Python decorators. not, learn from Decorator Python tutorial. What Memoization? Before learning about memoization, let's have brief introduction Recursion recursion technique where function calls itself repeatedly till base case condition met. example calculation Fibonacci series, factorial, etc. creates problem with recursion tree; there chances that sub-problem that already solved being solved again, which leads overhead memory. overcome such error, memoization comes into play. Memoization programming technique which records intermediate results that used overlook repeated calculations makes fast execution program. This technique used optimize recursion based program with help decorators. Let's understand following example calculating factorial number using recursion. Example fact(num): return else: return fact(num-1) print(fact(5)) Output: same program implemented using memoization decorators. Example memory memoize_factDecorator(f): inner(num): memory: memory[num] f(num) return memory[num] return inner @memoize_factDecorator fact(num): return else: return fact(num-1) print(fact(5)) Explanation above code have defined memorize_factDecorator store intermediate result variable called memory. second method fact function calculate factorial. wrapped decorator. fact method access memory variables result. wrapped function equivalent below fact memorize_factorial(fact) When fact(5) called, recursive call begins addition storage intermediate results. Every time calculation needs done, checked result available memory. value available memory used, value calculated stored memory. this technique tree-based problems. Conclusion this tutorial, have explained Python advance concept decorator memoization. quite helpful recursion tree problems. reduces memory heads. Next TopicLearn Python Network Engineering: Step-by-Step Approach prev next