next prev Python Random module Python Random module built-in module generating random integers Python. These sort fake random numbers which possess true randomness. therefore this module generate random numbers, display random item list string, Generate Random Floats random.random() function gives float number that ranges from 1.0. There parameters required this function. random.random():- Returns second random floating point value within [0.0 returned. random.uniform(a, b):- Generates random floating point which random.expovariate(lambda):- Returns random value according exponential distribution. random.gauss(mu, sigma):- Returns random value according gaussian distribution. There other distributions also, such Gamma Distribution, Normal Distribution, etc. Code import random num=random.random() print(num) Output: 0.3232640977876686 Generate Random Integers random.randint() function generates random integer from range numbers supplied. Code import random random.randint(1, 500) print( Output: 215	 Generate Random Numbers within Defined Range random.randrange() function selects item randomly from given range defined start, stop, step parameters. default, start Likewise, step default. Code import random random.randrange(1, print( random.randrange(1, print( random.randrange(0, 101, print( Output: Select Random Elements random.choice() function selects item from non-empty series random. IndexError thrown when parameter empty series. Code import random random_s random.choice('Random Module') string print( random_s random_l random.choice([23, 765, 45]) list print( random_l random_s random.choice((12, 34)) print( random_s Output: Shuffle Elements Randomly general sequence, like integers floating-point series, group things like List Set. random module contains methods that randomization series. random.shuffle() function shuffles entries list random. Code a_list [34, random.shuffle( a_list print( a_list random.shuffle( a_list print( a_list Output: [23, 23] [65, Random Seed normally time system ensure that software delivers different output each time execute because pseudorandom synthesis dependent preceding number. result, employ seeds. specify seed have initial number using Python's random.seed() function. This seed number determines random number generator's outcome; therefore, stays same, outcome will continue same. Code import random random.seed(2) print('Generating random numbers: print([ random.randint(1, 300) range(6)]) Reseting seed value random.seed(2) will same numbers before print([random.randint(1, 300) range(6)]) Output: Generating random numbers: [29, 185, 158] [29, 185, 158] Various Functions Random Module Following list functions available random module. Function Description seed(a=None, version=2) This function creates random number. getstate() This method provides object reflecting generator's present state. Provide argument setstate() recover state. setstate(state) Providing state object resets function's state time getstate() invoked. getrandbits(k) This function provides Python integer having random bits. This important random number production algorithms like randrange(), which manage arbitrarily huge ranges. randrange(start, stop[, step]) From range, produces random integer. randint(a, Provides integer within random (both inclusive). ValueError thrown. choice(seq) Produce non-empty series item random. shuffle(seq) Change order. sample(population, Display list k-size unique entries from population series. random() This function creates random number. uniform(a, This method provides object reflecting generator's present state. Provide argument setstate() recover state. triangular(low, high, mode) Providing state object resets function's state time getstate() invoked. betavariate(alpha, beta) Beta distribution expovariate(lambd) Exponential distribution gammavariate(alpha, beta) Gamma distribution gauss(mu, sigma) Gaussian distribution lognormvariate(mu, sigma) normal distribution normalvariate(mu, sigma) Normal distribution vonmisesvariate(mu, kappa) Vonmises distribution paretovariate(alpha) Pareto distribution weibullvariate(alpha, beta) Weibull distribution learned about various methods that Python's random module provides with dealing with Integers, floating-point numbers, other sequences like Lists, tuples, etc. also looked seed affects pseudo random number pattern. Next TopicPython statistics module prev next