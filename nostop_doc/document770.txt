next prev Types Constant Python Importance Constant Python this tutorial, will learn about constant types they help improve code readability. unfamiliar, constants names representing values that don't change during program's execution. They most common fundamental concept programming. However, Python doesn't have dedicated syntax defining constants. general, Python constants variable that never changes. will have detailed discussion Python constant upcoming section. What Constants? Generally, constant term used Mathematics, value quantity that never changes. programming, constant refers name associated with value that never changes during programming execution. Programming constant different from other constants, consists things name associated value. name will describe what constant about, value concrete expression constant itself. Once define constant, only access value cannot change over time. However, modify value variable. real-life example speed light, number minutes hour, name project's root folder. Constant? programming languages, Constants allow protect from accidentally changing their value which cause hard-to-debug errors. also helpful make code more readable maintainable. Let's some advantages constant. Improved Readability helps improve readability code. example, easier read understand constant named MAX_SPEED than substantial speed value itself. Clear communication intent Most developers consider 3.14 constant. However, name will communicate intent more clearly. This practice will allow another developer understand code. Better Maintainability Constants allow same value throughout your code. Suppose want update constant's value; don't need change every instance. risk errors constant representing given value throughout program less error-prone. want change precision calculations, replacing value risky. Instead replacing create different constants different precision levels change code where needed. Thread-safe data storage constants thread-safe objects, meaning several threads simultaneously constant without risking losing data. User-Defined Constants need naming convention Python define constant Python. should write name capital letters with underscores separating words. Following example user-defined Python constants 3.14 MAX_SPEED DEFAULT_COLOR "\033[1;34m" WIDTH API_TOKEN "567496396372" BASE_URL "https://api.example.com" DEFAULT_TIMEOUT BUILTINS_METHODS ("sum", "max", "min", "abs") INSTALLED_APPS "django.contrib.admin", "django.contrib.auth", "django.contrib.contenttypes", have used same create variables Python. assume that Python constants just variables, only distinction that constant uses uppercase letters only. Using uppercase letters makes constant stand from variables useful preferred practice. Above discussed user-defined users; Python also provides several internal names that consider should treat constants. Important Constants Python this section, will learn about some internal constants which used make Python code more readable. Let's understand some important constants. Built-in Constants official documentation, True False listed first constant. These Python Boolean values instance int. True value False value Example True True False False isinstance(True, int) True isinstance(False, int) True int(True) int(False) True SyntaxError: cannot assign True True True True False False True Remember that True False names strict constants. other words, cannot reassign them, reassign them, will syntax error. These values singleton objects Python, meaning only instance exists. Internal Dunder Names Python also many internal dunder names that consider constants. There several these unique names, will learn about __name__ __file__ this section. __name__ attribute related given piece code. When importing module, Python internal __name__ string containing name module. new_file.py print(f"The type __name__ {type(__name__)}") print(f"The value __name__ {__name__}") command-line type following command python "import new_file" used execute small piece code Python command line. above example, imported new_file module, which displays some messages screen. Output type __name__ <class 'str'> value __name__ timezone that __name__ stores __main__ string, indicates that executable files directly Python program. other hand, __file__ attribute file that Python currently importing executing. __file__ attribute inside file, will path module itself. Let's following example Example print(f"The type __file__ {type(__file__)}") print(f"The value __file__ {__file__}") Output: type __file__ <class 'str'> value __file__ D:\Python Project\new_file.py also directly will same result. Example print(f"The type __file__ {type(__file__)}") print(f"The value __file__ {__file__}") Output: python new_file.py type __file__ <class 'str'> value __file__ timezone.py Useful String Math Constants There many valuable constants standard library. Some strictly connected specific modules, functions, classes; many generic, them several scenarios. below example, will math string-related modules math string, respectively. Let's understand following example Example import math math.pi 3.141592653589793 math.tau 6.283185307179586 math.nan math.inf math.sin(30) -0.9880316240928618 math.cos(60) -0.9524129804151563 math.pi 3.141592653589793 These constants will play vital role when write math-related code perform some specific computations. Let's understand following example Example import math class Sphere: __init__(self, radius): self.radius radius area(self): return math.pi self.radius**2 perimeter(self): return math.pi self.radius projected_volume(self): return 4/3 math.pi self.radius**3 __repr__(self): return f"{self.__class__.__name__}(radius={self.radius})" above code, have used math.pi instead custom constants. math-related constant provides more contexts program. advantage using math.pi constant that using older version Python, will 32-bit version above program modern version Python, will 64-bit version program will self-adapt concrete execution environment. string module also provides some useful built-in string constants. Below table name value each constant. Name Value ascii_lowercase Abcdefghijklmnopqrstuvwxyz ascii_uppercase ABCDEFGHIJKLMNOPQRSTUVWXYZ ascii_letters ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz digits 0123456789 hexdigits 0123456789abcdefABCDEF octdigits 01234567 these string-related constants regular expressions, processing natural language, with string processing, more. Type-Annotating Constants Since Python 3.8, typing module includes Final class that allows type-annotate constants. Final class define constants program, will static type error that mypy checker checks will show that cannot reassign Final name. Let's understand following example. Example from typing import Final MAX_Marks: Final[int] MAX_Students: Final[int] MAX_Marks Cannot assign final name "MAX_SPEED" mypy(error) specified constant variable with Final Class that indicated type error report error declared name reassigned. However, gets report type checker's error; Python does change value MAX_SPEED. Final doesn't prevent constant accidental reassignment runtime. String Constants discussed earlier section, Python doesn't support strict constants; just variables that never change. Therefore, Python community follows naming convention using uppercase letter identify constant variables. issue work large Python project with many programmers different levels. would good practice have mechanism that allows strict constants. know, Python dynamic language, there several ways make constants unchangeable. this section, will learn about some these ways. .__slots__ Attributes Python classes provide facility __slots__ attributes. slot special mechanism reduce size objects. concept memory optimization objects. __slots__ attribute class, won't able instance, because doesn't __dict__ attributes. Additionally, having .__dict__ attribute implies optimization terms memory consumption. Let's understand following example. Example Without using __slots__ attributes class NewClass(object): __init__(self, *args, **kwargs): self.a self.b __name__ "__main__": instance NewClass() print(instance.__dict__) Output {'a': 'b': Every object Python contains dynamic dictionary that allows adding attributes. Dictionaries consume lots memory, using __slots__ reduces wastage space memory. Let's another example. Example class ConstantsName: __slots__ 3.141592653589793 EULER_NUMBER 2.718281828459045 constant ConstantsName() print(constant.PI) print(constant.EULER_NUMBER) constant.PI 3.14 print(constant.PI) Output 3.141592653589793 2.718281828459045 Traceback (most recent call last): File "<string>", line <module> AttributeError: 'ConstantsName' object attribute 'PI' read-only above code, initialized class attributes with slots attributes. variable constant value, reassign variable, will error. @property Decorator also @property decorator create class that works namespace constants. just need define constants property without providing them with setter method. Let's understand following example. Example class ConstantsName: @property PI(self): return 3.141592653589793 @property EULER_NUMBER(self): return 2.718281828459045 constant ConstantsName() print(constant.PI) print(constant.EULER_NUMBER) constant.PI 3.14 print(constant.PI) Output 3.141592653589793 2.718281828459045 Traceback (most recent call last): File "<string>", line <module> AttributeError: can't attribute They just read-only properties, reassign, will AttributeError. namedtuple() Factory Function Python's collection module comes with factory function called namedtuple(). Using namedtuple() function, named fields notation access their items. know that tuples immutable, which means cannot modify existing named tuple object place. Let's understand following example. Example from collections import namedtuple ConstantsName namedtuple( "ConstantsName", ["PI", "EULER_NUMBER"] constant ConstantsName(3.141592653589793, 2.718281828459045) print(constant.PI) print(constant.EULER_NUMBER) constant.PI 3.14 print(constant.PI) Output 3.141592653589793 2.718281828459045 Traceback (most recent call last): File "<string>", line <module> AttributeError: can't attribute @dataclass Decorator name suggests, data class holds data, they consist methods, their primary goal. need @dataclass decorator create data classes. also create strict constants. @dataclass decorator takes frozen argument that allows mark data class immutable. advantages using @dataclass decorator, cannot modify instance attribute. Let's understand following example. Example from dataclasses import dataclass @dataclass(frozen=True) class ConstantsName: 3.141592653589793 EULER_NUMBER 2.718281828459045 constant ConstantsName() print(constant.PI) print(constant.EULER_NUMBER) constant.PI 3.14 print(constant.PI) Output 3.141592653589793 2.718281828459045 Traceback (most recent call last): File "<string>", line <module> File "<string>", line __setattr__ dataclasses.FrozenInstanceError: cannot assign field 'PI' Explanation above code, have imported @dataclass decorator. used this decorator ConstantsName make data class. frozen argument True make data class immutable. created instance data class, access constants cannot modify them. .__setattr__() Special Method Python allows special method called .__setattr__(). Using this method, customize attribute assignment process because Python automatically calls method every attribute assignment. Let's understand following example Example class ConstantsName: 3.141592653589793 EULER_NUMBER 2.718281828459045 __setattr__(self, name, value): raise AttributeError(f"can't reassign constant '{name}'") constant ConstantsName() print(constant.PI) print(constant.EULER_NUMBER) constant.PI 3.14 print(constant.PI) Output 3.141592653589793 2.718281828459045 Traceback (most recent call last): File "<string>", line <module> File "<string>", line __setattr__ AttributeError: can't reassign constant 'PI' __setattr__() method doesn't allow perform assignment operation class's attributes. reassign, just raise AttributeError. Conclusion Constants most used concept programming especially mathematical term. this tutorial, have learned about important concepts constants flavors. Python community uses uppercase letter name convention identify constants. However, have discussed some advance ways constants Python. have discussed improve code's readability, reusability maintainability with constants. mentioned apply various techniques make Python constants strictly constant. Next TopicWrite Python Program Sort Odd-Even sort even transposition Sort prev next