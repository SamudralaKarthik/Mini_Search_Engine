next prev Python Email.utils First, should understand what Python email package library managing email messages email package. expressly intended perform email message sending SMTP (RFC 2821), NNTP, other servers; those tasks performed modules like smtplib nntplib. What feature does majority office employment share? must frequently send emails majority them. Whether you're engineer, programmer, data scientist, probably have read answer emails daily. Despite fact that this activity doesn't advance career, disrupts productivity consumes vital time. email.utils module, there helpful tools available. Let's understand them one: 1.nutils.localtime(dt=None) aware datetime object, give back local time. Return current time call made without parameters. absence this, parameter should datetime instance, which transformed local time zone using system time zone database. presumed that local time naive (that dt.tzinfo None). isdst positive negative value this situation, localtime will first assume that summer time (for instance, Daylight Saving Time) effect given time. When isdst negative value, localtime makes effort determine whether summer time effect given time. It's version 3.3. 2.mutils.make_msgid(idstring=None, domain=None) returns string appropriate Message-ID header that complies with 2822. provided, optional idstring string that used increase message ilevel d's uniqueness. provided, optional domain displays msgid text following sign. local hostname used default. Although overriding this default typically unnecessary, there some situations when might like building distributed system that uses consistent domain name across multiple hosts. domain keyword added version 3.2. rest features found (Compat32) email API. There need directly utilise them with API, since parsing formatting they provide done automatically header parsing machinery API. utils.unquote(str) Return string that str's unquoted equivalent. Double quotes removed from they appear beginning. Likewise, angle brackets removed them both beginning end. utils.quote(str) Return format string with double quotes replaced backslash-double quotes backslashes replaced backslashes. utils.parseaddr(address) Parse address into real name email address components. address should value address-containing field, like Cc. Unless parse fails, which case 2-tuple returned, returns tuple containing that information. utils.formataddr(pair, charset='utf-8') function takes 2-tuple type (realname, email address) returns string value appropriate Cc header. This function opposite parseaddr(). second member pair returned unchanged first element pair false. realname contains non-ASCII characters, optional charset character will utilised 2047 encoding realname. could Charset implementation str. UTF-8 default. Version introduced encoding choice. utils.getaddresses(fieldvalues) list 2-tuples form returned parseaddr returned this method fieldvalues list header field values that Message might return. all. Here straightforward illustration that will reach message recipients,let's understand this example: Example import getaddress from email.utils module from email.utils import getaddresses from email.message import EmailMessage Open plain text file whose name textfile reading. with open("textfile.txt") Create text/plain message EmailMessage() msg.set_content(fp.read()) sender's email address msg['Subject'] f'The contents {fp}' msg['From'] "me" msg['To'] "java" msg['cc'] "tpoint" msg['resent-to'] "JAVA" msg['resent-cc'] "TPOINT" first msg.get_all('to', second msg.get_all('cc', resent_first msg.get_all('resent-to', resent_second msg.get_all('resent-cc', all_recipients getaddresses(first second resent_first resent_second) print(all_recipients) Output [('', 'java'), ('', 'tpoint'), ('', 'JAVA'), ('', 'TPOINT')] utils.formatdate(timeval=None, localtime=False, usegmt=False) returns date string 2822. floating point time value, such those accepted time.gmtime() time.localtime(), provided, optional timeval utilised; otherwise, current time used. Optional localtime flag that, when True, interprets timeval and, instead returning date UTC, returns that correctly accounts daylight savings time related local timezone. utilised default value False. optional usegmt flag, when True, generates date string with instead numeric -0000 timezone. some protocols, this required (such HTTP). Only when localtime False does this apply. False preset value. utils.format_datetime(dt, usegmt=False) Similar formatdate, with datetime instance input. datetime naive, presumed "UTC with information about originating timezone," standard -0000 used timezone. numerical timezone offset used datetime aware. text used place numeric timezone offset usegmt True timezone aware timezone with offset zero. This offers method creating HTTP date headers that adhere standards. utils.decode_rfc2231(s) Following 2231to decode string utils.encode_rfc2231(s, charset=None, language=None) string should encoded using 2231. provided, optional charset language specify character language use. neither provided, returned current state. string encoded using empty string language charset specified language not. utils.collapse_rfc2231_value(value, errors='replace', fallback_charset='us-ascii') 3-tuple comprising character set, language, value returned calling Message.get_param header argument that been encoded 2231 format. This converted unicode string collapse_rfc2231_value(). errors argument str's encode() method optional defaults "replace." Optional fallback charset, which defaults "us-ascii," specifies character event that Python unable recognise 2231 header. ease use, value supplied collapse rfc2231 value() should string returned unquoted tuple. utils.decode_params(params) parameters list decoded accordance with 2231. series 2-tuples called "params" components form (content-type, string-value). utils.mktime_tz(tuple) Create timestamp from 10-tuple supplied parsedate_tz() (seconds since Epoch). Assume local time timezone item tuple None. utils.parsedate(date) tries parse date accordance with 2822's guidelines. However, some mailers don't adhere that format exactly, thus parsedate() tries make educated guess these situations. string with 2822 date like "Mon, 1995 19:12:08 -0500," called date. Parsedate() provides 9-tuple that supplied straight time.mktime() successful parsing date; otherwise, None returned. NOTE: should noted that result tuple indexes cannot used. utils.parsedate_tz(date) performs same task parsedate() returns either None 10-tuple, last element which offset date's timezone from (the formal name Greenwich Mean Time), while first nine elements make tuple that supplied directly time.mktime(). final member tuple returned which stands UTC, input string timezone information. should noted that result tuple's indexes cannot used. utils.parsedate_to_datetime(date) alternative format datetime does same task parsedate() but, successful, provides datetime. date contains invalid value, such hour larger than time zone offset that between hours, ValueError raised. datetime will naive input date timezone -0000, date complies with RFCs, will represent time without mention message's true source timezone. datetime will aware datetime with corresponding timezone tzinfo input date other legitimate timezone offset. Conclusion this article, discussed email.utils module helpful tools that discussed above article. Next TopicPython Win32 Process prev next