next prev Attributes Meaning Python have been working with OOPS paradigm languages, should've heard word "attributes" quite often. There types attributes-class attributes instance attributes. This tutorial explains what attributes their types, along with examples. Python huge supporter OOPS paradigm, everything regarded object. create classes objects. Before understanding attributes, understanding classes objects foundation. simple sentence, class like blueprint that blueprint, create objects that class. Example: class student: sch_name "Delhi public school" place "Delhi" grade display(self): print("School:", self.sch_name) print("Place:", self.place) print("Grade:", self.grade) student() student() print(s1.sch_name) s1.display() print(s2.sch_name) s2.display() Output: Delhi public school School: Delhi public school Place: Delhi grade: Delhi public school School: Delhi public school Place: Delhi grade: Understanding: above example, created class called "student" with three variables function that prints values three variables. Every object create class access variables class. These variables called "Attributes", functions called methods (also referred functions). above program, created class's objects, s2, accessed attribute sch_name method display() printed values attributes. Types Attributes: Class Attributes: previous example, declared attributes that don't change, which means that object create class, values attributes remain same. Such attributes called "Class attributes". Example: class Address: University "Harvard" City "Cambridge" State "Massachusetts" Capital "Boston" Country "United States" student1 Address() print("Student1: Ryan") print(student1.University,"",student1.City,"",student1.State,"",student1.Capital,"",student1.Country) student2 Address() print("Student2: Tony") print(student2.University,"",student2.City,"",student2.State,"",student2.Capital,"",student2.Country) Output: Student1: Ryan Harvard Cambridge Massachusetts Boston United States Student2: Tony Harvard Cambridge Massachusetts Boston United States Observe that information class storing same values representing address university used same information objects-students. Instance Attributes: What wanted create class that allows every object have attributes? possible too. example, every object should hold information about individual student. Such class attributes that objects hold different values same attribute called "Instance attributes". need __init__ method self variable declare these attributes. __init__ method: constructor that allows objects have different values same attribute. executed soon object created class without manual call. self variable: like placeholder object created class inside __init__ method: Example: class Student_info: __init__(self, name, age, college): self.name name; self.age age; self.college college; student1 Student_info("Ryan", "NYU") student2 Student_info("Roy", "Duke") print("Student1: print(student1.name, student1.age, student1.college) print("Student2: print(student2.name, student2.age, student2.college) Output: Student1: Ryan Student1: Duke created objects, student1 student2, objects hold different information about individuals. What happens here that once object created, __init__ method invoked, object will replace self variable method: When created student1: __init__(student1, "Ryan", "NYU"): student1.name "Ryan"; student1.age student1.college "NYU"; When created student2: __init__(student2, "Roy", "Duke"): student2.name "Roy"; student2.age student2.college "Duke"; Both Instance attributes Class attributes play prominent role creating sound class. Here example using both class variables instance variables create class: class Address: University "Harvard" City "Cambridge" State "Massachusetts" Capital "Boston" Country "United States" __init__(self, name, age, CGPA): self.name name self.age self.CGPA CGPA student1 Address("Ryan", 9.2) print("Student1:") print(student1.name, student1.age, student1.CGPA) print(student1.University, student1.City, student1.State, student1.Capital, student1.Country) print("\nStudent2:") student2 Address("Roy", 9.1) print(student2.name, student2.age, student2.CGPA) print(student2.University, student2.City, student2.State, student2.Capital, student2.Country) Output: Student1: Ryan Harvard Cambridge Massachusetts Boston United States Student2: Harvard Cambridge Massachusetts Boston United States used class attributes store data common objects instance attributes storing distinct data every single object. Also, observe that: Class attributes will always outside __init__ method. Instance attributes defined inside __init__ method. Above Code: Class attributes: University City State Capital Country Instance attributes: name CGPA Function display attributes program: Python provides built-in functions that print attributes particular object: dir() returns both class attributes instance attributes object along with attributes ancestor classes object. vars() returns instance attributes object form dictionary. Example: print(vars(student1)) print() print(dir(student1)) Output: {'name': 'Ryan', 'age': 'CGPA': 9.2} ['CGPA', 'Capital', 'City', 'Country', 'State', 'University', '__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'age', 'name'] Next TopicData Structures Algorithms Python prev next