next prev Balancing Parentheses Python Balanced Parenthesis Problem Python this tutorial, will learn check balance given parentheses Python. basic interview question where asked find whether given string brackets) balanced not. commonly asked technical interview question product-based companies. string consist different types brackets such parenthesizes primarily used simplify expression computer science. parenthesis said balanced each left parenthesis right parenthesis. other words, parenthesis should pairs; otherwise, these balanced. Let's understand valid parenthesis problem solve this problem using Python. What Balance Parenthesis Problem? First string input containing characters (', ')', '{', '}', '[', ']', check given string valid not. input string valid follows below constraints left bracket must have corresponding right bracket. open bracket must closed correct order. Let's understand approach solve this problem. Check Valid Parenthesis solve this problem using below methods. Approach Using brute force approach brute force algorithm, conditional statement, recursion, loop match parenthesis. parentheses balanced, returns true otherwise false. Let's following snippet code. Code paraCheck( while True: '()' seq.replace '()' elif '{}' seq.replace '{}' elif '[]' seq.replace '[]' else return '{[()]}' print(f'Is {seq} valid {paraCheck(seq)}') seq1 '{[()]}{]{}}' print(f'Is {seq1} valid {paraCheck (seq1)}') Output: {[()]}} valid False {[()]}{]{}} valid False Explanation above code, have used while loop check given sequence. while loop will executed until given string become empty element present. First, checked brackets were present, then replaced with empty string, checked bracket replaced with empty string, same operation with other brackets. there pair present, then returns True otherwise False. Let's solve this problem with different approach. Approach Using loop this program, will loop counter value check whether given string parenthesis valid not. Let's understand following code. Example checkBalance(str1): count= ans=False str1: "{" "[": count elif "}" "]": count-= count return count==0: return return str1=input("Enter string brackets: print("Given string balanced :",checkBalance(str1)) Output: Enter string brackets: {[()]} Given string balanced True Enter string brackets: {[()]}] Given string balanced False Explanation above code, have initialized count variable with zero. condition, there open brackets given string, increase value one, there closing brackets corresponding open bracket, decrease value one. Finally, checked count's value equal zero return True otherwise, False. Approach Using Stack stack linear data structure that stores data LIFO (Last First Out) manner. traverse string push open brackets inside stack. keep doing this process until opening brackets pushed inside stack move pointer forward. When pointer reaches closing bracket, check stack corresponding opening bracket. matches opening brackets from stack, keep repeating until pointer visits each closing bracket. elements popped from bracket, means given string contains valid parenthesis, there single bracket left bracket, then given string balanced. Example checkBalance(expr): stack char expr: char ["(", "{", "["]: stack.append(char) else: Here check current character opening bracket, then must closing. stack cannot empty this point. stack: return False curr_char stack.pop() curr_char '(': char ")": return False curr_char '{': char "}": return False curr_char '[': char "]": return False Here check empty stack stack: return False return True expr "{[()]}" checkBalance(expr): print("The given string balanced") else: print("The given string balanced") Output: given string balanced Time Complexity time complexity checking parenthesis bracket optimal O(n). Here total number brackets string. searching brackets given string will linear every time since space complexity 0(n) need stack size store character expression. Conclusion Python brackets primarily used define blocks play essential role other programming languages. Python, they used define dictionaries, tuples, set, list, much other data structure. interviewer asks this problem test candidate's knowledge problem-solving. this tutorial, have discussed three important approaches check whether given string valid parenthesis. also implemented solution using Python code. highly recommended practice such questions look high-paying product-based company. Next TopicHow Provide Multiple Constructors Python Classes prev next