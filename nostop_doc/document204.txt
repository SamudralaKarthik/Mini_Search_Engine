next prev NamedTuple Python Python, "special" sort tuple named "named tuple." Python beginners frequently perplexed particularly when must implement Because NamedTuple tuple, perform functions that tuple can. though, more than simple Python tuple. other computer languages, just with C++, much more similar "class." It's subtype tuple with specified fields defined length built programmatically specifications. This tutorial will explain Python NamedTuples show them when must utilize them. What Python Tuple? believe should revisit tuples Python before proceeding. tuple Python container that store many values. Consider following case. Code numbers (34, see, parenthesis define Indexes used access elements. (Keep mind that indexing Python begins zero.) Code numbers[1] Output: numbers[1] Python tuple separated fact that cannot modify elements, i.e., elements tuple immutable. Python NamedTuple Syntax must first import NamedTuple from Python's built-in module called collections, shown: from collections import namedtuple following basic syntax constructing NamedTuple: namedtuple(Name,[Names Values]) Name parameter title want give NamedTuple, [Names Values] placeholder list containing names different values attributes. Python NamedTuple Example first step, previously said, import NamedTuple. from collections import namedtuple syntax from preceding part build NamedTuple: Student namedtuple("Student",["Name","Class","Age","Subject","Marks"]) this example, choose call NamedTuple Student mention names values, "Name", "Class", "Age", "Subject", "Marks" list. have created first NamedTuple Student. Now, create house Student1 with required specifications using Student follows: Studnet1 Student("Itika", "English", 79) Only specific values content that labels fields [Names Values] must take required. make entry student, Student2, copy values paste them into fields variable. Studnet2 Student("Arshia", "Maths", will that Student blueprint take record students want without having call labels fields each time. Values NamedTuple Using Notation method obtain values NamedTuple instances Student1 Student2. following syntax: <name object>.<name field> following code sample demonstrates this: Code print (Student1.Age) print (Student1.Class) print (Student1.Subject) print (Student1.Marks) print (Student1.Name) Output: "English" "Itika" Likewise, retrieve variables related NamedTuple Student2 using Student2.Age, Student2.Class, Accessing Methods NamedTuple retrieve values from NamedTuple using indices, keywords, getattr() function. NamedTuple's field values strictly ordered. result, indices find them. field names converted attributes NamedTuple. result, getattr() used retrieve data from that field. Code import collections #create employee NamedTuple Participant collections.namedtuple('Participant', ['Name', 'Age', 'Country']) #Adding participants Participant('Itika', '21', 'India') Participant('Arshia', '19', 'Australia') #Accessing items using index print( 'The name country first participant are: p1[0] p1[2]) #Accessing items using name field print( 'The name country second participant are: p2.Name p2.Country) #Accessing items using method: getattr() print( 'The participant are: getattr(p1, 'Age') getattr(p2, 'Age')) Output: name country first participant are: Itika India name country second participant are: Arshia Australia participant are: Conversion Procedures NamedTuple Different collections converted NamedTuple using techniques. also _make() function transform list, tuple, other iterable objects into NamedTuple instance. also convert dictionary data type object NamedTuple collection. operative required this transformation. OrderedDict datatype item, NamedTuple yield items with keys. call _asdict() function convert OrderedDict. Code import collections #create employee NamedTuple Participant collections.namedtuple('Participant', ['Name', 'Age', 'Country']) #List Participants list_ ['Itika', '21', 'India'] Participant._make(list_) print(p1) #Dict convert Employee dict_ {'Name':'Arshia', 'Age' '19', 'Country' 'Australia'} Participant(**dict_) print(p2) #Displaying namedtuple dictionary participant_dict p1._asdict() print(participant_dict) Output: Participant(Name='Itika', Age='21', Country='India') Participant(Name='Arshia', Age='19', Country='Australia') {'Name': 'Itika', 'Age': '21', 'Country': 'India'} More Operations NamedTuple Other methods, such _fields() _replace, available. determine which fields NamedTuple calling _fields() function. _replace() function used swap value another. Code import collections #create employee NamedTuple Participant collections.namedtuple('Participant', ['Name', 'Age', 'Country']) #List Participants Participant('Itika', '21', 'India') print(p1) print('The fields Participant: str(p1._fields)) #updating country participant p1._replace(Country 'Germany') print(p1) Output: Participant(Name='Itika', Age='21', Country='India') fields Participant: ('Name', 'Age', 'Country') Participant(Name='Itika', Age='21', Country='Germany') Does Python's NamedTuple Work? Let's look what extra accomplish with NamedTuple Python. NamedTuple Python Immutable. NamedTuple Python cannot modified, much like ordinary version. unable alter characteristics. We'll attempt modifying characteristics tuple name 'Student' demonstrate this. Code from collections import namedtuple Student namedtuple("Student",["Name","Class","Age","Subject","Marks"]) Student1 Student("Arshia", "Maths", Student1.Class Output: AttributeError Traceback (most recent call last) Input [41], Student namedtuple("Student",["Name","Class","Age","Subject","Marks"]) Student1 Student("Arshia", "Maths", ----> Student1.Class AttributeError: can't attribute seen, throws AttributeError. result, infer that NamedTuple immutable. Creating Python Dictionary from Python NamedTuple Python, NamedTuple similar dictionary, transform into Code from collections import namedtuple Student namedtuple("Student",["Name","Class","Age","Subject","Marks"]) Student1 Student("Arshia", "Maths", print Student1._asdict() Output: {'Name': 'Arshia', 'Class': 'Age': 'Subject': 'Maths', 'Marks': 93} utilize the. asdict() method this. This also produces Python OrderedDict. NamedTuple with Default Values named tuple class configured with default parameters same that initial values attributes regular class. defaults assigned rightmost attributes since fields having default value should appear after every field without default. Let's redefine Student class with just default entry. Code from collections import namedtuple Student namedtuple("Student", ["Name","Class","Age","Subject","Marks"], defaults [100]) Student1 Student("Arshia", "Maths") print Student1 Output: Student(Name='Arshia', Class=12, Age=17, Subject='Maths', Marks=100) default figure will applied marks, which rightmost field declaration create NamedTuple with just value. Will default value applied expressly specify field Age? Code from collections import namedtuple Student namedtuple("Student", ["Name","Class","Age","Subject","Marks"], defaults [100]) Student1 Student("Arshia", "Maths") Student1 Student(Age print Student1 Output: TypeError: Student.__new__() missing required positional arguments: 'Name', 'Class', 'Subject' answer NamedTuple, ordering fields very rigid. Even expressly declare anything, default values must rightmost prevent ambiguity potential difficulties. Benefits Python Namedtuple course, will NamedTuple they don't advantages. here's what we've got: Unlike standard tuple, NamedTuple Python retrieve variables their titles. Code from collections import namedtuple Student namedtuple("Student", ["Name","Class","Age","Subject","Marks"], defaults [100]) Student1 Student("Arshia", "Maths") print Student1.Age Output: Because doesn't include per-instance dictionaries, Python NamedTuple efficient memory just conventional tuple. also quicker than dictionary because this. Conclusion learned NamedTuples allow combine benefits both tuples dictionaries, build NamedTuples, them this tutorial. retrieve values NamedTuples using notation Python, they operate reader acquainted with Python's OOP, they will that this identical Python classes function. class attributes blueprint creating many more objects instances, each with attribute values. increase clarity code, however, defining class providing essential characteristics typically excessive, it's much faster construct NamedTuples instead. Next TopicOrderedDict Python prev next