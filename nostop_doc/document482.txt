next prev Process Python Element Tree Library this tutorial, will learn parse using Python, modifying populating files with Python ElementTree package. understand data, will also learn about XPath expression trees. Let's have brief introduction XML. familiar with concept, skip this section start from next section. What XML? abbreviation name "Extensible Markup Language". used understand data dynamically framework. primarily focused creating pages where data specific structure. page created using known document. generates tree-like structure that straightforward supports hierarchy. Let's understand some important properties XML. documents have sections known elements enclosed within beginning ending tags. characters between start ending element's content. element consist markup, including other elements, "child elements". top-level element known root that other documents. start-tag empty elements contain name-value pair known Attributes. Below sample structure file. <?xml version="1.0"?> <catalog> <book id="bk101"> <author>Gambardella, Matthew</author> <title>XML Developer's Guide</title> <genre>Computer</genre> <price>44.95</price> <publish_date>2000-10-01</publish_date> <description>An in-depth look creating applications with XML.</description> </book> <book id="bk102"> <author>Ralls, Kim</author> <title>Midnight Rain</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2000-12-16</publish_date> <description>A former architect battles corporate zombies, evil sorceress, childhood become queen world.</description> </book> <book id="bk103"> <author>Corets, Eva</author> <title>Maeve Ascendant</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2000-11-17</publish_date> <description>After collapse nanotechnology society England, young survivors foundation society.</description> </book> <book id="bk104"> <author>Corets, Eva</author> <title>Oberon's Legacy</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2001-03-10</publish_date> <description>In post-apocalypse England, mysterious agent known only Oberon helps create life inhabitants London. Sequel Maeve Ascendant.</description> </book> <book id="bk105"> <author>Corets, Eva</author> <title>The Sundered Grail</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2001-09-10</publish_date> <description>The daughters Maeve, half-sisters, battle another control England. Sequel Oberon's Legacy.</description> </book> <book id="bk106"> <author>Randall, Cynthia</author> <title>Lover Birds</title> <genre>Romance</genre> <price>4.95</price> <publish_date>2000-09-02</publish_date> <description>When Carla meets Paul ornithology conference, tempers feathers ruffled.</description> </book> <book id="bk107"> <author>Thurman, Paula</author> <title>Splish Splash</title> <genre>Romance</genre> <price>4.95</price> <publish_date>2000-11-02</publish_date> <description>A deep diver finds true love twenty thousand leagues beneath sea.</description> </book> <book id="bk108"> <author>Knorr, Stefan</author> <title>Creepy Crawlies</title> <genre>Horror</genre> <price>4.95</price> <publish_date>2000-12-06</publish_date> <description>An anthology horror stories about roaches, centipedes, scorpions other insects.</description> </book> <book id="bk109"> <author>Kress, Peter</author> <title>Paradox Lost</title> <genre>Science Fiction</genre> <price>6.95</price> <publish_date>2000-11-02</publish_date> <description>After inadvertant trip through Heisenberg Uncertainty Device, James Salway discovers problems being quantum.</description> </book> </catalog> above sample file <catlog> single root element, that contain other elements such <book_id> <title>. child elements elements inside <catlog> that they nested. <book> element contains multiple "attributes" such author, title, etc. Note child elements contain their child elements, also known "sub-child" element. Now, let's move ElementTree library. What ElementTree? tree structure allows makes modification, navigations, removal simple manner. Python comes with ElementTree library that provides several functions read manipulate XMLs. used parse (read information from file spit into pieces). Below table representation data structure. Property Description represents data being stored. basically string. Attributes contains number attributes stored dictionaries Text String text string consisting information that needs displayed. Tail String also have tail strings necessary Child Elements consists number child elements stored sequences ElementTree module, need import into program below. import xml.etree.ElementTree Parsing Data primary objective this tutorial read understand file using Python. There many book details sample file, data messed. Anybody enter data their into file, leading inconsistency data. Let's following example. Example import xml.etree.ElementTree tree ET.parse('book.xml') root tree.getroot() print(root) Output: <Element 'catalog' 0x000001FAD52C44A0> have initialized tree above code printed root object. Now, print each part tree understand tree structure easily. discussed earlier, every part tree contains that determines element. Elements contain attributes that play significant role validating values entered that tag. Let's print root XML. print(root.tag) Output: catalog observe file level, this rooted collection tag. Let's root's attributes. print("Attributes are:",root.attrib) Output: Attributes are: that, there attributes root. Parsing Using Loop iterate over sub-elements children root using loop. Let's understand following example. Example import xml.etree.ElementTree tree ET.parse('book.xml') root tree.getroot() root: print(ch.tag, ch.attrib) Output: Iterating root using loop book {'id': 'bk101'} book {'id': 'bk102'} book {'id': 'bk103'} book {'id': 'bk104'} book {'id': 'bk105'} book {'id': 'bk106'} book {'id': 'bk107'} book {'id': 'bk108'} book {'id': 'bk109'} that, book attributes children root catalog. attribute designated book attribute. There various books from different id's. quite helpful information elements entire tree. root.iter() method loop, which returns number element have. However, doesn't show attributes level tree. Example import xml.etree.ElementTree tree ET.parse('book.xml') root tree.getroot() print("Iterating root using loop:") tags [elem.tag elem root.iter()] print(tags) Output: ['catalog', 'book', 'author', 'title', 'genre', 'price', 'publish_date', 'description', 'book', 'author', 'title', 'genre', 'price', 'publish_date', 'description', 'book', 'author', 'title', 'genre', 'price', 'publish_date', 'description', 'book', 'author', 'title', 'genre', 'price', 'publish_date', 'description', 'book', 'author', 'title', 'genre', 'price', 'publish_date', 'description', 'book', 'author', 'title', 'genre', 'price', 'publish_date', 'description', 'book', 'author', 'title', 'genre', 'price', 'publish_date', 'description', 'book', 'author', 'title', 'genre', 'price', 'publish_date', 'description', 'book', 'author', 'title', 'genre', 'price', 'publish_date', 'description'] Since ElementTree powerful library, print whole document using .tostring() method. need pass root into this method with encoding decoding document. XMLs, uses 'utf98'. Let's understand following code snippet. Example print(ET.tostring(root, encoding='utf8').decode('utf8')) Output: <?xml version='1.0' encoding='utf8'?> <catalog> <book id="bk101"> <author>Gambardella, Matthew</author> <title>XML Developer's Guide</title> <genre>Computer</genre> <price>44.95</price> <publish_date>2000-10-01</publish_date> <description>An in-depth look creating applications with XML.</description> </book> <book id="bk102"> <author>Ralls, Kim</author> <title>Midnight Rain</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2000-12-16</publish_date> <description>A former architect battles corporate zombies, evil sorceress, childhood become queen world.</description> </book> <book id="bk103"> <author>Corets, Eva</author> <title>Maeve Ascendant</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2000-11-17</publish_date> <description>After collapse nanotechnology society England, young survivors foundation society.</description> </book> <book id="bk104"> <author>Corets, Eva</author> <title>Oberon's Legacy</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2001-03-10</publish_date> <description>In post-apocalypse England, mysterious agent known only Oberon helps create life inhabitants London. Sequel Maeve Ascendant.</description> </book> <book id="bk105"> <author>Corets, Eva</author> <title>The Sundered Grail</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2001-09-10</publish_date> <description>The daughters Maeve, half-sisters, battle another control England. Sequel Oberon's Legacy.</description> </book> <book id="bk106"> <author>Randall, Cynthia</author> <title>Lover Birds</title> <genre>Romance</genre> <price>4.95</price> <publish_date>2000-09-02</publish_date> <description>When Carla meets Paul ornithology conference, tempers feathers ruffled.</description> </book> <book id="bk107"> <author>Thurman, Paula</author> <title>Splish Splash</title> <genre>Romance</genre> <price>4.95</price> <publish_date>2000-11-02</publish_date> <description>A deep diver finds true love twenty thousand leagues beneath sea.</description> </book> <book id="bk108"> <author>Knorr, Stefan</author> <title>Creepy Crawlies</title> <genre>Horror</genre> <price>4.95</price> <publish_date>2000-12-06</publish_date> <description>An anthology horror stories about roaches, centipedes, scorpions other insects.</description> </book> <book id="bk109"> <author>Kress, Peter</author> <title>Paradox Lost</title> <genre>Science Fiction</genre> <price>6.95</price> <publish_date>2000-11-02</publish_date> <description>After inadvertant trip through Heisenberg Uncertainty Device, James Salway discovers problems being quantum.</description> </book> </catalog> root.iter() method helps find particular interest elements. This method will give subelements under root matching specified element. Let's following code. Example book root.iter('book'): print(book.attrib) Output: {'id': 'bk101'} {'id': 'bk102'} {'id': 'bk103'} {'id': 'bk104'} {'id': 'bk105'} {'id': 'bk106'} {'id': 'bk107'} {'id': 'bk108'} {'id': 'bk109'} XPath Expressions Sometime, elements have attributes, only have text content. .text attribute print text content. Let's understand following example. Example import xml.etree.ElementTree tree ET.parse('book.xml') root tree.getroot() print("Desctiption Values:") description root.iter('description'): print(description.text) Output: in-depth look creating applications with XML. former architect battles corporate zombies, evil sorceress, childhood become queen world. After collapse nanotechnology society England, young survivors foundation society. post-apocalypse England, mysterious agent known only Oberon helps create life inhabitants London. Sequel Maeve Ascendant. daughters Maeve, half-sisters, Oberon's Legacy. When Carla meets Paul ornithology conference, tempers feathers ruffled. deep diver finds true love twenty thousand leagues beneath sea. anthology horror stories about roaches, centipedes, scorpions other insects. After inadvertant trip through Heisenberg Uncertainty Device, James Salway discovers problems being quantum. (Django) D:\Python Project> "C:/Users/DEVANSH SHARMA/.virtualenvs/Django-ExvyqL3O/Scripts/python.exe" "d:/Python Project/sellshares.py" Desctiption Values: in-depth look creating applications with XML. former architect battles corporate zombies, evil sorceress, childhood become queen world. After collapse nanotechnology society England, young survivors foundation society. post-apocalypse England, mysterious agent known only Oberon helps create life inhabitants London. Sequel Maeve Ascendant. daughters Maeve, half-sisters, battle another control England. Sequel Oberon's Legacy. When Carla meets Paul ornithology conference, tempers feathers ruffled. deep diver finds true love twenty thousand leagues beneath sea. anthology horror stories about roaches, centipedes, scorpions other insects. After inadvertant trip through Heisenberg Uncertainty Device, James Salway discovers problems being quantum. Using .text attribute, attribute's content. Example print("Title Values:") title root.iter('title'): print(title.text) Output: Title Values: Developer's Guide Midnight Rain Maeve Ascendant Oberon's Legacy Sundered Grail Lover Birds Splish Splash Creepy Crawlies Paradox Lost This method printing files recommended. However, XPath most used recommended way. stands Path language query language used search through quickly easily. path-like syntax identify navigate nodes document. ElementTree comes with findall() method that traverses immediate children referenced element. Let's understand following example. Example import xml.etree.ElementTree tree ET.parse('book.xml') root tree.getroot() root.findall("./book/[price='5.95']"): print(val.attrib) Output: {'id': 'bk102'} {'id': 'bk103'} {'id': 'bk104'} {'id': 'bk105'} There three books whose prices equal 5.95. This method effective fast find specific result large file. Now, find books whose genre Romance. Example root.findall("./book/[genre='Romance']"): print(val.attrib) Output: {'id': 'bk106'} {'id': 'bk107'} Modifying modify file according requirement. Let's have look below example. Example Printing title books again title root.iter('title'): print(title.text) Output: Developer's Guide Midnight Rain Maeve Ascendant Oberon's Legacy Sundered Grail Lover Birds Splish Splash Creepy Crawlies Paradox Lost will replace 'Midnight Rain' title Alchemist. mod_title root.find("./book/[title='Midnight Rain']") print(mod_title) mod_title.attrib["title"] "The Alchemist" print(mod_title.attrib) Output: <Element 'book' 0x0000024822762770> {'id': 'bk102', 'title': 'The Alchemist'} Once modify file, will write this change back XML. Let's understand following example. Example tree.write("book.xml") tree ET.parse('book.xml') root tree.getroot() title root.iter('title'): print(title.attrib) Output: Developer's Guide Alchemist Maeve Ascendant Oberon's Legacy Sundered Grail Lover Birds Splish Splash Creepy Crawlies Paradox Lost Example description root.iter('description'): new_desc str(description.text)+'This author view' description.text str(new_desc) description.set('updated', 'yes') tree.write('book.xml') Output: <catalog> <book id="bk101"> <author>Gambardella, Matthew</author> <title>XML Developer's Guide</title> <genre>Computer</genre> <price>44.95</price> <publish_date>2000-10-01</publish_date> <description>An in-depth look creating applications with XML.</description> </book> <book id="bk102"> <author>Ralls, Kim</author> <title>Midnight Rain</title> <genre>Fantasy</genre> <price>5.95</price> <publish_date>2000-12-16</publish_date> <description>A former architect battles corporate zombies, evil sorceress, childhood become queen world.</description> </book> above code will description book.xml file. have taken only books showing output will reflected whole file data. Conclusion this tutorial, have explained important concepts. file follows tree structure built tags, they designate what values should defined there. Smart structuring helps read write easily. Using opening closing brackets, tags represent parent children relationship. Attributes further describe validate allow Boolean labels. discussed tutorial, ElementTree powerful Python library that allows parse navigate document. This library breaks down document tree structure that provides straightforward work with document. this library project parse document. Next TopicBisect Algorithm Functions Python prev next