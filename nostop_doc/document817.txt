next prev Digital clock using PyQt5 Python this post, we'll make digital clock using PyQt5, which essentially displays time 24-hour format. will focussing making that will show current time HH:MM:SS format opening window. following must done order make digital clock Make vertical arrangement Create label display current time, place layout, centre Make QTimer object. Include action such that QTimer object's action function invoked once every second. Obtain current time display using label inside action function. Walking through code Firstly, will import libraries required program, that include QtWidgets, QtGui, QtCore sys. import required modules import from PyQt5.QtWidgets import QApplication, QWidget from PyQt5.QtWidgets import QVBoxLayout, QLabel from PyQt5.QtGui import QFont from PyQt5.QtCore import QTimer, QTime, Next, will create class initialize window start setting geometry, adding fonts, creating labels, setting alignment displaying widgets. class Window(QWidget): 	def __init__(self): 		super().__init__() geometry main window created 		self.setGeometry(100, 100, 800, 400) create open vertical layout /display 		outline QVBoxLayout() create object font display 		fonts QFont('Arial', 120, QFont.Bold) create label object 		self.label QLabel() alignment label centre 		self.label.setAlignment(Qt.AlignCenter) font display 		self.label.setFont(fonts) inserting label created layout 		outline.addWidget(self.label) Next, will create layout window. Then, will create timer clock timer, functionality getting updated after every second call function linked layout window created 		self.setLayout(layout) create timer clock object 		timerClock QTimer(self) action timer clock 		timerClock.timeout.connect(self.displayTime) updating timer clock after every second 		timerClock.start(1000) Next, will create function that contains present time displayed, time label updated text display field. func called timer 	def displayTime(self): present time 		present_time QTime.currentTime() convert QTime object into string 		time_label present_time.toString('hh:mm:ss') display text label 		self.label.setText(time_label) Finally, will create application instance window. Then, instance created will displayed program will called execute start application. creating pyqt5 application Base QApplication(sys.argv) creating instance created Window window Window() displaying present widgets window.show() starting application App.exit(Base.exec_()) Complete code Python program create digital clock using PyQt5 import required modules import from PyQt5.QtWidgets import QApplication, QWidget from PyQt5.QtWidgets import QVBoxLayout, QLabel from PyQt5.QtGui import QFont from PyQt5.QtCore import QTimer, QTime, class Window(QWidget): 	def __init__(self): 		super().__init__() geometry main window created 		self.setGeometry(100, 100, 800, 400) create open vertical layout /display 		outline QVBoxLayout() create object font display 		fonts QFont('Arial', 120, QFont.Bold) create label object 		self.label QLabel() alignment label centre 		self.label.setAlignment(Qt.AlignCenter) font display 		self.label.setFont(fonts) inserting label created layout 		outline.addWidget(self.label) layout window created 		self.setLayout(layout) create timer clock object 		timerClock QTimer(self) action timer clock 		timerClock.timeout.connect(self.displayTime) updating timer clock after every second 		timerClock.start(1000) func called timer 	def displayTime(self): present time 		present_time QTime.currentTime() convert QTime object into string 		time_label present_time.toString('hh:mm:ss') display text label 		self.label.setText(time_label) creating pyqt5 application Base QApplication(sys.argv) creating instance created Window window Window() displaying present widgets window.show() starting application App.exit(Base.exec_()) Output: output above mentioned code attached below screenshot, Next TopicCountdown Timer using PyQt5 Python prev next