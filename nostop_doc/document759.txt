next prev Topology Sorting Python this tutorial, will learn about important applications Depth-first Search. will understand concept topology sorting, works implements using Python programming language. Lastly, will learn time complexity algorithm application topology sort. Let's have introduction topology sorting. What Topology Sorting? Topology sort important applications graph used solve many real-life problems. algorithm which takes direct acyclic graph returns sequence nodes. Every node will appear before other nodes that points direct acyclic graph kind graph that directed edge between node other without creating cycle. remember that topology sorting won't work graph directed acyclic. ordering nodes array called topological ordering. Suppose have tasks each task dependent others. want schedule tasks such that dependency relation should violated. task that comes later chain tasks always performed only after tasks before finished. Topology sorting graph helps maintain this kind order. Every graph have more than topological sorting possible. depends in-degree node graph. This algorithm starts from in-degree node with incoming edges. Algorithm Below algorithm topological sort. First step identify node that in-degree incoming edges) select that node source node graph. delete source node that zero in-degree associated edges. deleted vertex will added result array. Update in-degree adjacent nodes after deleting outgoing edges. above steps will repeated until graph empty. result array that will process known topological ordering directed graph. some node left they have incoming edges, that mean graph acyclic. given graph acyclic, topological ordering doesn't exist. Python Code Topological Sort from collections import defaultdict class Graph: __init__(self,n): self.graph defaultdict(list) self.N addEdge(self,m,n): self.graph[m].append(n) sortUtil(self,n,visited,stack): visited[n] True element self.graph[n]: visited[element] False: self.sortUtil(element,visited,stack) stack.insert(0,n) topologicalSort(self): visited [False]*self.N stack element range(self.N): visited[element] False: self.sortUtil(element,visited,stack) print(stack) graph Graph(5) graph.addEdge(0,1) graph.addEdge(0,3) graph.addEdge(1,2) graph.addEdge(2,3) graph.addEdge(2,4) graph.addEdge(3,4) print("The Topological Sort Graph graph.topologicalSort() Output: Topological Sort Graph Topological Sort Time Complexity time complexity topology sorting O(M +N) where number edges graph number nodes graph. Application Topology sorting provides many types real-life solution used course scheduling problems schedule jobs. used dependency resolution. very beneficial find sentence ordering very fewer efforts. helpful identify there exists cycle graph not. used ordering cell evaluation while recomputing formula values excel spreadsheet. Topological sort helpful find deadlock condition operating system. Conclusion This tutorial included concept Topological sorting algorithm implementation. Topological sorting importance real life application. plays essential role while exploring working trees graphs. Topological sort makes process easier efficient hence very much recommended clearly understand Next TopicTqdm Integration with Pandas prev next