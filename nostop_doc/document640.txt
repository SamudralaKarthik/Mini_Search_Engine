next prev Escape Sequences Python have been programming some time now, must've worked with strings. would have printed about lakh strings using print statement, solved thousands errors. here question, "did ever insert double quote inside string enclosed double quotes?" ever print single quote inside character enclosed single quotes?". both these cases, error will raised because Python will search second quote once finds quote. found, raises syntax error. print statement like, Hi"Hello? Answer "double-quote inside string must escaped Python." achieve this, have special characters Python called Escape Sequences. This article discusses concept escape sequences, their uses, their importance with examples. Definition: name suggests, escape sequence sequence characters with special meaning when used inside string character. Syntax: characters need preceded backslash character Example: \n, etc. characters that can't insert into string called Illegal characters, these characters modify string. function escape sequences insert such characters into string without modifying string. first simple example: Inserting single quotes into string: #without using string 'Hi! 'man' print ("Without using string) Output: 	string 'Hi! 'man' 	SyntaxError: invalid syntax Understanding: Python searches ending-single quote string 'Hi!'man'. Hence, raises error. Python, number opening quotes must equal number ending quotes total number quotes used must even. Hence when find even number quotes, raises error. #Using string string 'Hi!''man' print ("By using string) Output: Understanding: Here, 'Hi!' 'man' considered separate strings, error raised. number quotes even. insert something between 'Hi!' 'man', Python gets confused again raises error. Example: string 'Hi!'!'man' print ("By using string) Output: string 'Hi!'!'man' SyntaxError: invalid syntax Using escape sequence: #Using string 'Hi! \'man' print ("By using string) Output: using 'man observe that problem solved. Also, another solution this situation that double quotes enclose string 'in string: string "Hi!'man" print ("By using string) Output: using Hi!'man There more escape sequences Python that helps programmer print different types invalid statements: Escape character Prints single quote inside string enclosed with single quotes. Prints double quote inside string enclosed with double-quotes. Prints succeeding part even same line, line Gives space equivalent normal spaces. Brings cursor starting line, called 'carriage return.' Gives backspace. Creates f-string which whole string formatting mechanism \ooo Gives octal representation Prints backslash character \xhh Gives hexadecimal representation Now, examples sequences understand their uses: /" #without using string "Hi!"man" print ("Without using string) Output: string "Hi!"man" SyntaxError: invalid syntax using string "Hi!\"man" print ("By using string) Output: using Hi!"man Understanding: that without using backslash character, error, when placed before printed. #without using string "Hi! man" print ("string =",string) Output: string "Hi!"man" using /n: string "Hi\nman" print ("By using string) Output: using Understanding: string, using \n", unknowingly, used \n. need printed, don't want functionality. What escape sequence: string "Hi\nman" print ("By using \\n: string) Output: using string "Hi! man" print ("Without using \\t: string) Output: Without using using string "Hi!\tman" print ("By using \\t: ",string) Output: using \t: Hi!	man Understanding: wrote normal statement first code giving normal spaces. second code, used give tabular space between man. #without using string "Hi! man" print ("Without using \\r: string) Output: Without using using string "Hi!\rman" print ("By using \\r: ",string) Output: manusing Understanding: When content after will brought front replacing existing characters. string will using \\r: Hi!\rman" content after "man". This word will brought front string replacing existing characters-"By_" making string using man: string "Hi!\rman" print (string) Output: Here, "man" succeeds \r. will brought front string, replacing Hi!; three characters will replaced making output "man". #without using string "Hi! man" print ("Without using \\b: string) Output: Without using using string "Hi!\bman" print ("By using \\b: ",string) Output: using Himan Understanding: backspace character. deletes preceding character like backspace keyboards calculators. gave between man. preceding character "!"; hence, deleted. \ooo ooo represents octal numbers. characters equivalent octal representations using this character. Example: string "\543\432\789" print (string) Output: ??89 Understanding: \543 represents \432 represents \789 represents \xhh hh represents octal numbers. characters equivalent hexadecimal representations using this character. Example: string "\x54\x34" print (string) Output: T4 Understanding: \x54 represents \x34 represents sequences discussed article most commonly used escape characters. These only escape sequences Python. More sequences will useful different scenarios while writing different logic. Next TopicPYTHON NULL STATEMENT prev next