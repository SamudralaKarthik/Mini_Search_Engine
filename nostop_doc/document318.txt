next prev What Operator Overloading Python operator overloading Python means provide extended meaning beyond their predefined operational meaning. Such operator adding integers well joining strings merging lists. achieve this operator overloaded "int" class "str" class. user notice that same inbuilt operator function showing different behaviour objects different classes. This process known operator overloading. Example: print Now, will concatenate strings print ("Java" "Tpoint") will check product numbers print (23 Here, will repeat String print ("X Output: JavaTpoint Overload Operators Python? Suppose user objects which physical representation user-defined data type class. user objects using operator, gives error. This because compiler does know objects. user define function using operator, that process known "operator overloading". user overload existing operators they cannot create operator. Python provides some special functions, magic functions performing operator overloading, which automatically invoked when associated with that operator. Such when user uses operator, magic function __add__ will automatically invoke command where operator will defined. Perform Binary Operator Python: When user uses operator user-defined data types class, then magic function that associated with operator will invoked automatically. process changing behaviour operator simple behaviour function method defined. user define methods functions class operator works according that behaviour defined functions. When user uses operator, will change code magic function, user extra meaning operator. Program Simply adding objects. Python program simply using overloading operator adding objects. Example: class example: __init__(self, self.X adding objects __add__(self, return self.X U.X object_1 example( int( input( print ("Please enter value: ")))) object_2 example( int( input( print ("Please enter value: ")))) print object_1 object_2) object_3 example(str( input( print ("Please enter value: ")))) object_4 example(str( input( print ("Please enter value: ")))) print object_3 object_4) Output: Please enter value: Please enter value: Please enter value: Java Please enter value: Tpoint JavaTpoint Program defining Overloading operator another object Python program defining overloading operator inside another object. Example: class complex_1: __init__(self, self.X self.Y Now, will objects __add__(self, return self.X U.X, self.Y U.Y Object_1 complex_1(23, Object_2 complex_1(21, Object_3 Object_1 Object_2 print (Object_3) Output: (44, Program Overloading comparison operators Python Python program overloading comparison operators. Example: class example_1: __init__(self, self.X __gt__(self, if(self.X U.X): return True else: return False object_1 example_1(int( input( print ("Please enter value: ")))) object_2 example_1(int (input( print("Please enter value: ")))) if(object_1 object_2): print ("The object_1 greater than object_2") else: print ("The object_2 greater than object_1") Output: Case Please enter value: Please enter value: object_1 greater than object_2 Case Please enter value: Please enter value: object_2 greater than object_1 Program Overloading equality less than operators Python Program overloading equality less than operators: Example: class E_1: __init__(self, self.X __lt__(self, if(self.X U.X): return "object_1 less than object_2" else: return "object_2 less than object_1" __eq__(self, if(self.X U.X): return "Both objects equal" else: return "Objects equal" object_1 E_1(int( input( print ("Please enter value: ")))) object_2 E_1(int( input( print ("Please enter value: ")))) print object_1 object_2) object_3 E_1(int( input( print ("Please enter value: ")))) object_4 E_1(int( input( print ("Please enter value: ")))) print object_3 object_4) Output: Case Please enter value: Please enter value: object_1 less than object_2 Please enter value: Please enter value: Both objects equal Case Please enter value: Please enter value: object_2 less than object_1 Please enter value: Please enter value: Objects equal Python magic functions used operator overloading: Binary Operators: Operator Magic Function __add__(self, other) __sub__(self, other) __mul__(self, other) __truediv__(self, other) __floordiv__(self, other) __mod__(self, other) __pow__(self, other) __rshift__(self, other) __lshift__(self, other) __and__(self, other) __or__(self, other) __xor__(self, other) Comparison Operators: Operator Magic Function __LT__(SELF, OTHER) __GT__(SELF, OTHER) __LE__(SELF, OTHER) __GE__(SELF, OTHER) __EQ__(SELF, OTHER) __NE__(SELF, OTHER) Assignment Operators: Operator Magic Function __ISUB__(SELF, OTHER) __IADD__(SELF, OTHER) __IMUL__(SELF, OTHER) __IDIV__(SELF, OTHER) __IFLOORDIV__(SELF, OTHER) __IMOD__(SELF, OTHER) __IPOW__(SELF, OTHER) __IRSHIFT__(SELF, OTHER) __ILSHIFT__(SELF, OTHER) __IAND__(SELF, OTHER) __IOR__(SELF, OTHER) __IXOR__(SELF, OTHER) Unary Operator: Operator Magic Function __NEG__(SELF, OTHER) __POS__(SELF, OTHER) __INVERT__(SELF, OTHER) Conclusion this tutorial, have discussed overloading operators Python them perform various operators. Next Topicnsetools Python prev next