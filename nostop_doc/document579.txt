next prev Reverse Linked List Python this tutorial, will write program reverse linked list Python. linked list used store elements dynamically. linked list linear data structure like array, stores element dynamically. Each element connects with previous Node using specific address stores value along with address next element. whole element known Node. Here will reverse given linked using Python program. Let's understand problem statement. Problem Statement need provide linked list return reverse below. Input NULL Output NULL Input NULL Output 1->NULL Input NULL Output NULL Let's implement solution given problem. Method First, will create linked list solve this problem using iterative approach. Code Creating Linked List class Node: __init__(self, data): self.data data self.next None class LinkedList: __init__(self): self.head None add_node(self, data): newNode Node(data) self.head None: current self.head while (current.next): current current.next current.next newNode else: return None reverse_Llist(self): print_list(self): self.head None: current self.head while current: print(current.data, "->", current current.next LinkedList() n.head Node(1) Node(2) n.head.next Node(3) n1.next Node(4) n2.next n.print_list() Output: above code, have initialized linked list added some elements Now, will implement iterative method reversing linked list. Reverse Linked List want implement reverse() method which does following operations. links start pointing opposite direction. head starts pointing last element list. will define three pointers previous initial pointer which points None starting, this pointer points previous element next link reversed using current points initially head, node being pointed this variable gets node.next previous item list. after points second node. move this element head until gets next==None. Let's implement reverse_Llist() function. Example reverse_Llist(Llist): Llist.head Node: return None previous None current Llist.head after current.next while current: Reverse link current.next previous Moving previous element ahead previous current Moving current element ahead current after Moving element ahead after: after after.next Llist.head previous LinkedList() n.head Node(1) Node(2) n.head.next Node(3) n1.next Node(4) n2.next print("The reverse linked list reverse_Llist(n) n.print_list() Output: reverse linked list Explanation above code, have initialized linked list instance created linked list. reverse_Llist() function called over linked reverse list. Method Recursive Method class Node: __init__(self, data): self.data data self.next None class LinkedList: __init__(self): self.head None add_node(self, data): newNode Node(data) self.head None: current self.head while (current.next): current current.next current.next newNode else: return None recusive_reverse(self, current, previous): last node mark head current.next None: self.head current Update next prev node current.next previous return Save curr.next node recursive call after current.next update next current.next previous self.recusive_reverse(after, current) reverse(self): self.head None: return self.recusive_reverse(self.head, None) print_list(self): self.head None: current self.head while current: print(current.data, current current.next Output: reverse linked list Time Complexity: O(N) Auxiliary Space: O(1) Conclusion above tutorial, have implemented solution reverse linked list problem. essential concept linked list asked interview question. have solved this problem using Iterative Recursive methods, time complexity will same both methods. Next TopicDifferences between Flatten() Ravel() Numpy Functions prev next