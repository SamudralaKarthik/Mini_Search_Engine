next prev Building Twitter using Python following tutorial, will learn build very Twitter Python programming language with help Tweepy package, which provides efficient Twitter Application Programming Interface (API). Twitter considered among most widely adopted social networks. many organizations people, having great Twitter presence chief factor keeping their audience engaged. Great Twitter presence means being involved activities like keeping active account with tweets retweets, following interesting accounts, quickly replying followers' messages. perform this work manually; however, that take time. Instead, depend Twitter bot, program that automates part Twitter activity. this tutorial, will able learn following: Improving automating interactions with Twitter audience Installing Tweepy Signing Twitter developer utilize Utilizing Tweepy order invoke Twitter Building Twitter before getting started, briefly look into Twitter API. Understanding Twitter Twitter provides developers access almost every function Twitter. utilize order read write information associated with entities Twitter, which includes tweets, users, trends. Technically, exposes various endpoints HTTP associated with: Tweets Retweets Likes Favorites Direct messages Media Trends Tweepy package, will discuss later, offers method invoke those HTTP endpoints without dealing with low-level details. Twitter utilizes OAuth, widely used open authorization protocol, authenticate requests. Before making call Twitter API, have create configure authentication credentials. will looking into detailed instructions this later this tutorial. leverage Twitter build various kinds automation, like bots, analytics, other utilities. thing remember that Twitter imposes certain restrictions policies related what cannot build with help API. tools developed spam, mislead users, other activities forbidden. This done guarantee users good experience. Twitter also imposes rate limits about commonly allowed invoke methods API. exceed these limits, will have wait around minutes able again. must consider this while designing implementing bots avoid unnecessary waits. find more details about policies Twitter limits official documentation. understand Tweepy package. Understanding Python Tweepy package Tweepy open-source Python package that provides with efficient access Twitter using Python. Tweepy package consists classes methods that depicts models Twitter endpoints, transparently handles different implementation details, like: Data encoding decoding Results pagination HTTP requests OAuth authentication Streams Rate limits were using Tweepy package, would have deal with low-level details related HTTP requests, rate limits, authentication, data serialization. entire procedure could time-consuming prone error. Instead, thanks Tweepy, focus functionality want build. almost every functionality offered Twitter through Tweepy. version 3.7.0, only current limitation that Direct Messages work properly some recent alterations Twitter API. Using Python Tweepy package following section will discuss install Tweepy package development, configure authentication credentials, interact with Twitter API. begin installing package. Installation install Tweepy package using pip, Python package manager. following section, about virtual environment (virtualenv) projects avoid depending system-wide packages. create project named tweepyBots. primary step create directory virtual environment. consider following syntax same: Syntax: mkdir tweepyBots tweepyBots python3 venv tweepyEnv above commands will create virtual environment within project directory. Then install Tweepy package. First, have activate newly created virtual environment then utilize installer installation. Syntax: path_to_the_tweepyEv_directory ./script/activate.bat install tweepy that Tweepy package installed let's create requirements.txt file consisting names dependencies. command freeze this task shown below: Syntax: freeze requirements.txt will this requirements.txt file when deploying project. Creating Twitter Authentication Credentials have discussed earlier, Twitter requires that requests OAuth order authenticate. Thus, have create required authentication credentials able API. These credentials four text strings: Consumer Consumer secret Access token Access secret already have Twitter user account, follow these steps create key, token, secrets. Otherwise, need sign Twitter user before proceeding. Step Applying Twitter Developer Account Step Creating application Step Creating authentication credentials Applying Twitter Developer Account First all, have Twitter developer site apply developer account. link website found below: https://developer.twitter.com/en Here, need select Twitter user responsible this account. must organization Twitter will then request details about plan utilize developer account. will then need specify name developer account planning utilize personal usage organization. Creating application Twitter grants authentication credentials applications, accounts. application utility that uses Twitter API. Thus, have register application able make calls. must Twitter apps page order register application select Create option. will then provide following details associated with application purpose: Name Application: This information will serve name identify application (For example, testbot) Description Application: This information will serve purpose application (For example, test learn about tweepy) Website application: This information required; however, some personal websites bots require function. application: This information tells users will utilize application (For example, this application that will automatically respond users) Creating Authentication Credentials Twitter apps page create authentication credentials. Here will find Details button application. Once click this button, will taken next page, where generate credentials. selecting Keys tokens tab, generate copy key, token, secret utilize them code. Once done generating credential, save them code later. test credentials with help following snippet code: Example: importing required library import tweepy Authenticating Twitter authCreds tweepy.OAuthHandler("pGBDoAaEpkuiVKBOLwjtcmHGc", "xF3g1wrP50b6BlZEd20u4oVfjgH1FGQcuSUzlQO5aUWOufvlhw") authCreds.set_access_token("642518493-6VcLIQprbQbv9wkcBBPvCle8vsjU9fE85Dq9oStl", "tH9aKQbQQ1iRdYTcLSsPwitl44BkAc6jikrsU0ifnXvZhq") creating object class apiObj tweepy.API(authCreds) verifying credentials try: apiObj.verify_credentials() print("Authentication Successful") except: print("Error raised during authentication") Explanation: above snippet code, have imported required package. created object OAuthHandler class Tweepy package authenticate Twitter. have then created object class. Later, used try-expect method, where used verify_credentials() function printed some statements regarding same. everything goes well, should message saying Authentication Successful. Note: credentials utilized this article only understanding will work. required generate utilize credentials. Reviewing Tweepy Functionality Tweepy provides interface users order access Twitter from Python programming language. does encapsulating much complexity Twitter adding model layer along with some useful functionalities Since, over time, names different concepts Twitter have evolved, some names still utilized Tweepy. Thus, better remember that, context this tutorial, these equivalences hold: status referred tweet. friendship considered follow-follower relationship. favorite equivalent like. that know Tweepy names things understand works. divide functionality Tweepy into following groups: OAuth classes Models Cursors Streams about investigate these groups learn about functionality each provides. Understanding OAuth Tweepy package takes care information using OAuth required Twitter authenticate each request. offers OAuthHandler class that credentials calls. following snippet code illustrates create OAuthHandler object that later calls: Example: importing required package import tweepy Authenticating Twitter authCreds tweepy.OAuthHandler("CONSUMER_KEY", "CONSUMER_SECRET") authCreds.set_access_token("ACCESS_TOKEN", "ACCESS_TOKEN_SECRET") Explanation: above snippet code, have imported required package. have then created object OAuthHandler class specifying consumer consumer secret parameters used set_access_token() function providing access token secret order authenticate Twitter. Here telling Tweepy credentials created Step Creating Authentication Credentials. mandatory replay CONSUMER_KEY, CONSUMER_SECRET, ACCESS_TOKEN, ACCESS_TOKEN_SECRET with previously generated values. Understanding Class class consists multiple methods that offer access Twitter endpoints. With help these methods, access functionality Twitter API. consider following snippet code that illustrates creation object that invoke Twitter API. will also setting wait_on_rate_limit wait_on_rate_limit_notify arguments True make sure that object prints message waits rate limit exceeded: Example: importing required package import tweepy Authenticating Twitter authCreds tweepy.OAuthHandler("CONSUMER_KEY", "CONSUMER_SECRET") authCreds.set_access_token("ACCESS_TOKEN", "ACCESS_TOKEN_SECRET") Creating object class apiObj tweepy.API( authCreds, wait_on_rate_limit True, wait_on_rate_limit_notify True Explanation: have authentication credentials created object above snippet code. invoke methods this object order perform call. methods grouped into following categories: Methods user timelines Methods tweets Methods users Methods followers Methods account Methods likes Methods blocking users Methods searches Methods trends Methods streaming following sub-sections, about review various groups methods. visit complete documentation Class detailed list methods. Methods User Timelines These methods deal with reading tweets, mentions, retweets from timeline other user's timeline public. consider following snippet code that prints author text last tweets home timeline: Example: using home_timeline() method time_line apiObj.home_timeline() the_tweet time_line: print(f"{the_tweet.user.name} said {the_tweet.text}") Explanation: above snippet code, have used home_timeline() method class. This method used last twenty entries timeline. default value Tweepy package. will more than results later work with paginated results. Methods Tweets methods deal with creating, fetching, retweeting tweets. consider following snippet code that illustrates Tweepy package creating tweet with some text: Example: using update_status() method apiObj.update_status("This test tweet learn Tweepy Python") Explanation: above snippet code, have used update_status() method order create tweet from Python string. Methods Users Methods this group allow search users with filter criterion, fetch details user, list followers user that user account public. consider following snippet code fetch details user print along with most recent followers: Example: using get_user() method the_user apiObj.get_user("Name some user") printing details user like name, description, location print("Details User:") print(the_user.name) print(the_user.description) print(the_user.location) printing last followers user print("Last Followers User:") the_follower the_user.followers(): print(the_follower.name) Explanation: above snippet code, have used get_user() method that returns object consisting details user. This returned object also methods access information related user. have then used followers attribute list followers print their names. Methods Followers This group methods deals with following unfollowing users, querying followers users listing accounts user following. consider following snippet code that shows Tweepy start following some users. Example: using create_friendship() method apiObj.create_friendship("user_name") Explanation: above snippet code, have used create_friendship() method user list accounts follow. Methods Account These methods enable read write profile details. consider following snippet code that shows update profile description: Example: using update_profile() method apiObj.update_profile(description "Welcome javatpoint.com") Explanation: above snippet code, have used update_profile() method within which have passed description argument order change profile description "Welcome javatpoint.com". Methods Streaming Streaming allows watch tweets actively that match specific criteria real-time. This statement implies that when tweets match criteria, program will wait until tweet created processed. need create objects streaming: stream object utilizes Twitter tweets that match criteria. This object source tweets processed stream listener. stream listener receives tweets from stream. consider following snippet code that demonstrates same: Example: importing required modules import json import tweepy defining Class class TheStreamListener(tweepy.StreamListener): __init__(self, api): self.api self.me api.me() onStatus(self, tweet): print(f"{tweet.user.name}:{tweet.text}") onError(self, status): print("Error detected") Authenticating Twitter the_auth tweepy.OAuthHandler("CONSUMER_KEY", "CONSUMER_SECRET") the_auth.set_access_token("ACCESS_TOKEN", "ACCESS_TOKEN_SECRET") Creating object the_api tweepy.API( the_auth, wait_on_rate_limit True, wait_on_rate_limit_notify True tweetsListener TheStreamListener(the_api) the_stream tweepy.Stream(the_api.auth, tweetsListener) the_stream.filter(track ["Python", "Django", "Tweepy"], languages ["en"]) Explanation: above snippet code, have imported required modules created class StreamListener. This class used stream listener tweetsListener. reused common code stream listeners extending StreamListener Tweepy package. Tweets from stream processed onStatus() function. have created stream with help tweepy.Stream, passing authentication credentials stream listener. have call filter() function tweets from stream, passing criteria through filtering tweets. Then, each tweet that matches criteria, stream object invokes onStatus() function stream listener. Models Tweepy utilizes model classes encapsulate responses from different Twitter methods. This provides with convenient method outputs from operations. model classes follows: User Status Friendship SearchResults consider example where need fetch every tweet which mentioned, then mark each tweet Liked follow author: Example: using mentions_timeline() method the_tweets apiObj.mentions_timeline() the_tweet the_tweets: the_tweet.favorite() the_tweet.user.follow() Explanation: above snippet code, have used mentions_timeline() belonging Status class that returns tweet object. have then used favorite() method mark Liked. have then used user attribute along with follow() method author tweet list people follow. Leveraging Tweepy models allows create concise understandable code. Cursors Twitter endpoints utilize pagination order return their outputs. default, each method returns first page, which generally consists some dozen items. Tweepy cursors take away part complexity working with paginated outputs. Cursors implemented Tweepy class named Cursor. Cursor object takes care fetching different result pages transparently. cursor selecting method fetch items number items want. consider following snippet code that illustrates first page from timeline last hundred tweets with help cursor. Example: using Cursor method the_tweet tweepy.Cursor(apiObj.home_timeline).items(100): print(f"{the_tweet.user.name} said: {the_tweet.text}") Explanation: above snippet code, have created cursor object using tweepy.Cursor. class constructor receives method utilize source results. above example, have used home_timeline() function source wanted tweets from timeline. Cursor object items() method that returns iterable iterate over results. pass items() number result items want get. Making Twitter Python using Tweepy that have understood working Tweepy make Twitter Python with Tweepy. Bots work continuously watching some Twitter activity automatically reacting Watching Twitter Activity There ways watch Twitter activity continuously: Using streams: notified when content, such tweets, that matches specific criteria created Using polling: make Tweepy calls periodically then check their results they consist something Which option choose depends case. Using streams most efficient option, then only watch activity related tweets, less flexible. following section, will using only option build bot. Follow Followers will learn build follow followers that automatically follows anyone follows following section. This gets list followers from Twitter every minute then iterates through follow each user that already following. consider following source code that demonstrates same. Example: importing required libraries import tweepy import logging import import time logging.basicConfig(level logging.INFO) logger logging.getLogger() defining createApi() function createApi(): consumerKey os.getenv("CONSUMER_KEY") consumerSecret os.getenv("CONSUMER_SECRET") accessToken os.getenv("ACCESS_TOKEN") accessTokenSecret os.getenv("ACCESS_TOKEN_SECRET") the_auth tweepy.OAuthHandler(consumerKey, consumerSecret) the_auth.set_access_token(accessToken, accessTokenSecret) tweepy.API( the_auth, wait_on_rate_limit True, wait_on_rate_limit_notify True try: api.verify_credentials() except Exception logger.error("Error creating API", exc_info True) raise logger.info("API created") return defining followFollowers() function followFollowers(the_api): logger.info("Retrieving following followers") the_follower tweepy.Cursor(the_api.followers).items(): the_follower.following: logger.info(f"Following {the_follower.name}") the_follower.follow() defining main() function main(): the_api createApi() while True: followFollowers(the_api) logger.info("Waiting...") time.sleep(60) __name__ "__main__": main() Explanation: above snippet code, have imported required libraries. then defined function createApi() that reads authentication credentials from environment variables creates Tweepy object. These credentials are: CONSUMER_KEY CONSUMER_SECRET ACCESS_TOKEN ACCESS_TOKEN_SECRET function uses os.getenv() function read environment variables then creates Tweepy the_auth object. Then object created. have then passed wait_on_rate_limit wait_on_rate_limit_notify creation tweepy.API object makes Tweepy wait print message when rate limit exceeded. Before returning object, createApi() function calls verify_credentials() method check valid credentials. observe that have also used logging Python module inform errors info messages that support debugging them problem arises. have also defined main() function that creates Tweepy object using createApi() function. have called followFollowers() function once every minute within loop. have also defined followFollowers() function that uses Tweepy cursor Tweepy method followers() list followers. This list consists Tweepy user model each user following Then iterates through list utilizes following attribute check already following each user. Users that already being followed followed with help follow() function. Execution must first create environment variables authentication credentials. perform this replacing values with actual credentials. Once environment variables containing credentials required Twitter set, need activate virtual environment execute Python project file. Syntax: path_to_the_tweepyEv_directory ./script/activate.bat python followFollowersBot.py While executing, will follow anybody follows test that works unfollowing someone that following After minute, they will followed again. stop using Ctrl Next TopicPython Progressbar Module prev next