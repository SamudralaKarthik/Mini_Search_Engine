next prev Pointer Python Python doesn't support pointer this tutorial, will learn about pointer Python Python doesn't support pointer concepts. will also understand simulate pointer Python. Below introduction pointer those don't have about will also understand simulate pointer Python. Below introduction pointer those don't have about What Pointer? Pointer very popular useful tool store address variable. someone ever worked with low-level language such C++, he/she would probably familiar with pointers. manages code very efficiently. slightly tough beginners, important concept program. However, lead various memory management bugs. Thus, definition pointers "Pointers variables that hold memory address another variable. Pointer variables represented asterisk (*)." Let's following example pointer programming language. Example pointer #include <stdio.h> main() int* po, o; printf("Address %p\n", &c); printf("Value %d\n\n", c); &0; printf("Address pointer %p\n", printf("Content pointer %d\n\n", *o); 11; printf("Address pointer %p\n", p0); printf("Content pointer %d\n\n", *p0); *po printf("Address %p\n", &o); printf("Value %d\n\n", return Output: Address 2686784 Value Address pointer 2686784 Content pointer Address pointer 2686784 Content pointer Address 2686784 Value Besides being useful, pointers used Python. this topic, will discuss Python's object model learn pointers Python doesn't exist. will also learn different ways simulate pointers Python. First, let's discuss Python doesn't support Pointers. Doesn't Python Support Pointers exact reason supporting pointer clear. Could pointer Python exist natively? main concept Python simplicity, pointer violated Python. Pointers mainly encouraged implicit changes rather than explicit ones. They also complex, especially beginners. Pointers tend create complexity code, where Python mainly focuses usability rather than speed. result, Python doesn't support pointer. However, Python gives some benefits using pointer. Before understanding pointer Python, need have basic idea following points. Immutable mutable objects Python variables/names Objects Python Python, everything object, even class, functions, variables, etc. Each object contains least three pieces data. Reference count Type Value Let's discuss one. Reference Count used memory management. more information regarding Python memory management, read Memory Management Python. Type CPython layer used type make sure type safety during runtime. Finally, there value, which actual value associated with object. depth this object, will find objects same, though. important distinction between types object immutable mutable. First all, need understand difference between types object because explores pointer Python. Immutable Mutable Objects Immutable objects cannot modified, where Mutable objects modified. Let's following table common types whether they mutable not. Objects Type Immutable Float Immutable Bool Immutable List Mutable Mutable Complex Mutable Tuple Immutable Frozenset Immutable Dict Mutable check type above objects using id() method. This method returns object's memory address. typing below lines REPL environment. id(x) Output: 140720979625920 above code, have assigned value modified this value with substitution, would objects. x-=1 id(x) Output: 140720979625888 see, modify above code objects response. Let's take another example str. "java" print(id(s)) "Tpoint" print(s) id(s) Output: 2315970974512 JavaTpoint 1977728175088 Again, modify value adding string, memory address. Let's string directly 'java' s[0] print(id(s)) Output: Traceback (most recent call last): File "C:/Users/DEVANSH SHARMA/PycharmProjects/MyPythonProject/python1.py", line s[0] NameError: name defined Above code returns error, means string doesn't support mutation. immutable objects. Now, will mutable object such list. my_list print(id(my_list)) my_list.append(4) print(my_list) print(id(my_list)) Output: 2571132658944 2571132658944 above code, my_list originally, have appended with list; my_list same because list supports mutability. Understanding Python Variables defining variables Python much different than C++. Python variable doesn't define data type. fact, Python names, variables. need understand difference between variables names especially true when navigating tricky subject pointers Python. Let's understand variable works name works Python. Variables language, variable that holds value store value. defined with data type. Let's following code that defines variable. 286; Allocate enough memory integer. assign value 286 that memory location. represents that value. represent view memory see, memory location value 286. Now, will assign value This value overwrites previous value. means that variable mutable. value location same, value changed. significant point indicating that memory location, just name. Now, introduce variable that takes then creates memory box. variable creates called copies value from into box. Names Python discussed earlier Python doesn't have variables. names, this term variables. there difference between variables names. Let's following example. above code broken down during execution. Create PyObject typecode integer PyObject value PyObject Create name called Point PyObject Increase refcount PyObject will look like below. understand internal working variable Python. variable points reference object doesn't have memory space before. also shows binding name reference. Now, introduce variable assign Python, variable will create object; just name pointing same object. object refcount also increased one. confirm follows. Output: True increase value one, will longer refer same object. That means, Python, don't assign variables. Instead, bind names reference. Simulating Pointers Python have discussed, Python doesn't support pointer, benefits using pointer. Python provides alternative ways pointer Python. These ways given below. Using mutable types pointers Using custom Python objects Let's understand given points. Using Mutable Types Pointer previous section, have defined mutable type objects; treat them they were pointers simulate pointer behavior. Let's understand following example. void add_one(int *a) *a above code, defined pointer then increment value one. Now, will implement with main() function. #include <stdio.h> main(void) 233; printf("y %d\n", add_one(&y); printf("y %d\n", return Output: 233 simulate this type behavior using Python mutable type. Understand following example. add_one(x): x[0] [2337] add_one(y) y[0] above function accesses first element list increments value one. When execute above program, prints modified value means replicate pointer using mutable object. simulate pointer using immutable object. (2337,) add_one(z) Output: Traceback (most recent call last): File line File line add_one TypeError: 'tuple' object does support item assignment used tuple above code, immutable object, returned error. also dictionary simulate pointer Python. Let's understand following example where will count every operation that occurs program. dict achieve this. Example count {"funcCalls": car(): count["funcCalls"] foo(): count["funCcalls"] car() foo() count["funcCalls"] Output: Explanation above example, have used count dictionary, which kept track number function calls. When foo() function called, counter increased because dict mutable. Using Python Objects previous example, have used dict emulate pointer Python, sometimes becomes difficult remember used names. Python custom class place dictionary. Let's understand following example. Example class Pointer(object): __init__(self): self._metrics "funCalls": "catPictures": above code, have defined Pointer class. This class used dict holding actual data _metrics member variable. will provide mutability program. this follows. class Pointer(object): @property funCalls(self): return self._metrics["func_calls"] @property catPictures_served(self): return self._metrics["cat_pictures_served"] have used @property decorator. don't familiar with decorators, visit Python decorator tutorial. @property decorator will access funCalls catPicture_served. Now, will create object Pointer class. Pointer() pt.funCalls() pt.catPicture_served Here need increment these values. class Pointer(object): increament(self): self._metrices["funCalls"] cat_pics(self): self._metrices["catPictures_served"] have defined methods increment(), cat_pics(). have modified values using these functions matrices dict. Here, change class same modifying pointer. Pointer() pt.increment() pt.increment() pt.funCalls() Python ctypes Module Python ctypes module allows create C-type pointer Python. This module helpful want make function call library that requires pointer. Let's understand following example. Example Language void incr_one(int *x) *x above function, have incremented value one. Suppose save above file named incrPointer.c type following command terminal. -Wall -Werror -fpic incrPointer.c -shared libinc.so incrPointer.o first command compiles incrPointer.c into object called incrPointer.o. second command accepts object file produce libinic.so collaborate with ctypes. import ctypes libinc.so library should same directory this program lib ctypes.CDLL("./libinc.so") lib.increment Output: <_FuncPtr object 0x7f46bf6e0750> above code, ctypes.CDLL returns shared object called libinic.so. contains incrPointer() function. need specify pointer functions define shared object, have specify using ctypes. Let's below example. inc lib.increment defining argtypes inc.argtypes [ctypes.POINTER(ctypes.c_int)] call function using different type, will through error. incrPointer(10) Output: Traceback (most recent call last): File "<stdin>", line <module> ctypes.ArgumentError: argument <class 'TypeError'>: expected LP_c_int instance instead This because incrPointer requires pointer ctypes passing pointer Python. ctypes.c_int(10) variable. ctypes provides method called byref() which used pass variable reference. inc(ctypes.byref(a)) Output: c_int(11) have increased value using reference variable. Conclusion have discussed that pointer present Python, implement same behavior with *mutable object. also discussed ctypes modules that define pointer Python. have defined excellent ways simulate pointer Python. Next TopicPython array prev next