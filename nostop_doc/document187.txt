next prev String Python this tutorial, will learn about string formatting mechanism. f-string best format string. string's formatting style makes string more readable, more concise, less prone error. also faster than other. Before diving deep into this topic, will first discuss techniques were used before string. String Formatting Python There main ways formatting string: formatting str.format(). both methods have some limitations. Let's have brief introduction these given methods. 1.% formatting traditional formatting string, docs recommend this method, which contains following statement. "The formatting operations described here exhibit variety quirks that lead several common errors (such failing display tuples dictionaries correctly). Using newer formatted string literals str.format() interface helps avoid these errors." Official Documentation. formatting perform built-in operation using %-operator. Let's understand following example. student "Michel" "Hello, %s." student Output: Hello Michel also tuple store multiple variables. Let's following example. name "Sharma" "Hello, %s." (name, age) Output: Hello Sharma %-formatting recommended Because variable increased longer string, code becomes much less easily readable. code looks messy. Let's following example. Example first_name "Steve" last_name "Rogers" profession "Superhero" group "Marvel? print(""Hello, Your were member %s." %(first_name, last_name, age, profession)") Output: Hello, Steve Rogers. Your Superhero. were member Marvel. above code, code became hard read more prone error. That's this formatting string isn't good. 2.str.format() method another popular format string introduced Python 2.6. Let's str.format() improvement %-formatting. like normal built-in function called object that object being converted string. Let's following example. Example first_name "Mathew" last_name "Zukerburg" print("Hello, {}.".format(name, age)") access dictionary element inside format method, pass format() method. person {'name': 'Peter', 'age': 17} "Hello, {name}. {age}.".format(name=person['name'], age=person['age']) Output: Hello Peter, str.format() method recommended? str.format() much efficient than %-format method still quite verbose when deal with multiple parameters. F-string Method string formatting mechanism introduced 498. also known Literal String Interpolation more commonly F-strings character preceding string literal). primary focus this mechanism make interpolation easier. When prefix string with letter 'F, string becomes f-string itself. f-string formatted much same str.format() method. F-string offers convenient embed Python expression inside string literals formatting. Example Python3 program introducing f-string 'Geeks' print(f"{val}for{val} portal {val}.") name 'Tushar' print(f"Hello, name {name} {age} years old.") Output: Hello, name Tushar years old. above code, have used f-string format string. evaluates runtime; valid Python expressions them. single statement. print(f"{2 30})" Output: However, could function. upercase(input): return input.uper() name "Sachin Tendulkar" f"{upercase(name)} great." Output: Sachin Tendulkar great f-string could also used with class object. Let's understand following example. Example class Actor: __init__(self, first_name, last_name, movie): self.first_name first_name self.last_name last_name self.movie movie __str__(self): return f"{self.first_name} {self.last_name}'s superhit movie {self.movie}." __repr__(self): return f"{self.first_name} {self.last_name} {self.movie}. Superhi!" Actor('Keenu', 'Reevs', 'Matrix') print(f"{ac}") Output: Keenu Reevs's superhit movie Matrix. Explanation above code, have used __str__() __repr__(), representing object string. need include least those methods class definition. f-string will __str__() method; also __repr__() including conversion flag print(f"{ac}") print(f"{ac}"!r) Output: Keenu Reevs's superhit movie Matrix. Keenu Reevs Matrix Superhit F-string Dictionary have take care while working with dictionary keys inside f-string. There different quotation dictionary keys f-string. Let's understand following example. Example detail {"name": "John", "age": print(f"{detail['name']} {detail['age']} years old.") Output: John years old. Below method allowed case dictionary. Example detail {"name": "John", "age": print(f'{detail['name']} {detail['age']} years old.') Output: File line print(f'{detail['name']} {detail['age']} years old.') SyntaxError: invalid syntax above code, change double quotation single quotes, thrown error. Speed reason adapting this formatting style speed. f-string evaluates runtime rather than constant values. embeds expression inside string literals, using minimal syntax. fast because evaluates runtime, constant value. Let's following string comparison. Example import timeit print(timeit.timeit("""name "Sachin" '%s %s.' (name, age)""", number 10000)) Output: 0.0022497819736599922 Example import timeit print(timeit.timeit("""name "Mathew" '{} {}.'.format(name, age)""", number 10000)) Output: 0.0025783719611354172 Example import timeit print(timeit.timeit("""name "Rockey" f'{name} {age}.'""", number 10000)) Output: 0.0019360429723747075 observe, f-string list. Braces make appear braces code, should double quotes follows. Let's understand following example. Example f"{{70 40}}" Output: {70 40} triple braces, will display single braces string. Let's understand following example. Example f"{{{90 4}}}" Output: {94} display more braces more than triple braces. Example f"{{{{70 4}}}}" Output: {{70 4}} Backslashes backslash escapes string portion f-string. However, can't backslashes escape expression part f-string. Let's understand following example. Example f"{\"Medric Pacalo\"}" File "<stdin>", line f"{\"Medric Pacalo\"}" Output: SyntaxError: f-string expression part cannot include backslash Inline comments cannot include symbol expression. will throw syntax error. Let's understand following example. Example f"Tony {10 #Hate this!}." f"Tonyr {2 #Hate this!}." Output: SyntaxError: f-string expression part cannot include Conclusion method three, f-string method provides more concise, readable, convenient way. faster less prone error. have explained almost every possible scenario off-string should consider this approach programming. Next TopicHow Brython Works prev next