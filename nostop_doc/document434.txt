next prev Customize Legends with Matplotlib this tutorial, will explain learn alter legend matplotlib. Matplotlib well-known software visualization data. This graphing library written Python NumPy extension numerical computation. Legend area graph that describes each element that makes the. graph straightforward sense that it's. include titles, labels label, legend, will clearer. When look names, able determine what graph represents easily type data represents. First, let's look create image legend using matplotlib. Syntax: Syntax legend Matplotlib legend(*args, **kwargs) described following terms: legend(): legend() automatically determines elements display. accomplishes this showing every plot that been marked with keyword argument "label. legend(labels): name name which shown legend legend(handles labels): list line numbers legend. Combining labels handles gives complete control over what information should included within legend. recommended that lengths both legend well handles should equal. Code: First, will import required modules import matplotlib.pyplot mplot Here, will plot values Now, will plot using matplotlib mplot.plot(P, label "P") mplot.plot(Q, label "Q") Here, will create legend mplot.legend() Output Customize Legend Legends meaning graph plots. addition font, place origin, makes legend more visible easily identifiable. Let's take look various programs available alter legends plots. Location: Sometimes legend could incorrect placed correct spot. Matplotlib lets specify place where would like legend. This way, legend where doesn't overshadow plot. This means that plots will appear more tidy clean. Syntax: legend(loc possible pass following steps: "upper left", "upper right", "lower left", "lower right": located appropriate area plot. "upper-center", "lower center", "center left", "center right": located edge that middle "center": situated exact middle map. "Best": placed with cross-over artists. Code: First, will import required modules import matplotlib.pyplot mplot Here, will plot values Now, will plot using matplotlib mplot.plot(P, label "P") mplot.plot(Q, label "Q") Here, will create legend location mplot.legend(loc 'lower right') Output Font Size: improve look legend, also alter size legend. connecting parameter font dimensions operation, alter font size within legend same plot title. Syntax: legend(fontsize This passed 'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large' Code: First, will import required modules import matplotlib.pyplot mplot Here, will plot values Now, will plot using matplotlib mplot.plot(P, label "P") mplot.plot(Q, label "Q") Here, will create legend adjusting fontsize. mplot.legend(fontsize 'x-large', 'upper left') Output Colour Legend Sometimes think that would wonderful have legend coloured make look more appealing help stand from plots. Matplotlib also help allowing change look legends altering colour text background even edges that legend displays. Syntax: legend(labelcolor labelcolor: used changing colour text. legend(facecolor facecolor: used changing background colour legend legend(edgecolor=") edgecolor: used changing edge colour legend Code: First, will import required modules import matplotlib.pyplot mplot Here, will plot values Now, will plot using matplotlib mplot.plot(P, label "P") mplot.plot(Q, label "Q") Here, will create legend colour mplot.legend(labelcolor 'Pink', facecolor 'blue', edgecolor 'Brown', fontsize 'xx-large') Output example above, clearly discern which arguments keywords which colour legend block. Marker Properties: Here, legend box, Syntax: legend(markerfirst bool, default: True) marker first, while label second. markerfirst parameter allows alter location marker. False, positions marker labels swapped. Code: First, will import required modules import matplotlib.pyplot mplot Here, will plot values Now, will plot using matplotlib mplot.plot(P, label "P") mplot.plot(Q, label "Q") Here, will create legend mplot.legend(markerfirst False) Output Changing Looks: legend include some fundamental properties such creating shadow, putting frames, turning corners, make legend transparent want obscure those tiny aspects plot frame. shadow: This argument creates shadows legend. frameon: Gives frame legend. fancybox: Gives smooth edges title. framealpha: Provides transparency background legend. Example adding shadow round corners: First, will import required modules import matplotlib.pyplot mplot Here, will plot values Now, will plot using matplotlib mplot.plot(P, label "P") mplot.plot(Q, label "Q") #Here, will create legend adding shadow fancybox legend mplot.legend(shadow True, fancybox True) Output Example Removing frame legend box: First, will import required modules import matplotlib.pyplot mplot Here, will plot values Now, will plot using matplotlib mplot.plot(P, label "P") mplot.plot(Q, label "Q") #Here, will create legend removing frame mplot.legend(frameon False) Output Title Legend: addition title legend crucial include legend boxes. title parameter create legend title, title_size lets choose particular fontsize name. Syntax: legend(title= title_fontsize title: will give title legend title_fontize: will give size title. This 'xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large' Code: First, will import required modules import matplotlib.pyplot mplot Here, will plot values Now, will plot using matplotlib mplot.plot(P, label "P") mplot.plot(Q, label "Q") #Here, will create legend give title fontsize: mplot.legend(title "Legend", title_fontsize 'xx-large') Output Conclusion this tutorial, have discussed customize legend, such adding title, shadow, removing frame, changing font size colours, etc. Next TopicMatplotlib legend subplot prev next