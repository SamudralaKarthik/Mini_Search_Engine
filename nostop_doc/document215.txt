next prev Locating Executing Modules Python this article, will discuss users locate modules Python what functions Python used executing modules. Locating Modules Python When modules imported users, Python interpreter will search module current directory. module found directory, interpreter will search every directory present shell variable known PYTHONPATH. interpreter unable find shell, then will check default path. UNIX, this default path /usr/local/lib/python/. search path module stored system module sys.path variable. This variable contains current directory, that PYTHONPATH, installation-dependent default. PYTHONPATH Variable PYTHONPATH variable Platform based variable, which consists list directories. syntax same PATH shell variable. PYTHONPATH from windows system: PYTHONPATH \\python3\\lib; PYPTHONPATH from UNIX system PYTHONPATH /usr/local/lib/python Executing Modules Python From command-line options, option used locating path given module, executed module __main__ module program. runpy module standard module Python, which used internally supporting this mechanism. runpy module allows script located using namespace Python module instead filesystem. runpy module defines functions: run_module() run_path() run_module() run_module() function used executing code containing specific module, will return result module globals dictionary. module_name argument should actual module name. Suppose name module referred package instead normal module. that case, that package will imported, __main__ submodule inside package will executed, will return result module globals dictionary. special global variables, that __name__, __spec__, __file__, __cached__, __loader__ __package__ globals dictionary before execution module. __name__ module_name +'.__main__', module which named package; otherwise, will module_name argument. __file__, __cached__, __loader__ __package__ normal based module spec. run_path() run_path() function used executing program file given path, will return module globals dictionary result. given path refer Python source file, compiled bytecode file, valid sys.path entry that contains __main__ module, such zipfile including top-level __main__.py file. special global variables, that __name__, __spec__, __file__, __cached__, __loader__ __package__ globals dictionary before execution module. __name__ variable run_name this optional argument equal None; otherwise, will <run_path>. Example: Let's example runpy module: First, user save following file script named runpy_example.py. add(p, return main(): print ("sum print (add(p,q,r,s,t)) return __name__=='__main__': main() then, user will execute above file using following command: import runpy_example runp runp.main() Output: Although, user execute above file without importing import runpy runpy.run_module('runpy_example', run_name='__main__') Output: user also user run_path() function: runpy.run_path('runpy_example.py', run_name='__main__') Output: discussed earlier, runpy also supports switch Python command line: C:\python37>python runpy_example Conclusion this article, have discussed users locate modules execute them using functions runpy module standard module Python. Next TopicFlatten List Python prev next