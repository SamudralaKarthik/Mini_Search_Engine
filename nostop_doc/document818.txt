next prev Countdown Timer using PyQt5 Python This article will demonstrate build countdown timer application using PyQt5. When using timer, which particular sort clock used measure certain time intervals, must count down from supplied time until reaches zero. Steps implementing Make push button that opens pop-up window time display configure shape. Label time status completion. label's size, font, text alignment centre. Make three push buttons: timer's start, pause, reset. each button's geometry. Implementation procedure back Create count variable flag indicate whether counter running not. Give each button function. value second using input dialogue within second button action, then flag false. Make flag true within start action, count zero, make false. Inside pause action, flag false. count value zero, flag false, label's text part reset process. Create object called timer that calls method every milliseconds. Check flag inside timer action, then reduce value count label's content. Walking through code First, import required libraries into program. import required modules from PyQt5.QtWidgets import from PyQt5 import QtCore, QtGui from PyQt5.QtGui import from PyQt5.QtCore import import Next, create class initialise window properties. class Window(QMainWindow): 	def __init__(self): 		super().__init__() window title 		self.setWindowTitle("Python window geometry 		self.setGeometry(100, 100, 400, 600) call components method 		self.UiComponents() displaying present widgets 		self.show() Then, create method introduce components, buttons labels display text. function widgets 	def UiComponents(self): introducing variables create count variable 		self.count starting value flag 		self.start False create push button getting time seconds 		btn QPushButton("Set time(s)", self) geometry push button 		btn.setGeometry(125, 100, 150, action push button being clicked 		btn.clicked.connect(self.get_seconds) create label display seconds 		self.label QLabel("//TIMER//", self) geometry label 		self.label.setGeometry(100, 200, 200, label's borders 		self.label.setStyleSheet("border solid black") font label 		self.label.setFont(QFont('Times', 15)) alignment label 		self.label.setAlignment(Qt.AlignCenter) create start button 		start_btn QPushButton("Start", self) geometry start button 		start_btn.setGeometry(125, 350, 150, action start button 		start_btn.clicked.connect(self.start_actn) create pause button 		pause_btn QPushButton("Pause", self) geometry pause button 		pause_btn.setGeometry(125, 400, 150, action button 		pause_btn.clicked.connect(self.pause_actn) create reset button 		reset_btn QPushButton("Reset", self) geometry reset button 		reset_btn.setGeometry(125, 450, 150, action reset button 		reset_btn.clicked.connect(self.reset_actn) create timer clock object 		timerClock QTimer(self) action timer clock 		timerClock.timeout.connect(self.displayTime) updating timer clock after every tenth second 		timerClock.start(100) Then, create functions called when different buttons clicked what should action done after that. function called timer clock 	def displayTime(self): check flag value true 		if self.start: 			# increasing counter 			self.count 			# timer clock completed 			if self.count 				# converting flag value false 				self.start False 				# text label 				self.label.setText("Completed !!!! 		if self.start: 			# text from count 			txt str(self.count 			# displaying text 			self.label.setText(txt) func called push button 	def get_scnds(self): converting flag value false 		self.start False seconds flag value 		second, done QInputDialog.getInt(self, 'Seconds', 'Enter Seconds:') flag value true 		if done: 			# improvising value count variable 			self.count second 			# text label 			self.label.setText(str(second)) 	def start_actn(self): changing flag value true 		self.start True count 		if self.count 			self.start False 	def pause_actn(self): changing flag value false 		self.start False 	def reset_actn(self): change flag value false 		self.start False count value 		self.count label's text 		self.label.setText("//TIMER//") Lastly, create instance window displayed execute application. creating pyqt5 application Base QApplication(sys.argv) creating instance Window created window Window() starting application sys.exit(Base.exec()) Complete code project Python program create countdown timer using PyQt5 import required modules from PyQt5.QtWidgets import from PyQt5 import QtCore, QtGui from PyQt5.QtGui import from PyQt5.QtCore import import class Window(QMainWindow): 	def __init__(self): 		super().__init__() window title 		self.setWindowTitle("Python window geometry 		self.setGeometry(100, 100, 400, 600) call components method 		self.UiComponents() displaying present widgets 		self.show() function widgets 	def UiComponents(self): introducing variables create count variable 		self.count starting value flag 		self.start False create push button getting time seconds 		btn QPushButton("Set time(s)", self) geometry push button 		btn.setGeometry(125, 100, 150, action push button being clicked 		btn.clicked.connect(self.get_seconds) create label display seconds 		self.label QLabel("//TIMER//", self) geometry label 		self.label.setGeometry(100, 200, 200, label's borders 		self.label.setStyleSheet("border solid black") font label 		self.label.setFont(QFont('Times', 15)) alignment label 		self.label.setAlignment(Qt.AlignCenter) create start button 		start_btn QPushButton("Start", self) geometry start button 		start_btn.setGeometry(125, 350, 150, action start button 		start_btn.clicked.connect(self.start_actn) create pause button 		pause_btn QPushButton("Pause", self) geometry pause button 		pause_btn.setGeometry(125, 400, 150, action button 		pause_btn.clicked.connect(self.pause_actn) create reset button 		reset_btn QPushButton("Reset", self) geometry reset button 		reset_btn.setGeometry(125, 450, 150, action reset button 		reset_btn.clicked.connect(self.reset_actn) create timer clock object 		timerClock QTimer(self) action timer clock 		timerClock.timeout.connect(self.displayTime) updating timer clock after every tenth second 		timerClock.start(100) function called timer clock 	def displayTime(self): check flag value true 		if self.start: 			# increasing counter 			self.count 			# timer clock completed 			if self.count 				# converting flag value false 				self.start False 				# text label 				self.label.setText("Completed !!!! 		if self.start: 			# text from count 			txt str(self.count 			# displaying text 			self.label.setText(txt) func called push button 	def get_scnds(self): converting flag value false 		self.start False seconds flag value 		second, done QInputDialog.getInt(self, 'Seconds', 'Enter Seconds:') flag value true 		if done: 			# improvising value count variable 			self.count second 			# text label 			self.label.setText(str(second)) 	def start_actn(self): changing flag value true 		self.start True count 		if self.count 			self.start False 	def pause_actn(self): changing flag value false 		self.start False 	def reset_actn(self): change flag value false 		self.start False count value 		self.count label's text 		self.label.setText("//TIMER//") creating pyqt5 application Base QApplication(sys.argv) creating instance Window created window Window() starting application sys.exit(Base.exec()) Output: output above mentioned code attached below form screenshot. Next TopicGUI Shut Down, Restart, computer using Tkinter Python prev next