next prev Standard Unit Converter Python following tutorial, will learn method creating standard unit converter with help Tkinter library Python programming language. before start building project, briefly discuss unit conversion some related aspects. Understanding Unit Conversion unit conversion consists multiple steps involving multiplication division numerical factor specifically, conversion factor. process also involve selecting applicable number substantial digits rounding. There different units conversion that utilized measure different parameters. Measuring Length Measuring Temperature Measuring Weight Measuring Capacity mathematics, generally perform conversion units measurement better understanding. instance, determine length table inches, whereas length garden evaluated yards make easy apprehend. Similarly, pointless measure length finger miles. measure different quantities using units measurement. conversion units becomes necessity while solving different mathematical problems. instance, length rectangle provided feet whereas width provided meters, then determine perimeter rectangle, must convert units make them uniform. Thus, need learn concept unit conversion. Conversion Units Measurements Different units utilized measure different quantities. units utilized measure shown follows: Length Area Volume Weight Temperature following tables display Quantities some units used measure each quantity. Quantity Units Length Meter(m), Inch (in), Feet (ft), Yards (yd), Miles Area Square Meter, Square Inch, Square Feet, Acre, Square Yard, Square Mile Volume Fluid Ounces (Fl oz), Pint (pt.), Quarts (qt), Gallons (gal) Weight Ounces, Pounds (lb.), Tons Temperature Kelvin (K), Celsius (C), Fahrenheit (F) There some non-standard units measurement used initial learning stage introduce children concept units measurement without having them read scales. Reading scale tedious itself, introduction non-standard measures allows child focus concepts like heavy, light, long, short, more before moving next step measuring using standard units. example non-standard measures hand spans. Hand spans generally used measure length objects informal way. However, measurement differ subjectivity involved. consider unit conversion table below depicting relationship between different units. Quantity Relationship Length mile 1760 yards 5280 feet 63,360 inches Volume (Capacity) gallon quarts pints fluid ounces Weight (Mass) 2000 pounds 32,000 ounces Temperature C/5 32)/9 273)/5 Charts Unit Conversion Charts Unit Conversion offer conversion factors conversions various units length, area, mass, volume, temperature, serving reference easy quick calculations. consider charts formula converting units where helps convert quantity given unit another. following tables represent charts unit conversion: Chart Length Unit Conversions Unit Conversion factor millimeter 0.001 meter centimeter 0.01 meter decimeter meter decameter meters hectometer meters kilometer 1000 meters inch 2.54 10-2 meters foot 0.3048 meter inches yard 0.9144 meter feet mile 1.609344 kilometers 1760 yards 5280 feet 63,360 inches 1609.344 meters Chart Area Unit Conversions Unit Conversion factor inch 6.4516 10-4 meters foot 9.2903 10-2 meters acre 4.0468 meters hectare meters mile 2.5888 meters barn 10-28 meters Chart Volume Unit Conversions Unit Conversion factor millilitre 0.001 litre centilitre 0.01 litre decilitre litre decaliter litres hectolitre litres kilolitre 1000 litres cubic inch 1.639 10-2 litre pint 473.16 millilitres 0.57 litre quart 946.353 millilitres 0.946353 litre pints gallon 3.785 litres quarts pints fluid ounces cubic foot 28.316 litres Chart Mass Unit Conversions Unit Conversion factor milligram 0.001 grams centigram 0.01 grams decigram grams decagram grams ounce 28.3495 grams hectagram grams kilogram 1000 grams stone 6350.29 grams pound 453.592 grams/ 0.453592kg/ ounces 907.185kg/ 2000 pounds/ 32,000 ounces Chart Temperature Unit Conversions Unit Conversion factor Celsius (C) that have learned basics Unit Conversion start building using Tkinter library Python programming language. Building Unit Converter using Tkinter Since project code lengthy complicated understand once, have divided complete project code into segments better understanding. understand code, will following steps shown below: Step will start importing required libraries modules. Step will then define functions necessary execution application. Step will define required dictionary lists store data. Step will then create main window application. Step will then widgets main window apply event trigger them. understand these steps detail. Importing required libraries modules will start importing necessary libraries modules required project. this project, will Tkinter library that will provide Graphical User Interface application. following snippet code demonstrates same: File: unitConverter.py importing widgets modules from tkinter library from tkinter import Explanation: above snippet code, have imported Tkinter library project. Defining functions application Once have successfully imported required library, time define functions necessary execute application. These functions include function reset entered data resultant value function that will allow convert specific unit into requested one. first, will start creating function reset entered data result. following snippet code illustrating same: File: unitConverter.py defining reset function reset(): using delete() method delete entries entry fields input_field.delete(0, END) output_field.delete(0, END) setting value option menu first index list using set() method input_value.set(SELECTIONS[0]) output_value.set(SELECTIONS[0]) setting focus input field using focus_set() method input_field.focus_set() Explanation: above snippet code, have defined function reset. Within this function, have used delete() method delete entries entry fields. have then value options menu first index list using set() method. last, have used focus_set() method focus input field. define another function convert specific unit into request one. following snippet code demonstrates same: File: unitConverter.py defining convert function convert(): getting string from entry field converting into float inputVal float(input_field.get()) getting values from selection menus input_unit input_value.get() output_unit output_value.get() list required combinations conversion factors conversion_factors [input_unit length_units output_unit length_units, input_unit weight_units output_unit weight_units, input_unit temperature_units output_unit temperature_units, input_unit area_units output_unit area_units, input_unit volume_units output_unit volume_units] any(conversion_factors): both units same type, perform conversion input_unit "celsius" output_unit "fahrenheit": output_field.delete(0, END) output_field.insert(0, (inputVal 1.8) elif input_unit "fahrenheit" output_unit "celsius": output_field.delete(0, END) output_field.insert(0, (inputVal (5/9)) else: output_field.delete(0, END) output_field.insert(0, round(inputVal unitDict[input_unit] unitDict[output_unit], else: displaying error units different types output_field.delete(0, END) output_field.insert(0, "ERROR") Explanation: above snippet code, have retrieved string value from input entry field using get() method float() method convert into float value, storing inputVal variable. have then retrieved values from selection menus stored them input_unit output_unit variables, respectively. have then created list required combinations conversion factors that input output fields must same unit chart. have then used nested if-else conditional statement check requested conversions lies within above list perform operation accordingly. Adding required data structures application will required data structures application, which includes Dictionary some lists. These data structures will store necessary data like units their initial values, unit conversion charts, selection menu options. consider following snippet code demonstrating same. File: unitConversion.py __name__ "__main__": dictionary conversion factors unitDict "millimeter" 0.001, "centimeter" 0.01, "meter" 1.0, "kilometer" 1000.0, "foot" 0.3048, "mile" 1609.344, "yard" 0.9144, "inch" 0.0254, "square meter" 1.0, "square kilometer" 1000000.0, "square centimeter" 0.0001, "square millimeter" 0.000001, "are" 100.0, "hectare" 10000.0, "acre" 4046.856, "square mile" 2590000.0, "square foot" 0.0929, "cubic meter" 1000.0, "cubic centimeter" 0.001, "litre" 1.0, "millilitre" 0.001, "gallon" 3.785, "gram" 1.0, "kilogram" 1000.0, "milligram" 0.001, "quintal" 100000.0, "ton" 1000000.0, "pound" 453.592, "ounce" 28.3495 charts units conversion length_units "millimeter", "centimeter", "meter", "kilometer", "foot", "mile", "yard", "inch" temperature_units "celsius", "fahrenheit" area_units "square meter", "square kilometer", "square centimeter", "square millimeter", "are", "hectare", "acre", "square mile", "square foot" volume_units "cubic meter", "cubic centimeter", "litre", "millilitre", "gallon" weight_units "gram", "kilogram", "milligram", "quintal", "ton", "pound", "ounce" creating list options selection menu SELECTIONS "Select Unit", "millimeter", "centimeter", "meter", "kilometer", "foot", "mile", "yard", "inch", "celsius", "fahrenheit" "square meter", "square kilometer", "square centimeter", "square millimeter", "are", "hectare", "acre", "square mile", "square foot" "cubic meter", "cubic centimeter", "litre", "millilitre", "gallon" "gram", "kilogram", "milligram", "quintal", "ton", "pound", "ounce" Explanation: above snippet code, have created dictionary unitDict, storing units their initial measurements. have then created some lists distinguishing units dictionary their respective charts. have another list with units displayed options selection menus. Creating main window application will create main window application where necessary widgets will displayed. will Tk() class Tkinter library create window. consider following snippet code demonstrating same. File: unitConverter.py creating main window application creating object Tk() class guiWindow Tk() setting title main window guiWindow.title("Unit Converter JAVATPOINT") setting size position main window guiWindow.geometry("500x500+500+250") disabling resizing option guiWindow.resizable(0, setting background color #16a085 guiWindow.configure(bg "#16a085") Explanation: above snippet code, have created instance Tk() class. have then title size main window using title() geometry() methods. have also disabled resizing option setting values parameters resizable() method last, have background color #16a085 with help configure() method. Adding widgets main window Once have created main window application, time some widgets will start adding some frames window provide structure other widgets. frames using Frame() widget Tkinter library. following snippet code illustrates same. File: unitConverter.py adding frames main window header_frame Frame(guiWindow, "#16a085") body_frame Frame(guiWindow, "#16a085") setting positions frames header_frame.pack(expand True, fill "both") body_frame.pack(expand True, fill "both") Explanation: above snippet code, have used Frame() widget create frames main window. have master parameter guiWindow background color #16a085. will label display heading main window using Label() widget. consider following snippet code demonstrating same. File: unitConverter.py adding label header frame header_label Label( header_frame, text "STANDARD UNIT CONVERTER", font ("arial black", 16), "#16a085", "#e8f6f3" setting position label header_label.pack(expand True, fill "both") Explanation: above snippet code, have used Label() widget create label displaying heading. have master parameter this widget header_frame frame with text STANDARD UNIT CONVERTER. have also font style Arial black size have also background color #16a085 foreground color #e8f6f3. last, have used pack() method value expand parameter True fill parameter both order position label. will create some objects StringVar() class store data from input output selections menus. will also initial value these objects index value SELECTIONS list created earlier. File: unitConverter.py creating objects StringVar() class input_value StringVar() output_value StringVar() using set() method primary value objects index value SELECTIONS list input_value.set(SELECTIONS[0]) output_value.set(SELECTIONS[0]) Explanation: above snippet code, have created objects StringVar() class. have then used set() method primary value objects index value SELECTIONS list. will create some labels using Label() widget display information body main window. consider snippet code shown below illustrating same. File: unitConverter.py creating labels body main window input_label Label( body_frame, text "From:", "#16a085", "#d0ece7" output_label Label( body_frame, text "To:", "#16a085", "#d0ece7" using grid() method position above labels input_label.grid(row column padx pady sticky output_label.grid(row column padx pady sticky Explanation: above snippet code, have used Label() widget created labels, setting master parameters these widgets body_frame frame. have added text these labels along with background color #16a085 foreground color #d0ece7. have then used grid() method position above labels. will some entry fields main window with help Entry() widget enter display data. following snippet code illustrating usage Entry() widget. File: unitConverter.py creating entry fields body main window input field enter data input_field Entry( body_frame, "#e8f8f5" output field display result output_field Entry( body_frame, "#e8f8f5" using grid() method position above entry fields input_field.grid(row column output_field.grid(row column Explanation: above snippet code, have used Entry() widget entry fields body main window setting master parameter body_frame frame background color #e8f8f5. have then used grid() method position above entry fields. will options menus using OptionMenu() widget. consider following snippet code demonstrating same. File: unitConverter.py adding options menus main window input_menu OptionMenu( body_frame, input_value, *SELECTIONS output_menu OptionMenu( body_frame, output_value, *SELECTIONS using grid() method position above option menus input_menu.grid(row column padx output_menu.grid(row column padx Explanation: above snippet code, have used OptionMenu() widget options menus display list user select from. have master parameter these widgets body_frame frame store selected data input_value output_value variables, respectively. then data list SELECTIONS list both widgets. last, have used grid() method position these option menus main window. will some buttons using Button() widget. These buttons will call convert() reset() functions. consider following snippet code demonstrating same. File: unitConverter.py creating buttons main window CONVERT button convert_button Button( body_frame, text "CONVERT", "#0b5345", "#ffffff", command convert RESET button reset_button Button( body_frame, text "RESET", "#f7dc6f", "#000000", command reset using grid() method position above buttons convert_button.grid(row column reset_button.grid(row column Explanation: above snippet code, have used Button() widget create buttons. first button CONVERT button that will call convert() function allowing user convert given unit into requested one. second RESET button that will call reset() function reset entries main window. last, have positions these buttons using grid() method. will mainloop() method object Tk() class application. following snippet code demonstrating same. File: unitConverter.py running application guiWindow.mainloop() Explanation: above snippet code, have used mainloop() method with guiWindow, object Tk() class, application. Hence, project code completed. save file following command command shell terminal output. Syntax: python unitConverter.py Before output, consider complete code "GUI Unit Converter" project Python. Complete Project Code following snippet code "GUI Unit Converter" project Python programming language. File: unitConverter.py importing widgets modules from tkinter library from tkinter import defining reset function reset(): using delete() method delete entries entry field input_field.delete(0, END) output_field.delete(0, END) setting value option menu first index list using set() method input_value.set(SELECTIONS[0]) output_value.set(SELECTIONS[0]) setting focus input field using focus_set() method input_field.focus_set() defining convert function convert(): getting string from entry field converting into float inputVal float(input_field.get()) getting values from selection menus input_unit input_value.get() output_unit output_value.get() list required combination conversion factors conversion_factors [input_unit length_units output_unit length_units, input_unit weight_units output_unit weight_units, input_unit temperature_units output_unit temperature_units, input_unit area_units output_unit area_units, input_unit volume_units output_unit volume_units] any(conversion_factors): both units same type, perform conversion input_unit "celsius" output_unit "fahrenheit": output_field.delete(0, END) output_field.insert(0, (inputVal 1.8) elif input_unit "fahrenheit" output_unit "celsius": output_field.delete(0, END) output_field.insert(0, (inputVal (5/9)) else: output_field.delete(0, END) output_field.insert(0, round(inputVal unitDict[input_unit] unitDict[output_unit], else: displaying error units different types output_field.delete(0, END) output_field.insert(0, "ERROR") __name__ "__main__": dictionary conversion factors unitDict "millimeter" 0.001, "centimeter" 0.01, "meter" 1.0, "kilometer" 1000.0, "foot" 0.3048, "mile" 1609.344, "yard" 0.9144, "inch" 0.0254, "square meter" 1.0, "square kilometer" 1000000.0, "square centimeter" 0.0001, "square millimeter" 0.000001, "are" 100.0, "hectare" 10000.0, "acre" 4046.856, "square mile" 2590000.0, "square foot" 0.0929, "cubic meter" 1000.0, "cubic centimeter" 0.001, "litre" 1.0, "millilitre" 0.001, "gallon" 3.785, "gram" 1.0, "kilogram" 1000.0, "milligram" 0.001, "quintal" 100000.0, "ton" 1000000.0, "pound" 453.592, "ounce" 28.3495 charts units conversion length_units "millimeter", "centimeter", "meter", "kilometer", "foot", "mile", "yard", "inch" temperature_units "celsius", "fahrenheit" area_units "square meter", "square kilometer", "square centimeter", "square millimeter", "are", "hectare", "acre", "square mile", "square foot" volume_units "cubic meter", "cubic centimeter", "litre", "millilitre", "gallon" weight_units "gram", "kilogram", "milligram", "quintal", "ton", "pound", "ounce" creating list options selection menu SELECTIONS "Select Unit", "millimeter", "centimeter", "meter", "kilometer", "foot", "mile", "yard", "inch", "celsius", "fahrenheit" "square meter", "square kilometer", "square centimeter", "square millimeter", "are", "hectare", "acre", "square mile", "square foot" "cubic meter", "cubic centimeter", "litre", "millilitre", "gallon" "gram", "kilogram", "milligram", "quintal", "ton", "pound", "ounce" creating main window application creating object Tk() class guiWindow Tk() setting title main window guiWindow.title("Unit Converter JAVATPOINT") setting size position main window guiWindow.geometry("500x500+500+250") disabling resizing option guiWindow.resizable(0, setting background color #16a085 guiWindow.configure(bg "#16a085") adding frames main window header_frame Frame(guiWindow, "#16a085") body_frame Frame(guiWindow, "#16a085") setting positions frames header_frame.pack(expand True, fill "both") body_frame.pack(expand True, fill "both") adding label header frame header_label Label( header_frame, text "STANDARD UNIT CONVERTER", font ("arial black", 16), "#16a085", "#e8f6f3" setting position label header_label.pack(expand True, fill "both") creating objects StringVar() class input_value StringVar() output_value StringVar() using set() method primary value objects index value SELECTIONS list input_value.set(SELECTIONS[0]) output_value.set(SELECTIONS[0]) creating labels body main window input_label Label( body_frame, text "From:", "#16a085", "#d0ece7" output_label Label( body_frame, text "To:", "#16a085", "#d0ece7" using grid() method position above labels input_label.grid(row column padx pady sticky output_label.grid(row column padx pady sticky creating entry fields body main window input field enter data input_field Entry( body_frame, "#e8f8f5" output field display result output_field Entry( body_frame, "#e8f8f5" using grid() method position above entry fields input_field.grid(row column output_field.grid(row column adding option menus main window input_menu OptionMenu( body_frame, input_value, *SELECTIONS output_menu OptionMenu( body_frame, output_value, *SELECTIONS using grid() method position above option menus input_menu.grid(row column padx output_menu.grid(row column padx creating buttons main window CONVERT button convert_button Button( body_frame, text "CONVERT", "#0b5345", "#ffffff", command convert RESET button reset_button Button( body_frame, text "RESET", "#f7dc6f", "#000000", command reset using grid() method position above buttons convert_button.grid(row column reset_button.grid(row column running application guiWindow.mainloop() Output: Conclusion This tutorial taught create Unit Converter application based Graphical User Interface using Tkinter library Python. have also learned about different Tkinter library widgets methods their implementation Python script. Next TopicPython Paramiko Module prev next