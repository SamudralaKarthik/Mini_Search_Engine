next prev Snake Game using PyGame Python following tutorial, will understand build Snake Game using PyGame library Python programming language. before started, briefly understand what Snake Game Brief Overview Snake Game Snake video game invented late 1970s arcades. became typical pre-loaded game Nokia phones 1998. main objective player control long, thin creature, looking like snake, which roams around bordered plane, catching maximum number fruits without hitting wall itself. player allowed control direction snake's head (UP, DOWN, LEFT, RIGHT), body snake follows. Every time snake collects piece food, tail grows longer, increasing game's difficulty. Learning build video game interesting learning. Creating Snake game challenging while learning Python PyGame library. Snake game among beginner-friendly projects that every novice programmer should accept challenge. briefly discuss about Python's PyGame library Understanding PyGame library PyGame library cross-platform Python modules utilized develop video games. PyGame mainly comprises computer graphics sound libraries designed utilized with Python programming language. Pete Shinners officially wrote this library replace PySDL. suitable develop client-side applications that potentially wrapped standalone executable. install PyGame library? PyGame library installed using installer typing following command command prompt terminal. Syntax: installing PyGame library install pygame Once installation complete, verify whether pygame library installed properly creating python program file importing pygame module. following snippet code illustrating same. File: verify.py import pygame Now, save file following command command prompt terminal. Syntax: python verify.py library been installed successfully program does return importing error. case exception raised, reinstalling library consider checking their official documentation. Prerequisites Project that have successfully installed required library, briefly look into project's prerequisites. following modules that required project: PyGame: This module will allow develop game. Random: This module will allow generate random numbers, print random value list string, more. Time: This module will allow work with time. Developing Snake Game using PyGame Once have finalized prerequisites project, will start development phase game. have divided development procedure Snake Game Python into stepwise approach. These steps shown below: Step First all, will import required modules. Step Secondly, will define necessary variables application Step will then initialize pygame application Step will then initialize sizes positions game objects. Step will then define necessary functions game work. Step last, will define main function game loop application. will understand above steps detail. Importing required modules will start importing necessary modules development game. will import pygame module along with time random module. consider following snippet code demonstrating same. File: snake.py importing necessary modules import pygame importing pygame module import time importing time module import random importing random module Explanation: above snippet code, have imported pygame module develop game. have then imported time module manipulate time. last, have imported random module generate objects randomly game. Defining necessary variables game will define some variables necessary game. These variables include speed snake, width height screen, some colors that will application. consider following snippet code illustrating same. File: snake.py defining game variables speed_of_snake defining size window SCREEN_WIDTH SCREEN_HEIGHT defining colors midnight_blue pygame.Color(25, 112) mint_cream pygame.Color(245, 255, 250) crimson_red pygame.Color(220, lawn_green pygame.Color(124, 252, orange_red pygame.Color(255, Explanation: above snippet code, have defined variable containing speed snake. have then defined width height window. last, have defined some colors like white, black, red, green, blue using Color() class pygame module. Initializing pygame application will initialize pygame using init() function create main window display working game using pygame.display module. will also frame rates game using pygame.time module consider following snippet code understand implementation same. File: snake.py initializing pygame window using pygame.init() function pygame.init() using set_mode() function pygame.display module size screen display_screen pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT)) setting title application using set_caption() function pygame.display.set_caption('SNAKE JAVATPOINT') creating object Clock() class pygame.time module game_clock pygame.time.Clock() Explanation: above snippet code, have used init() function initialize pygame window. have then used set_mode() function pygame.display module size screen. have then used set_caption() function pygame.display module title application. last, have created object Clock() class pygame.time module refresh rate game. Initializing sizes positions game objects will objects game their sizes positions. These objects include snake fruit. will start setting default position size snake. will also position fruits their spawn flag True. will also default direction snake's head. consider following snippet code illustrating same. File: snake.py defining default position snake position_of_snake [100, defining first four blocks snake body body_of_snake [100, 50], [90, 50], [80, 50], [70, position fruit position_of_fruit random.randrange(1, (SCREEN_WIDTH//10)) random.randrange(1, (SCREEN_HEIGHT//10)) spawning_of_fruit True setting default direction snake towards RIGHT initial_direction 'RIGHT' snake_direction initial_direction Explanation: above snippet code, have defined default position snake. have then defined first four blocks snake body. have then defined position fruit spawning_of_fruit variable True. have also initial direction snake towards RIGHT. Defining necessary functions game that have covered initial requirements game, time define some required functions. will define function display player's score function over game. will implementation these functions detail. Function display score player first function define will allow display player's score. consider following snippet code illustrating same. File: snake.py initial score player_score defining functions function display score display_score(selection, font_color, font_style, font_size): creating font object score_font_style pygame.font.SysFont(font_style, font_size) creating display surface object score_surface score_font_style.render('Your Score str(player_score), True, font_color) creating rectangular object text placement score_rectangle score_surface.get_rect() displaying text display_screen.blit(score_surface, score_rectangle) Explanation: above snippet code, have defined variable storing initialing value score, i.e., have then defined function display_score() that accepts multiple parameters like selected text, font color, style, size. Within this function, have created font object. have then used render() function create background surface that will change whenever score updates. then created rectangular object placement text. last, have used blit() function display score main screen. Function over game second function define will display final score exit application after snake hits wall itself. consider following snippet code illustrating same. File: snake.py function over game game_over(): creating font object game_over_font_style pygame.font.SysFont('times roman', creating display surface object game_over_surface game_over_font_style.render( 'Your Score str(player_score), True, crimson_red creating rectangular object text placement game_over_rectangle game_over_surface.get_rect() setting position text game_over_rectangle.midtop (SCREEN_WIDTH/2, SCREEN_HEIGHT/4) displaying text screen display_screen.blit(game_over_surface, game_over_rectangle) using flip() function update small portion screen pygame.display.flip() suspending execution current thread seconds time.sleep(2) calling quit() function pygame.quit() quiting application quit() Explanation: above snippet code, have defined function game_over(). have created font object display scores within this function. have also created text surfaces render scores. then text's position middle playable area used blit() function display final scores main screen. then used flip() function update score updating surface. last, suspended execution current threat seconds using sleep() function time module called quit() function close application. Creating Game Loop application that have fulfilled requirements develop game, time create main function game loop application. This loop will render everything have created implement both functions accordingly. consider following snippet code illustrating implementation game loop. File: snake.py setting flag value True game_run True game loop using while loop while game_run: iterating through events pygame.event module event pygame.event.get(): setting variable value False event's type equivalent pygame's QUIT constant event.type pygame.QUIT: setting flag value False game_run False setting variable value either DOWN, LEFT, RIGHT event's type equivalent pygame's KEYDOWN constant, stated keys pressed event.type pygame.KEYDOWN: event.key pygame.K_UP: snake_direction 'UP' event.key pygame.K_DOWN: snake_direction 'DOWN' event.key pygame.K_LEFT: snake_direction 'LEFT' event.key pygame.K_RIGHT: snake_direction 'RIGHT' neglecting action taken opposite direction pressed snake_direction 'UP' initial_direction 'DOWN': initial_direction 'UP' snake_direction 'DOWN' initial_direction 'UP': initial_direction 'DOWN' snake_direction 'LEFT' initial_direction 'RIGHT': initial_direction 'LEFT' snake_direction 'RIGHT' initial_direction 'LEFT': initial_direction 'RIGHT' updating position snake every direction initial_direction 'UP': position_of_snake[1] initial_direction 'DOWN': position_of_snake[1] initial_direction 'LEFT': position_of_snake[0] initial_direction 'RIGHT': position_of_snake[0] updating body snake body_of_snake.insert(0, list(position_of_snake)) position_of_snake[0] position_of_fruit[0] position_of_snake[1] position_of_fruit[1]: incrementing player's score player_score spawning_of_fruit False else: body_of_snake.pop() randomly spawning fruit spawning_of_fruit: position_of_fruit random.randrange(1, (SCREEN_WIDTH//10)) random.randrange(1, (SCREEN_HEIGHT//10)) spawning_of_fruit True filling color screen display_screen.fill(mint_cream) drawing game objects screen position body_of_snake: pygame.draw.rect(display_screen, lawn_green, pygame.Rect(position[0], position[1], 10)) pygame.draw.rect(display_screen, orange_red, pygame.Rect(position_of_fruit[0], position_of_fruit[1], 10)) conditions game over position_of_snake[0] position_of_snake[0] SCREEN_WIDTH game_over() position_of_snake[1] position_of_snake[1] SCREEN_HEIGHT game_over() touching snake body block body_of_snake[1:]: position_of_snake[0] block[0] position_of_snake[1] block[1]: game_over displaying score continuously display_score(1, midnight_blue, 'times roman', refreshing game screen pygame.display.update() refresh rate game_clock.tick(speed_of_snake) calling quit() function quit application pygame.quit() Explanation: above snippet code, have then game_run flag value True used while loop game. Within this loop, have iterated through list events checked player requested quit application proceed same flag value False. have also validated responsible movement snake created special condition where snake should allowed move opposite direction instantaneously. then looked collision between snake fruit incremented score setting fruit spawn. then checked snake wall called game_over() function same. have also checked snake itself called game_over() function again. have then displayed scores with help display_score() function. then used update() function refresh game screen game's refresh rate snake's speed. last, have called quit() function outside while loop. have successfully implemented code Snake game. save file following command command shell terminal application. Syntax: python snake.py before output part; briefly complete project code "Snake game using PyGame". Complete Project Code will complete snippet code "Snake game using PyGame Python" project. File: snake.py importing necessary modules import pygame importing pygame module import time importing time module import random importing random module defining speed snake speed_of_snake defining size window SCREEN_WIDTH SCREEN_HEIGHT defining colors midnight_blue pygame.Color(25, 112) mint_cream pygame.Color(245, 255, 250) crimson_red pygame.Color(220, lawn_green pygame.Color(124, 252, orange_red pygame.Color(255, initializing pygame window using pygame.init() function pygame.init() using set_mode() function pygame.display module size screen display_screen pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT)) setting title application using set_caption() function pygame.display.set_caption('SNAKE JAVATPOINT') creating object Clock() class pygame.time module game_clock pygame.time.Clock() defining default position snake position_of_snake [100, defining first four blocks snake body body_of_snake [100, 50], [90, 50], [80, 50], [70, position fruit position_of_fruit random.randrange(1, (SCREEN_WIDTH//10)) random.randrange(1, (SCREEN_HEIGHT//10)) spawning_of_fruit True setting default direction snake towards RIGHT initial_direction 'RIGHT' snake_direction initial_direction initial score player_score defining functions function display score display_score(selection, font_color, font_style, font_size): creating font object score_font_style pygame.font.SysFont(font_style, font_size) creating display surface object score_surface score_font_style.render('Your Score str(player_score), True, font_color) creating rectangular object text placement score_rectangle score_surface.get_rect() displaying text display_screen.blit(score_surface, score_rectangle) function over game game_over(): creating font object game_over_font_style pygame.font.SysFont('times roman', creating display surface object game_over_surface game_over_font_style.render( 'Your Score str(player_score), True, crimson_red creating rectangular object text placement game_over_rectangle game_over_surface.get_rect() setting position text game_over_rectangle.midtop (SCREEN_WIDTH/2, SCREEN_HEIGHT/4) displaying text screen display_screen.blit(game_over_surface, game_over_rectangle) using flip() function update small portion screen pygame.display.flip() suspending execution current thread seconds time.sleep(2) calling quit() function pygame.quit() quiting application quit() setting flag value True game_run True game loop using while loop while game_run: iterating through events pygame.event module event pygame.event.get(): setting variable value False event's type equivalent pygame's QUIT constant event.type pygame.QUIT: setting flag value False game_run False setting variable value either DOWN, LEFT, RIGHT event's type equivalent pygame's KEYDOWN constant, stated keys pressed event.type pygame.KEYDOWN: event.key pygame.K_UP: snake_direction 'UP' event.key pygame.K_DOWN: snake_direction 'DOWN' event.key pygame.K_LEFT: snake_direction 'LEFT' event.key pygame.K_RIGHT: snake_direction 'RIGHT' neglecting action taken opposite direction pressed snake_direction 'UP' initial_direction 'DOWN': initial_direction 'UP' snake_direction 'DOWN' initial_direction 'UP': initial_direction 'DOWN' snake_direction 'LEFT' initial_direction 'RIGHT': initial_direction 'LEFT' snake_direction 'RIGHT' initial_direction 'LEFT': initial_direction 'RIGHT' updating position snake every direction initial_direction 'UP': position_of_snake[1] initial_direction 'DOWN': position_of_snake[1] initial_direction 'LEFT': position_of_snake[0] initial_direction 'RIGHT': position_of_snake[0] updating body snake body_of_snake.insert(0, list(position_of_snake)) position_of_snake[0] position_of_fruit[0] position_of_snake[1] position_of_fruit[1]: incrementing player's score player_score spawning_of_fruit False else: body_of_snake.pop() randomly spawning fruit spawning_of_fruit: position_of_fruit random.randrange(1, (SCREEN_WIDTH//10)) random.randrange(1, (SCREEN_HEIGHT//10)) spawning_of_fruit True filling color screen display_screen.fill(mint_cream) drawing game objects screen position body_of_snake: pygame.draw.rect(display_screen, lawn_green, pygame.Rect(position[0], position[1], 10)) pygame.draw.rect(display_screen, orange_red, pygame.Rect(position_of_fruit[0], position_of_fruit[1], 10)) conditions game over position_of_snake[0] position_of_snake[0] SCREEN_WIDTH game_over() position_of_snake[1] position_of_snake[1] SCREEN_HEIGHT game_over() touching snake body block body_of_snake[1:]: position_of_snake[0] block[0] position_of_snake[1] block[1]: game_over displaying score continuously display_score(1, midnight_blue, 'times roman', refreshing game screen pygame.display.update() refresh rate game_clock.tick(speed_of_snake) calling quit() function quit application pygame.quit() Output: Image Output Snake Game using PyGame Image Working Snake Game Image Game Over Next TopicReturn values from function Python prev next