next prev Solve Stock Span Problem Using Python this tutorial, will solve stock span problem using Python code. Before proceeding solution, let's understand problem statement this problem. What Stock Span Problem? stock span problem financial problem where calculate share price. this problem, have series daily price quotes need calculate span stock's price days. Suppose span Si stock's price given defined maximum number consecutive days just before given day, which price stock current less than equal price given day. example, array days prices given [100, 85], then span values corresponding days Code Implementation following solution simple inefficient where traverse input price array. When visit every element, traverse elements left increment span value while elements left side smaller. Example shareSpan(price, Span): define Span value first Span[0] Calculating span value rest days linearly checking previous days range(1, Span[i] Initialize span value Traverse left while next element left smaller than price[i] while (j>= (price[i] price[j]) Span[i] utility function print elements array printList(arr, range(n): print(arr[i], price [10, 120, len(price) [None] Fill span values list shareSpan(price, print calculated span values printList(S, Output: above method takes 0(n2) solve problem. Let's reduce time complexity 0(n) times. Linear-Time Complexity Method make above solution efficient using linear-time complexity method. this method, S[i] where calculated know closed preceding such that price greater than that than price such condition occurs, let's call h(i), otherwise, define h(i) =-1. will implement this logic using stack data structure. Example getSpan(price, S): len(price) Initializing stack st.append(0) Span value first element fixed S[0] Calculating span values rest elements range(1, elements from stack while stack empty stack smaller than price[i] while( len(st) price[st[-1]] price[i]): st.pop() S[i] len(st) else st[-1]) Push this element stack st.append(i) utility function print elements array printArray(arr, range(0, print (arr[i], Driver program test above function price [10, 120, range(len(price)+1)] Fill span values array getSpan(price, Print calculated span values printArray(S, len(price)) Output: Explanation above code, defined getSpan() method that takes lists arguments. First calculated length price list initialized empty stack. fixed span value first element Then, visited each element using loop. loop iteration, iterated while loop until elements from stack while stack empty stack smaller than price[i]. Then checked, stack becomes empty, price[i] greater than elements left i.e. price[0], price[1]……price[i-1], otherwise price[i] greater than elements after stack. condition true pushed element stack. created utility function print elements array. end, initialized price span list. called getSpan() function along with printList(). printed span values. Time Complexity time complexity this method will 0(n) which better than previous one. that every element array added removed from stack most once. Let's another approach. Without Using Stack getSpan(List, res): res[0] Calculate span values rest elements range(1, counter while counter) List[i] List[i counter]): counter res[i counter] res[i] counter utility function print elements array printArray(arr, range(n): print(arr[i], print() Driver code price 120, len(price) Fill span values array getSpan(price, Print calculated span values printArray(S, Output: Explanation this approach, created getSpan() function that takes three arguments List, length, result. fixed first element calculate rest span values element. defined utility function print elements list. end, called getSpan() method returned span values. Conclusion This problem commonly asked technical interview find this problem coding practice sites like leetcode.com. this tutorial, have implemented solution span problem using three approaches. First solution quite simple inefficient terms memory. Next TopicSelection Sort Python prev next