next prev Split, Sub, Subn functions module python Before looking into Split, Sub, Subn functions module python, understand little about module offered python. regex Regular Expression (RE) particular text string that very useful defining search pattern computer language. It's great extracting data from text, such code, files, logs, spreadsheets, even papers. Regular expressions (also known REs, regexes, regex patterns) small, highly specialized computer language that integrated into Python accessible through module. provide criteria collection potential strings that wish match using this small language; this include English phrases, e-mail addresses, TeX instructions, anything else desire. Then things like, "Does this string match pattern?" there pattern match everywhere this string?" also used change split string variety ways. Regular expression patterns converted into bytecodes, which subsequently performed C-based matching engine. create bytecode that runs quicker, required close attention engine will execute particular write specific style advanced use. Because regular expression language short limited, regular expressions cannot used string processing jobs. Some tasks accomplished using regular expressions, expressions quite complex. certain circumstances, creating Python code perform processing preferable; while Python code slower than complex regular expression, also likely more intelligible. majority letters characters will simply match. regular expression test, example, will perfectly match string test. case-insensitive mode enabled, allowing this match Test TEST well; more that later.) There some exceptions this rule; certain characters special metacharacters that don't match. Instead, they indicate that something unusual should matched, they have effect other parts repeating modifying their meaning. [and] first strings that going observed They're used identify character class, which collection characters match. Individual characters stated, range characters indicated using characters separate them. [abc], example, will match letters c; this same [a-c], which expresses same characters using range. Your would [a-z] just wanted match lowercase letters. Inside classes, metacharacters inactive. complementing set, match characters aren't included class. initial character class indicates this. instance, will match character other than letter '5.' caret special significance appears elsewhere character class. will match either instance. backslash maybe most essential metacharacter. backslash followed various characters signify various specific sequences, just like Python string literals. escaping matter characters regular expression then with help backslash plays very important role defining various characters regular expression. Both special conventional characters used regular expressions. simplest regular expressions most common characters, such 'A', 'a', '0'; they simply match themselves. Ordinary characters concatenated, last matches string 'last'. Some characters, such '(,' unique. Special characters either represent classes ordinary characters impact interpretation regular expressions around them. Repetition qualifiers (*, +,?, m,n, on) cannot nested directly. This eliminates ambiguity with non-greedy suffix?, well other modifiers other implementations. Parentheses used second repetition inner repetition. equation (?:a6*) matches multiple letters, example. Those characters discussed above are: (Dot.) This matches character except newline default mode. This fits character, including with newline, flag set. Matches string's right before newline string, well before newline MULTILINE mode. regular expression foo$ matches only 'foo', while matches both 'foo' 'foobar'. (Caret.) Matches beginning string, well immediately after each newline MULTILINE mode. resulting must match more repeats previous RE. will match non-zero number 'b's after 'a;' will match just 'a.' Causes resulting match more repeats preceding RE, maximum number repetitions. ab* will match number 'b's after 'a', 'ab', 'a'. {m} Specifies that exactly copies previous should matched; there fewer matches, entire will fail match. instance, a6 will match characters exactly, five. Causes resulting match previous RE's repetitions. ab? 'ab' will matched. {m,n} Causes resulting match preceding from repeats, striving match many feasible. instance, a3,5 will match between letters. When omitted, lower bound zero, when omitted, upper bound infinity. a4,b, example, will match 'aaaab' thousand letters followed 'b,' 'aaab.' comma removed, modifier will mistaken with form described previously. {m,n}? Causes resulting match preceding from repeats, match repetitions feasible. This qualifier non-greedy counterpart previous one. example, a3,5 will match characters 6-character string 'aaaaaa,' whereas a3,5? will only match characters. A|B creates regular expression that matches either where arbitrary REs. used separate arbitrary number REs. This also used within groups (see below). separated tried from left right target string scanned. When pattern matches perfectly, branch allowed. This means that once matches, isn't tested again, even would result lengthier overall match. operator, other words, never greedy. enclose inside character class, [|], match literal '|'. (...) contents group recovered after match been completed, matched later string with number special sequence, detailed below. match literals wrap them character class: [(], [)]. (?...) This extension notation (otherwise, after '(' meaningless). first character after determines construct's meaning further syntax. lone exception (?Pname>...), which does establish group default. extensions that currently supported listed below. (?:...) Regular parentheses non-capturing form. substring matched group cannot retrieved referenced later pattern since Matches whatever regular expression inside parentheses. (?<=...) match for... that ends current location before current place string, matches. positive look behind statement what it's termed. Because look behind will back three characters verify contained pattern matches, (?=abc)def will find match 'abcdef'. contained pattern only match strings certain length, a|b acceptable, a3,4 not. respective codes functions module. split method module python: built-in module split() method, which splits text based regular expression matches. split() function following syntax: Syntax: split(pattern, string, maxsplit=0, flags=0) This syntax: pattern regular expression with matches that will utilized split separators. string input string that will split. Maxsplit determines maximum number splits. maxsplit one, resulting list will often have elements. resulting list will have three elements maxsplit two, flags parameter optional value zero default. more regex flags passed flags parameter. flags option modifies regex engine's behavior while matching pattern. code split() method module python like this, Code: sample python code demonstrate split() method module python module imported variables functions offered module import sample class written that will have different functions representing different case scenarios split() method module python class NirnayREClass: constructor written that used initialization class variables 	def __init__(self): 		pass use_split_default() method first method NirnayREClass class that will reflect usage split() method with default parameters only, these default parameters regex pattern input string, split operation performed according provided regular expression 	def use_split_default(self): 		print("Enter string that want split.") 		ip_str input() 		print("Enter regular expression performing split operation input string.") 		pattern input() 		list_after_split re.split(pattern,ip_str) 		print("The result after split operation::") 		print(list_after_split) use_split_with_maxsplit_parameter() method second method NirnayREClass class that will reflect usage split() method with default parameters maxsplits parameter, default parameters regex pattern input string, split operation performed according provided regular expression split performed only upto specified number splits 	def use_split_with_maxsplit_parameter(self): 		print("Enter string that want split.") 		ip_str input() 		print("Enter regular expression performing split operation input string.") 		pattern input() 		print("Enter maximum number splits that want.") 		max_splits int(input()) 		list_after_split re.split(pattern,ip_str,max_splits) 		print("The result after split operation with maxsplit parameter::") 		print(list_after_split) use_split_with_maxsplit_parameter() method second method NirnayREClass class that will reflect usage split() method with default parameters maxsplits flag parameters, default parameters regex pattern input string, split operation performed according provided regular expression split performed only upto specified number splits according flag parameter 	def use_split_with_maxsplit_and_flag_parameter(self): 		print("Enter string that want split.") 		ip_str input() 		print("Enter regular expression performing split operation input string.") 		pattern input() 		print("Enter maximum number splits that want.") 		max_splits int(input()) 		list_after_split re.split(pattern,ip_str,max_splits,flags=re.IGNORECASE) 		print("The result after split operation with maxsplit flag parameter::") 		print(list_after_split) main function object above-written class created member methods() that class called with object NirnayREClass class. main(): re_object NirnayREClass() while(True): print("Select among options printed below::") print("1. split() method module.") print("2. split() method module with maxsplit parameter.") print("3. split() method module with maxsplit flag parameter.") print("4. finish code execution exit.") menu_choice input() menu_choice int(menu_choice) menu_choice re_object.use_split_default() elif menu_choice re_object.use_split_with_maxsplit_parameter() elif menu_choice re_object.use_split_with_maxsplit_and_flag_parameter() elif menu_choice sys.exit() print("Move further with code execution enter (y/n) input") continue_or_exit input() continue_or_exit continue_or_exit 'Y': pass elif continue_or_exit continue_or_exit 'N': sys.exit() #the main fucntion called start execution code. __name__ '__main__': main() Output: [email protected]:~$ python3 re1.py Select among options printed below:: split() method module. split() method module with maxsplit parameter. split() method module with maxsplit flag parameter. finish code execution exit. Enter string that want split. name nirnay khajuria author this python code Enter regular expression performing split operation input string. result after split operation:: ['Hi', 'my', 'name', 'is', 'nirnay', 'khajuria', 'and', "I'm", 'author', 'of', 'this', 'python', 'code'] Move further with code execution enter (y/n) input Select among options printed below:: split() method module. split() method module with maxsplit parameter. split() method module with maxsplit flag parameter. finish code execution exit. Enter string that want split. This example will show case maxsplit parameter split() method module. Enter regular expression performing split operation input string. Enter maximum number splits that want. result after split operation with maxsplit parameter:: ['This', 'example', 'will', 'show', 'the', 'use', 'case maxsplit parameter split() method module.'] Move further with code execution enter (y/n) input Select among options printed below:: split() method module. split() method module with maxsplit parameter. split() method module with maxsplit flag parameter. finish code execution exit. Enter string that want split. This example will show case maxsplit parameter split() method module. Enter regular expression performing split operation input string. Enter maximum number splits that want. result after split operation with maxsplit parameter:: ['This', 'example', 'will', 'show', 'the', 'use', 'case', 'of', 'maxsplit', 'parameter split() method module.'] Move further with code execution enter (y/n) input Select among options printed below:: split() method module. split() method module with maxsplit parameter. split() method module with maxsplit flag parameter. finish code execution exit. Enter string that want split. This example will show case maxsplit parameter split() method module. Enter regular expression performing split operation input string. Enter maximum number splits that want. result after split operation with maxsplit flag parameter:: ['This', 'example', 'will', 'show', 'the', 'use', 'case', 'of', 'maxsplit', 'parameter', 'of', 'the', 'split()', 'method', 'of', 're', 'module.'] Move further with code execution enter (y/n) input Select among options printed below:: split() method module. split() method module with maxsplit parameter. split() method module with maxsplit flag parameter. finish code execution exit. Explanation: above-written code, have seen usage split method this method with different parameters. above-written code, have created class that different functions representing different case scenario split function with different parameters first function used display usage split method with default input parameters there defaults input parameters which input string regular expression these input parameters used split input string based regular expression specified second function represent usage split method with split parameter this scenario splitting input string based provided regular expression limited split parameter specified user last function have used flag parameter split function. Sub() function module python: Return string obtained replacing replacement repl with leftmost non-overlapping instances pattern string. pattern isn't found, string left alone. other words, becomes single newline character, becomes carriage return, Unknown ASCII letter escapes aside future viewed mistakes. Other undiscovered escapes, such left their devices. Syntax: re.sub(pattern, repl, string, count=0, flags=0) regular expression that want match called pattern. pattern also Pattern object, addition regular expression. count parameter indicates maximum number matches that sub() method should replace. repl replacement string. sub() function will replace matches count parameter omitted entirely. flags more regex flags that change pattern's default behavior. sub() function searches string pattern replaces matched strings with replacement string (repl). sub() function fails discover match, original string returned. Otherwise, sub() function replaces matches returns string. leftmost non-overlapping repetitions pattern replaced with sub() function. following example, you'll further detail. Code: sample python code demonstrate sub() method module python module imported variables functions offered module import sample class written that will have different functions representing different case scenarios sub() method module python class NirnayREClass: constructor written that used initialization class variables 	def __init__(self): 		pass use_sub_default() method first method NirnayREClass class that will reflect usage sub() method with default parameters only, these default parameters regex pattern input string, replace operation performed input string according provided regular expression 	def use_sub_default(self): 		print("Enter string which want perform replacement.") 		ip_str input() 		print("Enter regular expression according which want replace input string.") 		pattern input() 		list_after_sub re.sub(pattern,ip_str) 		print("The result after operation::") 		print(list_after_sub) use_sub_with_repl_parameter() method second method NirnayREClass class that will reflect usage sub() method with default parameters parameter, default parameters regex pattern input string, replace operation performed according provided regular expression matching string replaced with repl parameter 	def use_sub_with_repl_parameter(self): 		print("Enter string which want perform replacement.") 		ip_str input() 		print("Enter regular expression according which want replace input string.") 		pattern input() 		print("Enter repl string.") 		repl_str int(input()) 		list_after_sub re.sub(pattern,repl_str,ip_str) 		print("The result after operation::") 		print(list_after_sub) use_sub_with_repl_and_count_parameter() method second method NirnayREClass class that will reflect usage sub() method with default parameters parameter, default parameters regex pattern input string, replace operation performed according provided regular expression matching string replaced with repl parameter upto count parameter 	def use_sub_with_repl_and_count_parameter(self): 		print("Enter string which want perform replacement.") 		ip_str input() 		print("Enter regular expression according which want replace input string.") 		pattern input() 		print("Enter repl string.") 		repl_str input() 		print("Enter count.") 		max_c int(input()) 		list_after_sub re.sub(pattern,repl_str,ip_str,max_c) 		print("The result after operation::") 		print(list_after_sub) main function object above-written class created member methods() that class called with object NirnayREClass class. main(): re_object NirnayREClass() while(True): print("Select among options printed below::") print("1. sub() method module.") print("2. sub() method module with repl parameter.") print("3. sub() method module with repl count parameters.") print("4. finish code execution exit.") menu_choice input() menu_choice int(menu_choice) menu_choice re_object.use_sub_default() elif menu_choice re_object.use_sub_with_repl_parameter() elif menu_choice re_object.use_sub_with_repl_and_count_parameter() elif menu_choice sys.exit() print("Move further with code execution enter (y/n) input") continue_or_exit input() continue_or_exit continue_or_exit 'Y': pass elif continue_or_exit continue_or_exit 'N': sys.exit() #The main function called start execution code. __name__ '__main__': main() Output: [email protected]:~$ python3 re2.py Select among options printed below:: sub() method module. sub() method module with repl parameter. sub() method module with repl count parameters. finish code execution exit. Enter string which want perform replacement. This-is-a-simple-string-having-hyphen-instead-of-space Enter regular expression according which want replace input string. result after sub-operation:: This simple string having hyphen instead space Move further with code execution enter (y/n) input Select among options printed below:: sub() method module. sub() method module with repl parameter. sub() method module with repl count parameters. finish code execution exit. Enter string which want perform replacement. This-is-a-simple-string-having-hyphen-instead-of-space Enter regular expression according which want replace input string. Enter repl string. result after sub-operation:: This_is_a_simple_string_having_hyphen_instead_of_space Move further with code execution enter (y/n) input Select among options printed below:: sub() method module. sub() method module with repl parameter. sub() method module with repl count parameters. finish code execution exit. Enter string which want perform replacement. This-is-a-simple-string-having-hyphen-instead-of-space Enter regular expression according which want replace input string. Enter repl string. Enter count. result after sub-operation:: This_is_a_simple_string_having-hyphen-instead-of-space Move further with code execution enter (y/n) input Select among options printed below:: sub() method module. sub() method module with repl parameter. sub() method module with repl count parameters. finish code execution exit. Enter string which want perform replacement. Only replace hyphen this-sentence Enter regular expression according which want replace input string. result after sub-operation:: Only replace hyphen this sentence Move further with code execution enter (y/n) input Select among options printed below:: sub() method module. sub() method module with repl parameter. sub() method module with repl count parameters. finish code execution exit. Enter string which want perform replacement. Replace +this string+ Enter regular expression according which want replace input string. \+ Enter repl string. result after sub-operation:: Replace *this string* Move further with code execution enter (y/n) input Select among options printed below:: sub() method module. sub() method module with repl parameter. sub() method module with repl count parameters. finish code execution exit. Enter string which want perform replacement. [email protected] [email protected] Enter regular expression according which want replace input string. Enter repl string. Enter count. result after sub-operation:: mail [email protected] Move further with code execution enter (y/n) input Explanation: above-written code, have seen usage method usage with different parameters. above-written code, have created class that different functions representing different case scenario function with different parameters first function used display usage method with default input parameters there defaults input parameters which input string regular expression these input parameters used replace input string based regular expression specified, second function represent usage method with repl parameter this scenario replacement input string based provided regular expression limited count parameter depicted last function. Subn function module: regular expressions (RE) module Python function called subn() that defines strings group strings patterns that match module must imported before utilize this function. subn() method similar sub() function, additionally gives count many replacements you've done. Syntax: re.subn(pattern, repl, string, count=0, flags=0) first argument, pattern, specifies text pattern replace. second option, repl, specifies string/pattern that will used replace pattern. third option, string, specifies string that will used subn() function. fourth option, count, specifies many replacements should made before subn() action performed. fifth argument, flags, aids code reduction performs similar roles split operations. Code: sample python code demonstrate subn() method module python module imported variables functions offered module import import sample class written that will have different functions representing different case scenarios subn() method module python class NirnayREClass: constructor written that used initialization class variables 	def __init__(self): 		pass use_subn_default() method first method NirnayREClass class that will reflect usage subn() method with default parameters only, these default parameters regex pattern input string, replace operation performed input string according provided regular expression 	def use_subn_default(self): 		print("Enter string which want perform replacement.") 		ip_str input() 		print("Enter regular expression according which want replace input string.") 		pattern input() 		list_after_sub re.sub(pattern,ip_str) 		print("The result after operation::") 		print(list_after_sub) use_subn_with_repl_parameter() method second method NirnayREClass class that will reflect usage subn() method with default parameters parameter, default parameters regex pattern input string, replace operation performed according provided regular expression matching string replaced with repl parameter 	def use_subn_with_repl_parameter(self): 		print("Enter string which want perform replacement.") 		ip_str input() 		print("Enter regular expression according which want replace input string.") 		pattern input() 		print("Enter repl string.") 		repl_str int(input()) 		list_after_sub re.sub(pattern,repl_str,ip_str) 		print("The result after operation::") 		print(list_after_sub) use_subn_with_repl_and_count_parameter() method second method NirnayREClass class that will reflect usage subn() method with default parameters parameter, default parameters regex pattern input string, replace operation performed according provided regular expression matching string replaced with repl parameter upto count parameter 	def use_subn_with_repl_and_count_parameter(self): 		print("Enter string which want perform replacement.") 		ip_str input() 		print("Enter regular expression according which want replace input string.") 		pattern input() 		print("Enter repl string.") 		repl_str input() 		print("Enter count.") 		max_c int(input()) 		list_after_sub re.sub(pattern,repl_str,ip_str,max_c) 		print("The result after operation::") 		print(list_after_sub) main function object above-written class created member methods() that class called with object NirnayREClass class. main(): re_object NirnayREClass() while(True): print("Select among options printed below::") print("1. subn() method module.") print("2. subn() method module with repl parameter.") print("3. subn() method module with repl count parameters.") print("4. finish code execution exit.") menu_choice input() menu_choice int(menu_choice) menu_choice re_object.use_subn_default() elif menu_choice re_object.use_subn_with_repl_parameter() elif menu_choice re_object.use_subn_with_repl_and_count_parameter() elif menu_choice sys.exit() print("Move further with code execution enter (y/n) input") continue_or_exit input() continue_or_exit continue_or_exit 'Y': pass elif continue_or_exit continue_or_exit 'N': sys.exit() #The main function called start execution code. __name__ '__main__': main() Output: Select among options printed below:: subn() method module. subn() method module with repl parameter. subn() method module with repl count parameters. finish code execution exit. Enter string which want perform replacement. This sample string show usage subn() function. Enter regular expression according which want replace input string. result after subm operation:: ('This sample string show usage subn function.', Move further with code execution enter (y/n) input Select among options printed below:: subn() method module. subn() method module with repl parameter. subn() method module with repl count parameters. finish code execution exit. Enter string which want perform replacement. repl [email protected]@meter used [email protected] with specific string Enter regular expression according which want replace input string. Enter repl string. result after subn operation:: ('The repl parameter used replace with specific string', Move further with code execution enter (y/n) input Select among options printed below:: subn() method module. subn() method module with repl parameter. subn() method module with repl count parameters. finish code execution exit. Enter string which want perform replacement. [email protected] [email protected] Enter regular expression according which want replace input string. Enter repl string. Enter count. result after subn operation:: ('My mail [email protected]', Move further with code execution enter (y/n) input	 Select among options printed below:: subn() method module. subn() method module with repl parameter. subn() method module with repl count parameters. finish code execution exit. Explanation: above-written code, have seen usage subn method usage with different parameters. above-written code, have created class that different functions representing different case scenario subn function with different parameters first function used display usage subn method with default input parameters there defaults input parameters which input string regular expression these input parameters used replace input string based regular expression specified, second function represent usage subn method with repl parameter this scenario replacement input string based provided regular expression limited count parameter depicted last function. Conclusion: this article, understood usage Split, Sub, Subn functions module python. have also seen sample python code these functions different scenarios. Next TopicRobot Framework Python prev next