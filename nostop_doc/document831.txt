next prev Assistant using Wolfram Alpha Python Wolfram Alpha Webservice offers web-based Application Programming Interface (API), allowing computational presentation skills Wolfram Alpha integrated into enterprise, desktop, mobile, applications. Wolfram Alpha that calculate expert-level answers with help algorithms, knowledgebase, Artificial Intelligence (AI) technology Wolfram which made possible Wolfram Language. following tutorial, will learn build assistant application Python which answer simple questions. before start building project, understand procedure creating Wolfram Alpha Creating Wolfram Alpha following step-by-step procedure create Wolfram Alpha Step will start creating account official website Wolfram alpha. link same follows: https://account.wolfram.com/auth/create. Step Once have successfully signed Wolfram Alpha, will redirected 'Sign In' page. will entering registered E-mail Wolfram will redirected homepage website. Step will head account section right corner. will select Apps (API)' option from dropdown menu. Step will click 'Get AppID' button Step Once dialog appears, shown below, will enter 'Application name' 'Description'. Step will note down APPID that appears next dialog box. This will particular application. that have gotten APPID, time install wolframalpha package Python implementation this install wolframalpha package? Python wolframalpha package installed using installer typing following command command prompt terminal. Syntax: installing wolframalpha package install wolframalpha Once installation complete, verify whether wolframalpha package installed properly creating python program file importing wolframalpha module. following snippet code illustrating same. File: verify.py import wolframalpha Now, save file following command command prompt terminal. Syntax: python verify.py package been installed successfully program does return importing error. case exception raised, reinstalling package consider checking official documentation. implementation this module creating Command-Line Interface (CLI) Assistant application. will later this functionality develop Graphical User Interface (GUI) with help Tkinter module. Code Implementation 'Assistant using Wolfram Alpha API' project will create simple assistant that will answer user's question with help Wolfram Alpha API. consider following snippet code demonstrating implementation same. File: my_assistant.py importing wolframalpha module import wolframalpha defining function find answer find_answer(question): """This function will return answer input query from users""" declaring variable store app_id 'Enter your APP_ID' creating object Client() class using the_client wolframalpha.Client(app_id) storing responses from wolfram alpha response the_client.query(question) including only text from responses answer next(response.results).text returning answer return answer main function __name__ '__main__': using input() function accept question from user question input("Question: calling find_answer() function passing input question answer find_answer(question) printing answer user print("Answer:", answer) Explanation: above snippet code, have imported wolframalpha module. have then defined function find_answer() that will return answer asked query passed parameter. have declared variable app_id storing created earlier within this function. have then created object Client() class using stored query() function search responses raised question, storing result response variable. then declared another variable answer store text response only from response variable. last, have returned result stored answer variable. have then defined main function, using input() function user question. have then called find_answer() function passing entered question storing result answer variable. last, have printed answer user. this code output. Output Question: Value Answer: 3.1415926535897932384626433832795028841971693993751058209749445923... Output Question: president US? Answer: Biden (from 20/01/2021 present) Output Question: What capital India? Answer: Delhi, Delhi, India that have understood wolframalpha module create this functionality Prerequisites Project There some libraries modules that will need creation Assistant Application Python. These libraries briefly described follows: tkinter:The tkinter module will allow provide application with graphical user interface (GUI). wolframalpha: wolframalpha module will allow calculate expert-level answers with algorithms, knowledgebase, Artificial Intelligence (AI) technology Wolfram. pillow:The pillow library Python Imaging Library that allows image processing capabilities Python interpreter. Since tkinter module comes preinstalled with Python, there need install externally. have also installed wolframalpha module earlier this tutorial. also install pillow (PIL) library using installer typing following command command prompt terminal. Syntax: installing pillow library install pillow Once installation complete, verify whether pillow library installed properly creating python program file importing pillow (PIL) module. following snippet code illustrating same. File: verify.py import Now, save file following command command prompt terminal. Syntax: python verify.py library been installed successfully program does return importing error. case exception raised, reinstalling library consider checking their official documentation. start building project. Building Assistant Application using Tkinter Wolfram Alpha Python have divided complete project code creating this Application Python into several steps better understanding. These steps shown below: Step Importing necessary modules Step Defining required functions execute different operations Step Creating main window application. Step Adding necessary widgets window setting event triggers. understand steps mentioned above more elaborate way. Importing necessary modules first, will start importing required modules, which include widgets modules from tkinter module, Image ImageTk modules from module, wolframalpha module. consider following snippet code illustrating same. File: main.py importing required modules from tkinter import importing widgets modules from Tkinter from tkinter import messagebox importing messagebox module from Tkinter from import Image, ImageTk importing Image ImageTk modules from import wolframalpha importing wolframalpha module Explanation: above snippet code, have imported widgets modules from tkinter module work with Graphical User Interface. have then imported messagebox module from tkinter module display some important messages. then imported Image ImageTk modules from module images program them Tkinter application. last, have imported wolframalpha module calculate expert-level answers. Defining necessary function execute different operations will define some functions find result Query, display result users, clear entries from application, close application. understand implementation these functions detail. Function find answer entered Query This function will same that used earlier demonstrate wolframalpha module. This function will accept parameter form Query return appropriate answer. consider following snippet code illustrating same. File: main.py --------------------------------- Functions --------------------------------- defining function find answer find_answer(question): """This function will return answer input query from users""" declaring variable store app_id 'Enter your APP_ID' creating object Client() class using the_client wolframalpha.Client(app_id) try: storing response from wolfram alpha response the_client.query(question) including only text from responses answer next(response.results).text except: answer returning answer return answer Explanation: above code snippet, have defined function find_answer() that accepts parameter question. have declared variable store within this function. have then created object Client() class using used try-except method handle errors raised. have used query() function search responses input query stored appropriate result answer variable. Function display result application will define function that will accept query entered entry field call find_answer() function display answer that query. consider following snippet code illustrating same. File: main.py defining function compute result compute_result(): """This function checks user raised query calls find_answer() function returns appropriate answer""" using delete() method delete previous entry from answer_field field answer_field.delete(0, END) using get() method retrieve entered query from question_field field query question_field.get() field empty, call find_answer() function store result query answer find_answer(query) result empty string, insert answer answer_field field using insert() method answer answer_field.insert(0, answer) result empty string, display message with error message using showerror() function messagebox module else: answer_field.insert(0, Results Found!") mb.showerror("No Results Found", "Oops! Unable find answer Query.") question_field field empty, display message with error message using showerror() function messagebox module else: mb.showerror("Empty Field", "Entry Field Cannot Empty.") Explanation: above snippet code, have defined function compute_result(). Within this function, have used delete() method clear previous text from answer_field. have then used get() method retrieve data from question_field checked entered query empty string. have then called find_answer() with retrieved query parameter stored returned result answer variable. have also checked whether returned value empty string displayed result using insert() method answer_field field. also used showerror() method messagebox module display message with ERROR message indicating problem. Function reset entries application will define function delete current entries from entry field. consider following snippet code illustrating same. File: main.py defining function reset entry fields reset_entries(): """This function deletes entries from entry fields""" using delete() method delete entries from entry fields question_field.delete(0, END) answer_field.delete(0, END) displaying message display SUCCESS statement using showinfo() function messagebox module mb.showinfo("Fields Reset", "All Fields reset.") Explanation: above snippet code, have defined function reset_entries(). Within this function, have used delete() method delete entries from entry fields. have also used showinfo() method messagebox module display message with SUCCESS statement. Function close application will define function exit application using destroy() method Tk() class. consider following snippet code illustrating same. File: main.py defining function close application exit_application(): """This function closes application""" using destroy() method close application main_win.destroy() Explanation: above snippet code, have defined function exit_application(). Within this function, have used destroy() method with object Tk() class close application. Creating main window application that have defined necessary functions application, time create main window where widgets their functionalities. will start creating object Tk() class tkinter module. This object will main window application. will also title this window along with icon. will also window's geometry configure background color. consider following snippet code demonstrating same. File: main.py main function __name__ '__main__': instanting Tk() class main_win Tk() setting title window main_win.title("My Assistant JAVATPOINT") defining geometry window main_win.geometry("700x300+600+300") disabling resizable option main_win.resizable(0, configuring background color window #F0FFFF main_win.config(bg "#F0FFFF") adding icon application main_win.iconbitmap("./icons/assistant.ico") Explanation: above snippet code, have defined code main function. Within this function, have instantiated Tk() class created application's main window. then used title() function window's title. have also used geometry() function size window disabled resizable option setting parameters resizable() function zeros. have configured background color #F0FFFF with help config() function. last, have used iconbitmap() function icon application. Adding required widgets window setting event triggers Since main window application created successfully, will necessary widgets window event triggers. These widgets include frames structure other widgets, labels display important information, entry fields insert data, buttons manipulate entered data call functions. understand addition these widgets detail. Adding Frames Images will start adding frames main window. These frames will help structure other widgets. These frames created using Frame() widget tkinter module. will also import image program using Image ImageTk module module. This image will make application much more attractive. consider following snippet code demonstrating same. File: main.py importing image file, resizing making compatible with Tkinter assist_img ImageTk.PhotoImage(Image.open("./images/bot.png").resize((50, 50), Image.Resampling.LANCZOS)) adding frames using Frame() widget title_frame Frame(main_win, "#F0FFFF") this frame will contain labels display heading subheading application input_frame Frame(main_win, "#F0FFFF") this frame will contain labels entry fields enter query display result button_frame Frame(main_win, "#F0FFFF") this frame will contain buttons manipute entered data call function using pack() function positioning frames main window screen title_frame.pack() input_frame.pack(fill "both", padx button_frame.pack() Explanation: above snippet code, have imported image file resized using open() function followed resize() function Image module made compatible with Tkinter usage using PhotoImage() class ImageTk module. have then used Frame() widget some frames main window setting their master parameters main_win, object Tk() class created earlier. have also background color these frames #F0FFFF. last, have used pack() function positioning these frames main window screen. Adding widgets title_frame Frame that have successfully added frames main window, time necessary widgets these frames. will start adding some labels title_frame Frame. These labels will display image imported earlier text representing heading application. will Label() widget create these labels their positions main window with help grid() function. consider following snippet code demonstrating same. File: main.py ----------------------------- title_frame frame ----------------------------- adding image label using Label() widget image Label( title_frame, image assist_img, "#F0FFFF" adding label display heading with help Label() widget heading Label( title_frame, text Assistant", font ("times roman", "20", "bold"), "#F0FFFF", "#4169E1" using grid() function position above labels grid format main window image.grid(row column padx pady heading.grid(row column padx pady Explanation: above snippet code, have used Label() widget image text main window setting their master parameters title_frame Frame. have then used grid() function position these labels grid format window. Adding widgets input_frame Frame will some widgets input_frame Frame. These widgets include labels display information about entry fields entry fields enter query display result. will Label() widget labels Entry() widget fields application. will then grid() function position these widgets main window. consider following snippet code illustrating same. File: main.py ----------------------------- input_frame frame ----------------------------- adding label using Label() widget display some informative statement question_label Label( input_frame, text "Enter Query font ("times roman", "12", "bold"), "#F0FFFF", "#191970" adding entry field users enter query with help Entry() widget question_field Entry( input_frame, width font ("times roman", "12"), "#FFFFFF", "#000000", relief GROOVE adding label once again display another informative statement using Label() widget answer_label Label( input_frame, text "Answer font ("times roman", "12", "bold"), "#F0FFFF", "#191970" adding entry field display result entered query with help Entry() widget answer_field Entry( input_frame, width font ("times roman", "12"), "#FFFFFF", "#000000", relief GROOVE using grid() function position above labels entry fields grid format main window question_label.grid(row column padx pady sticky question_field.grid(row column padx pady sticky answer_label.grid(row column padx pady sticky answer_field.grid(row column padx pady sticky Explanation: above snippet code, have used Label() Entry() widgets required labels entry fields value their master parameters input_frame frame. have then used grid() function position these labels entry fields grid format main window screen. Adding widgets button_frame Frame will some buttons button_frame Frame using Button() widget. These buttons will allow find results query generate output, clear entries from entry field, close application. File: main.py ----------------------------- button_frame frame ----------------------------- adding button compute answer query with help Button() widget compute_button Button( button_frame, text "Go", font ("times roman", "12"), "#00FF7F", "#000000", activebackground "#3CB371", activeforeground "#FFFFFF", relief GROOVE, width command compute_result adding button reset entries with help Button() widget reset_button Button( button_frame, text "Clear", font ("times roman", "12"), "#DCDCDC", "#000000", activebackground "#696969", activeforeground "#FFFFFF", relief GROOVE, width command reset_entries adding button close application with help Button() widget close_button Button( button_frame, text "Cancel", font ("times roman", "12"), "#FF0000", "#FFFFFF", activebackground "#8B0000", activeforeground "#FFFFFF", relief GROOVE, width command exit_application using grid() function position above buttons grid format main window compute_button.grid(row column padx pady reset_button.grid(row column padx pady close_button.grid(row column padx pady Explanation: above snippet code, have used Button() widget some buttons application their master parameters button_frame Frame. have customized these buttons used command parameters call different functions created earlier. last, have then used grid() function position these buttons grid format main window. that have added necessary widgets application, time Running Application will mainloop() method with object Tk() class application. consider following snippet code illustrating same. File: main.py using mainloop() method application main_win.mainloop() Explanation: above snippet code, have used mainloop() method with main_win, object Tk() class, application. Hence, project code complete. will save this python program file following command command prompt terminal output. Syntax: python main.py before output, complete project code 'GUI Assistant using Wolfram Alpha API' shown below. Complete Project Code following project code 'GUI Assistant using Wolfram Alpha Python'. File: main.py importing required modules from tkinter import importing widgets modules from Tkinter from tkinter import messagebox importing messagebox module from Tkinter from import Image, ImageTk importing Image ImageTk modules from import wolframalpha importing wolframalpha module --------------------------------- Functions --------------------------------- defining function find answer find_answer(question): """This function will return answer input query from users""" declaring variable store app_id 'Enter your APP_ID' creating object Client() class using the_client wolframalpha.Client(app_id) try: storing response from wolfram alpha response the_client.query(question) including only text from responses answer next(response.results).text except: answer returning answer return answer defining function compute result compute_result(): """This function checks user raised query calls find_answer() function returns appropriate answer""" using delete() method delete previous entry from answer_field field answer_field.delete(0, END) using get() method retrieve entered query from question_field field query question_field.get() field empty, call find_answer() function store result query answer find_answer(query) result empty string, insert answer answer_field field using insert() method answer answer_field.insert(0, answer) result empty string, display message with error message using showerror() function messagebox module else: answer_field.insert(0, Results Found!") mb.showerror("No Results Found", "Oops! Unable find answer Query.") question_field field empty, display message with error message using showerror() function messagebox module else: mb.showerror("Empty Field", "Entry Field Cannot Empty.") defining function reset entry fields reset_entries(): """This function deletes entries from entry fields""" using delete() method delete entries from entry fields question_field.delete(0, END) answer_field.delete(0, END) displaying message display SUCCESS statement using showinfo() function messagebox module mb.showinfo("Fields Reset", "All Fields reset.") defining function close application exit_application(): """This function closes application""" using destroy() method close application main_win.destroy() main function __name__ '__main__': instanting Tk() class main_win Tk() setting title window main_win.title("My Assistant JAVATPOINT") defining geometry window main_win.geometry("700x300+600+300") disabling resizable option main_win.resizable(0, configuring background color window #F0FFFF main_win.config(bg "#F0FFFF") adding icon application main_win.iconbitmap("./icons/assistant.ico") importing image file, resizing making compatible Tkinter assist_img ImageTk.PhotoImage(Image.open("./images/bot.png").resize((50, 50), Image.Resampling.LANCZOS)) adding frames using Frame() widget title_frame Frame(main_win, "#F0FFFF") this frame will contain labels display heading subheading application input_frame Frame(main_win, "#F0FFFF") this frame will contain labels entry fields enter query display result button_frame Frame(main_win, "#F0FFFF") this frame will contain buttons manipute entered data call function using pack() function positioning frames main window screen title_frame.pack() input_frame.pack(fill "both", padx button_frame.pack() ----------------------------- title_frame frame ----------------------------- adding image label using Label() widget image Label( title_frame, image assist_img, "#F0FFFF" adding label display heading with help Label() widget heading Label( title_frame, text Assistant", font ("times roman", "20", "bold"), "#F0FFFF", "#4169E1" using grid() function position above labels grid format main window image.grid(row column padx pady heading.grid(row column padx pady ----------------------------- input_frame frame ----------------------------- adding label using Label() widget display some informative statement question_label Label( input_frame, text "Enter Query font ("times roman", "12", "bold"), "#F0FFFF", "#191970" adding entry field users enter query with help Entry() widget question_field Entry( input_frame, width font ("times roman", "12"), "#FFFFFF", "#000000", relief GROOVE adding label once again display another informative statement using Label() widget answer_label Label( input_frame, text "Answer font ("times roman", "12", "bold"), "#F0FFFF", "#191970" adding entry field display result entered query with help Entry() widget answer_field Entry( input_frame, width font ("times roman", "12"), "#FFFFFF", "#000000", relief GROOVE using grid() function position above labels entry fields grid format main window question_label.grid(row column padx pady sticky question_field.grid(row column padx pady sticky answer_label.grid(row column padx pady sticky answer_field.grid(row column padx pady sticky ----------------------------- button_frame frame ----------------------------- adding button compute answer query with help Button() widget compute_button Button( button_frame, text "Go", font ("times roman", "12"), "#00FF7F", "#000000", activebackground "#3CB371", activeforeground "#FFFFFF", relief GROOVE, width command compute_result adding button reset entries with help Button() widget reset_button Button( button_frame, text "Clear", font ("times roman", "12"), "#DCDCDC", "#000000", activebackground "#696969", activeforeground "#FFFFFF", relief GROOVE, width command reset_entries adding button close application with help Button() widget close_button Button( button_frame, text "Cancel", font ("times roman", "12"), "#FF0000", "#FFFFFF", activebackground "#8B0000", activeforeground "#FFFFFF", relief GROOVE, width command exit_application using grid() function position above buttons grid format main window compute_button.grid(row column padx pady reset_button.grid(row column padx pady close_button.grid(row column padx pady using mainloop() method application main_win.mainloop() Output: Next TopicSignal Processing Hands-on Python prev next