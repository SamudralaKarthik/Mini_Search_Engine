next prev Find triplets with Zero Python this tutorial, will write Python program find triplets given list whose equals zero. will solve this problem using various methods. First, let's understand problem statement. Problem Statement list distinct element given; need find triplets list whose zero. Example Input: list1 Output: Explanation: triplets with zero Input: list2= Output: Explanation: triplets with zero Let's understand first method solve this problem Method Brute-force Algorithm This simple method takes O(n3) times solve this problem. this method, will follow below approach will three loops check whether three elements zero not. three elements zero, then print element; otherwise, print found. Let's understand following code. Example find_triplets(list1, triplets flag False range(0, n-2): range(i+1, n-1): range(j+1, (list1[i] list1[j] list1[k] triplets.append([list1[i], list1[j], list1[k]]) flag True triplet with flag list1ay (flag False): print(" exist return triplets list1 [-20, -20, -40, len(list1) print(find_triplets(list1, Output: [[-20, 20], [-20, -20], -20], -40]] Explanation above code, three loop first loop zero n-2, second loop will from third loop loop counter specifies three elements triplets. Then, checked elements i'th, j'th, k'th equal zero not. condition true, print else continue. Complexity Analysis: Time Complexity:The time complexity O(n3). three nested loops required, time complexity O(n3). Auxiliary Space:The auxiliary space O(1). Since extra space required, space complexity constant. Method Using Hashing this method, will hashing desired result. This method more efficient than previous gives result lesser time O(N2). will follow below approach involves traversing through array. every element list1[i], find pair with "-list1[i]". This problem reduces pair solved using hashing O(n) time. Let's understand following code Example find_triplets(list1, triplets flag False range(0, n-2): set() range(i -(list1[i] list1[j]) triplets.append([x, list1[i], list1[j]]) flag True else: s.add(list1[j]) triplet with flag list1ay (flag False): print(" exist return triplets list1 [-20, -20, -40, len(list1) print(find_triplets(list1, Output: [[0, -20, 20], [40, -20, -20], [20, -20], [40, -40]] Explanation above code, created hashmap store key-value pair. Then, nested loops; outer loop runs from n-2 inner loop from n-1. Then, check i'th j'th elements multiplied present hashmap not. element present hashmap, print triplets; insert component hashmap. Complexity Analysis: Time Complexity:The time complexity O(n2) because there only nested loops required, time complexity O(n2). Auxiliary Space:The auxiliary space O(n) because hashmap required, space complexity linear. Method Using Sorting this method, will sorting appropriate result O(n2) times. Let's understand following code. Example find_triplets(list1, triplets flag False range(0, n-2): list1.sort() range(0, n-1): initialize left right list1[i] while r): list1[l] list1[r] print elements it's zero triplets.append([x, list1[l], list1[r]]) l+=1 r-=1 flag True three elements less than zero then increment left elif list1[l] list1[r] l+=1 greater than zero then decrement right side else: r-=1 triplet with flag list1ay (flag False): print(" exist return triplets list1 len(list1) print(find_triplets(list1, Output: [[-6, [-6, Explanation above code, first, sort array ascending order traverse array from start end. every index create variable Then, loop until less than list1[i], list1[j], array[r] equal zero, then print triplets break loop. Now, check less than increment value l; increasing value will increase list sorted, list1[i+1]>list1[l]. more significant than zero, then decrement value decreasing value will decrease array sorted, list1[r-1] list1[r]. Complexity Analysis: Time Complexity:The time complexity O(n2) because there only nested loops required, time complexity O(n2). Auxiliary Space:The auxiliary space O(1) because hashmap required, space complexity linear. Conclusion This tutorial includes various methods find triplets. have also implemented code, explained working corresponding time complexities. Next TopicGenerate HTML using tinyhtml Module Python prev next