next prev Label Encoding Python Introduction Before begin learning categorical variable encoding, understand basics data types their scales first. becomes essential learners understand these topics order proceed work with categorical variable encoding. know, Data distinct type information usually formatted specific manner. categorize Data into three types, called, structured data, semi-structured data, unstructured data. data embodied form matrix with rows columns denoted structured data. These data stored table database, rows columns excel sheet, delimiter separated CSV. Data which embodied form matrix said semi-structured data unstructured data. generally store Semi-Structured data files, JSON format more, whereas unstructured data form images, e-mails, videos, data, textual data. consider provided business problem based machine learning data science. deal with structured data only data gathered combination continuous variables categorical variables, most algorithms Machine Learning will understand able work with categorical variables. This statement means that algorithms machine learning perform considerably better accuracy other performance metrics when data represented numeric form instead categorical model training testing. Hence, categorical data must encoded into numbers before using evaluate model. Some Algorithms Machine Learning, like Tree-based (such Decision Tree, Random Forest) algorithms, perform better handling categorical variables. best training project associated with data science convert categorical data numerical data. Since objective clear, understand several types categorical data before start building statistical models, deep learning models, machine learning models start encoding transforming categorical data numerical forms. Understanding Nominal Scale Nominal Scale defined variables that names only. They used label variables. Nominal scales never overlap with each other, have numerical significance. Note: Nominal Scale refers only those variables that just name. Here some examples that represent data nominal Scale. Once collect data, have assign numerical code representing nominal variable generally. What person's Gender? What person's Marital Status? which city does person reside? Male Single Delhi Female Married Mumbai Divorced Chennai Widowed Bangalore City where Person live Assigned Numerical Code Delhi Mumbai Chennai Bangalore instance, assign numerical code address Delhi, address Mumbai, address Chennai, address Bangalore categorical variable which city does person reside. Important Note: assigned numerical value does have attached mathematical value. Above statement implies that basic mathematical operations like division, multiplication, subtraction, addition pointless. result, operations like Delhi/Mumbai Chennai Bangalore make sense all. Understanding Ordinal Scale Ordinal Scale refers variable which data value stored from ordered set. instance, data utilizes Likert scale representing customer feedback survey that finite, shown table below: Customer Feedback: 5-Points Likert Scale Feedback Assigned Numerical Code Very Poor Poor Satisfactory Good Very Good above case, have collected feedback data with help five-point Likert scale. assigned numerical code Very Poor, Poor, Satisfactory, Good, Very Good. also observe that better than much better than However, will make sense subtract very good from satisfactory. already know, most machine learning algorithms function exclusively with numerical values data. This reason behind encoding categorical features into representation compatible using models. Thus, there several well-known approaches available encoding, including: Label Encoding One-hot Encoding Ordinal Encoding However, will covering Label Encoding only throughout this tutorial: Understanding Label Encoding Python Label Encoding, need replace categorical value using numerical value ranging between zero total number classes minus one. instance, value categorical variable different classes, will Now, understand label encoding with data COVID-19 cases India across states example. While observing following data frame, will find that State column consists categorical value that pretty machine-friendly. other columns consist numerical values. Now, label encoding State Column. Covid-19 cases India across states State Confirmed Deaths Recovered Maharashtra 284281 11194 158140 Tamil Nadu 156369 2236 107416 Delhi 118645 3545 97693 Karnataka 51422 2089 19729 Gujarat 45481 2089 32103 Uttar Pradesh 43441 1046 26675 observe, after performing label encoding, have assigned numerical value each every categorical value. Some might wonder numbering unordered (Top-Down). reason that have assigned numbers alphabetical order which implies that Delhi assigned Gujarat Karnataka State (Nominal Scale) State (Label Encoding) Maharashtra Tamil Nadu Delhi Karnataka Gujarat Uttar Pradesh Label Encoding using Python sklearn library Python offers users pre-defined functions order work with Label Encoding dataset. Syntax: from sklearn import preprocessing preprocessing.LabelEncoder() observe, have created object LabelEncoder class then object apply label encoding data. There primarily ways available Label Encoding: LabelEncoder class with help scikit-learn library Category Codes Label Encoding using scikit-learn library begin with process Label Encoding. primary step dataset encoding have dataset. have created simple dataset here. Example: Creating dataset import pandas my_data "Gender" ['F', 'M', 'M', 'F', 'M', 'F', 'M', 'F', 'F', 'M'], "Name" ['Cindy', 'Carl', 'Johnny', 'Stacey', 'Andy', 'Sara', 'Victor', 'Martha', 'Mindy', 'Max'] pd.DataFrame(my_data) print("Geniune Data Frame:\n") print(blk) observe, have created dictionary 'data' transformed into Data Frame with help DataFrame() function pandas. Output: Geniune Data Frame: Gender Name Cindy Carl Johnny Stacey Andy Sara Victor Martha Mindy observe from above dataset, have variable called 'Gender' that labels 'M', respectively. Moving ahead, importing LabelEncoder class. will then apply class 'Gender' variable dataset. Example: import pandas from sklearn import preprocessing my_data "Gender" ['F', 'M', 'M', 'F', 'M', 'F', 'M', 'F', 'F', 'M'], "Name" ['Cindy', 'Carl', 'Johnny', 'Stacey', 'Andy', 'Sara', 'Victor', 'Martha', 'Mindy', 'Max'] pd.DataFrame( my_data print("Geniune Data Frame:\n") print( my_label preprocessing.LabelEncoder() blk[ 'Gender' ]= my_label.fit_transform(blk[ 'Gender' print(blk[ 'Gender' ].unique()) print("Data Frame after Label Encoding:\n") print( Output: Geniune Data Frame: Gender Name Cindy Carl Johnny Stacey Andy Sara Victor Martha Mindy Data Frame after Label Encoding: Gender Name Cindy Carl Johnny Stacey Andy Sara Victor Martha Mindy Explanation: above example, have imported pandas preprocessing modules scikit-learn library. have then defined data dictionary printed data frame reference. Later have used fit_transform() method order label encoder functionality pointed object data variable. have printed unique code with respect Gender final Data Frame after performing label encoding. Moving ahead, discuss another method Label Encoding that with help Category codes. Label Encoding using Category codes Before into process label encoding using Category codes, check data types variables dataset. check data type using dtypes function shown below: import pandas my_data "Gender" ['F', 'M', 'M', 'F', 'M', 'F', 'M', 'F', 'F', 'M'], "Name" ['Cindy', 'Carl', 'Johnny', 'Stacey', 'Andy', 'Sara', 'Victor', 'Martha', 'Mindy', 'Max'] pd.DataFrame( my_data print( blk.dtypes Output: Gender object Name object dtype: object Once have checked data type variable 'Gender', will transform convert category type. This seen following snippet code: import pandas my_data "Gender" ['F', 'M', 'M', 'F', 'M', 'F', 'M', 'F', 'F', 'M'], "Name" ['Cindy', 'Carl', 'Johnny', 'Stacey', 'Andy', 'Sara', 'Victor', 'Martha', 'Mindy', 'Max'] pd.DataFrame( my_data blk[ 'Gender' blk[ 'Gender' ].astype( 'category' print( blk.dtypes Output: Gender category Name object dtype: object Now, transforming labels into integer types with pandas.DataFrame.cat.codes function. Here complete example based label encoding using category codes: Example: import pandas my_data "Gender" ['F', 'M', 'M', 'F', 'M', 'F', 'M', 'F', 'F', 'M'], "Name" ['Cindy', 'Carl', 'Johnny', 'Stacey', 'Andy', 'Sara', 'Victor', 'Martha', 'Mindy', 'Max'] pd.DataFrame( my_data print("Genuine Data Frame:\n") print( blk[ 'Gender' blk[ 'Gender' ].astype( 'category' print("\nData Frame after Label Encoding using Category codes:\n") blk[ 'Gender' blk[ 'Gender' ].cat.codes print( Output: Genuine Data Frame: Gender Name Cindy Carl Johnny Stacey Andy Sara Victor Martha Mindy Data Frame after Label Encoding using Category codes: Gender Name Cindy Carl Johnny Stacey Andy Sara Victor Martha Mindy Explanation: above example, have imported pandas library defined data dictionary. have then printed original data frame reference. After that, have converted data type variable 'Gender' into category used pandas.DataFrame.cat.codes function transform into category codes. last, have printed result after label encoding using Category codes. Next TopicDjango Node prev next