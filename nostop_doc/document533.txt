next prev SnakeViz library Python Profiling significant form analysis that utilize analyze time space complexity code. Programming language like Python offers various libraries serve purpose profiling. Some examples profiling libraries analyze time complexity cProfile, profile, line_profiler, more. some examples profiling libraries analyze space complexity memory_profiler, memprof, guppy/hpy, more. outputs produced profiling libraries like cProfile usually files with multiple lines, explaining utilization time different function calls. function very deep multiple lines code, then analyzing such files tiresome work. Data visualization process where represent data. This data consists different patterns that caught human allow understand data better way. Python library known SnakeViz, which accept profiling files produced cProfile library generate visualization. Understanding Python SnakeViz library SnakeViz library browser-based graphical viewer output cProfile module Python programming language. alternative utilizing standard library pstats module. SnakeViz library originally inspired RunSnakeRun. This library work Python well Python SnakeViz library still likely work Python 2.6; however, official support been dropped that Tornado longer supports Python 2.6. SnakeViz library consists visualization styles visualizing profiling results. Icicle Chart Sunburst Chart icicle chart utilizes breadth rectangle order represent time taken function, sunburst chart utilizes angular extent order represent time taken function. function that calls other functions will have special child, representing time taken that function outside other functions that calls. only function which calls other functions will have such child. Install Python SnakeViz library? order install Python library, need 'pip', framework manage packages required install modules from trusted public repositories. Once have 'pip', install snakeviz library using command from Windows command prompt (CMD) terminal shown below: Syntax: python.exe install snakeviz will understand usage SnakeViz library through different examples. Some Examples based SnakeViz consider some examples based SnakeViz library. Example SnakeViz from Command Line/Shell following example demonstrates SnakeViz library. this example, will call mainFunction(), which will call three functions prints results returned one. three functions similar where each produces 150000 random numbers between 1-150 returns mean that number. only difference time taken each function. will manually introduce timer that will pause each function different time. will profile this script with help cProfile library then utilize SnakeViz visualize outputs. File: exampleOne.py import time import random verySlowRandomGenerator(): time.sleep(5) myArray [random.randint(1, 150) range(150000)] return sum(myArray) len(myArray) slowRandomGenerator(): time.sleep(2) myArray [random.randint(1, 150) range(150000)] return sum(myArray) len(myArray) fastRandomGenerator(): time.sleep(1) myArray [random.randint(1, 150) range(150000)] return sum(myArray) len(myArray) mainFunction(): fastRandomGenerator() print(res) slowRandomGenerator() print(res) verySlowRandomGenerator() print(res) mainFunction() Output: will utilize following command profile exampleOne.py python cProfile exampleOne.prof exampleOne.py 75.36921333333333 75.40457333333333 75.51178 then call below command launch SnakeViz visualization browser snakeviz exampleOne.prof Once execute above command, SnakeViz library will launch visualization browser Explanation: above snippet code, have imported required modules. have then defined some functions like verySlowRandomGenerator, slowRandomGenerator, fastRandomGenerator order generate similar output. Within these functions, have also included sleep() method time module with different values that helps create difference time taken each function. have then defined mainFunction() function, where have printed values above-defined functions. last, have called mainFunction() function. above screencast, observe that SnakeViz library produced charts default, alter chart from dropdown. individual lines profiling will displayed table below visualization. Icicle Chart: icicle chart utilizes rectangles order represent time taken functions. rectangles functions like fastRandomGenerator, slowRandomGenerator, verySlowRandomGenerator displayed within rectangle mainFunction(). further click rectangle those functions, will root rectangle, sub-functions called inside will rectangles below rectangles organized like tree structure such where they were called, width rectangle represents time taken that function caller function that function. observe that total time consumed script ~8.38 seconds. Sunburst Chart: sunburst chart utilizes angular extent order represent time taken functions. observe same icicle chart that fastRandomGenerator, slowRandomGenerator, verySlowRandomGenerator displayed within extent mainFunction(). click arc, that will become root arc, functions called inside will displayed around will look into different components visualization, which help understand visualization better way. Function Information: hover over rectangle icicle chart sunburst chart, will display information function that signifies left side. will display function name, cumulative time, file where function present, line number gets called, file directory. Call Stack: Call Stack button available right corner. used represent call stack. click rectangle arc, chart will make that node root node, sub-nodes will display functions called inside will take deep into that function. have gone deep into functions, analyzing them after one, want know stack path, click Call Stack button, displaying call stack. also click entry will take that level. Stats Table: stats table appears same that output produced cProfile will shown chart. Each lines state table clickable depicting function calls whenever click line that line will made root node chart functions called within will displayed sub-nodes. Reset Root: have changed chart root clicking stats table, then click this button reset root original. Reset Zoom: have zoomed into profiling clicking rectangle arc, then reset clicking this button. Style: style options chart types Icicle Sunburst Depth: Depth dropdown allows select deep into call stack SnakeViz goes while creating visualization. increase profile depth, many levels will displayed chart once. calls present below this depth won't displayed chart until click functions. CutOff: CutOff dropdown allow decide whether display calls function, which takes considerably very short amount time cumulative time their parent. CutOff dropdown some value, then each function, check ratio cumulative time cumulative time parent. high cutoff value, chart will produced faster many sub-charts won't produced. ratio less than cutoff value, that function will shown; however, chart won't constructed sub-functions within that function, which implies that cannot click that function anymore time consumed sub-functions within Example SnakeViz inside Jupyter Notebook easily utilize SnakeViz library within Jupyter notebook well. Firstly, required load SnakeViz library extension within notebook, then call snakeviz line cell magic command. consider following syntax load SnakeViz library extension. Syntax: %load_ext snakeviz same code previous example; however, will %snakeviz line command while calling mainFunction() order generate SnakeViz visualization will generate visualization within notebook. File: exampleTwo.py %load_ext snakeviz import time import random verySlowRandomGenerator(): time.sleep(5) myArray [random.randint(1, 150) range(150000)] return sum(myArray) len(myArray) slowRandomGenerator(): time.sleep(2) myArray [random.randint(1, 150) range(150000)] return sum(myArray) len(myArray) fastRandomGenerator(): time.sleep(1) myArray [random.randint(1, 150) range(150000)] return sum(myArray) len(myArray) mainFunction(): fastRandomGenerator() print(res) slowRandomGenerator() print(res) verySlowRandomGenerator() print(res) %snakeviz mainFunction() Output: 75.41503333333333 75.59046666666667 75.37472 Profile stats marshalled file '/tmp/tmps5uyxuux'. Embedding SnakeViz this document... this will return SnakeViz visualization Explanation: above snippet code, have used code from previous example. have then used %snakeviz mainFunction() statement order call function generate SnakeViz visualization Example consider following example where will generate SnakeViz visualization again with help same code; however, this time, will using %%snakeviz cell magic command order explain usage File: exampleThree.py %%snakeviz import time import random verySlowRandomGenerator(): time.sleep(5) myArray [random.randint(1, 150) range(150000)] return sum(myArray) len(myArray) slowRandomGenerator(): time.sleep(2) myArray [random.randint(1, 150) range(150000)] return sum(myArray) len(myArray) fastRandomGenerator(): time.sleep(1) myArray [random.randint(1, 150) range(150000)] return sum(myArray) len(myArray) mainFunction(): fastRandomGenerator() print(res) slowRandomGenerator() print(res) verySlowRandomGenerator() print(res) mainFunction() Output: 75.67562666666667 75.38932 75.47096666666667 Profile stats marshalled file '/tmp/tmphty5rhzv'. Embedding SnakeViz this document... this will return SnakeViz visualization Explanation: above snippet code, used %%snakeviz cell magic command repeated code snippet from previous example. Next TopicDifference between Materialized View View prev next