next prev Python's Module Configparser Python's in-built ConfigParser library part base module. library provides console parser easy file configuration consisting pairs name-key values. popular worldwide accepted convention supported this library "INI" syntax, utilized Microsoft platform most commonly. library initially made help with different language structure which items each segment looked like 822 headers. execution permits named values determined utilizing either grammar. This verifiable mishap absence unmistakable determination "INI" design have made this module extremely monotonous keep with, execution been changed pretty much every Python discharge, behaving module demonstrated exceptionally dreary portray. Important points ongoing behaving defaults forever been planned. module intended help set-up projects that could give some data either utilized straightforwardly frame portions different qualities (for example, names that incorporated host name running program). time, there compelling reason recognize various purposes "default" values, MartinManey proposes beneath. (Not satisfactory presently, there's genuine need such since given ConfigParser extra.) utilization "enchantment segment name" current "defaults" ongoing execution something think about sad; default word reference ought different from word reference areas. Ought extra name ("sorts defaults") point thought I'd trust they don't turn essential arranging segment names idiotic mishap. Incorporating defaults compose() technique sad; these were expected application supply processed values that would utilized chance that particular set-up didn't supersede them. From Python's standard library, configparser module characterizes usefulness perusing composing set-up documents utilized Windows Microsoft. Such documents typically have .INI expansion. document comprises segments driven [section] header. Between square sections, part's name. segment trailed key/esteem passages isolated character. might incorporate remarks prefixed or; image. example record displayed underneath: [Settings] Setting detailed extra debugging information DetailedLog=1 RunStatus=1 StatusPort=6090 StatusRefresh=10 Archive=1 Setting location file MV_FTP LogFile=/opt/ecs/mvuser/MV_IPTel/log/MV_IPTel.log Version=0.9 Build ServerName=Unknown [FTP] Setting server active RunFTP=1 defining control port FTPPort=21 Setting locations data directory FTPDir=/opt/ecs/mvuser/MV_IPTel/data/FTPdata Setting Name admin UserName=admin Setting protected Password Password=admin ConfigParser class belongs configparser module. must manage parsed content database parse configuration documents. Object class ConfigParser created below line Parser_name configparser.ConfigParser() Following methods used with objects class ConfigParser: write() method know state configuration .ini format. read_dict() method Reading configuration from dictionary. concepts important segment names, values word references with keys values that ought available segment. read_string() method Reading configuration from string. remove_option() method Remove option from part section. has_option() method Returning whether option exists part section. has_section() method Returning whether part section exists. read() method Reading parsing configuration document. items() method Returning tuple with value, name) each option part section. getboolean() method Like get() method, converts value Boolean value. Returning True False value options() method Returning list configurations option name part section. read_file() method Reading parsing configuration document, document object. getint() method Like get(), convert values integer. get() method Returning string values option named getfloat() method Like get(), convert values float. sections() method Returning configuration parts section names. remove_section() method Removing document part section options. set() method Setting options. Following script parses reads 'sampleconfigfile.ini' file import configparser_name parser_name configparser_name.ConfigParser_name() parser_name.read('sampleconfig.ini') sect parser_name.section(): print('Sections:', sect_) k1,v1 parser_name.items(sect_): print(' {}'.format(k1,v1)) print() Output: Sections: Settings detailedlog runstatus statusport 6099 statusrefresh archive logfile /opt/ecs/mvuser/MV_IPTel/log/MV_IPTel.log version Build servername Unknown Section: runftp ftpport ftpdir /opt/ecs/mvuser/MV_IPTel/data/FTPdata username admin password admin build configuration file, write() method used. Below code configures parser_name's object performs write operation file object named 'testing.ini' import configparser_name_name parser_name_name configparser_name_name.ConfigParser_name_name() parser_name_name.add_section('Client') parser_name_name.set('Client', 'Name', 'Asho Kulkarn') parser_name_name.set('Client', 'email', 'asho@gmail.com') parser_name_name.set('Client', 'password', 'secret') fp=open('test.ini','w') parser_name_name.write(fp) fp.close() Supported Datatypes configuration files, Config parser_names can't assume datatypes value, always preserving them strings internally. This implies that need other datatypes, must convert implicitly: int(top_secrets['Port']) 50225 float(top_secrets['CompressionLevels']) Since this normal, config parser_names give scope helpful getter techniques deal with numbers, floats, booleans. last most fascinating because passing worth bool() would decent since bool('true') still false. This reason config parser_names additionally give getboolean(). This technique case-harsh perceives Boolean qualities from 'no'/'yes', 'false'/'true', 'off'/'on' '0'/'1'. example: top_secret.getboolean('ForwardX11') False config['bitbucket.org'].getboolean('ForwardX11') True config.getboolean('bitbucket.org', 'Compression') True only method getboolean(), config parser_names also provide equivalent methods like getfloat()and getint(). Fallback Values dictionary, provide fallback_ values, will section's function get(): top_secret.get('Port') '500222' top_secret.get('CompressionLevel') top_secret.get('Cipher') top_secret.get('Cipher', '3degs-cbc') '3degs-cbc' it's much trouble, note that default values have priority over fallback_ values. example, model, 'CompressionLevel' determined exclusively 'DEFAULT' area. chance that attempt from segment 'top_secret.server.com', will constantly default, regardless whether determine fallback_: top_secret.get('CompressionLevel', '3') Another thing know about that parser_name-level get() technique gives custom, more mind-boggling connection point, kept with reverse similarity. While utilizing this technique, fallback_ worth given utilizing fallback_ catchphrase just contention: config.get('bitbucket.org', 'monster_', fallback_='No such thing monster_s') such thing monster_s' same fallback_ argument used with getint(), getfloat() getboolean() methods, example: 'BatchMode__' top_secret False top_secret.getboolean('BatchMode__', fallback_=True) True config['DEFAULT']['BatchMode__'] 'no' top_secret.getboolean('BatchMode__', fallback_=True) False File Supported format Each configuration document sections, each defined header-> section, followed entries key/value type, which then partitioned string (: Trailing leading whitespace separated from values keys. Values erased chance that parser_name designed permit one, which case worth/key full stop likewise forgotten about. Values likewise traverse different lines, however long they indented further than main line worth. Contingent upon parser_name's mode, clear lines might treated parts multiline esteems overlooked. section name could string that '\n', default. Design documents could contain remarks prefixed specific person (; Remarks might show their generally vacant line, potentially indented. example [Simple Values] key=value keys=allowed values=allowed well around fullstop= obviously also use: delimit keys from values [All Values Strings] values like this: 1000000 this: 3.14159265359 they treated number? integer, float boolean held strings converted values directly: true [Multiline Values] Servers programming equipment that cycles demand convey information client over organization. Different kinds servers exist, most well-known ones being servers, information base servers, application servers, exchange servers. [No Values] key_without_values empty value string here [You comments] like this this default, only empty line. Inline comments harmful because they prevent users from using delimiting characters parts values. That being said, this customized. [Sections Indented] can_values_be_as_well True does_that_mean_anything_special False purposes format purpose readability multilines_values handle just good huge they indent deep lines prescribed value Exceptions Exception name: DuplicateSectionError Description: add_section() function called with name section Exception raised that already present strict parser_names when sections found once single input file, string, dictionary. version 3.1: Optional lineno, source attributes, arguments __init__() were added. Exception name: NoSectionError Description: Exception raised when specified section found. Exception name: NoOptionError Description: Exception raised when specified option found specified section. Exception name: DuplicateOptionError Description: error raised severe parser_names chance that solitary choice shows twice during perusing from single document, string, word reference. This gets incorrect spellings case awareness-related mistakes; example, word reference might have keys addressing similar case-inhumane set-up key. Exception name: InterpolationDepthError Description: when length string interpolations cannot finished number iterations exceeding MAX_INTERPOLATION_DEPTHs, Exception raised. subclass error InterpolationError called. Exception name: InterpolationError Description: base class raised when errors happen when performing string interpolations. Exception name: InterpolationMissingOptionError Description: when option reference from value can't exist, this Exception raised. subclass error InterpolationError called. Exception name: MissingSectionHeaderError Description: when attempting parse document, Exception raised, with sections header. Exception name: InterpolationSyntaxError Description: when text source into which substitutions made doesn't conform needed syntax, Exception raised. subclass InterpolationError. Exception name: Error Description: Base class other configparser_name errors. Exception name: ParsingError Description: When errors happen, Exceptions raise, endeavoring parse document. Changed variant 3.2: filename quality __init__() parameters were named source consistency. Next TopicGUI Calendar using Tkinter Python prev next