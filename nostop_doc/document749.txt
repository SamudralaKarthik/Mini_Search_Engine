next prev Python Output Formatting this tutorial, will learn format output. Formatting output refer presenting output program. format output human-readable form write data into file some other specified form. Sometimes need control coming output format according requirements. Users handle strings using string slicing concatenation operations create layout. There various ways format output. string method format string literals. format() method strings helps user create fancier output. also perform string concatenation operations create layout want. string class also some methods that perform useful operations padding strings given column width. Formatting Output using String Modulo Operator operator helps format string. interprets left argument like printf() format string applied right argument. Python doesn't provide printf() function. this purpose, modulo operator overloaded string class perform string formatting. also known String Modulo operator. string modulo operator still available Python (3.x), widely used, nowadays, formatting style removed from language. Let's understand following example Example #integer float value print("integer 2d, float 5.2f" %(1, 05.333)) #integer value print("Total Player 3d, Batsman 2d" %(24, 12)) #octal value print("% 5.3o"% (50)) #exponential value print("% 10.2E"% (456.1458)) Output: integer float 5.33 Total Player Batsman 062 4.56E+02 Explanation above code, "%2d" placeholder that uses first element tuple. prints characters. format description float number, "%5.2f" used. also introduced with character like other placeholders. shows total number strings contain. decimal part number precision number following placeholder. last character, shows float number. Formatting Output Using Format Method format() method takes more manual effort than other methods. mark substitution variables provide detailed formatting directives, also need provide formatted information. number brackets positional formatting. Let's understand following example. Example using format() method print('{} {}'.format('Hello', 'World')) using format() method referring position object print('{0} {1}'.format('Welcome', 'JavaTpoint')) print('{1} {0}'.format('Welcome', 'JavaTpoint')) Output: Hello World Welcome JavaTpoint JavaTpoint Welcome brackets characters within item called format fields which replaced with object passed into format() method. number brackets used refer object's position passed into format() method. Let's understand another example Example print('Number position {0}, {1}, {other}.' .format('Java', 'T', other ='Point')) using format() method with number print("Java :{0:2d}, Tpoint :{1:8.2f}". format(12, 00.546)) Changing positional argument print("Second argument: {1:3d}, first one: {0:7.2f}". format(47.42, 11)) print("Java: {a:5d}, Tpoint: {p:8.2f}". format(a 453, 59.058)) Output: Number position Java, Point. Java :12, Tpoint 0.55 Second argument: first one: 47.42 Java: 453, Tpoint: 59.06 Example {'Java': 4127, 'T': 4098, 'point': 8637678} using format() dictionary print('Java: {0[Java]:d}; For: {0[T]:d}; 'Java: {0[Java]:d}'.format(tab)) data dict(fun ="JavaTpoint", adj ="Website") using format() dictionary print("I love {fun} {adj}".format(**data)) Output: Java: 4127; For: 4098; Java: 4127 love JavaTpoint Website Formatting output using String Method also format output using string slicing concatenation operations. string type some methods that help format output fancier way. methods which helps formatting output str.ljust(), str.rjust(), str.centre(). Let's understand following example Example str1 love JavaTpoint" Printing center aligned string with fillchr print ("Center aligned string with fillchr: print (str1.center(30, '$')) Printing left aligned string with padding print ("The left aligned string print (str1.ljust(40, '&')) Printing right aligned string with padding print ("The right aligned string print (str1.rjust(40, '-')) Output: Center aligned string with fillchr: $$$$$$I love JavaTpoint$$$$$$$ left aligned string love JavaTpoint&&&&&&&&&&&&&&&&&&&&&&& right aligned string -----------------------I love JavaTpoint Format Conversion Rule Python Below table conversion meaning. Conversion Meaning represents Signed integer decimal. represents Signed integer decimal. represents Unsigned octal. represents Obsolete equivalent to'd', i.e. signed integer decimal. represents Unsigned hexadecimal (lowercase). represents Unsigned hexadecimal (uppercase). represents Floating point exponential format (lowercase). represents Floating point exponential format (uppercase). represents Floating point decimal format. represents Floating point decimal format. represents Same exponent greater than less than precision, otherwise. represents Same exponent greater than less than precision, otherwise. represents Single character (accepts integer single character string). represents String (converts python object using repr()). represents String (converts python object using str()). represents argument converted, results character result. Conclusion have discussed format output Python. have described various techniques along with examples. Python provides facility modify output according requirements. Users string format() methods with positional arguments. This tutorial also included conversion rules table. Next TopicPython Property Decorator prev next