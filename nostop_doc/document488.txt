next prev Creating Quiz Game Python Python programming language offers standard Graphical User Interface (GUI) framework called Tkinter, which utilized develop fast easy applications. following tutorial, will develop simple Multiple-Choice Quiz game Python with help GUI. will using Tkinter framework create quiz. let's started. Steps create Quiz Game Python following steps create Multiple-Choice Quiz Game Python: Step will create JSON file store data Step will create using Tkinter framework understand above steps. Creating JSON file order create Multiple-Choice Quiz Game, will need some data. define this data JSON file, called data.json, with JSON data which name/value pairs consist array values. This data will represent questions with their answers along with multiple choices. consider following sample data quiz shown below: File: data.json "ques" "Q1. Which language directly executable computer's CPU?", "Q2. Which been standardized IEEE 802.3 specification?", "Q3. storage device with effectively independent access time data location?", "Q4. Which following found normal computers/laptops?", "Q5. What used most programs their part guiding user through certain steps?" "ans" "choices" "Machine Language", "High Language", "Assembly Language", "Second generation Language" "Bluetooth", "Ethernet", "WiMAX", "All above" "Primary Storage Device", "Secondary Storage Device", "Gateway Device", "Direct Access Storage Device" "Del key", "Alt key", "Turn key", "Shift key" "Software", "Wizard", "Wiki", "None above" Explanation: above JSON file, have stored data form name/value pair along with array values. observe, have included questions with their answers different options select from. Now, create Graphical User Interface (GUI) next step. Creating using Tkinter will create using Tkinter framework Python. These some steps that will follow: Step Importing module: Tkinter JSON Step Creating main window (container) application Step Adding widgets display data Step Adding functionalities button Step Using data quiz Note: Both Python JSON files will created same directory defined above. that have created JSON file storing data, about create python file that will contain program quiz. Importing modules will start importing required modules project. this case, importing Tkinter framework JSON module. consider following snippet code demonstrating same: File: myQuiz.py importing everything from tkinter from tkinter import importing messagebox from tkinter from tkinter import messagebox importing json utilize json file data import json Explanation: above snippet code, have imported everything from tkinter along with json module. Creating main Window application that imported required modules, will create main Window application using class. consider following snippet code demonstrating same: File: myQuiz.py Creating Window guiWindow Tk() setting size Window guiWindow.geometry("800x450") setting title Window guiWindow.title("Javatpoint.com Quiz") Explanation: above snippet code, have instantiated class tkinter module create window. have also size title this window using geometry() title() functions. Creating components will define class where create components functionalities them. will start defining __init__() method, which will initialize object class. Within this method, will question count zero initialize methods that required display content make functionalities available. consider following snippet code understand same: File: myQuiz.py defining class define components class myQuiz: defining initializing method which called when will initialize object class. This method will question count initialize other methods order display content make functionalities available __init__(self): setting question number self.quesNumber assigning question displayQuestion function update later. self.displayTitle() self.displayQuestion() optSelected attribute holds integer value which used selected option question. self.optSelected IntVar() displaying radio button current question self.options self.radioButtons() displaying options current question self.displayOptions() displaying button next exit. self.buttons() number questions self.dataSize len(question) keeping counter right answers self.rightAnswer Explanation: following snippet code, have defined class myQuiz. Within this class, have defined __init__() method initialize functions attributes project. have started setting value question number zero assigning question displayQuestion() function order update later. have then initialized optSelected attribute that holds integer value used selected option question. have then displayed radio button options current question button next exit. have then defined attribute store number questions. last, have initialized attribute keep counter right answers. define another method that allows display result. This method will count number right wrong answers then show them message box. Here snippet code that demonstrates same: File: myQuiz.py This method utilized display result counts number right wrong answers then display them message displayResult(self): calculating wrong count wrongCount self.dataSize self.rightAnswer rightAnswer f"Correct: {self.rightAnswer}" wrongAnswer f"Wrong: {wrongCount}" calculating percentage right answers the_score int(self.rightAnswer self.dataSize 100) the_result f"Score: {the_score}%" showing message display result mb.showinfo("Result", f"{the_result} \n{rightAnswer} \n{wrongAnswer}") Explanation: above snippet code, have defined method displayResult(). have then calculated value wrong count. have then calculated percentage right answers and, last, shown message display result. will define method that helps check answer once click Next. consider following snippet code demonstrating same: File: myQuiz.py This method checks Answer after click Next. checkAnswer(self, quesNumber): checking whether selected option right self.optSelected.get() answer[quesNumber]: option right return true return True Explanation: following snippet code, have defined method checkAnswer() that helps check whether selected option correct. this, have used conditional statement that returns True value selected option matches answer. Now, will define method next button. File: myQuiz.py This method utilized check answer current question calling checkAnswer quesNumber. question right increments count then increase question number last question then calls displayResult show message box. else shows next question. nextButton(self): Checking whether answer correct self.checkAnswer(self.quesNumber): answer correct increments correct self.rightAnswer Moving next Question incrementing quesNumber counter self.quesNumber checking whether quesNumber size equal data size self.quesNumber self.dataSize: correct then displays score self.displayResult() destroying window guiWindow.destroy() else: showing next question self.displayQuestion() self.displayOptions() Explanation: above snippet code, have defined method nextButton(). Within this method, have used conditional statement check whether answer correct increment total correct answer count have then used if-else statement check whether reached questions displayed output accordingly. will define method that stores properties button that will using this project. Specifically, there buttons that will needing first next button, another exit button. consider following snippet code demonstrating same: File: myQuiz.py This method displays buttons screen. first button next_button which moves next question properties like what text shows functionality, size, color, property text displayed button. Then mentions where place button screen. second button exit button which will close without completing quiz. buttons(self): first button Next button move next Question next_button Button( guiWindow, text "Next", command self.nextButton, width "blue", "white", font ("ariel", "bold") placing button screen next_button.place(x 350, 380) second button quit button which used Quit quit_button Button( guiWindow, text "Quit", command guiWindow.destroy, width "black", "white", font ("ariel", bold") placing Quit button screen quit_button.place(x 700, Explanation: above snippet code, have defined method buttons(). have created objects Button() class Tkinter library within this method. have specified different attributes buttons used place() function place them position within GUI. will define method that will allow deselect radio button screen. This method will display options available current question, which through question numbers. Moreover, this method helps update each options current question radio button. consider following snippet code understand same: File: myQuiz.py This method deselects radio button screen. Then used show options available current question which through question number Updates each options current question radio button. displayOptions(self): deselecting options self.optSelected.set(0) looping over options displayed text radio buttons. opts[self.quesNumber]: self.options[val]['text'] Explanation: above snippet code, have defined method displayOptions(). Within this method, have value zero. have then deselected options using set() function, specifying parameter zero. have then used for-loop iterate through options available each question increased value will define method display current question screen. consider following snippet code demonstrating same: File: myQuiz.py This method shows current Question screen displayQuestion(self): setting Question properties quesNumber Label( guiWindow, text question[self.quesNumber], width font ('ariel', 'bold'), anchor placing option screen quesNumber.place(x 100) Explanation: above snippet code, have defined method displayQuestion(). Within this method, have used Label() class Tkinter library create instance, specifying different attributes have then used place() function location label screen. Now, define method display title screen. Here following snippet code that demonstrates same: File: myQuiz.py This method used Display Title displayTitle(self): title shown myTitle Label( guiWindow, text "Javatpoint.com QUIZ", width "red", "white", font ("ariel", "bold") placing title myTitle.place(x Explanation: above snippet code, have defined method displayTitle(). Within this method, have defined label title using Tkinter's Label() class placed using place() function. last, will create radio buttons select Question screen particular position. This method also returns list radio button, which will later options them. File: myQuiz.py This method shows radio buttons select Question screen specified position. also returns list radio button which later used options them. radioButtons(self): initializing list with empty list options qList position first option y_pos adding options list while len(qList) setting radio button properties radio_button Radiobutton( guiWindow, text variable self.optSelected, value len(qList) font ("ariel", adding button list qList.append(radio_button) placing button radio_button.place(x 100, y_pos) incrementing y-axis position y_pos returning radio buttons return qList Explanation: above snippet code, have defined method radioButton(). Within this method, have initialized empty list position first option. have then used while loop options list. have created object Tkinter's RadioButton() class, used append() function, button's position, incremented position y-axis inside this loop. last, have returned radio button. Using data Quiz Since have added required widgets their functionalities program, data stored JSON. Here following snippet code, demonstrating same: File: myQuiz.py getting data from json file with open('data.json') json_file: data json.load(json_file) setting question, options, answer question (data['ques']) opts (data['choices']) answer (data[ 'ans']) Explanation: above snippet code, have used open() function open JSON file load data main program. have then created different variables store data from JSON file form question, options, answer. have successfully built project. will instantiate myQuiz() class Tkinter's mainloop() function before executing program. consider following snippet code demonstrating same: File: myQuiz.py creating object myQuiz Class. quiz myQuiz() using mainloop() function guiWindow.mainloop() Explanation: have instantiated myQuiz() class above snippet code. last, have used Tkinter's mainloop() function display window. complete project code found below. Complete Project Code File: myQuiz.py importing everything from tkinter from tkinter import importing messagebox from tkinter from tkinter import messagebox importing json utilize json file data import json Creating Window guiWindow Tk() setting size Window guiWindow.geometry("1000x450") setting title Window guiWindow.title("Javatpoint.com Quiz") defining class define components class myQuiz: defining initializing method which called when will initialize object class. This method will question count initialize other methods order display content make functionalities available __init__(self): setting question number self.quesNumber assigning question displayQuestion function update later. self.displayTitle() self.displayQuestion() opt_selected attributes holds integer value which used selected option question. self.optSelected IntVar() displaying radio button current question used display options current question self.options self.radioButtons() displaying options current question self.displayOptions() displaying button next exit. self.buttons() number questions self.dataSize len(question) keeping counter right answers self.rightAnswer This method utilized display result counts number right wrong answers then display them message displayResult(self): calculating wrong count wrongCount self.dataSize self.rightAnswer rightAnswer f"Correct: {self.rightAnswer}" wrongAnswer f"Wrong: {wrongCount}" calculating percentage right answers the_score int(self.rightAnswer self.dataSize 100) the_result f"Score: {the_score}%" showing message display result mb.showinfo("Result", f"{the_result} \n{rightAnswer} \n{wrongAnswer}") This method checks Answer after click Next. checkAnswer(self, quesNumber): checking selected option right self.optSelected.get() answer[quesNumber]: option right return true return True This method utilized check answer current question calling checkAnswer quesNumber. question right increments count then increase question number last question then calls displayResult show message box. else shows next question. nextButton(self): Checking whether answer correct self.checkAnswer(self.quesNumber): answer correct increments correct self.rightAnswer Moving next Question incrementing quesNumber counter self.quesNumber checking whether quesNumber size equal data size self.quesNumber self.dataSize: correct then displays score self.displayResult() destroying guiWindow.destroy() else: showing next question self.displayQuestion() self.displayOptions() This method displays buttons screen. first button next_button which moves next question properties like what text shows functionality, size, color, property text displayed button. Then mentions where place button screen. second button exit button which will close without completing quiz. buttons(self): first button Next button move next Question next_button Button( guiWindow, text "Next", command self.nextButton, width "blue", "white", font ("ariel", "bold") placing button screen next_button.place(x 350, 380) second button quit button which used Quit quit_button Button( guiWindow, text "Quit", command guiWindow.destroy, width "black", "white", font ("ariel", bold") placing Quit button screen quit_button.place(x 700, This method deselects radio button screen. Then used show options available current question which through question number Updates each options current question radio button. displayOptions(self): deselecting options self.optSelected.set(0) looping over options displayed text radio buttons. opts[self.quesNumber]: self.options[val]['text'] This method shows current Question screen displayQuestion(self): setting Question properties quesNumber Label( guiWindow, text question[self.quesNumber], width font ('ariel', 'bold'), anchor placing option screen quesNumber.place(x 100) This method used Display Title displayTitle(self): title shown myTitle Label( guiWindow, text "Javatpoint.com QUIZ", width "red", "white", font ("ariel", "bold") placing title myTitle.place(x This method shows radio buttons select Question screen specified position. also returns list radio button which later used options them. radioButtons(self): initializing list with empty list options qList position first option y_pos adding options list while len(qList) setting radio button properties radio_button Radiobutton( guiWindow, text variable self.optSelected, value len(qList) font ("ariel", adding button list qList.append(radio_button) placing button radio_button.place(x 100, y_pos) incrementing y-axis position y_pos returning radio buttons return qList getting data from json file with open('data.json') json_file: data json.load(json_file) setting question, options, answer question (data['ques']) opts (data['choices']) answer (data[ 'ans']) creating object myQuiz Class. quiz myQuiz() using mainloop() function guiWindow.mainloop() Output: Next TopicStatistic with Python prev next