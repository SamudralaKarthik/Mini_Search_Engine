next prev Python Tuples collection ordered immutable objects known tuple. Tuples lists similar they both sequences. Though, tuples lists different because cannot modify tuples, although modify lists after creating them, also because parentheses create tuples while square brackets create lists. Placing different values separated commas enclosed parentheses forms tuple. instance, Example tuple_1 ("Python", "tuples", "immutable", "object") tuple_2 (23, tuple_3 "Python", "Tuples", "Ordered", "Collection" represent empty tuple parentheses enclosing nothing. Empty_tuple need comma after element create tuple single element. Tuple_1 (50,) Tuple indices begin similar strings, slice them, concatenate them, perform other operations. Creating Tuple objects (elements) must enclosed parenthesis each separated comma, form tuple. Although using parenthesis required, recommended Whatever number objects, even various data types, included tuple (dictionary, string, float, list, etc.). Code Python program show create tuple Creating empty tuple empty_tuple print("Empty tuple: empty_tuple) Creating tuple having integers int_tuple print("Tuple with integers: int_tuple) Creating tuple having objects different data types mixed_tuple "Python", 9.3) print("Tuple with different data types: mixed_tuple) Creating nested tuple nested_tuple ("Python", 8:2}, print("A nested tuple: nested_tuple) Output: Empty tuple: Tuple with integers: Tuple with different data types: 'Python', 9.3) nested tuple: ('Python', Parentheses mandated build tuples. Tuple packing term this. Code Python program create tuple without using parentheses Creating tuple tuple_ 5.7, "Tuples", ["Python", "Tuples"] displaying tuple created print(tuple_) Checking data type object tuple_ print( type(tuple_) trying modify tuple_ try: tuple_[1] except: print( TypeError Output: 5.7, 'Tuples', ['Python', 'Tuples']) <class 'tuple'> <class 'TypeError'> challenging build tuple with just element. Placing just element parentheses sufficient. will require comma after element recognized tuple. Code Python program show create tuple having single element single_tuple ("Tuple") print( type(single_tuple) Creating tuple that only element single_tuple ("Tuple",) print( type(single_tuple) Creating tuple without parentheses single_tuple "Tuple", print( type(single_tuple) Output: <class 'str'> <class 'tuple'> <class 'tuple'> Accessing Tuple Elements access objects tuple variety ways. Indexing access object tuple, index operator where indexing tuple starts from tuple with items will have indices ranging from IndexError will raised access index from tuple that outside range tuple index. this case, index above will range. cannot give index floating data type other kinds because index Python must integer. TypeError will appear result give floating index. example below illustrates indexing performed nested tuples access elements. Code Python program show access tuple elements Creating tuple tuple_ ("Python", "Tuple", "Ordered", "Collection") print(tuple_[0]) print(tuple_[1]) trying access element index more than length tuple try: print(tuple_[5]) except Exception print(e) trying access elements through index floating data type try: print(tuple_[1.0]) except Exception print(e) Creating nested tuple nested_tuple ("Tuple", Accessing index nested tuple print(nested_tuple[0][3]) print(nested_tuple[1][1]) Output: Python Tuple tuple index range tuple indices must integers slices, float Negative Indexing Python's sequence objects support negative indexing. last item collection represented second last item Code Python program show negative indexing works Python tuples Creating tuple tuple_ ("Python", "Tuple", "Ordered", "Collection") Printing elements using negative indices print("Element index: tuple_[-1]) print("Elements between are: tuple_[-4:-1]) Output: Element index: Collection Elements between are: ('Python', 'Tuple', 'Ordered') Slicing slicing operator, colon (:), access range tuple elements. Code Python program show slicing works Python tuples Creating tuple tuple_ ("Python", "Tuple", "Ordered", "Immutable", "Collection", "Objects") Using slicing access elements tuple print("Elements between indices tuple_[1:3]) Using negative indexing slicing print("Elements between indices tuple_[:-4]) Printing entire tuple using default start values. print("Entire tuple: tuple_[:]) Output: Elements between indices ('Tuple', 'Ordered') Elements between indices ('Python', 'Tuple') Entire tuple: ('Python', 'Tuple', 'Ordered', 'Immutable', 'Collection', 'Objects') Deleting Tuple elements tuple cannot changed, already said. Therefore, unable eliminate remove elements tuple. However, keyword makes feasible delete tuple completely. Code Python program show delete elements Python tuple Creating tuple tuple_ ("Python", "Tuple", "Ordered", "Immutable", "Collection", "Objects") Deleting particular element tuple try: tuple_[3] print(tuple_) except Exception print(e) Deleting variable from global space program tuple_ Trying accessing tuple after deleting try: print(tuple_) except Exception print(e) Output: 'tuple' object doesn't support item deletion name 'tuple_' defined Repetition Tuples Python Code Python program show repetition tuples tuple_ ('Python',"Tuples") print("Original tuple tuple_) Repeting tuple elements tuple_ tuple_ print("New tuple tuple_) Output: Original tuple ('Python', 'Tuples') tuple ('Python', 'Tuples', 'Python', 'Tuples', 'Python', 'Tuples') Tuple Methods Tuple does provide methods delete elements, there only following choices. Examples these methods given below. Code Python program show tuple methods (.index() .count()) work Creating tuple tuple_ ("Python", "Tuple", "Ordered", "Immutable", "Collection", "Ordered") Counting occurrence element tuple using count() method print(tuple_.count('Ordered')) Getting index element using index() method print(tuple_.index('Ordered')) This method returns index first occurrence element Output: Tuple Membership Test Using keyword, determine whether item present given tuple not. Code Python program show perform membership test tuples Creating tuple tuple_ ("Python", "Tuple", "Ordered", "Immutable", "Collection", "Ordered") operator print('Tuple' tuple_) print('Items' tuple_) operator print('Immutable' tuple_) print('Items' tuple_) Output: True False False True Iterating Through Tuple loop iterate through each element tuple. Code Python program show iterate over tuple elements Creating tuple tuple_ ("Python", "Tuple", "Ordered", "Immutable") Iterating over tuple elements using loop item tuple_: print(item) Output: Python Tuple Ordered Immutable Changing Tuple Tuples, opposed lists, immutable objects. This implies that after tuple's elements have been specified, cannot modify them. However, modify nested elements element element itself mutable data type like list. tuple assigned many values (reassignment). Code Python program show that Python tuples immutable objects Creating tuple tuple_ ("Python", "Tuple", "Ordered", "Immutable", [1,2,3,4]) Trying change element index try: tuple_[2] "Items" print(tuple_) except Exception print( inside tuple, change elements mutable object tuple_[-1][2] print(tuple_) Changing whole tuple tuple_ ("Python", "Items") print(tuple_) Output: 'tuple' object does support item assignment ('Python', 'Tuple', 'Ordered', 'Immutable', ('Python', 'Items') merge multiple tuples, operator. Concatenation term this. Using operator, also repeat tuple's elements specified number times. This already shown above. results operations tuples. Code Python program show concatenate tuples Creating tuple tuple_ ("Python", "Tuple", "Ordered", "Immutable") Adding tuple tuple_ print(tuple_ Output: ('Python', 'Tuple', 'Ordered', 'Immutable', Advantages Tuple over List Tuples lists employed similar contexts because similar they are. tuple implementation several benefits over list, though. following primary benefits: generally employ lists homogeneous data types tuples heterogeneous data types. Tuple iteration quicker than list iteration because tuples immutable. There such modest performance improvement. Tuples with immutable components function Python dictionary object. This feature feasible with lists. Collecting data tuple will ensure that stays write-protected never changes. Next TopicPython prev next