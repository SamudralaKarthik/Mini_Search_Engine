next prev Extract YouTube Data Python (Data Scraping using BeautifulSoup) scraping extract data from websites. helps gather copy specific data store date into database spreadsheet later analysis retrieval. Python comes with BeautifulSoup library which widely used scrap data from other websites. don't familiar with BeautifulSoup library, learn from Scraping Using Python tutorial. Here, will idea about BeautifulSoup library detail. this tutorial, will discuss extract data from YouTube useful insights from will BeautifulSoup library HTML parser. Since YouTube largest video-sharing platform billions users across world. Many creators making million. would good idea fetch information popular channels. keep track some popular channels, subscribers, views videos, likes dislikes. Note YouTube changes source code time time. some case won't work. also prefer YouTube extracting data instead. Installation Dependencies accomplish this task, need some installation. First, install BeautifulSoup library using below command. install Now, install request html parser command line terminal. install request_html ready move forward fetch data from YouTube. Started with YouTube Data Scraping going hand dirty with quick experimental script that will help extract such data. Create Python file shell type following code. Example Install dependencies from requests_html import HTMLSession from import BeautifulSoup importing BeautifulSoup copy youtube from YouTube website video_url "https://youtu.be/u4N45v8f7cY" init HTML Session session HTMLSession() html content response session.get(video_url) execute Java-script, timeout necessary pass otherwise will through error response.html.render(timeout=20) create object parse HTML soup bs(response.html.html, "html.parser") print(soup.find_all("meta")) Output: [<meta content="IE=edge" http-equiv="X-UA-Compatible"/>, <meta content="rgba(255,255,255,0.98)" name="theme-color"/>, <meta content="What Lived Uranus?" name="title"/>, <meta content="Freezing cold, dark with atmosphere that smells like farts rotten eggs? Uranus doesn?t sound like somewhere you?d want call home. let?s sa..." name="description"/>, <meta content="what what happens scifi, science documentary, what scenario, mysteries, what cosmos, cosmos, hypothetical, hypothetical scenario, hypothetical scenarios, cold, dark, atmosphere, fart, farts, rotten eggs, rotten egg, uranus, home, settlement, home settlement, solar system, planet, temperature, gas, giants, cold planet, methane, uranus planet, uranus facts, rings uranus, facts about uranus, space, nasa, earth uranus, space photography, space exploration, universe, solar" name="keywords"/>, <meta content="YouTube" property="og:site_name"/>, <meta content="https://www.youtube.com/watch?v=u4N45v8f7cY" property="og:url"/>, <meta content="What Lived Uranus?" property="og:title"/>, <meta content="https://i.ytimg.com/vi/u4N45v8f7cY/maxresdefault.jpg" property="og:image"/>, <meta content="1280" property="og:image:width"/>, <meta content="720" property="og:image:height"/>, <meta content="Freezing cold, dark with atmosphere that smells like farts rotten eggs? Uranus doesn?t sound like somewhere you?d want call home. let?s sa..." property="og:description"/>, <meta content="544007664" property="al:ios:app_store_id"/>, <meta content="YouTube" property="al:ios:app_name"/>, <meta content="vnd.youtube://www.youtube.com/watch?v=u4N45v8f7cY&feature=youtu.be&feature=applinks" property="al:ios:url"/>, <meta content="vnd.youtube://www.youtube.com/watch?v=u4N45v8f7cY&feature=youtu.be&feature=applinks" property="al:android:url"/>, <meta content="http://www.youtube.com/watch?v=u4N45v8f7cY&feature=youtu.be&feature=applinks" property="al:web:url"/>, <meta content="video.other" property="og:type"/>, <meta content="https://www.youtube.com/embed/u4N45v8f7cY" property="og:video:url"/>, <meta content="https://www.youtube.com/embed/u4N45v8f7cY" property="og:video:secure_url"/>, <meta content="text/html" property="og:video:type"/>, <meta content="1280" property="og:video:width"/>, <meta content="720" property="og:video:height"/>, <meta content="YouTube" property="al:android:app_name"/>, <meta content="com.google.android.youtube" property="al:android:package"/>, <meta content="what property="og:video:tag"/>, <meta content="what happens property="og:video:tag"/>, <meta content="scifi" property="og:video:tag"/>, <meta content="science documentary" property="og:video:tag"/>, <meta content="what scenario" property="og:video:tag"/>, <meta content="mysteries" property="og:video:tag"/>, <meta content="what cosmos" property="og:video:tag"/>, <meta content="cosmos" property="og:video:tag"/>, <meta content="hypothetical" property="og:video:tag"/>, <meta content="hypothetical scenario" property="og:video:tag"/>, <meta content="hypothetical scenarios" property="og:video:tag"/>, <meta content="cold" property="og:video:tag"/>, <meta content="dark" property="og:video:tag"/>, <meta content="atmosphere" property="og:video:tag"/>, <meta content="fart" property="og:video:tag"/>, <meta content="farts" property="og:video:tag"/>, <meta content="rotten eggs" property="og:video:tag"/>, <meta content="rotten egg" property="og:video:tag"/>, <meta content="uranus" property="og:video:tag"/>, <meta content="home" property="og:video:tag"/>, <meta content="settlement" property="og:video:tag"/>, <meta content="home settlement" property="og:video:tag"/>, <meta content="solar system" property="og:video:tag"/>, <meta content="planet" property="og:video:tag"/>, <meta content="temperature" property="og:video:tag"/>, <meta content="gas" property="og:video:tag"/>, <meta content="gas giants" property="og:video:tag"/>, <meta content="cold planet" property="og:video:tag"/>, <meta content="methane" property="og:video:tag"/>, <meta content="uranus planet" property="og:video:tag"/>, <meta content="uranus facts" property="og:video:tag"/>, <meta content="rings uranus" property="og:video:tag"/>, <meta content="facts about uranus" property="og:video:tag"/>, <meta content="space" property="og:video:tag"/>, <meta content="nasa" property="og:video:tag"/>, <meta content="earth uranus" property="og:video:tag"/>, <meta content="space photography" property="og:video:tag"/>, <meta content="space exploration" property="og:video:tag"/>, <meta content="universe" property="og:video:tag"/>, <meta content="solar" property="og:video:tag"/>, <meta content="87741124305" property="fb:app_id"/>, <meta content="player" name="twitter:card"/>, <meta content="@youtube" name="twitter:site"/>, <meta content="https://www.youtube.com/watch?v=u4N45v8f7cY" name="twitter:url"/>, <meta content="What Lived Uranus?" name="twitter:title"/>, <meta content="Freezing cold, dark with atmosphere that smells like farts rotten eggs? Uranus doesn?t sound like somewhere you?d want call home. let?s sa..." name="twitter:description"/>, <meta content="https://i.ytimg.com/vi/u4N45v8f7cY/maxresdefault.jpg" name="twitter:image"/>, <meta content="YouTube" name="twitter:app:name:iphone"/>, <meta content="544007664" name="twitter:app:id:iphone"/>, <meta content="YouTube" name="twitter:app:name:ipad"/>, <meta content="544007664" name="twitter:app:id:ipad"/>, <meta content="vnd.youtube://www.youtube.com/watch?v=u4N45v8f7cY&feature=youtu.be&feature=applinks" name="twitter:app:url:iphone"/>, <meta content="vnd.youtube://www.youtube.com/watch?v=u4N45v8f7cY&feature=youtu.be&feature=applinks" name="twitter:app:url:ipad"/>, <meta content="YouTube" name="twitter:app:name:googleplay"/>, <meta content="com.google.android.youtube" name="twitter:app:id:googleplay"/>, <meta content="https://www.youtube.com/watch?v=u4N45v8f7cY" name="twitter:app:url:googleplay"/>, <meta content="https://www.youtube.com/embed/u4N45v8f7cY" name="twitter:player"/>, <meta content="1280" name="twitter:player:width"/>, <meta content="720" name="twitter:player:height"/>, <meta content="What Lived Uranus?" itemprop="name"/>, <meta content="Freezing cold, dark with atmosphere that smells like farts rotten eggs? Uranus doesn?t sound like somewhere you?d want call home. let?s sa..." itemprop="description"/>, <meta content="False" itemprop="paid"/>, <meta content="UCphTF9wHwhCt-BzIq-s4V-g" itemprop="channelId"/>, <meta content="u4N45v8f7cY" itemprop="videoId"/>, <meta content="PT6M50S" itemprop="duration"/>, <meta content="False" itemprop="unlisted"/>, <meta content="1280" itemprop="width"/>, <meta content="720" itemprop="height"/>, <meta content="HTML5 Flash" itemprop="playerType"/>, <meta content="1280" itemprop="width"/>, <meta content="720" itemprop="height"/>, <meta content="true" itemprop="isFamilyFriendly"/>, <meta content="AD,AE,AF,AG,AI,AL,AM,AO,AQ,AR,AS,AT,AU,AW,AX,AZ,BA,BB,BD,BE,BF,BG,BH,BI,BJ,BL,BM,BN,BO,BQ,BR,BS,BT,BV,BW,BY,BZ,CA,CC,CD,CF,CG,CH,CI,CK,CL,CM,CN,CO,CR,CU,CV,CW,CX,CY,CZ,DE,DJ,DK,DM,DO,DZ,EC,EE,EG,EH,ER,ES,ET,FI,FJ,FK,FM,FO,FR,GA,GB,GD,GE,GF,GG,GH,GI,GL,GM,GN,GP,GQ,GR,GS,GT,GU,GW,GY,HK,HM,HN,HR,HT,HU,ID,IE,IL,IM,IN,IO,IQ,IR,IS,IT,JE,JM,JO,JP,KE,KG,KH,KI,KM,KN,KP,KR,KW,KY,KZ,LA,LB,LC,LI,LK,LR,LS,LT,LU,LV,LY,MA,MC,MD,ME,MF,MG,MH,MK,ML,MM,MN,MO,MP,MQ,MR,MS,MT,MU,MV,MW,MX,MY,MZ,NA,NC,NE,NF,NG,NI,NL,NO,NP,NR,NU,NZ,OM,PA,PE,PF,PG,PH,PK,PL,PM,PN,PR,PS,PT,PW,PY,QA,RE,RO,RS,RU,RW,SA,SB,SC,SD,SE,SG,SH,SI,SJ,SK,SL,SM,SN,SO,SR,SS,ST,SV,SX,SY,SZ,TC,TD,TF,TG,TH,TJ,TK,TL,TM,TN,TO,TR,TT,TV,TW,TZ,UA,UG,UM,US,UY,UZ,VA,VC,VE,VG,VI,VN,VU,WF,WS,YE,YT,ZA,ZM,ZW" itemprop="regionsAllowed"/>, <meta content="153196" itemprop="interactionCount"/>, <meta content="2022-02-26" itemprop="datePublished"/>, <meta content="2022-02-26" itemprop="uploadDate"/>, <meta content="Science Technology" itemprop="genre"/>] seems much data here will help some useful data. Now, let's video title videos print("Title Video: soup.find("meta", itemprop="name")["content"]) print("Views Video: soup.find("meta", itemprop="interactionCount")["content"]) Output: Title Video: What Lived Uranus? Views Video: 153544 this basic example extracting video metadata extracts video information. Now's will create Python script some information from YouTube. Python Script Information from YouTube First, import required libraries. from requests_html import HTMLSession from import BeautifulSoup move further, create HTTP session. init HTML Session session HTMLSession() Now, create function that will return data dictionary. extract_video_informations(url): will download HTML code resp session.get(url) execute Javascript resp.html.render() create beautiful soup object parse HTML soup bs(resp.html.html, "html.parser") initialize result dictionary store data result above method, download HTML code page. render() method execute JavaScript which rendered data HTML. Note default value rendering page sec. code throws timeout error, simply timeout parameter sec. resp.html.render(timezone=60) Now, video title, description, likes, etc. result["title"] soup.find("meta", itemprop="name")['content'] result["views"] soup.find("meta",itemprop="interactionCount")['content'] result["description"] soup.find("meta"itemprop="description")['content'] number likes need import json module. find pattern webpage using Once done with, load serialize into json using loads() method. data re.search(r"var ytInitialData ({.*?});", soup.prettify()).group(1) data_json json.loads(data) Complete Code Below complete code extract video details. Install dependencies from requests_html import HTMLSession from import BeautifulSoup importing BeautifulSoup import import json json copy youtube from YouTube website video_url "https://youtu.be/u4N45v8f7cY" init HTML Session session HTMLSession() extract_video_informations(url): will download HTML code resp session.get(url) execute Javascript resp.html.render(timeout=60) create beautiful soup object parse HTML soup bs(resp.html.html, "html.parser") initialize result dictionary store data result result["title"] soup.find("meta", itemprop="name")['content'] result["views"] soup.find("meta",itemprop="interactionCount")['content'] result["description"] soup.find("meta",itemprop="description")['content'] result["date_published"] soup.find("meta", itemprop="datePublished")['content'] result["duration"] soup.find("span", {"class": "ytp-time-duration"}).text result["tags"] '.join([ meta.attrs.get("content") meta soup.find_all("meta", {"property": "og:video:tag"}) data re.search(r"var ytInitialData ({.*?});", soup.prettify()).group(1) data_json json.loads(data) videoPrimaryInfoRenderer data_json['contents']['twoColumnWatchNextResults']['results']['results']['contents'][0]['videoPrimaryInfoRenderer'] videoSecondaryInfoRenderer data_json['contents']['twoColumnWatchNextResults']['results']['results']['contents'][1]['videoSecondaryInfoRenderer'] number likes likes_label videoPrimaryInfoRenderer['videoActions']['menuRenderer']['topLevelButtons'][0]['toggleButtonRenderer']['defaultText']['accessibility']['accessibilityData']['label'] likes" "###,### likes" likes_str likes_label.split(' ')[0].replace(',','') result["likes"] likes_str 'No' else likes_str channel_tag soup.find("meta", itemprop="channelId")['content'] channel name channel_name soup.find("span", itemprop="author").next.next['content'] channel_url f"https://www.youtube.com/{channel_tag}" number subscribers channel_subscribers videoSecondaryInfoRenderer['owner']['videoOwnerRenderer']['subscriberCountText']['accessibility']['accessibilityData']['label'] result['channel'] {'name': channel_name, 'url': channel_url, 'subscribers': channel_subscribers} return result print(extract_video_informations(video_url)) Output: {'title': 'What Lived Uranus?', 'views': '153838', 'description': 'Freezing cold, dark with atmosphere that smells like farts rotten eggs? Uranus doesn't sound like somewhere you'd want call home. let's sa...', 'date_published': '2022-02-26', 'duration': '6:49', 'tags': 'what what happens scifi, science documentary, what scenario, mysteries, what cosmos, cosmos, hypothetical, hypothetical scenario, hypothetical scenarios, cold, dark, atmosphere, fart, farts, rotten eggs, rotten egg, uranus, home, settlement, home settlement, solar system, planet, temperature, gas, giants, cold planet, methane, uranus planet, uranus facts, rings uranus, facts about uranus, space, nasa, earth uranus, space photography, space exploration, universe, solar', 'likes': '6246', 'channel': {'name': 'What If', 'url': 'https://www.youtube.com/UCphTF9wHwhCt-BzIq-s4V-g', 'subscribers': '6.08 million subscribers'}} Conclusion This tutorial covered extract information YouTube videos. Using above script, pass function data also save into spreadsheet. Next TopicHow Solve Stock Span Problem Using Python prev next