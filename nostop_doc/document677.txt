next prev Digital Clock using Tkinter Python amazing part creating Graphical User Interface (GUI) applications that customize them want. There various features available customization ranging from font text background color. following tutorial, will learn build digital clock with Tkinter library Python programming language. let's started. Prerequisites Project order build Digital Clock with Python, will need following modules: Tkinter:The tkinter module will allow provide application with Graphical User Interface (GUI). Time:The time module will allow work with time. Since both these modules come pre-installed with Python, there need install them separately. Building Digital Clock with Python procedure building Digital Clock Python divided into several steps better understanding. steps will need execute follows: Step will start importing required modules. Step will then define function display current time. Step will then create main window application. Step will widgets window. understand these steps detail. Importing required modules First, will import necessary modules help build this project. These modules include tkinter module graphical user interface application time module work with dates. consider following snippet code illustrating same. File: clock_gui.py importing required modules from tkinter import importing modules widgets from tkinter import time importing time module Explanation: above snippet code, have imported modules widgets from tkinter provide application. have also imported time module display time. Defining function display current time will define function that will allow display current time whenever program executed. This function will strftime() method tkinter module represent current time string format. will then convert 24-hour time 12-hour time value label requirement. will also insert evaluated values labels create later. consider following snippet code illustrating same. File: clock_gui.py defining function display time display_time(): using strftime() method represent current time string hour str(time.strftime("%H")) minute str(time.strftime("%M")) second str(time.strftime("%S")) hour range between minute greater than equal then value meridiem_label label int(hour) int(hour) (minute) meridiem_label.config(text "PM") else value meridiem_label else: meridiem_label.config(text "AM") converting 24-hour time 12-hour time subtracting from hours ranging from int(hour) hour str((int(hour) 12)) hour equal setting hour elif int(hour) hour str(12) configuring text hour, minute, second labels hour_label.config(text hour) minute_label.config(text minute) second_label.config(text second) using after() call display_time() after milliseconds hour_label.after(200, display_time) Explanation: above code snippet, have defined function display_time(). Within this function, have used strftime() method time module represent current time string format separated time into hours, minutes, seconds stored them different variables. have then used if-else conditional statement check hour range between minute greater than equal then value meridiem_label label not, have value meridiem_label label AM. then used if-elif conditional statement convert 24-hour format 12-hour format subtracting from hour ranging between have also value hour case hour have then used config() method tkinter module text labels displaying hour, minute, second value, evaluated earlier. last, have then called after() method call display_time() function after every milliseconds. Creating main window application that have defined required function, time create application's main window display function's working. create window instantiating Tk() class tkinter module. will then appropriate title window along with size positioning window. will also icon configure background color window. consider following snippet code illustrating same. File: clock_gui.py main function __name__ "__main__": creating object Tk() class gui_root Tk() setting title window gui_root.title("Digital Clock JAVATPOINT") setting size position window gui_root.geometry("650x250+650+250") disabling resizable option better gui_root.resizable(0, configuring background color #2C3C3F gui_root.config(bg "#2C3C3F") setting icon window gui_root.iconbitmap("clock_img.ico") Explanation: above snippet code, have created object Tk() class gui_root representing main window application. have then used title() method title window. have also used geometry() method size position window screen. have then disabled resizable option setting values resizable() method zeros. have also configured background color #2C3C3F setting value parameter config() method. last, have icon window with help iconbitmap() method specifying address file present directory. Adding widgets main window will some widgets window display data users. These widgets include some frames labels. frames will provide well-defined structure place other widgets window, whereas labels will display heading time. understand implementation these widgets detail, shown below. Adding Frames will start adding some frames main window with help Frame() widget offered tkinter module. These frames will provide support other widgets. will then pack() method position these frames window. consider following snippet code demonstrating same. File: clock_gui.py creating some frames provide structure other widgets header_frame Frame(gui_root, "#2C3C3F") body_frame Frame(gui_root, "#2C3C3F") using pack() method positions above frames window screen header_frame.pack(pady body_frame.pack() Explanation: above snippet code, have added frames using Frame() widget tkinter module their master parameters gui_root, object Tk() class created earlier. have also their background colors #2C3C3F. last, have used pack() method positions these frames window screen. Adding Widgets header_frame frame will label header_frame frame display heading. label using Label() widget offered tkinter module. will also pack() method position this label window screen. consider following snippet code illustrating same. File: clock_gui.py #------------------- Header Frame ------------------------- defining label display heading header_label Label( header_frame, text "Digital Clock", font ("consolas", "14", "bold"), "#2C3C3F", "#CAF6FF" using pack() method position label window screen header_label.pack() Explanation: above snippet code, have used Label() widget tkinter module label window master parameter header_frame, frame created earlier. have also text this label will display along with font style size. have also configured background foreground color label. last, have used pack() method position label window screen. Adding Widgets body_frame frame will some labels body_frame frame display time. will again Label() widget tkinter module label window. will also grid() method position these labels grid format main window. consider following snippet code implementation same. File: clock_gui.py #------------------- Body Frame --------------------------- defining some labels display time "HH:MM:SS AM/PM" format hour_label Label( body_frame, text "00", font ("radioland", "48"), "#2C3C3F", "#00D2FF" colon_label_one Label( body_frame, text ":", font ("radioland", "48"), "#2C3C3F", "#00D2FF" minute_label Label( body_frame, text "00", font ("radioland", "48"), "#2C3C3F", "#00D2FF" colon_label_two Label( body_frame, text ":", font ("radioland", "48"), "#2C3C3F", "#00D2FF" second_label Label( body_frame, text "00", font ("radioland", "48"), "#2C3C3F", "#00D2FF" meridiem_label Label( body_frame, text "AM", font ("radioland", "48"), "#2C3C3F", "#00D2FF" using grid() method position above labels grid form window screen hour_label.grid(row column padx pady colon_label_one.grid(row column padx pady minute_label.grid(row column padx pady colon_label_two.grid(row column padx pady second_label.grid(row column padx pady meridiem_label.grid(row column padx pady Explanation: above snippet code, have used Label() widget tkinter module some labels window displaying different components clock such hours, minutes, seconds, time, colons separating these components. have master parameters these labels body_frame, another frame created earlier. have also text these labels will display along with font styles sizes. have also configured background foreground colors labels. last, have used grid() method position label window screen. Running Application Once have successfully added necessary widgets, time call display_time() function defined earlier used mainloop() method application. consider following snippet code illustrating same. File: clock_gui.py calling display_time() function display current time display_time() using mainloop() method application gui_root.mainloop() Explanation: above snippet code, have called display_time() function start clock. have then used mainloop() method with object Tk() class, i.e., gui_root, application. coding section application completed. will save Python project file type following command command prompt terminal execute program. Syntax: python clock_gui.py Before output, consider complete code 'Digital Clock using Tkinter' project. Complete Project Code following complete code 'Digital Clock using Tkinter Python' project. File: clock_gui.py importing required modules from tkinter import importing modules widgets from tkinter import time importing time module defining function display time display_time(): using strftime() method represent current time string hour str(time.strftime("%H")) minute str(time.strftime("%M")) second str(time.strftime("%S")) hour range between minute greater than equal then value meridiem_label label int(hour) int(hour) (minute) meridiem_label.config(text "PM") else value meridiem_label else: meridiem_label.config(text "AM") converting 24-hour time 12-hour time subtracting from hours ranging from int(hour) hour str((int(hour) 12)) hour equal setting hour elif int(hour) hour str(12) configuring text hour, minute, second labels hour_label.config(text hour) minute_label.config(text minute) second_label.config(text second) using after() call display_time() after milliseconds hour_label.after(200, display_time) main function __name__ "__main__": creating object Tk() class gui_root Tk() setting title window gui_root.title("Digital Clock JAVATPOINT") setting size position window gui_root.geometry("650x250+650+250") disabling resizable option better gui_root.resizable(0, configuring background color #2C3C3F gui_root.config(bg "#2C3C3F") setting icon window gui_root.iconbitmap("clock_img.ico") creating some frames provide structure other widgets header_frame Frame(gui_root, "#2C3C3F") body_frame Frame(gui_root, "#2C3C3F") using pack() method positions above frames window screen header_frame.pack(pady body_frame.pack() #------------------- Header Frame ------------------------- defining label display heading header_label Label( header_frame, text "Digital Clock", font ("consolas", "14", "bold"), "#2C3C3F", "#CAF6FF" using pack() method position label window screen header_label.pack() #------------------- Body Frame --------------------------- defining some labels display time "HH:MM:SS AM/PM" format hour_label Label( body_frame, text "00", font ("radioland", "48"), "#2C3C3F", "#00D2FF" colon_label_one Label( body_frame, text ":", font ("radioland", "48"), "#2C3C3F", "#00D2FF" minute_label Label( body_frame, text "00", font ("radioland", "48"), "#2C3C3F", "#00D2FF" colon_label_two Label( body_frame, text ":", font ("radioland", "48"), "#2C3C3F", "#00D2FF" second_label Label( body_frame, text "00", font ("radioland", "48"), "#2C3C3F", "#00D2FF" meridiem_label Label( body_frame, text "AM", font ("radioland", "48"), "#2C3C3F", "#00D2FF" using grid() method position above labels grid form window screen hour_label.grid(row column padx pady colon_label_one.grid(row column padx pady minute_label.grid(row column padx pady colon_label_two.grid(row column padx pady second_label.grid(row column padx pady meridiem_label.grid(row column padx pady calling display_time() function display current time display_time() using mainloop() method application gui_root.mainloop() Output: Next TopicPlot Correlation Matrix Python prev next