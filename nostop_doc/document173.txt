next prev Python Program Find Anagram this tutorial, will learn detect given strings anagram. first should familiar with anagram's concept. What Anagram? Anagram condition where string number rearranged that manner; each character rearranged string number must part another string number. other words, string said anagram another second simple rearrangement first string. example -The python yphton anagrams; Java avaJ anagrams well. will solve this problem before approaching solution. Let's understand problem description. Problem Description string inputs from user store them separate variables. sort() method sort both strings into lists. Check both lists they forming anagram Print result. Exit Program anagramCheck2(str1,str2): Convert string into lists list1 list(str1) list2 list(str2) Sort list value list1.sort() list2.sort() position matches True while position len(str1) matches: list1[position]==list2[position]: position position else: matches False return matches print(anagramCheck2('python','ythonp')) Output: True Explanation above code, have declared anagramCheck() method, which takes strings argument. These strings converted into list sort. Then, defined position variable assigned zero. each iteration while loop, string length compared position value. Each element both lists compared each other increased position value one. Once position value became greater than string length, loop will terminated, returns true; otherwise, will return false. Example Anagram Program Python There techniques example which find anagram Python. These techniques given below. Counter Technique this technique, calculate count each character both given strings. count given string matches another string, then corresponding word anagram another word. Let's understand following example. Example from collections import Counter, defaultdict checking_anagram(keywords): agrms defaultdict(list) keywords: hist tuple(Counter(i).items()) agrms[hist].append(i) return list(agrms.values()) keywords ("python","yphotn") print(checking_anagram(keywords)) Output: [['python'], ['yphotn']] Explanation have imported collection module Count defaultdict method check string's anagram above code. have defined checking_anagram() method count record each character using counter function. Each count resorted list kept track. This process accomplished characters first string than second string. count both strings matched, means both strings Anagrams. Sort Techniques this technique, both strings sorted check whether both values matching each other. Let's understand following example. Example Anogram_check(str1, str2): Strings sorted check whether both matching if(sorted(str1)== sorted(str2)): print("Both strings Anagram.") else: print("Both strings Anagram.") string1 ="python" string2 ="ythopn" print( "String value1 str1 print( "String value2 str2 Anogram_check(string1, str2) Output: String value1 python String value2 ythopn Both strings Anagram. Explanation above code, have defined checking_anagram() method passed strings. checking_anagram() method, stored string specific variables. compared each string after sorting. comparison between strings matched, given string form anagram; else, they returned Both strings anagrams. This method relatively easy effective. cuts code complexity very significant level. Reverse Anagram Check apply this technique follows. Example words_list ["cat", "tac", "Play", "ay"] anagrams words_list: reverse_word=w[::-1] reverse_word words_list: anagrams[w] (words_list.pop(words_list.index(reverse_word))) print(anagrams) Output: {'cat': 'tac'} Explanation above code, have used this technique comparing anagrams among reversed string. Here, have formed different strings. This technique similar palindromes, where reversed among string checked with other strings. they matched, strings have formed anagram; they don't match, they notified anagrams. Position Verification Technique this method, position level compares check anagram. achieve this verifying first string's positional character with each positional character string other string. first string holds similar match with other string, declared anagram. Let's understand following example. Example checking_anagram(str1,str2): chk_var True len(str1) len(str2): chk_var False list1 list(str2) pos_string1 while pos_string1 len(str1) chk_var: pos_string2 found False while pos_string2 len(list1) found: str1[pos_string1] list1[pos_string2]: found True else: pos_string2 pos_string2 found: list1[pos_string2] None else: chk_var False pos_string1 pos_string1 return chk_var str1 "ythopn" str2 "python" print("String value1 str1) print("String value2 str2) Boolean_out checking_anagram('ythopn','python') Boolean_out: print( "Both words Alogram else: print( "Both words Alogram Output: String value1 ythopn String value2 python Explanation: this, another technique anagram strings. Here have also used comparison. nested while loop, pass string into these loops verification process. outer while loop used processing strings, inner loop used other string. string's character compared each character's other string, this process continued every letter first string. first string characters matched with other string, then both strings meant anagram. This technique very stable process because works algorithm technique, precisely judging strings. Next TopicHow convert List prev next