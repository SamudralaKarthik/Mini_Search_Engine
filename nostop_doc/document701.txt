next prev any() Python Imagine situation where must check conditions operate. Traditionally, conditional statements (if, if-else, elif, nested if) check conditions true. But, that many conditions, code becomes lengthy many statements take away readability code. such situations, programmer's choice Python's any() function. This tutorial explains functionality function with examples. Example any(): list1 [True, False, True, False] print(any(list1)) list1 [False, False, False, False] print(any(list1)) list1 [True, True, True, True] print(any(list1)) Output: True False True Understanding: three cases above code, any() returned False only second scenario where conditions False. function requires least condition True return True. Mechanism: Lazy evaluation: When give more than expression/value function, keeps evaluating each expression from left right, once finds True expression, stops evaluation returns True. won't even check succeeding expressions. Syntax: any(iterable) iterable: object that iterated using loops like tuple, list, dictionary, etc. (int, float etc., iterable). function returns True least conditions values evaluates True else, returns False. (returns Boolean-True False) Equivalent Boolean values: Token Equivalent Boolean value False Non-zero integer, float, double... True empty string, list, tuple...any iterable False Non-empty iterable True None False Using bool(x) function, find equivalent Boolean values token Python. Sample Code: print("0: bool(0)) print("Some non-zero integer: bool(78)) print("0.0: bool(0.0)) print("Some non-zero float: bool(8.90)) print("Empty string: bool("")) print("Non-empty string: bool("Hi!")) print("Empty list: bool([])) print("Non-empty list: bool([2, 5])) print("None: bool(None)) Output: False Some non-zero integer: True 0.0: False Some non-zero float: True Empty string: False Non-empty string: True Empty list: False Non-empty list: True None: False Knowing these values, function accurately. Example usage Scenarios: Generally, code successful, returns unexpected error occurs, returns some number. Imagine running many test cases seeing test cases returned any() test case returned non-zero value. Code: print("Find test cases returned zero") results 3.8343, if(any(results)==True): print("At least test case returned non-zero number") else: print("All test cases returned success") Output: Find test cases returned zero least test case returned non-zero number find non-empty string included empty strings: Code: print("Find empty string created accident") results ["", "H"] if(any(results) True): print("At least character included some string") else: print("All empty strings") Output: Find empty string created accident Atleast character included some string with lists, tuples sets: Example: print("Lists: list1 0.0, ""] list2 9.0, "Hi"] print(list1,":",any(list1)) print(list2,":",any(list2)) print("Tuples: tuple1 0.0, tuple2 9.0, "Hi") print(tuple1,":",any(tuple1)) print(tuple2,":",any(tuple2)) print("Sets: set1 0.0, set2 9.0, "Hi"} print(set1,":",any(set1)) print(set2,":",any(set2)) Output: Lists: 0.0, False 9.0, 'Hi'] True Tuples: 0.0, False 9.0, 'Hi') True Sets: ''} False 9.0, 'Hi'} True any() with Dictionary: case dictionary, checks least dictionary True. keys False, returns False. empty dictionary given argument, returns False Example: print("Dictionary: dict1 "Hi", False: "Hey"} dict2 dict3 "Hello"} print(dict1,":",any(dict1)) print(dict2,":",any(dict2)) print(dict3,":",any(dict3)) Output: Dictionary: 'Hey'} False False 'Hello'} True any() with Condition: function check least element iterable satisfies specified condition. Example: list1 print("The list: list1) result any(i list1) if(result==True): print("At least element list greater than else: print("Not even element list greater than Output: list: least element list greater than any: 'OR' Python's Boolean operators. returns true least condition evaluates True. Both follow lazy approach, both have same type functionality quite same. Here some examples showing similarity between both. Example: print(True False) print(any([True, False])) print(True False True False) print(any([True, False, True, False])) Output: True True True True Here differences: ANY() operator function returns first True valueprint(78 0)O/P: returns Boolean True Falseprint(any([78, 0]))O/P: True used between values operator. accepts only argument, which iterable with number values-list, tupleâ€¦ print(0 "Hi")O/P: print(0 "Hi")O/P: True Example: list1 ["Hi", "Hey", "Hello"] print(any(list1)) print(list1[0] list1[1] list1[2]) Output: True Both any() stops checking values after first element-"Hi" already True-Lazy evaluation. any() without using any() also important understand implement functionality without actually using function: achieve that using simple loop if-else. Example: list1 print("The list: list1) list1: print("True") break if(i==len(list1)): print("False") Output: list: True More efficiently, function. Example: any_func(list1): list1: return True return False list1 print("The list: list1) print(any_func(list1)) Output: list: True Next TopicArguments Parameters Python prev next