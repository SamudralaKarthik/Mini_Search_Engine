next prev Creating Marksheet using Tkinter Python Tkinter standard Graphical User Interface (GUI) library Python programming language. When combined with Tkinter library, Python offers quick reliable build applications based GUI. this tutorial, will build marksheet with help Tkinter Python. definitions provided Oxford Dictionary, Marksheet official record student's work, representing courses taken grades achieved. Simply put, Marksheet document representing marks awarded academic work. consider project's prerequisite before start building Marksheet using Tkinter library Python. Prerequisites Project There some libraries that will need creation Marksheet Python. These libraries briefly described follows: Tkinter:The Tkinter library will allow provide application with graphical user interface (GUI). Pillow:The Pillow library Python Imaging Library that allows image processing capabilities Python interpreter. Since Tkinter library comes preinstalled with Python, there need install externally. However, install Pillow (PIL) library using installer typing following command command prompt terminal. Syntax: install pillow Once installation complete, verify whether pillow library installed properly creating python program file importing pillow (PIL) module. following snippet code illustrating same. File: verify.py import Now, save file following command command prompt terminal. Syntax: python verify.py library been installed successfully program does return importing error. case exception raised, reinstalling library consider checking official documentation. start building project. Building Marksheet using Tkinter Python have divided complete project code creating Marksheet Python into several steps better understanding. These steps shown below: Step Importing necessary modules Step Defining required functions manipulate user data yield result. Step Creating main window application. Step Adding necessary widgets window event triggers. understand steps mentioned above more elaborate way. Importing necessary modules will start importing necessary modules build applications. These modules include tkinter module along with messagebox module Tkinter library. will also include necessary modules from library. following snippet code demonstrating same. File: guiMarksheet.py importing required modules from tkinter import importing modules widgets from tkinter from tkinter import messagebox importing messagebox module from tkinter from import ImageTk, Image, ImageDraw, ImageFont importing ImageTk, Image, ImageDraw ImageFont modules from Explanation: above code snippet, have imported modules widgets from tkinter module. have also imported messagebox module from tkinter module. last, have imported ImageTk, Image, ImageDraw ImageFont modules from module. Defining functions application Once have successfully imported required modules, time define different functions allowing manipulate data entered user. will define functions calculate total, percentage, grade given marks return result record. will also some other functions perform data validation, display result, generate marksheet, clear entries close application. understand implementation these functions detail. Functions calculate total entered marks This function will accept marks from entry fields arguments calculate marks returning total. consider following snippet code illustrating same. File: guiMarksheet.py --------------------- functions --------------------- defining function calculate total calculate_total(sub1, sub2, sub3, sub4, sub5): adding arguments total sub1 sub2 sub3 sub4 sub5 returning total return total Explanation: above code snippet, have defined function calculate_total(). This function accepts each subject's marks arguments adds them return total marks. Function calculate percentage calculated This function will accept total returned from earlier function calculate average dividing total number subjects returning calculated percentage. consider following snippet code demonstrating same. File: guiMarksheet.py defining function calculate percentage calculate_percentage(total): dividing total number subjects percentage total returning percentage return percentage Explanation: above code snippet, have defined function calculate_percentage(). This function accepts argument consisting total marks. Within this function, have calculated average dividing total number subjects, i.e., this case returned calculated percentage. Function grade student their percentage This function will return grade student's performance percentage they received. will if-elif-else conditional statement calculate grade. consider following snippet code illustrating same. File: guiMarksheet.py defining function calculate grade calculate_grade(percentage): using if-elif-else conditional statement grade student percentage stands Outstanding, 'A+' indicate excellent performance, 'B+' stand good performance, stands satisfactory performance, stands less than satisfactory performance, stands unsatisfactory performance indicating Failure (percentage 95.0): return elif (percentage 90.0 percentage 95.0): return 'A+' elif (percentage 80.0 percentage 90.0): return elif (percentage 70.0 percentage 80.0): return 'B+' elif (percentage 60.0 percentage 70.0): return elif (percentage 50.0 percentage 60.0): return elif (percentage 33.0 percentage 50.0): return else: return Explanation: above code snippet, have defined function calculate_grade() with accepted percentage parameter. Within this function, have used if-elif-else conditional statement returned grade basis student's percentage. have returned grade percentage equal above. Similarly, have returned grade 'A+' percentage ranging between grade cent, grade 'B+' cent, grade cent, grade cent, grade cent grade less than cent. Function calculate result student This function will calculate result checking whether percentage student above passing marks not, i.e., this case. will also check whether student passed every subject return 'PASS' 'FAIL' situation. File: guiMarksheet.py defining function calculate result calculate_result(percentage, sub1, sub2, sub3, sub4, sub5): using if-else conditional statement whether student pass fail (percentage 33.0 sub1 33.0 sub2 33.0 sub3 33.0 sub4 33.0 sub5 33.0): return 'PASS' else: return 'FAIL' Explanation: above snippet code, have defined function calculate_result(). This function accepts multiple parameters like percentage marks subjects. Within this function, have used if-else conditional statement check percentage greater than along with marks each subject greater than returned 'PASS' 'FAIL' situation. Function check errors entering marks This function will check fields displaying marks empty return message displaying error. consider following snippet code illustrating same. File: guiMarksheet.py defining function check errors check_for_errors(): using conditional statement check entries invalid if(marks_One_field.get() marks_Two_field marks_Three_field marks_Four_field marks_Five_field ""): displaying message with error message mb.showerror("Invalid Input", "Marks must float data type.") calling function reset entries reset_subject_entries() returning return Explanation: above snippet code, have defined function check_for_errors(). Within this function, have used if-conditional statement check whether fields displaying empty. have then displayed message with error message. have also called function reset entries. last, have returned quit process. Function display result will define function display result. This function will check subject name fields their marks. will then evaluate result display user. consider following snippet code illustrating same. File: guiMarksheet.py defining function display result display_result(): using get() method subject names sub1 subject_One_field.get() sub2 subject_Two_field.get() sub3 subject_Three_field.get() sub4 subject_Four_field.get() sub5 subject_Five_field.get() checking strings empty (sub1 sub2 sub3 sub4 sub5 ""): displaying message with error message mb.showerror("Empty Fields", "Subject fields cannot empty.") calling function reset entries reset_subject_entries() else: calling check_for_errors() function storing value check_for_errors() stored value then return return else: using get() method marks converting them into float marks1 float(marks_One_field.get()) marks2 float(marks_Two_field.get()) marks3 float(marks_Three_field.get()) marks4 float(marks_Four_field.get()) marks5 float(marks_Five_field.get()) using if-else conditional statement check marks entered valid ranging between (marks1 marks1 marks2 marks2 marks3 marks3 marks4 marks4 marks5 marks5 100): calculating result calling functions created earlier storing their values total calculate_total(marks1, marks2, marks3, marks4, marks5) percentage calculate_percentage(total) grade calculate_grade(percentage) result calculate_result(percentage, marks1, marks2, marks3, marks4, marks5) setting grade 'F', result 'FAIL' result 'FAIL': grade calling function disable entry fields disable_field() configuring labels displaying result setting their text corresponding values display_total_label.config(text total) display_percentage_label.config(text percentage) display_grade_label.config(text grade) display_result_label.config(text result) configuring state 'Generate Marksheet' button normal generate_button.config(state "normal") else: displaying message with error message mb.showerror("Out Range", "Marks must ranging between 100.") calling function reset entries reset_subject_entries() Explanation: above code snippet, have defined function display_result(). Within this function, have used get() method retrieve details subjects. then checked fields were empty returned message displaying error same. have then called check_for_errors() function check marks field empty. not, have converted marks into float values. then check entered marks range from calculate total, percentage, grade, result. have also grade result equals 'FAIL'. then called function disable fields, user cannot change data after calculating result. have then used config() method with labels display result. have also state 'Generate Marksheet' button normal. case marks exceed limits, have returned message displaying error called reset_subject_entries() function. Function Generate Marksheet file will define function generate marksheet file. This function will some modules library entered data image file. following image file that will project. File: report_card.png consider following snippet code illustrating same. File: guiMarksheet.py defining function generate marksheet file generate_marksheet(): using get() method entries from entry field student's information student_name str(name_field.get()) student_dob str(dob_field.get()) student_class str(class_field.get()) regd_num str(regd_num_field.get()) school_name str(school_field.get()) roll_num str(roll_num_field.get()) names subjects sub1 str(subject_One_field.get()) sub2 str(subject_Two_field.get()) sub3 str(subject_Three_field.get()) sub4 str(subject_Four_field.get()) sub5 str(subject_Five_field.get()) marks subjects marks1 str(marks_One_field.get()) marks2 str(marks_Two_field.get()) marks3 str(marks_Three_field.get()) marks4 str(marks_Four_field.get()) marks5 str(marks_Five_field.get()) using cget() method retrieve text from result labels total str(display_total_label.cget("text")) percentage str(display_percentage_label.cget("text")) grade str(display_grade_label.cget("text")) result str(display_result_label.cget("text")) importing image report card using open() method Image module report_card_img Image.open("reportCard.png") using Draw() class ImageDraw module make drawing interface draw_obj ImageDraw.Draw(report_card_img) defining coordinates point1 380, point2 480, point3 480, point4 480, point5 480, point6 480, point7 420, point8 1100, point9 420, 966.6 point10 1100, 966.6 point11 420, 1032.3 point12 1100, 1032.3 point13 420, 1100 point14 1100, 1100 point15 420, 1166.6 point16 1100, 1166.6 point17 700, 1380 point18 700, 1450 point19 700, 1520 point20 700, 1680 specifying fonts text fontOne ImageFont.truetype("verdana.ttf", fontTwo ImageFont.truetype("verdana.ttf", fontThree ImageFont.truetype("verdana.ttf", adding text values image draw_obj.text(point1, school_name, "black", font fontOne) draw_obj.text(point2, regd_num, "black", font fontTwo) draw_obj.text(point3, roll_num, "black", font fontTwo) draw_obj.text(point4, student_name, "black", font fontTwo) draw_obj.text(point5, student_dob, "black", font fontTwo) draw_obj.text(point6, student_class, "black", font fontTwo) draw_obj.text(point7, sub1, "black", font fontTwo) draw_obj.text(point8, marks1, "black", font fontTwo) draw_obj.text(point9, sub2, "black", font fontTwo) draw_obj.text(point10, marks2, "black", font fontTwo) draw_obj.text(point11, sub3, "black", font fontTwo) draw_obj.text(point12, marks3, "black", font fontTwo) draw_obj.text(point13, sub4, "black", font fontTwo) draw_obj.text(point14, marks4, "black", font fontTwo) draw_obj.text(point15, sub5, "black", font fontTwo) draw_obj.text(point16, marks5, "black", font fontTwo) draw_obj.text(point17, total, "black", font fontTwo) draw_obj.text(point18, percentage, "black", font fontTwo) draw_obj.text(point19, grade, "black", font fontTwo) draw_obj.text(point20, result, "black", font fontThree) saving image file report_card_img.save(rf'{name_field.get()}.png') displaying image report_card_img.show() Explanation: above code snippet, have defined function generate_marksheet(). Within this function, have used get() method retrieve entries from entry field filled user store them Strings. have then used cget() method retrieve text from labels displaying result again stored them Strings. have then imported image file from directory using open() method Image module used Draw() class ImageDraw module create image interface stored values text image. have then defined different coordinates specifying placement text elements. then used truetype() method ImageFont imported required fonts decoration text values. have then used text() method with object Draw() class place stored string values image file. last, saved image file name student using save() method displayed final image using show() method. Function disable fields This function optional. will define this function disable entry fields that user cannot change entered data once result calculated. consider following snippet code illustrating same. File: guiMarksheet.py defining function disable fields disable_field(): disabling entry fields using config() method setting state parameter 'disabled' name_field.config(state "disabled") dob_field.config(state "disabled") class_field.config(state "disabled") regd_num_field.config(state "disabled") school_field.config(state "disabled") roll_num_field.config(state "disabled") subject_One_field.config(state "disabled") subject_Two_field.config(state "disabled") subject_Three_field.config(state "disabled") subject_Four_field.config(state "disabled") subject_Five_field.config(state "disabled") marks_One_field.config(state "disabled") marks_Two_field.config(state "disabled") marks_Three_field.config(state "disabled") marks_Four_field.config(state "disabled") marks_Five_field.config(state "disabled") result_button.config(state "disabled") Explanation: above code snippet, have defined function disable_field(). Within this function, have used config() method with objects Entry() widget value their state parameters 'disabled'. Function enable fields This function also optional. will define this function enable entry fields that user enter data once fields cleared. consider following snippet code illustrating same. File: guiMarksheet.py defining function enable fields enable_field(): enabling entry fields using config() method setting state parameter 'normal' name_field.config(state "normal") dob_field.config(state "normal") class_field.config(state "normal") regd_num_field.config(state "normal") school_field.config(state "normal") roll_num_field.config(state "normal") subject_One_field.config(state "normal") subject_Two_field.config(state "normal") subject_Three_field.config(state "normal") subject_Four_field.config(state "normal") subject_Five_field.config(state "normal") marks_One_field.config(state "normal") marks_Two_field.config(state "normal") marks_Three_field.config(state "normal") marks_Four_field.config(state "normal") marks_Five_field.config(state "normal") result_button.config(state "normal") Explanation: above code snippet, have defined function enable_field(). Within this function, have used config() method with objects Entry() widget value their state parameters 'normal'. Function reset entries 'Subjects Information' Section This function will allow reset entry fields present 'Subjects Information' section. consider following snippet code illustrating same. File: guiMarksheet.py defining function reset entries subject's information columns reset_subject_entries(): calling enable_field() function defined earlier enable_field() deleting entries field using delete() method subject_One_field.delete(0, END) subject_Two_field.delete(0, END) subject_Three_field.delete(0, END) subject_Four_field.delete(0, END) subject_Five_field.delete(0, END) marks_One_field.delete(0, END) marks_Two_field.delete(0, END) marks_Three_field.delete(0, END) marks_Four_field.delete(0, END) marks_Five_field.delete(0, END) setting focus first subject field using focus_set() method subject_One_field.focus_set() Explanation: above snippet code, have defined function reset_subject_entries(). Within this function, have called enable_field() function. have then used delete() method delete entries field available 'Subjects Information' section. last, have focus first subject name field using focus_set(). Function reset entries will define function that allows reset entries filled user along with calculated result. consider following snippet code illustrating same. File: guiMarksheet.py defining function clear entries reset(): calling reset_subject_entries() method defined earlier reset_subject_entries() deleting entries fields student's information columns name_field.delete(0, END) dob_field.delete(0, END) class_field.delete(0, END) regd_num_field.delete(0, END) school_field.delete(0, END) roll_num_field.delete(0, END) configuring initial text labels display_total_label.config(text "0") display_percentage_label.config(text "0") display_grade_label.config(text "XXXX") display_result_label.config(text "XXXX") disabling 'Generate Marksheet' button generate_button.config(state "disabled") setting focus name field using focus_set() method name_field.focus_set() Explanation: above snippet code, have defined function reset(). Within this function, have called reset_subject_entries() function. have then used delete() method delete entries remaining fields. have then used config() method configure text labels displaying result. have also disabled 'Generate Marksheet' button used focus_set() method focus very first field, i.e., name_field. Function exit application will define function exit application. following snippet code illustrating same. File: guiMarksheet.py defining function exit application exit(): using destroy() method close application gui_root.destroy() Explanation: above snippet code, have defined function exit(). have used destroy() method close application within this function. Creating main window application that have successfully defined necessary functions application, time create main window application, where will later different widgets manipulate user data functions. will Tk() class create main window application. will also title, size, position, background color icon. consider following snippet code illustrating same. File: guiMarksheet.py main function __name__ "__main__": main window creating object Tk() class gui_root Tk() setting title application gui_root.title("Marksheet Generator JAVATPOINT") setting size position application gui_root.geometry("800x700+650+200") disabling resizable option gui_root.resizable(0, configuring background color application #FCEEF6 gui_root.config(bg "#FCEEF6") setting icon application gui_root.iconbitmap("marksheet_img.ico") Explanation: above snippet code, have created object Tk() class gui_root. then used title() method title application. then used geometry() method size position application screen. have then disabled resizable option better setting parameters resizable() method zeros. have configured application's background color #FCEEF6 setting value parameter config() method. then used iconbitmap() method icon application importing image file from directory. Adding widgets main window setting event triggers Since main window application created successfully, will necessary widgets window event triggers. These widgets include frames structure other widgets, labels display important information, entry fields insert data, buttons manipulate entered data call functions. understand addition these widgets detail. Adding Frames will start adding frames main window. These frames will help structure other widgets. These frames created using Frame() widget tkinter module. consider following snippet code demonstrating same. File: guiMarksheet.py defining frames provide structure other widgets header_frame Frame(gui_root, "#B05D8D") heading_frame Frame(header_frame, "#B05D8D") subheading_frame Frame(header_frame, "#5C153E") info_frame Frame(gui_root, "#FCEEF6") subject_frame Frame(gui_root, "#FCEEF6") result_frame Frame(gui_root, "#FCEEF6") buttons_frame Frame(gui_root, "#FCEEF6") using pack() method positions these frames header_frame.pack(fill "both") heading_frame.pack() subheading_frame.pack(fill "both") info_frame.pack() subject_frame.pack() result_frame.pack(pady buttons_frame.pack() Explanation: above snippet code, have used Frame() widgets frames window. have also master parameter these widgets gui_root, header_frame, respectively. have configured background color setting value parameter. last, have used pack() method positions these frames. Adding widgets heading_frame Frame will labels displaying heading image this frame. will Label() widget labels. will also ImageTk Image module library import image from directory make compatible Tkinter application. consider following snippet code illustrating same. File: guiMarksheet.py ---------------------- heading_frame Frame ---------------------- importing image the_image ImageTk.PhotoImage(Image.open("marksheet_img.png").resize((50, 50), Image.ANTIALIAS)) adding some labels display image heading application image_label Label(heading_frame, image the_image, "#B05D8D") header_label Label(heading_frame, text "Marksheet", font ("verdana", "24", "bold"), "#B05D8D", "#FFFFFF") using grid() method positions these labels grid format image_label.grid(row column padx 2.5, pady header_label.grid(row column padx 2.5, pady Explanation: above snippet code, have used PhotoImage() method ImageTk module. Within this method, have used open() method Image module import image file from directory. have also used resize() method resize imported image convert compatible Tkinter application. have then used Label() widget create some labels display imported image heading. have master parameters these labels heading_frame Frame. last, have used grid() method position these labels grid format. Adding widgets subheading_frame Frame will label this frame display sub-heading. will again Label() widget label application. following snippet code illustrates same. File: guiMarksheet.py ---------------------- subheading_frame Frame ---------------------- adding label display sub-heading application subheader_label Label(subheading_frame, text "Create your Marksheet", font ("verdana", "10"),bg "#5C153E", "#FEB9E1") using pack() method position this label subheader_label.pack(pady Explanation: above snippet code, have used Label() widget label display sub-heading. have master parameter this label subheading_frame frame. last, have used pack() method position this label. Adding widgets info_frame Frame will some widgets this frame collect student's information, including student's name, date birth, class, registration number, school name, roll number. order gather this data, will label with help Label() widget display text asking user enter details. Moreover, will entry fields using Entry() widget users enter asked information. understand implementation same following snippet code. File: guiMarksheet.py ---------------------- info_frame Frame ---------------------- defining some labels display text asking user enter details info_label Label(info_frame, text "Student's Information", font ("Times Roman", "12", "bold"), "#FCEEF6", "#5C153E") name_label Label(info_frame, text "Name Student:", font ("Times Roman", "11", "bold"), "#FCEEF6", "#B05D8D") dob_label Label(info_frame, text "Date Birth:", "#FCEEF6", font ("Times Roman", "11", "bold"), "#B05D8D") class_label Label(info_frame, text "Programme/Class:", "#FCEEF6", font ("Times Roman", "11", "bold"), "#B05D8D") regd_num_label Label(info_frame, text "Registration Number:", font ("Times Roman", "11", "bold"), "#FCEEF6", "#B05D8D") school_label Label(info_frame, text "Name Institution:", font ("Times Roman", "11", "bold"), "#FCEEF6", "#B05D8D") roll_num_label Label(info_frame, text "Roll Number:", font ("Times Roman", "11", "bold"), "#FCEEF6", "#B05D8D") using grid() method positions these labels grid format info_label.grid(row column padx pady sticky name_label.grid(row column padx pady sticky dob_label.grid(row column padx pady sticky class_label.grid(row column padx pady sticky regd_num_label.grid(row column padx pady sticky school_label.grid(row column padx pady sticky roll_num_label.grid(row column padx pady sticky defining some entry fields user enter asked details name_field Entry(info_frame, width font ("Times Roman", "11"), "#FFFFFF", "#5C153E", relief GROOVE) dob_field Entry(info_frame, width font ("Times Roman", "11"), "#FFFFFF", "#5C153E", relief GROOVE) class_field Entry(info_frame, width font ("Times Roman", "11"), "#FFFFFF", "#5C153E", relief GROOVE) regd_num_field Entry(info_frame, width font ("Times Roman", "11"), "#FFFFFF", "#5C153E", relief GROOVE) school_field Entry(info_frame, width font ("Times Roman", "11"), "#FFFFFF", "#5C153E", relief GROOVE) roll_num_field Entry(info_frame, width font ("Times Roman", "11"), "#FFFFFF", "#5C153E", relief GROOVE) using grid() method positions these fields grid format name_field.grid(row column padx pady dob_field.grid(row column padx pady class_field.grid(row column padx pady regd_num_field.grid(row column padx pady school_field.grid(row column padx pady roll_num_field.grid(row column padx pady Explanation: above snippet code, have used Label() widget create some labels displaying text such Student's Information, Name Student, Date Birth, Class, Registration Number, Name Institution, Roll Number. have master parameters these labels info_frame Frame. have then used grid() method positions these labels grid format. Similarly, have added entry fields application using Entry() widgets their master parameters info_frame Frame. have then position these frames grid format with help grid() method. Adding widgets subject_frame Frame will some widgets this Frame collect student's academic record, which includes subjects student studied marks each subject. order collect this data, will again label with help Label() widget display text asking user enter details associated with subjects. Moreover, will entry fields using Entry() widget users enter subject's name along with marks obtained each subject 100. understand implementation same following snippet code. File: guiMarksheet.py ---------------------- subject_frame Frame ---------------------- defining some labels display text asking user enter their subject's information subjects_label Label(subject_frame, text "Subjects Information", font ("Times Roman", "12", "bold"), "#FCEEF6", "#5C153E") subject_name_label Label(subject_frame, text "Subject Name", font ("Times Roman", "11", "bold"), "#FCEEF6", "#5C153E") marks_label Label(subject_frame, text "Marks Obtained", font ("Times Roman", "11", "bold"), "#FCEEF6", "#5C153E") marks_extra_label Label(subject_frame, text "(Out 100)", font ("Times Roman", "11", "bold"), "#FCEEF6", "#5C153E") subject_One_label Label(subject_frame, text "Subject font ("Times Roman", "11", "bold"), "#FCEEF6", "#B05D8D") subject_Two_label Label(subject_frame, text "Subject font ("Times Roman", "11", "bold"), "#FCEEF6", "#B05D8D") subject_Three_label Label(subject_frame, text "Subject font ("Times Roman", "11", "bold"), "#FCEEF6", "#B05D8D") subject_Four_label Label(subject_frame, text "Subject font ("Times Roman", "11", "bold"), "#FCEEF6", "#B05D8D") subject_Five_label Label(subject_frame, text "Subject font ("Times Roman", "11", "bold"), "#FCEEF6", "#B05D8D") using grid() method position these labels grid format subjects_label.grid(row column padx pady sticky subject_name_label.grid(row column padx marks_label.grid(row column padx marks_extra_label.grid(row column padx pady 2.5) subject_One_label.grid(row column padx pady sticky subject_Two_label.grid(row column padx pady sticky subject_Three_label.grid(row column padx pady sticky subject_Four_label.grid(row column padx pady sticky subject_Five_label.grid(row column padx pady sticky defining some entry fields users enter asked details subject_One_field Entry(subject_frame, width font ("Times Roman", "11"), justify CENTER, "#FFFFFF", "#5C153E", relief GROOVE) marks_One_field Entry(subject_frame, width font ("Times Roman", "11"), justify CENTER, "#FFFFFF", "#5C153E", relief GROOVE) subject_Two_field Entry(subject_frame, width font ("Times Roman", "11"), justify CENTER, "#FFFFFF", "#5C153E", relief GROOVE) marks_Two_field Entry(subject_frame, width font ("Times Roman", "11"), justify CENTER, "#FFFFFF", "#5C153E", relief GROOVE) subject_Three_field Entry(subject_frame, width font ("Times Roman", "11"), justify CENTER, "#FFFFFF", "#5C153E", relief GROOVE) marks_Three_field Entry(subject_frame, width font ("Times Roman", "11"), justify CENTER, "#FFFFFF", "#5C153E", relief GROOVE) subject_Four_field Entry(subject_frame, width font ("Times Roman", "11"), justify CENTER, "#FFFFFF", "#5C153E", relief GROOVE) marks_Four_field Entry(subject_frame, width font ("Times Roman", "11"), justify CENTER, "#FFFFFF", "#5C153E", relief GROOVE) subject_Five_field Entry(subject_frame, width font ("Times Roman", "11"), justify CENTER, "#FFFFFF", "#5C153E", relief GROOVE) marks_Five_field Entry(subject_frame, width font ("Times Roman", "11"), justify CENTER, "#FFFFFF", "#5C153E", relief GROOVE) using grid() method positions these fields grid format subject_One_field.grid(row column padx pady marks_One_field.grid(row column padx pady subject_Two_field.grid(row column padx pady marks_Two_field.grid(row column padx pady subject_Three_field.grid(row column padx pady marks_Three_field.grid(row column padx pady subject_Four_field.grid(row column padx pady marks_Four_field.grid(row column padx pady subject_Five_field.grid(row column padx pady marks_Five_field.grid(row column padx pady Explanation: above snippet code, have used Label() widget create some labels displaying text such Subjects Information, Subject Name, Marks obtained (Out 100), Number subjects. have master parameters these labels subject_frame frame. have then used grid() method positions these labels grid format. Similarly, have added entry fields application using Entry() widgets their master parameters subject_frame frame. have then position these frames grid format with help grid() method. Adding widgets result_frame Frame will some labels this frame display calculated total, percentage, grade, result entered marks. will again Label() widget create labels application. consider following snippet code illustrating same. File: guiMarksheet.py ---------------------- result_frame Frame ---------------------- defining some labels display result total_label Label(result_frame, text "Total:", font ("Times Roman", "12", "bold"), "#FCEEF6", "#5C153E") display_total_label Label(result_frame, text "0", font ("Times Roman", "12"), "#FCEEF6", "#5C153E") percentage_label Label(result_frame, text "Percentage (%):", font ("Times Roman", "12", "bold"), "#FCEEF6", "#5C153E") display_percentage_label Label(result_frame, text "0", font ("Times Roman", "12"), "#FCEEF6", "#5C153E") grade_label Label(result_frame, text "Grade:", font ("Times Roman", "12", "bold"), "#FCEEF6", "#5C153E") display_grade_label Label(result_frame, text "XXXX", font ("Times Roman", "12"), "#FCEEF6", "#5C153E") result_label Label(result_frame, text "Result:", font ("Times Roman", "12", "bold"), "#FCEEF6", "#5C153E") display_result_label Label(result_frame, text "XXXX", font ("Times Roman", "14", "bold"), "#FCEEF6", "#5C153E") using grid() method positions these labels grid format total_label.grid(row column padx pady sticky display_total_label.grid(row column padx pady sticky percentage_label.grid(row column padx pady sticky display_percentage_label.grid(row column padx pady sticky grade_label.grid(row column padx pady sticky display_grade_label.grid(row column padx pady sticky result_label.grid(row column padx pady sticky display_result_label.grid(row column padx pady sticky Explanation: above snippet code, have used Label() widget create labels displaying calculated total, percentage, grade, result, along with some associated text. have master parameters these labels result_frame Frame. last, have used grid() method positions these labels grid format. Adding widgets buttons_frame Frame will some buttons this frame manipulate entered data call functions defined earlier. will Button() widget create buttons application. These include buttons calculate result, generate marksheet, reset entries close application. consider following snippet code demonstrating same. File: guiMarksheet.py ---------------------- buttons_frame Frame ---------------------- defining some buttons manipulate functions result_button Button(buttons_frame, text "Display Result", font ("verdana", "10"), width "#64F0AB", "#0C4529", activebackground "#3AC982", activeforeground "#FFFFFF", relief GROOVE, command display_result) generate_button Button(buttons_frame, text "Generate Marksheet", font ("verdana", "10"), width "#6EF5FA", "#144E50", activebackground "#1DCAD1", activeforeground "#FFFFFF", relief GROOVE, state "disabled", command generate_marksheet) reset_button Button(buttons_frame, text "Reset Entries", font ("verdana", "10"), width "#E3FF00", "#454B14", activebackground "#A7B817", activeforeground "#FFFFFF", relief GROOVE, command reset) exit_button Button(buttons_frame, text "Exit", font ("verdana", "10"), width "#FF0007", "#FFFFFF", activebackground "#AE1318", activeforeground "#FFFFFF", relief GROOVE, command exit) using grid() method positions these buttons grid format result_button.grid(row column padx 2.5, pady generate_button.grid(row column padx 2.5, pady reset_button.grid(row column padx 2.5, pady exit_button.grid(row column padx 2.5, pady Explanation: above snippet code, have used Button() widget create buttons manipulate entered data call functions defined earlier. have master parameter these buttons buttons_frame Frame. have also command parameters each button functions they will call. last, have used grid() method positions these buttons grid format. Running application that have added necessary widgets application, time call mainloop() method along with object Tk() class application. consider following snippet code illustrating same. File: guiMarksheet.py using mainloop() method application gui_root.mainloop() Explanation: have called mainloop() method application above code snippet. Hence, project code complete. will save this python program file following command command prompt terminal output. Syntax: python guiMarksheet.py before output, complete project code 'Marksheet using Tkinter' shown below. Complete Project Code following project code 'Marksheet using Tkinter Python'. File: guiMarksheet.py importing required modules from tkinter import importing modules widgets from tkinter from tkinter import messagebox importing messagebox module from tkinter from import ImageTk, Image, ImageDraw, ImageFont importing ImageTk, Image, ImageDraw ImageFont modules from --------------------- functions --------------------- defining function calculate total calculate_total(sub1, sub2, sub3, sub4, sub5): adding arguments total sub1 sub2 sub3 sub4 sub5 returning total return total defining function calculate percentage calculate_percentage(total): dividing total number subjects percentage total returning percentage return percentage defining function calculate grade calculate_grade(percentage): using if-elif-else conditional statement grade student percentage stands Outstanding, 'A+' indicate excellent performance, 'B+' stand good performance, stands satisfactory performance, stands less than satisfactory performance, stands unsatisfactory performance indicating Failure (percentage 95.0): return elif (percentage 90.0 percentage 95.0): return 'A+' elif (percentage 80.0 percentage 90.0): return elif (percentage 70.0 percentage 80.0): return 'B+' elif (percentage 60.0 percentage 70.0): return elif (percentage 50.0 percentage 60.0): return elif (percentage 33.0 percentage 50.0): return else: return defining function calculate result calculate_result(percentage, sub1, sub2, sub3, sub4, sub5): using if-else conditional statement whether student pass fail (percentage 33.0 sub1 33.0 sub2 33.0 sub3 33.0 sub4 33.0 sub5 33.0): return 'PASS' else: return 'FAIL' defining function check errors check_for_errors(): using conditional statement check entries invalid if(marks_One_field.get() marks_Two_field marks_Three_field marks_Four_field marks_Five_field ""): displaying message with error message mb.showerror("Invalid Input", "Marks must float data type.") calling function reset entries reset_subject_entries() returning return defining function display result display_result(): using get() method subject names sub1 subject_One_field.get() sub2 subject_Two_field.get() sub3 subject_Three_field.get() sub4 subject_Four_field.get() sub5 subject_Five_field.get() checking strings empty (sub1 sub2 sub3 sub4 sub5 ""): displaying message with error message mb.showerror("Empty Fields", "Subject fields cannot empty.") calling function reset entries reset_subject_entries() else: calling check_for_errors() function storing value check_for_errors() stored value then return return else: using get() method marks converting them into float marks1 float(marks_One_field.get()) marks2 float(marks_Two_field.get()) marks3 float(marks_Three_field.get()) marks4 float(marks_Four_field.get()) marks5 float(marks_Five_field.get()) using if-else conditional statement check marks entered valid ranging between (marks1 marks1 marks2 marks2 marks3 marks3 marks4 marks4 marks5 marks5 100): calculating result calling functions created earlier storing their values total calculate_total(marks1, marks2, marks3, marks4, marks5) percentage calculate_percentage(total) grade calculate_grade(percentage) result calculate_result(percentage, marks1, marks2, marks3, marks4, marks5) setting grade 'F', result 'FAIL' result 'FAIL': grade calling function disable entry fields disable_field() configuring labels displaying result setting their text corresponding values display_total_label.config(text total) display_percentage_label.config(text percentage) display_grade_label.config(text grade) display_result_label.config(text result) configuring state 'Generate Marksheet' button normal generate_button.config(state "normal") else: displaying message with error message mb.showerror("Out Range", "Marks must ranging between 100.") calling function reset entries reset_subject_entries() defining function generate marksheet file generate_marksheet(): using get() method entries from entry field student's information student_name str(name_field.get()) student_dob str(dob_field.get()) student_class str(class_field.get()) regd_num str(regd_num_field.get()) school_name str(school_field.get()) roll_num str(roll_num_field.get()) names subjects sub1 str(subject_One_field.get()) sub2 str(subject_Two_field.get()) sub3 str(subject_Three_field.get()) sub4 str(subject_Four_field.get()) sub5 str(subject_Five_field.get()) marks subjects marks1 str(marks_One_field.get()) marks2 str(marks_Two_field.get()) marks3 str(marks_Three_field.get()) marks4 str(marks_Four_field.get()) marks5 str(marks_Five_field.get()) using cget() method retrieve text from result labels total str(display_total_label.cget("text")) percentage str(display_percentage_label.cget("text")) grade str(display_grade_label.cget("text")) result str(display_result_label.cget("text")) importing image report card using open() method Image module report_card_img Image.open("reportCard.png") using Draw() class ImageDraw module make drawing interface draw_obj ImageDraw.Draw(report_card_img) defining coordinates point1 380, point2 480, point3 480, point4 480, point5 480, point6 480, point7 420, point8 1100, point9 420, 966.6 point10 1100, 966.6 point11 420, 1032.3 point12 1100, 1032.3 point13 420, 1100 point14 1100, 1100 point15 420, 1166.6 point16 1100, 1166.6 point17 700, 1380 point18 700, 1450 point19 700, 1520 point20 700, 1680 specifying fonts text fontOne ImageFont.truetype("verdana.ttf", fontTwo ImageFont.truetype("verdana.ttf", fontThree ImageFont.truetype("verdana.ttf", adding text values image draw_obj.text(point1, school_name, "black", font fontOne) draw_obj.text(point2, regd_num, "black", font fontTwo) draw_obj.text(point3, roll_num, "black", font fontTwo) draw_obj.text(point4, student_name, "black", font fontTwo) draw_obj.text(point5, student_dob, "black", font fontTwo) draw_obj.text(point6, student_class, "black", font fontTwo) draw_obj.text(point7, sub1, "black", font fontTwo) draw_obj.text(point8, marks1, "black", font fontTwo) draw_obj.text(point9, sub2, "black", font fontTwo) draw_obj.text(point10, marks2, "black", font fontTwo) draw_obj.text(point11, sub3, "black", font fontTwo) draw_obj.text(point12, marks3, "black", font fontTwo) draw_obj.text(point13, sub4, "black", font fontTwo) draw_obj.text(point14, marks4, "black", font fontTwo) draw_obj.text(point15, sub5, "black", font fontTwo) draw_obj.text(point16, marks5, "black", font fontTwo) draw_obj.text(point17, total, "black", font fontTwo) draw_obj.text(point18, percentage, "black", font fontTwo) draw_obj.text(point19, grade, "black", font fontTwo) draw_obj.text(point20, result, "black", font fontThree) saving image file report_card_img.save(rf'{name_field.get()}.png') displaying image report_card_img.show() defining function disable fields disable_field(): disabling entry fields using config() method setting state parameter 'disabled' name_field.config(state "disabled") dob_field.config(state "disabled") class_field.config(state "disabled") regd_num_field.config(state "disabled") school_field.config(state "disabled") roll_num_field.config(state "disabled") subject_One_field.config(state "disabled") subject_Two_field.config(state "disabled") subject_Three_field.config(state "disabled") subject_Four_field.config(state "disabled") subject_Five_field.config(state "disabled") marks_One_field.config(state "disabled") marks_Two_field.config(state "disabled") marks_Three_field.config(state "disabled") marks_Four_field.config(state "disabled") marks_Five_field.config(state "disabled") result_button.config(state "disabled") defining function enable fields enable_field(): enabling entry fields using config() method setting state parameter 'normal' name_field.config(state "normal") dob_field.config(state "normal") class_field.config(state "normal") regd_num_field.config(state "normal") school_field.config(state "normal") roll_num_field.config(state "normal") subject_One_field.config(state "normal") subject_Two_field.config(state "normal") subject_Three_field.config(state "normal") subject_Four_field.config(state "normal") subject_Five_field.config(state "normal") marks_One_field.config(state "normal") marks_Two_field.config(state "normal") marks_Three_field.config(state "normal") marks_Four_field.config(state "normal") marks_Five_field.config(state "normal") result_button.config(state "normal") defining function reset entries subject's information columns reset_subject_entries(): calling enable_field() function defined earlier enable_field() deleting entries field using delete() method subject_One_field.delete(0, END) subject_Two_field.delete(0, END) subject_Three_field.delete(0, END) subject_Four_field.delete(0, END) subject_Five_field.delete(0, END) marks_One_field.delete(0, END) marks_Two_field.delete(0, END) marks_Three_field.delete(0, END) marks_Four_field.delete(0, END) marks_Five_field.delete(0, END) setting focus first subject field using focus_set() method subject_One_field.focus_set() defining function clear entries reset(): calling reset_subject_entries() method defined earlier reset_subject_entries() deleting entries fields student's information columns name_field.delete(0, END) dob_field.delete(0, END) class_field.delete(0, END) regd_num_field.delete(0, END) school_field.delete(0, END) roll_num_field.delete(0, END) configuring initial text labels display_total_label.config(text "0") display_percentage_label.config(text "0") display_grade_label.config(text "XXXX") display_result_label.config(text "XXXX") disabling 'Generate Marksheet' button generate_button.config(state "disabled") setting focus name field using focus_set() method name_field.focus_set() defining function exit application exit(): using destroy() method close application gui_root.destroy() main function __name__ "__main__": main window creating object Tk() class gui_root Tk() setting title application gui_root.title("Marksheet Generator JAVATPOINT") setting size position application gui_root.geometry("800x700+650+200") disabling resizable option gui_root.resizable(0, configuring background color application #FCEEF6 gui_root.config(bg "#FCEEF6") setting icon application gui_root.iconbitmap("marksheet_img.ico") defining frames provide structure other widgets header_frame Frame(gui_root, "#B05D8D") heading_frame Frame(header_frame, "#B05D8D") subheading_frame Frame(header_frame, "#5C153E") info_frame Frame(gui_root, "#FCEEF6") subject_frame Frame(gui_root, "#FCEEF6") result_frame Frame(gui_root, "#FCEEF6") buttons_frame Frame(gui_root, "#FCEEF6") using pack() method positions these frames header_frame.pack(fill "both") heading_frame.pack() subheading_frame.pack(fill "both") info_frame.pack() subject_frame.pack() result_frame.pack(pady buttons_frame.pack() ---------------------- heading_frame Frame ---------------------- importing image the_image ImageTk.PhotoImage(Image.open("marksheet_img.png").resize((50, 50), Image.ANTIALIAS)) adding some labels display image heading application image_label Label(heading_frame, image the_image, "#B05D8D") header_label Label(heading_frame, text "Marksheet", font ("verdana", "24", "bold"), "#B05D8D", "#FFFFFF") using grid() method positions these labels grid format image_label.grid(row column padx 2.5, pady header_label.grid(row column padx 2.5, pady ---------------------- subheading_frame Frame ---------------------- adding label display sub-heading application subheader_label Label(subheading_frame, text "Create your Marksheet", font ("verdana", "10"),bg "#5C153E", "#FEB9E1") using pack() method position this label subheader_label.pack(pady ---------------------- info_frame Frame ---------------------- defining some labels display text asking user enter details info_label Label(info_frame, text "Student's Information", font ("Times Roman", "12", "bold"), "#FCEEF6", "#5C153E") name_label Label(info_frame, text "Name Student:", font ("Times Roman", "11", "bold"), "#FCEEF6", "#B05D8D") dob_label Label(info_frame, text "Date Birth:", "#FCEEF6", font ("Times Roman", "11", "bold"), "#B05D8D") class_label Label(info_frame, text "Programme/Class:", "#FCEEF6", font ("Times Roman", "11", "bold"), "#B05D8D") regd_num_label Label(info_frame, text "Registration Number:", font ("Times Roman", "11", "bold"), "#FCEEF6", "#B05D8D") school_label Label(info_frame, text "Name Institution:", font ("Times Roman", "11", "bold"), "#FCEEF6", "#B05D8D") roll_num_label Label(info_frame, text "Roll Number:", font ("Times Roman", "11", "bold"), "#FCEEF6", "#B05D8D") using grid() method positions these labels grid format info_label.grid(row column padx pady sticky name_label.grid(row column padx pady sticky dob_label.grid(row column padx pady sticky class_label.grid(row column padx pady sticky regd_num_label.grid(row column padx pady sticky school_label.grid(row column padx pady sticky roll_num_label.grid(row column padx pady sticky defining some entry fields user enter asked details name_field Entry(info_frame, width font ("Times Roman", "11"), "#FFFFFF", "#5C153E", relief GROOVE) dob_field Entry(info_frame, width font ("Times Roman", "11"), "#FFFFFF", "#5C153E", relief GROOVE) class_field Entry(info_frame, width font ("Times Roman", "11"), "#FFFFFF", "#5C153E", relief GROOVE) regd_num_field Entry(info_frame, width font ("Times Roman", "11"), "#FFFFFF", "#5C153E", relief GROOVE) school_field Entry(info_frame, width font ("Times Roman", "11"), "#FFFFFF", "#5C153E", relief GROOVE) roll_num_field Entry(info_frame, width font ("Times Roman", "11"), "#FFFFFF", "#5C153E", relief GROOVE) using grid() method positions these fields grid format name_field.grid(row column padx pady dob_field.grid(row column padx pady class_field.grid(row column padx pady regd_num_field.grid(row column padx pady school_field.grid(row column padx pady roll_num_field.grid(row column padx pady ---------------------- subject_frame Frame ---------------------- defining some labels display text asking user enter their subject's information subjects_label Label(subject_frame, text "Subjects Information", font ("Times Roman", "12", "bold"), "#FCEEF6", "#5C153E") subject_name_label Label(subject_frame, text "Subject Name", font ("Times Roman", "11", "bold"), "#FCEEF6", "#5C153E") marks_label Label(subject_frame, text "Marks Obtained", font ("Times Roman", "11", "bold"), "#FCEEF6", "#5C153E") marks_extra_label Label(subject_frame, text "(Out 100)", font ("Times Roman", "11", "bold"), "#FCEEF6", "#5C153E") subject_One_label Label(subject_frame, text "Subject font ("Times Roman", "11", "bold"), "#FCEEF6", "#B05D8D") subject_Two_label Label(subject_frame, text "Subject font ("Times Roman", "11", "bold"), "#FCEEF6", "#B05D8D") subject_Three_label Label(subject_frame, text "Subject font ("Times Roman", "11", "bold"), "#FCEEF6", "#B05D8D") subject_Four_label Label(subject_frame, text "Subject font ("Times Roman", "11", "bold"), "#FCEEF6", "#B05D8D") subject_Five_label Label(subject_frame, text "Subject font ("Times Roman", "11", "bold"), "#FCEEF6", "#B05D8D") using grid() method position these labels grid format subjects_label.grid(row column padx pady sticky subject_name_label.grid(row column padx marks_label.grid(row column padx marks_extra_label.grid(row column padx pady 2.5) subject_One_label.grid(row column padx pady sticky subject_Two_label.grid(row column padx pady sticky subject_Three_label.grid(row column padx pady sticky subject_Four_label.grid(row column padx pady sticky subject_Five_label.grid(row column padx pady sticky defining some entry fields users enter asked details subject_One_field Entry(subject_frame, width font ("Times Roman", "11"), justify CENTER, "#FFFFFF", "#5C153E", relief GROOVE) marks_One_field Entry(subject_frame, width font ("Times Roman", "11"), justify CENTER, "#FFFFFF", "#5C153E", relief GROOVE) subject_Two_field Entry(subject_frame, width font ("Times Roman", "11"), justify CENTER, "#FFFFFF", "#5C153E", relief GROOVE) marks_Two_field Entry(subject_frame, width font ("Times Roman", "11"), justify CENTER, "#FFFFFF", "#5C153E", relief GROOVE) subject_Three_field Entry(subject_frame, width font ("Times Roman", "11"), justify CENTER, "#FFFFFF", "#5C153E", relief GROOVE) marks_Three_field Entry(subject_frame, width font ("Times Roman", "11"), justify CENTER, "#FFFFFF", "#5C153E", relief GROOVE) subject_Four_field Entry(subject_frame, width font ("Times Roman", "11"), justify CENTER, "#FFFFFF", "#5C153E", relief GROOVE) marks_Four_field Entry(subject_frame, width font ("Times Roman", "11"), justify CENTER, "#FFFFFF", "#5C153E", relief GROOVE) subject_Five_field Entry(subject_frame, width font ("Times Roman", "11"), justify CENTER, "#FFFFFF", "#5C153E", relief GROOVE) marks_Five_field Entry(subject_frame, width font ("Times Roman", "11"), justify CENTER, "#FFFFFF", "#5C153E", relief GROOVE) using grid() method positions these fields grid format subject_One_field.grid(row column padx pady marks_One_field.grid(row column padx pady subject_Two_field.grid(row column padx pady marks_Two_field.grid(row column padx pady subject_Three_field.grid(row column padx pady marks_Three_field.grid(row column padx pady subject_Four_field.grid(row column padx pady marks_Four_field.grid(row column padx pady subject_Five_field.grid(row column padx pady marks_Five_field.grid(row column padx pady ---------------------- result_frame Frame ---------------------- defining some labels display result total_label Label(result_frame, text "Total:", font ("Times Roman", "12", "bold"), "#FCEEF6", "#5C153E") display_total_label Label(result_frame, text "0", font ("Times Roman", "12"), "#FCEEF6", "#5C153E") percentage_label Label(result_frame, text "Percentage (%):", font ("Times Roman", "12", "bold"), "#FCEEF6", "#5C153E") display_percentage_label Label(result_frame, text "0", font ("Times Roman", "12"), "#FCEEF6", "#5C153E") grade_label Label(result_frame, text "Grade:", font ("Times Roman", "12", "bold"), "#FCEEF6", "#5C153E") display_grade_label Label(result_frame, text "XXXX", font ("Times Roman", "12"), "#FCEEF6", "#5C153E") result_label Label(result_frame, text "Result:", font ("Times Roman", "12", "bold"), "#FCEEF6", "#5C153E") display_result_label Label(result_frame, text "XXXX", font ("Times Roman", "14", "bold"), "#FCEEF6", "#5C153E") using grid() method positions these labels grid format total_label.grid(row column padx pady sticky display_total_label.grid(row column padx pady sticky percentage_label.grid(row column padx pady sticky display_percentage_label.grid(row column padx pady sticky grade_label.grid(row column padx pady sticky display_grade_label.grid(row column padx pady sticky result_label.grid(row column padx pady sticky display_result_label.grid(row column padx pady sticky ---------------------- buttons_frame Frame ---------------------- defining some buttons manipulate functions result_button Button(buttons_frame, text "Display Result", font ("verdana", "10"), width "#64F0AB", "#0C4529", activebackground "#3AC982", activeforeground "#FFFFFF", relief GROOVE, command display_result) generate_button Button(buttons_frame, text "Generate Marksheet", font ("verdana", "10"), width "#6EF5FA", "#144E50", activebackground "#1DCAD1", activeforeground "#FFFFFF", relief GROOVE, state "disabled", command generate_marksheet) reset_button Button(buttons_frame, text "Reset Entries", font ("verdana", "10"), width "#E3FF00", "#454B14", activebackground "#A7B817", activeforeground "#FFFFFF", relief GROOVE, command reset) exit_button Button(buttons_frame, text "Exit", font ("verdana", "10"), width "#FF0007", "#FFFFFF", activebackground "#AE1318", activeforeground "#FFFFFF", relief GROOVE, command exit) using grid() method positions these buttons grid format result_button.grid(row column padx 2.5, pady generate_button.grid(row column padx 2.5, pady reset_button.grid(row column padx 2.5, pady exit_button.grid(row column padx 2.5, pady using mainloop() method application gui_root.mainloop() Output: Image Marksheet Generator Application Image File: John Miller.png Report Card Next TopicA Colour game using Tkinter Python prev next