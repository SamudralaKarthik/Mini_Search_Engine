next prev Python Dictionary Python Dictionary used store data key-value pair format. dictionary data type Python, which simulate real-life data arrangement where some specific value exists some particular key. mutable data-structure. dictionary defined into element Keys values. Keys must single element Value type such list, tuple, integer, etc. other words, that dictionary collection key-value pairs where value Python object. contrast, keys immutable Python object, i.e., Numbers, string, tuple. Creating dictionary dictionary created using multiple key-value pairs enclosed with curly brackets each separated from value colon (:).The syntax define dictionary given below. Syntax: Dict {"Name": "Tom", "Age": above dictionary Dict, keys Name string that immutable object. Let's example create dictionary print content. Employee {"Name": "John", "Age": "salary":25000,"Company":"GOOGLE"} print(type(Employee)) print("printing Employee data .... print(Employee) Output <class 'dict'> Printing Employee data .... {'Name': 'John', 'Age': 'salary': 25000, 'Company': 'GOOGLE'} Python provides built-in function dict() method which also used create dictionary. empty curly braces used create empty dictionary. Creating empty Dictionary Dict print("Empty Dictionary: print(Dict) Creating Dictionary with dict() method Dict dict({1: 'Java', 'T', 3:'Point'}) print("\nCreate Dictionary using dict(): print(Dict) Creating Dictionary with each item Pair Dict dict([(1, 'Devansh'), 'Sharma')]) print("\nDictionary with each item pair: print(Dict) Output: Empty Dictionary: Create Dictionary using dict(): 'Java', 'T', 'Point'} Dictionary with each item pair: 'Devansh', 'Sharma'} Accessing dictionary values have discussed data accessed list tuple using indexing. However, values accessed dictionary using keys keys unique dictionary. dictionary values accessed following way. Employee {"Name": "John", "Age": "salary":25000,"Company":"GOOGLE"} print(type(Employee)) print("printing Employee data .... print("Name %Employee["Name"]) print("Age %Employee["Age"]) print("Salary %Employee["salary"]) print("Company %Employee["Company"]) Output: <class 'dict'> printing Employee data .... Name John Salary 25000 Company GOOGLE Python provides with alternative get() method access dictionary values. would give same result given indexing. Adding dictionary values dictionary mutable data type, values updated using specific keys. value updated along with Dict[key] value. update() method also used update existing value. Note: key-value already present dictionary, value gets updated. Otherwise, keys added dictionary. Let's example update dictionary values. Example Creating empty Dictionary Dict print("Empty Dictionary: print(Dict) Adding elements dictionary time Dict[0] 'Peter' Dict[2] 'Joseph' Dict[3] 'Ricky' print("\nDictionary after adding elements: print(Dict) Adding values with single Emp_ages doesn't exist dictionary Dict['Emp_ages'] print("\nDictionary after adding elements: print(Dict) Updating existing Key's Value Dict[3] 'JavaTpoint' print("\nUpdated value: print(Dict) Output: Empty Dictionary: Dictionary after adding elements: 'Peter', 'Joseph', 'Ricky'} Dictionary after adding elements: 'Peter', 'Joseph', 'Ricky', 'Emp_ages': (20, 24)} Updated value: 'Peter', 'Joseph', 'JavaTpoint', 'Emp_ages': (20, 24)} Example Employee {"Name": "John", "Age": "salary":25000,"Company":"GOOGLE"} print(type(Employee)) print("printing Employee data .... print(Employee) print("Enter details employee...."); Employee["Name"] input("Name: Employee["Age"] int(input("Age: ")); Employee["salary"] int(input("Salary: ")); Employee["Company"] input("Company:"); print("printing data"); print(Employee) Output: Empty Dictionary: Dictionary after adding elements: 'Peter', 'Joseph', 'Ricky'} Dictionary after adding elements: 'Peter', 'Joseph', 'Ricky', 'Emp_ages': (20, 24)} Updated value: 'Peter', 'Joseph', 'JavaTpoint', 'Emp_ages': (20, 24)} Deleting elements using keyword items dictionary deleted using keyword given below. Employee {"Name": "John", "Age": "salary":25000,"Company":"GOOGLE"} print(type(Employee)) print("printing Employee data .... print(Employee) print("Deleting some employee data") Employee["Name"] Employee["Company"] print("printing modified information print(Employee) print("Deleting dictionary: Employee"); Employee print("Lets print again print(Employee) Output: <class 'dict'> printing Employee data .... {'Name': 'John', 'Age': 'salary': 25000, 'Company': 'GOOGLE'} Deleting some employee data printing modified information {'Age': 'salary': 25000} Deleting dictionary: Employee Lets print again NameError: name 'Employee' defined last print statement above code, raised error because tried print Employee dictionary that already deleted. Using pop() method pop() method accepts argument remove associated value. Consider following example. Creating Dictionary Dict 'JavaTpoint', 'Peter', 'Thomas'} Deleting using pop() method pop_ele Dict.pop(3) print(Dict) Output: 'JavaTpoint', 'Peter'} Python also provides built-in methods popitem() clear() method remove elements from dictionary. popitem() removes arbitrary element from dictionary, whereas clear() method removes elements whole dictionary. Iterating Dictionary dictionary iterated using loop given below. Example loop print keys dictionary Employee {"Name": "John", "Age": "salary":25000,"Company":"GOOGLE"} Employee: print(x) Output: Name salary Company Example #for loop print values dictionary Employee {"Name": "John", "Age": "salary":25000,"Company":"GOOGLE"} Employee: print(Employee[x]) Output: John 25000 GOOGLE Example #for loop print values dictionary using values() method. Employee {"Name": "John", "Age": "salary":25000,"Company":"GOOGLE"} Employee.values(): print(x) Output: John 25000 GOOGLE Example #for loop print items dictionary using items() method. Employee {"Name": "John", "Age": "salary":25000,"Company":"GOOGLE"} Employee.items(): print(x) Output: ('Name', 'John') ('Age', ('salary', 25000) ('Company', 'GOOGLE') Properties Dictionary keys dictionary, cannot store multiple values same keys. pass more than value single key, then value which last assigned considered value key. Consider following example. Employee={"Name":"John","Age":29,"Salary":25000,"Company":"GOOGLE","Name":"John"} Employee.items(): print(x,y) Output: Name John Salary 25000 Company GOOGLE python, cannot mutable object. numbers, strings, tuples key, cannot mutable object like list dictionary. Consider following example. Employee {"Name": "John", "Age": "salary":25000,"Company":"GOOGLE",[100,201,301]:"Department ID"} Employee.items(): print(x,y) Output: Traceback (most recent call last): File "dictionary.py", line Employee {"Name": "John", "Age": "salary":25000,"Company":"GOOGLE",[100,201,301]:"Department ID"} TypeError: unhashable type: 'list' Built-in Dictionary functions built-in python dictionary methods along with description given below. Function Description cmp(dict1, dict2) compares items both dictionary returns true first dictionary values greater than second dictionary, otherwise returns false. len(dict) used calculate length dictionary. str(dict) converts dictionary into printable string representation. type(variable) used print type passed variable. Built-in Dictionary methods built-in python dictionary methods along with description given below. Method Description dic.clear() used delete items dictionary. dict.copy() returns shallow copy dictionary. dict.fromkeys(iterable, value None, Create dictionary from iterable with values equal value. dict.get(key, default "None") used value specified passed key. dict.has_key(key) returns true dictionary contains specified key. dict.items() returns key-value pairs tuple. dict.keys() returns keys dictionary. dict.setdefault(key,default= "None") used default value specified dictionary dict.update(dict2) updates dictionary adding key-value pair dict2 this dictionary. dict.values() returns values dictionary. len() popItem() pop() count() index() Next TopicPython Functions prev next