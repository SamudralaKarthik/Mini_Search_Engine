next prev Box-Cox Transformation Python environment, data distributed randomly, where some data refers peak value curve dataset, whereas some data points refer tail part curve. dataset, calculate distribution using variance mean, data distributed mean value. Generally, divide distribution data into ways: Normal distribution Non-normal Power-law distribution Normal distribution this type distribution, distribution data along mean value very consistent. Here, peak value curve throughout mean value, data distributed symmetrically along mean value. easily implement analysis techniques normally distributed data. Power-law distribution this type distribution, will having peak curve some small datasets, then will having long tail curve large number datasets. environment, nature data always normally distributed. with help box-cox transformation, transform power-law distributed data into normally distributed data using some mathematical formula. mathematical analysis transformation that will find value such that non-normally distributed transforms close possible normally-distributed dataset. implement box-cox transformation, will scipy library, function will scipy.stats.boxcox() function. Syntax: scipy.stats.boxcox(inputArray,lambda,alpha,optimizer) InputArray This dataset which want transform into normal-distributed dataset. Lamda lambda none, will find value lambda that maximizes value function, none then value lambda, perform transformation. Alpha This optional parameter which takes float value between 1.0. lambda none, then taken under consideration, lambda none, ignored. Optimizer optional callable parameter which called when needed. When value lambda none, then this optimizer used find value lambda that minimizes function. Example: this example, will take dataset non-normal distribution, then will transform into normally-distributed dataset. #python code transform non-normal data into normal-distributed data importing required modules import numpy from scipy import stats importing plotting modules import seaborn import matplotlib.pyplot generating random non-normal data (exponential) originalData np.random.exponential(size 1200) transforming data into normal data getting lambda value fittedData, lambdaValue stats.boxcox(originalData) creating axes draw plots datasets fig, plt.subplots(1, #plotting non-normal original data using histplot() function sns.histplot(originalData, True,stat="density",linewidth=2,label "Non-Normal distribution", color ="red", ax[0]) #plotting normal original data using histplot() function sns.histplot(fittedData, True,stat="density",linewidth=2,label "Normal distribution", color ="blue", ax[1]) adding legends subplots plt.legend(loc "upper right") rescaling subplots fig.set_figheight(5) fig.set_figwidth(10) print(f"Lambda value used Transformation: {lambdaValue}") #displaying plots plt.show() Output: Explanation: above code, first, have imported required modules file like numpy,scipy, matplotlib seaborn plot curve. with help random function numpy, created random dataset 1200 data points. boxcox() function, which takes dataset argument returns transformed dataset lambda value. using histplot() function, plotted curve original dataset transformed dataset. histplot() function takes dataset argument, many more attributes like color, linewidth etc., which define specification curve. with show() function, have displayed curve before transformation after boxcox transformation. above random dataset, lambda value 0.2872, which nearly equal 0.28. dataset, values will according this formula: Value (Old Value0.2872 -1)/0.2872 Next TopicAssertionError Python prev next