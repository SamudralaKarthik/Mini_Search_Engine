next prev Python Audio Modules Python programming language leading nowadays because user friendly features. Python also many interesting modules libraries which users using them. most interesting features Python language Audio modules. this article, will discuss various types audio modules their unique features advantages. This article will cover different types audio modules libraries python: PyAudio Dejavu Mingus hYPerSonic pydub simpleaudio winsound python sounddevice playsound Let's understand above audio modules one. Module Python written programming language creation digital signal processing script. This module Python contains classes processing wide variety audio signal types. this, users able import signal processing chains directly Python scripts projects manipulate audio signals real time using interpreter. tool modules Python have primitives such mathematical operations, basic signal processing like delays, synthesis generators, filters, much more. also complexes algorithms develop sound granulation many other artistic audio operations. example: play sound file: from pyo import sound Server .boot sound.start sound_file SFPlayer path /users /sound.aif speed loop True ).out Granulating audio buffer: sound Server .boot sound_nd SndTable path /users /sound.aif HannTable ps Phasor freq sound_nd.getRate )*.25, sound_nd.getSize Noise .001, granulate Granulator sound_nd, ev, 1.001 ps, dr, ).out generate melodies: sound Server .boot sound.start wv SquareTable CosTable 8391 Metro 0.135 ).play TrigEnv table TrigXnoiseMidi dist loopseg scale mrange Osc table wav freq ).out pyAudio Pyaudio Python library which open source cross platform audio input output. wide range functionalities, which audio related mainly focusing segmentation, features extraction, classification visualization issues. using pyaudio library, users classify unknown sounds, perform supervised unsupervised segmentation, extract audio features representations, detect audio events filter silence periods from long recordings, apply dimensionality reduction visualize audio data content similarities much more. This library provides bindings PortAudio. users this library playing recording audio different platforms, like Windows, Linux. playing audio using pyaudio library, user write .stream. example: import pyaudio import wave filename example.wav chunk size 1024 samples data frame chunksize 1024 open sound file, name wavefile wavefile wave.open filename, Create interface PortAudio portaudio pyaudio.PyAudio Open .Stream object write file play audio using pyaudio this code, 'output True' means that audio will played rather than recorded streamobject portaudio.open(format portaudio.get_format_from_width wavefile.getsampwidth channels wavefile.getnchannels rate wavefile.getframerate output True Read data chunksize Data_audio wavefile.readframes chunksize Play audio writing audio data streamobject while data streamobject.write data_audio data_audio wavefile.readframes chunksize Close terminate streamobject streamobject.close portaudio.terminate Here, users notice that playing audio using pyaudio library complex, comparing other audio playing libraries. That's this library might first choice users playing audio their projects applications. Although, pyaudio library provides more level control, which makes possible users parameters their input output devices. This library also lets users check load their input output activity. Pyaudio library also allows users play record audio callback mode. Where stated callback function called when data needed playback available recording. These features pyaudio library, which makes different from other audio libraries modules. This library specifically used user wants play audio beyond simple playback. Dejavu Dejavu audio fingerprinting module Python. open source module. This module remember recorded audio listening once, this module stores audio database. After this, when song played, microphone input disk file, Dejavu tries match audio with fingerprints stored database return song recording which played earlier. Dejavu module surpasses recognition particular signals with realistic amount noise. There forms which user Dejavu recognize audio: User recognize audio reading processing audio files disk. User Computer's microphone. example: #User should create MySQL database where Dejavu store fingerprints audio. #on user local setup: mysql root -p Enter password: ************* mysql> HERE, USER SHOULD CREATE DATABASE dejavu; users start fingerprinting their audio collection! from dejavu import Dejavu config database host 125.0.1.1 user root password password imported Local setup database name database user created local setup dejv Dejavu config Mingus Mingus package Python. used many programmers, musicians' researchers composers making examining music songs. This package cross platform very advanced music theory representing package python along with Musical Instrument Digital Interface files playback support. Mingus package used play with music theory, education tools, build editors songs, many other applications software's which users want import function processing playing music. This package music theory, includes topics like scales, progressions, chords intervals. This package tests these components used generating recognizing musical essentials with help convenient shorthand. example: import mingus.core.notes notes_m valid notes notes_m.is_valid_note("C") notes_m.is_valid_note("D#") notes_m.is_valid_note("Eb") notes_m.is_valid_note("Fbb") notes_m.is_valid_note("G##") Output: True True True True True invalid notes: notes_m.is_valid_note("c") notes_m.is_valid_note("D notes_m.is_valid_note("E-b") Output: False False False hYPerSonic hYPerSonic framework Python language. This used developing operating sound processing pipelines, which intended real time control. This framework level which every byte count, this also includes objects soundcard, filters memory operations, file oscillators. This framework operated Linux OSX operating systems. Pydub Pydub Python library used manipulating audios adding effects This library very simple easy high level interface which based FFmpeg inclined jquery. This library used adding id3 tags audio, slicing concatenating audio tracks. Pydub library supports 2.6, 2.7, versions Python. However, users open save file using pydub library without dependencies. users required install audio playback package they want play audio. following code used play file with pydub: example: from pydub import AudioSegment from pydub.playback import play sound_audio AudioSegment.from_wav example.wav play sound_audio user wants play other audio files formats like files, they should install libav FFmpeg. After installing FFmpeg, user needs make small change code play file. example: from pydub import AudioSegment from pydub.playback import play sound_audio AudioSegment.from_mp3 'example.mp3 play sound_audio using AudioSegment.from_file (file_name, file_type statement, users play format supported ffmpeg audio file. example: Users play WMA file: sound AudioSegment.from_file 'example.wma wma Pydub library also allows users save audio different file formats. Users also calculate length audio files. User cross fades audio using this library. Simpleaudio Simpleaudio Python library which cross platform. This library also used playing back files without dependencies. simpleaudio library waits file finish playing audio format before termination script. example: import simpleaudio simple_audio filename example.wav wave_object simple_audio.WaveObject.from_wave_file filename play_object wave_object.play play_object.wait_done Wait until audio finished playing format file, categorization bits stored which represents audio data, headers along with metadata Resource Interchange File format also stored. definitive record industry store every audio sample, which particular data point related pressure, 44200 samples second, value, recordings. reducing size file, sufficient storing recordings like Human speech, lower sampling rate, like 8000 samples second. However, higher sound frequencies cannot represented much accurately. Some libraries modules discussed this article play records bytes objects, some them NumPy arrays record audio data. Both resemble categorization data points that played back definite sample rate play audio. NumPy array, every element contain value equivalent individual sample, bytes object, each sample stored values. important difference between these data types that NumPy arrays mutable, bytes objects immutable, which makes latter more suitable generating audios processing more complex signals. Users play NumPy arrays bytes object simpleaudio library using simpleaudio.play_buffer statement. But, before this, users should make sure that they have already installed NumPy simpleaudio libraries. example: generate Numpy array corresponding tone. import numpy numpy import simpleaudio simple_audio frequency user's played note will fsample 44200 44200 samples second will played second Note duration seconds Generate array with second*sample_rate steps, ranging between seconds numpy.linspace second second fsample, False generate sine wave note numpy.sin frequency numpy.pi user should Ensure that highest value 16-bit range audio note (2**15 numpy.max numpy.abs note now, Convert 16-bit data audio.astype numpy.int16 Start playback play_object simple_audio.play_buffer fsample user Waits playback finish before exiting play_object.wait_done winsound winsound module Python which used accessing basic sound playing machinery Windows operating system. winsound module, file played just lines code. example: import winsound filename example.wav winsound.PlaySound filename, winsound.SND_FILENAME winsound module does support file format except files. allows users beep their speakers using winsound.Beep frequency, duration statement. example: User beep 1010 tone milliseconds: import winsound winsound.Beep 1010, Beep 1010 milliseconds python-sounddevice python sounddevice python module cross platform audio play back. This module provides bindings PortAudio library some suitable functions play record NumPy arrays, which contain audio signals. user wants play file, they should install NumPy soundfile open audio file format files NumPy arrays. example: import sounddevice sound_device import soundfile sound_file filename example.wav now, Extract data sampling rate from file data_set, fsample sound_file.read filename dtype float32 sound_device.play data_set, fsample Wait until file done playing status sound_device.wait statement sound_file.read used extracting audio data also sampling rate file, which stored Resource Interchange File format header. sound_device.wait statement used make sure that script only terminated after audio finishes playing. playsound playsound Python module which users play sound single line code. cross platform module which single function without dependencies playing sounds audios. example: from playsound import playsound playsound example.wav playsound module used files formatted file file, also work with other file formats. Conclusion: this article, have discussed various types Python Library modules which used playing recording different types audio files sounds. Here, have explained different features importance each library modules playing sounds project developing modifying applications software. Next TopicWikipedia Module Python prev next