next prev Python Cachetools Module Most would have heard word 'Cache', heard this word know about cache terms Computer technology software hardware component that stores data activities performed computer user). very helpful when future requests made same data because then same data will served faster. data stored cache component system might because computation performed earlier, copy same data stored somewhere else. that's cache important faster computing better results less time. Cache occupies very little compared actual size data, therefore becomes more useful users. Python provides with various modules which deal with cache memory present system. Python also provides modules where cache memory faster computing save time. such Python modules Cachetools Module Python, going learn about this module this tutorial. will learn brief detail about Cachetools Module functions Python these functions helpful performing various tasks with help cache present system. Cachetools Module Python Cachetools Module: Introduction Cachetools Python module that provides with various decorators (that functions available this module) memorizing collections. Cachetools help deal with cache present system effectively, this cache with Cachetools module faster processing Python programs. Cachetools Module also includes some variants Functools Module's (another Python module) @lru_cache decorator function. Cachetools Module: Installation Cachetools Module in-built module Python, therefore want this module functions system, have install this module first. Here, this section, will install Cachetools Module through command prompt terminal with installer. First, have open command prompt terminal, then have write following command inside terminal: install cachetools When press enter key, installer will start installing Cachetools Module system through terminal. see, Cachetools Module successfully installed into system, call this module Python program deal with cache present system through Python. Cachetools Module: Functions Here, will only talk about functions present Cachetools Module Python. should note here that these functions decorator function types Python, when these functions, they will used decorator functions program. Following five functions present inside Cachetools Module Python: cached TTLCache RRCache LRUCache LFUCache Now, will study functions mentioned above detail understand their working using each them Python program. Cached Function cached function Cachetools Module used decorator function Python, default perform simple cache program. When call function using cached decorator, will cache function called using later cache Syntax: Following syntax using cached decorator function inside Python program: @cached(cache any_funct(): pass Code function Parameters: cached decorator, default function with any_funct() name even give parameters inside function). Instead pass statement, while using cached decorator inside Python program, will write logical code inside default function. Now, let's this cached decorator inside Python program understand better working saves time. Example Look following program understanding implementation cached decorator: Import cached from Cachetools Module from cachetools import cached Import time module program import time Calling function without using cache fiban(n): return else fiban(n-1) fiban(n-2) Calculating total time performing operation totalTime1 time.time() Printing function result print("Result operation: fiban(31)) Total time taken print("Time Taken function without cache: time.time() totalTime1) Calling function using cache @cached(cache fiban(n): return else fiban(n-1) fiban(n-2) Result operation performed function totalTime2 time.time() print("Result operation: fiban(31)) total time taken Operation print("Time Taken function with cached: time.time() totalTime2) Output: Result operation: 1346269 Time Taken function without cache: 0.8905675411224365 Result operation: 1346269 Time Taken function with cached: 0.015604496002197266 Explanation: have first imported cached decorator function from Cachetools Module program. have also imported time module program keep count time check cached makes calling function faster. After that, defined default function used logical code calculate value through operation returned value after operation. When used parameter this fiban() function find actual value, used time() function before finding much time takes perform this operation. Then, printed value operation total time took perform operation. After that, have used cached decorator function defined same default function, i.e., fiban() function, with same logic inside Now, again used time function calculate total time will take call function. Then, after giving parameter inside fiban() function, printed operation total time took perform operation with cached decorator. output that when called function without cached, took much more time than when called function using cached decorator (When both functions same, having exact logic have same parameter when called). That's cached decorator helps saving function cache memory saves time when called again. TTLCache Function TTLCache also known "Time Live" Cache, also decorator function included Cachetools Module package. also works cache present system while calling function inside program. works very differently than previous function Cachetools Module, this syntax both functions. Syntax: Following syntax using TTLCache decorator function inside Python program: Working cache @cached(cache TTLCache(maxsize 600)) Default function anyFunct(): pass logical code function Parameters: Unlike Cached decorator syntax, have give total parameters inside TTLCache decorator function. also that have specified cache type TTLCache before using parameters function. Following parameters that have inside TTLCache decorator: maxsize: maxsize used inside TTLCache function defines maximum size functions that stored inside TTLCache. ttl: value give inside 'ttl' parameter states long cache function will stored system's cache memory. value give inside parameter seconds. Now, let's this TTLCache decorator inside Python program understand working useful Example Look following program understanding implementation TTLCache function: Import cached TTLCACHE from Cachetools Module from cachetools import cached, TTLCache Import time module program import time Using TTLCache decorator @cached(cache TTLCache(maxsize 90)) default function carry operations myFunc(num): Keeping track total time taken timeTaken time.time() time.sleep(num) print("\nTotal time taken executing function: time.time() timeTaken) return (f"I executed with function number: {num}") Calling default function twice print(myFunc(4)) print(myFunc(4)) Using sleep function create break time.sleep(100) Calling function after break print(myFunc(4)) Output: Total time taken executing function: 4.015438556671143 executed with function number: executed with function number: Total time taken executing function: 4.015343904495239 executed with function number: Explanation: have imported both cached TTLCache decorator from Cachetools Module program along with Time module keep count time taken calling function. used TTLCache decorator defining parameters following: defined maximize parameter equals total time which cache stored equal seconds. After that, have defined default function perform operation, then have used time() function calculate time taken call function. After that, called function twice print statement. Then, gave break calling function third time using sleep() function. used 100-second break because, TTLCache function's parameter, gave seconds store cache. output that when second time called function, called from cache memory TTLCache decorator. when gave break, again called from program TTLCache longer storing cache memory function. RRCache RRCache short Random Replacement Cache, name suggests, RRCache types caching technique which function randomly chooses from items present cache memory discards them. RRCache function performs this operation randomly free some space cache memory whenever required. Syntax: Following syntax using RRCache decorator function inside Python program: Working cache @cached(cache RRCache(maxsize 34)) Default function anyFunct(): pass logical code function Parameters: RRCache have necessary parameter, i.e., maxsize, which same maxsize parameter used TTLCache decorator function. Other than this parameter, RRCache also takes optional 'choice parameter', which default "random.choice' program. Now, let's this RRCache decorator inside Python program understand working useful Example Look following program understanding implementation RRCache function: Import cached RRCACHE from Cachetools Module from cachetools import cached, RRCache Import time module program import time Using RRCache decorator @cached(cache TTLCache(maxsize 32)) default function carry operations newFunc(m): Keeping track total time taken timeTaken time.time() time.sleep(m) Delay printing result displays task under process print("\nTotal time taken executing function: time.time() timeTaken) return (f"I executed with function number: {m}") Calling default function print statement print(newFunc(2)) print(newFunc(3)) print(newFunc(1)) print(newFunc(2)) print(newFunc(2)) print(newFunc(4)) print(newFunc(3)) print(newFunc(3)) print(newFunc(2)) Output: Total time taken executing function: 2.01472806930542 executed with function number: Total time taken executing function: 3.01532244682312 executed with function number: Total time taken executing function: 1.015653133392334 executed with function number: executed with function number: executed with function number: Total time taken executing function: 4.003695011138916 executed with function number: executed with function number: executed with function number: executed with function number: Explanation: output, behaviour functionality RRCache decorator dropping cache randomly call function, many times function called from cache memory stored RRCache. LRUCache LRUCache decorator function used inside cached decorator like other functions have learned about. LRUCache stands Least Recently Used Cache, name suggests, this decorator function keeps cache functions used recently program. Syntax: Following syntax using LRUCache decorator function inside Python program: Working cache @cached(cache LRUCache(maxsize Cache stored this Default function anyFunc(): pass some logical code will written here Parameters: LRUCache decorator takes only argument, i.e., maxsize, many recently called functions will stored cache. Now, let's this LRUCache decorator inside Python program understand working useful Example Look following program understanding implementation LRUCache function: Import cached LRUCACHE from Cachetools Module from cachetools import cached, LRUCache Import time module program import time Using LRUCache decorator function @cached(cache LRUCache(maxsize default function carry operations newFunc(m): Keeping track total time taken timeTaken time.time() time.sleep(m) Delay printing result displays task under process print("\nTotal time taken calling default function: time.time() timeTaken) return (f"I executed with function number: {m}") Calling default function print statement print(newFunc(2)) print(newFunc(3)) print(newFunc(1)) print(newFunc(2)) print(newFunc(2)) print(newFunc(4)) print(newFunc(3)) Output: Total time taken calling default function: 2.0151138305664062 executed with function number: Total time taken calling default function: 3.015472888946533 executed with function number: Total time taken calling default function: 1.0000226497650146 executed with function number: executed with function number: executed with function number: Total time taken calling default function: 4.015437841415405 executed with function number: executed with function number: Explanation: have called default function exactly times more than maxsize parameter defined LRUCache function, i.e., times. This because, first, when function called, stored cache memory LRUCache after that, next times function will called from cache present LRUCache decorator. But, time, default function will called from program's memory exceeds maxsize defined LRUCache, i.e., visualize variations result that occurred LRUCache decorator. LFUCache LFUCache more type caching technique which stands Least Frequently Used Cache, also called inside cached decorator. LFUCache caching technique used retrieve frequently (often) item function called program. LFUCache caching technique, items functions called least often program discarded from cache memory, this operation performed free some space cache. Syntax: Following syntax using LFUCache decorator function inside Python program: Working cache @cached(cache LFUCache(maxsize Cache stored this Default function newFunc(): pass some logical code will written here Parameters: LFUCache decorator function takes only argument i.e., maxsize, many least frequently called functions will stored cache. item function argument called maxsize successive number times, then will discarded from cache. Now, let's this LFUCache decorator inside Python program understand working useful Example Look following program understanding implementation LFUCache function: Import cached LFUCACHE from Cachetools Module from cachetools import cached, LFUCache Import time module program import time Using LFUCache decorator function @cached(cache LFUCache(maxsize default function carry operations newFunct(anyNum): Keeping track total time taken totalTime time.time() time.sleep(anyNum) Delay printing result displays task under process print("\nTotal time taken calling default function: time.time() totalTime) return (f"I executed with function number: {anyNum}") Calling default function print statement with number parameters print(newFunct(2)) print(newFunct(3)) print(newFunct(1)) print(newFunct(2)) print(newFunct(2)) print(newFunct(4)) print(newFunct(1)) print(newFunct(3)) print(newFunct(3)) print(newFunct(2)) Output: Total time taken calling default function: 2.01556396484375 executed with function number: Total time taken calling default function: 3.00508451461792 executed with function number: Total time taken calling default function: 1.0156123638153076 executed with function number: executed with function number: executed with function number: Total time taken calling default function: 4.0026326179504395 executed with function number: executed with function number: executed with function number: executed with function number: executed with function number: Explanation: have called default function with argument after that, haven't called successive times, which equal maxsize argument LFUCache function). Therefore, LFUCache will discard default function with argument from cache, will called again from memory program. visualize variations result that occurred LFUCache decorator. Conclusion Here, have completed Cachetools Module tutorial, have learned about five functions present Cachetools Module. have learned functions Cachetools Module works inside Python program them work with cache memory program. Next TopicPython Cmdparser Module prev next