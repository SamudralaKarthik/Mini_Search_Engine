next prev Python List Vs Tuple This tutorial will study major differences between lists tuples handle these data structures. Lists tuples types data structures that hold more than objects items predefined order. contain objects data type list tuple, including null data type defined None Keyword. What List? other programming languages, list objects declared similarly arrays. Lists don't have homogeneous time, they simultaneously store items different data types. This makes lists most useful tool. list kind container data Structure Python that used hold numerous pieces data simultaneously. Lists helpful when need iterate over some elements keep hold items. What Tuple? tuple another data structure store collection items many data types, unlike mutable lists, tuples immutable. tuple, other words, collection items separated commas. Because static structure, tuple more efficient than list. Differences between Lists Tuples most cases, lists tuples equivalent. However, there some important differences explored this article. List Tuple Syntax Differences syntax list differs from that tuple. Items tuple enclosed parentheses curved brackets whereas items list enclosed square brackets Example Code Python code show difference between creating list tuple list_ tuple_ print("List list_) print("Tuple tuple_) Output: List Tuple declared variable named list_, which contains certain number integers ranging from list enclosed square brackets also created variable called tuple_, which holds certain number integers. tuple enclosed curly brackets type() method Python returns data type data structure object passed Example Code Code print data type data structure using type() function print( type(list_) print( type(tuple_) Output: <class 'list'> <class 'tuple'> Mutable List Immutable Tuple important difference between list tuple that lists mutable, whereas tuples immutable. What exactly does this imply? means list's items changed modified, whereas tuple's items cannot changed modified. can't employ list dictionary because mutable. This because Python dictionary immutable object. result, tuples used keys dictionary required. Let's consider example highlighting difference between lists tuples immutability mutability. Example Code Updating element list tuple particular index creating list tuple list_ ["Python", "Lists", "Tuples", "Differences"] tuple_ ("Python", "Lists", "Tuples", "Differences") modifying last string both data structures list_[3] "Mutable" print( list_ try: tuple_[3] "Immutable" print( tuple_ except TypeError: print( "Tuples cannot modified because they immutable" Output: ['Python', 'Lists', 'Tuples', 'Mutable'] Tuples cannot modified because they immutable altered string list_ index above code, which Python interpreter updated index output. Also, tried modify last index tuple block, since raised error, output from except block. This because tuples immutable, Python interpreter raised TypeError modifying tuple. Size Difference Since tuples immutable, Python allocates bigger chunks memory with minimal overhead. Python, contrary, allots smaller memory chunks lists. tuple would therefore have less memory than list. have huge number items, this makes tuples little more memory-efficient than lists. example, consider creating list tuple with identical items comparing their sizes: Example Code Code show difference size list tuple #creating list tuple list_ ["Python", "Lists", "Tuples", "Differences"] tuple_ ("Python", "Lists", "Tuples", "Differences") printing sizes print("Size tuple: tuple_.__sizeof__()) print("Size list: list_.__sizeof__()) Output: Size tuple: Size list: Available Functions Tuples have fewer built-in functions than lists. leverage in-built function dir([object] access corresponding methods list tuple. Example Code printing directory list dir(list_) Output: ['__add__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort'] Example Code Printing directory tuple print( dir(tuple_), Output: ['__add__', '__class__', '__class_getitem__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'count', 'index'] observe, list many more methods than tuple. With intrinsic functions, perform insert operations remove sort items from list provided tuple. Tuples Lists: Similarities They both hold collections items heterogeneous data types, meaning they contain multiple data types simultaneously. They're both ordered, which implies items objects maintained same order they were placed until changed manually. Because they're both sequential data structures, iterate through objects they hold; hence, they iterables. integer index, enclosed square brackets [index], used access objects both data types. Next TopicPython prev next