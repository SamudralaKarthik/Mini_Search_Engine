next prev Currying Python this tutorial, will learn about currying Python, which concept Python. Most developers won't familiar with this topic. will explain concept currying, cases, implement Python. Let's have introduction currying Python. What Currying? mathematical computer science, currying breaking down function that takes multiple arguments into single argument function. Here, let's make clear. term "curry" comes from name mathematician Haskell Curry, spicy Dish. Currying transforming function with multiple arguments into sequence single-argument functions. that converting function f(a, …..) into function like this f(a)(b)(c)…… Currying also used theoretical computer science because often easier transform multiple argument models into single argument models. Composition Functions define composition function g. h(x) g(f(x)) will define same define decorators Python; inner function's output becomes outer function's input. compose(g, f): h(x): return g(f(x)) return will this function upcoming example. let's understand another example. Suppose have thermometer which working accurately. correct temperature calculated using function temp_correction function. convert temperature value from Celsius Fahrenheit. this applying compose both functions. Example celsius2fahrenheit(t): return temp_correction(t): return convert compose(temp_correction, celsius2fahrenheit) print(convert(10), celsius2fahrenheit(10)) Output: 44.5 50.0 composition functions generally commutative, i.e. compose (celsius2fahrenheit, readjust) different from compose(readjust, celsius2fahrenheit) convert2 compose(celsius2fahrenheit, temp_correction) print(convert2(10), celsius2fahrenheit(10)) Output: 47.3 50.0 Convert2 solution problem because does readjusting actual temperatures thermometer transformed Fahrenheit values. Mathematical Representation Currying f(x, (x*x*x) (y*y*y) h(x) (x*x*x) h(y) (y*y*y) h(x)(y) h(x)+h(y) f(x, h(x)(y) Curry h(x)(y) will take chaining composition function below. Example a(x) b(c(d(x))) change(b, a(x): return b(c(d(x))) return Example v(a, w(x(y(z(a, e)))) Currying Python Many Single Argument curry_change(a): w(b): x(c): y(d): z(e): print(a, return return return return curry_change(20)(30)(50)(60) Output: will complex when there huge chaining function. There simplifying huge block manipulation similar sequence blocks. Let's understand following example. Example change(b, 	def a(x): 		return b(c(d(x))) 	return kilometer2meter(dist): 	""" will convert km m. 	return dist 1000 meter2centimeter(dist): 	""" will convert 	return dist centimeter2feet(dist): 	""" will convert ft. 	return dist 30.48 change_val= change(centimeter2feet, meter2centimeter, kilometer2meter change_val(160) print(e) Output: 524934.3832020997 next example, will transform time define chaining functions. Example change(b, 	def a(x): 		return b(c(d(x))) 	return daystohour(time): 	""" converts days hours. 	return time hourstominutes(time): 	""" converts hours minutes. 	return time minutestoseconds(time): 	""" converts minutes seconds. 	return time change_val change(minutestoseconds, hourstominutes, daystohour) change_val(20) print(e) Output: 1728000 Currying Function with Arbitrary Number Arguments Here question arise, curry function across arbitrary unknown numbers parameters? nested function "curry" arguments. need tell function calculate return value. functions that called with arguments will curried. call function without arguments will tell Python function that finally want result. Let's understand following example. Example mean_val(*args): return sum(args) len(args) curry_func(func): keep name curried function: curry_func.__curried_func_name__ func.__name__ f_args, f_kwargs f(*args, **kwargs): nonlocal f_args, f_kwargs args kwargs: f_args args f_kwargs.update(kwargs) return else: result func(*f_args, *f_kwargs) f_args, f_kwargs return result return curried_mean_res curry_func(mean_val) curried_mean_res(2)(5)(9)(4, will keep curry_funcing: curried_mean_res(5, print(curried_mean_res()) calculating arithmetic mean print(curried_mean_res(3)(4)(7)()) calculating arithmetic mean print(curried_mean_res(4)(3, 7)()) Output: 5.571428571428571 4.333333333333333 4.333333333333333 Let's print some important arguments that will help understand better way. Example mean_val(*args): return sum(args) len(args) curry(func): keep name curried function: curry.__curried_func_name__ func.__name__ f_args, f_kwargs f(*args, **kwargs): nonlocal f_args, f_kwargs args kwargs: print("Calling curried function with:") print("args: args, "kwargs: kwargs) f_args args f_kwargs.update(kwargs) print("Currying values:") print("f_args: f_args) print("f_kwargs:", f_kwargs) return else: print("Calling curry.__curried_func_name__ with:") print(f_args, f_kwargs) result func(*f_args, *f_kwargs) f_args, f_kwargs return result return curried_mean_val curry(mean_val) curried_mean_val(2)(5)(9)(4, will keep currying: curried_mean_val(5, print(curried_mean_val()) Output: Calling curried function with: args: (2,) kwargs: Currying values: f_args: f_kwargs: Calling curried function with: args: (5,) kwargs: Currying values: f_args: f_kwargs: Calling curried function with: args: (9,) kwargs: Currying values: f_args: f_kwargs: Calling curried function with: args: kwargs: Currying values: f_args: f_kwargs: Calling curried function with: args: kwargs: Currying values: f_args: f_kwargs: Calling mean_val with: 5.571428571428571 Conclusion Currying helpful many situations, important note limitation. Next TopicHow Find User's Location using Geolocation prev next