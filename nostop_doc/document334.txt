next prev Internet Things with Python Generally, prototypes real-life Internet Things (IoT) systems have designed developed swiftly competently. Whenever this occurs, activities instantly come life: program devices, another organize backend interact with these devices. both activities, utilize Python programming language their development. utilize functional practical edition MicroPython order work devices with small computing resources, accordingly, very price. following tutorial, will understand Python programming Internet Things (IoT) devices create backend them work. before that, briefly discuss importance IoT. Understand importance Internet Things term "Internet Things" first coined year 1999 Kevin Ashton. Ever since importance scale have exploded, chief indicators that market size $151 billion 2018, with steady increment year after year. predictions marketers, market could cross $561 billion mark 2022. Back day, could explain with examples shown below: utilize phone turn light bulb room." Nowadays, hardly anyone would amazed smart electricity meter that transmits readings consumption electricity, uploads that information cloud, produces monthly bills sent directly e-mail. increasingly utilized across industries order streamline processes make them more efficient. instance, manufacturing production lines agriculture great examples various industries taking benefit different features IoT. particular scenario agriculture, helps coordinating harvesters with trucks that have elevators handle grains efficiently. Python Internet Things? many developers, Python considered language preference market. simple learn, clean syntax, large online community supporting Python becomes great choice when comes IoT. either backend side development software development devices. Moreover, Python available work Linux devices, make MicroPython microcontrollers. Python coding language that reduce volume data that need deal with, accessible cloud. Python recognizes needs regardless whether create project from scratch interact with actuators, sensors, accessories. Some many benefits working with Python devices large number libraries types platforms speed offers which develop code. Python great ally developing device prototypes. Even rewrite some scripts while producing Java improve performance, system will generally function perfectly Python. What best solutions Python? Some best solutions Python programming language follows: Python Raspberry Python PyBoard ESP8266, ESP32 with Micropython will discuss each solution brief. Python Raspberry primary objective running Python device that pops mind grabbing Raspberry from table. Python pre-installed operating system, only objective left write coding script. this scenario, control ports expansion Raspberry Fortunately, board supports wireless communication (Bluetooth WiFi) Ethernet. also connect monitor HDMI output, specialized 3.2" 320x240 TFT LCD, energy consumption E-Ink 2.13" 250x122 display Raspberry There controllers available large variety computing power budgets. choose these controllers system ranging from fast Raspberry Model GB smallest Raspberry Zero, supporting Python programming language. case necessity, install earlier version Python past compatibility. consider following snippet Python code where have used GPIO Zero library order control ports. Example: importing required modules from gpiozero import Button from time import sleep creating object Button the_button Button(2) using if-else statement while True: the_button.is_pressed: print("Button Pressed") else: print("Button Released") sleep(1) Explanation: above example demonstrates receiving processing signals pressing button second moment release. benefits utilizing this approach availability large variety development utilities, libraries communications most complex devices based Raspberry involving video processing from cameras. Python PyBoard Another great solution Python devices PyBoard with STM32F405RG microcontroller. PyBoard considered compact well powerful electronics development board. works MicroPython. PyBoard connects through USB, providing with flash drive store Python scripts serial Python prompt REPL) instant programming. This works with Windows, MacOS, Linux. PyBoard executes MicroPython, which lightweight implementation standard CPython interpreter. official documentation also says: "MicroPython lean efficient implementation Python programming language that includes small subset Python standard library optimized microcontrollers constrained environments. MicroPython pyboard compact electronic circuit board that runs MicroPython bare metal, giving low-level Python operating system that used control kinds electronic projects. MicroPython packed full advanced features such interactive prompt, arbitrary precision integers, closures, list comprehension, generators, exception handling more. compact enough within just 256k code space 16k RAM." MicroPython entire rewrite Python (version 3.4) programming language execute microcontroller. involves various optimization efficiency consumes quite less RAM. MicroPython executes bare-metal PyBoard, necessarily providing with Operating System based Python. in-built pyb module consists functions classes order control peripherals available board, like I2C, UART, ADC, DAC, SPI. board's dimensions impressive, taking around quarters, 33mm 43mm weighing only grams. ESP8266, ESP32 with MicoPython Another option could using ESP8266 Python. have create device based Internet Things with power consumption, great capabilities, integration with wireless Wi-Fi networks. More precisely, MicroPython. Once installed Python system, installer command line order install esptool module. syntax same shown below: Syntax: install esptool installation procedure MicroPython pretty easy. download firmware from website install with help esptool, forgetting format board before installing also IDEs used developing with MircoPython. complete procedure development carried working computer, then compiled saved memory ESP8266 ESP32 microcontroller. consider following example simple script might look like: Example: importing required modules from machine import import time creating object ledPin Pin(2, Pin.OUT) using some functions while True: ledPin.on() time.sleep(1) ledPin.off() time.sleep(1) Explanation: above snippet code, have imported module from machine library along with time module. have then created object execute some functions MicroPython imposes many restrictions compared regular Python; however, general, easily write necessary functionality client-side execute effectively microcontrollers. This option relatively more cost-effective than buying PyBoard. Understanding Python Backend Python Backend programming language Internet Things many ways. Some them follows: MQTT protocol with Python most popular connection methods devices MQTT, protocol used effective implementation with Python. MQTT protocol machine-to-machine (M2M)/Internet Things connectivity protocol designed highly lightweight publish/subscribe messaging transport. used connect remote locations where small code footprint needed, network bandwidth premium. Python client library called Eclipse Paho MQTT implements versions 3.1, 3.1.1, MQTT protocol. code Poho library offers client class that allows applications link MQTT broker order publish messages, subscribe topics, receive published messages. also delivers some helper functions make things simpler publishing one-off messages MQTT servers. Moreover, this library supports Python 2.7.9 above above. integration images with older versions Python straightforward. backend Flask Python also Flask microframework write backend systems. Flask microframework quick hassle-free tool that easily server-side information, also packed with many functionalities that make work more efficient. start deciding requests have serve from devices. then have Flask microframework write block code. method will then return information request from side client. several cases, best focusing RESTful protocol while working with devices. This allows simplify exchange between components system helps expand system exchanging information future. consider task that arisen follows: Display information from devices page. Flask microframework will rescue again with core template mechanism where design required page with data display involving graphics. disadvantage utilizing this method potential lack starting data transfer from server device. Thus, must periodically independently pull from server. Rest easy, there keys report this risk. utilize sockets Python library Pushsafer. PushSafer easy safe send receive push notifications real-time Android, iOS, Windows devices (mobile well desktop), including internet browsers such Google Chrome, Mozilla Firefox, Opera, many more. Microsoft Azure backend Python Microsoft released open-source extension extend capabilities Azure 2.0. Azure involves commands interact with Azure Resource Manager endpoints management. instance, utilize Azure build Azure Virtual Machine Hub. extension allows Azure service complement Azure providing users access additional capabilities specified services. Extension offers programmers command-line access capabilities Edge, Device Provisioning Service. Azure allows instant management resources Azure Hub, devices provisioning services instances, associated hubs. extension enriches Azure with features such device management Edge capabilities: Azure capabilities Control Plane Managing instances Hub, consumer groups jobs Managing instances device provisioning service, access-policies, Linked certificates features extensions data plane Managing device edge module identities their respective twin definitions Querying details like device module jobs, twins, messaging routing Invoking methods device module Generating SAS tokens grabbing connection strings Cloud-to-device Device-to-cloud messaging Device file uploading Device simulation testing Next TopicPython pysftp module prev next