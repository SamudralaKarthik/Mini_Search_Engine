next prev Python File Handling Till now, were taking input from console writing back console interact with user. Sometimes, enough only display data console. data displayed very large, only limited amount data displayed console since memory volatile, impossible recover programmatically generated data again again. file handling plays important role when data needs stored permanently into file. file named location disk store related information. access stored information (non-volatile) after program termination. file-handling implementation slightly lengthy complicated other programming language, easier shorter Python. Python, files treated modes text binary. file text binary format, each line file ended with special character. Hence, file operation done following order. Open file Read write Performing operation Close file Opening file Python provides open() function that accepts arguments, file name access mode which file accessed. function returns file object which used perform various operations like reading, writing, etc. Syntax: file object open(<file-name>, <access-mode>, <buffering>) files accessed using various modes like read, write, append. following details about access mode open file. Access mode Description opens file read-only mode. file pointer exists beginning. file default open this mode access mode passed. opens file read-only binary format. file pointer exists beginning file. opens file read write both. file pointer exists beginning file. rb+ opens file read write both binary format. file pointer exists beginning file. opens file write only. overwrites file previously exists creates file exists with same name. file pointer exists beginning file. opens file write only binary format. overwrites file exists previously creates file exists. file pointer exists beginning file. w+ opens file write read both. different from sense that overwrites previous file exists whereas doesn't overwrite previously written file. creates file file exists. file pointer exists beginning file. wb+ opens file write read both binary format. file pointer exists beginning file. opens file append mode. file pointer exists previously written file exists any. creates file file exists with same name. opens file append mode binary format. pointer exists previously written file. creates file binary format file exists with same name. opens file append read both. file pointer remains file file exists. creates file file exists with same name. opens file append read both binary format. file pointer remains file. Let's look simple example open file named "file.txt" (stored same directory) read mode printing content console. Example #opens file file.txt read mode fileptr open("file.txt","r") fileptr: print("file opened successfully") Output: <class '_io.TextIOWrapper'> file opened successfully above code, have passed filename first argument opened file read mode mentioned second argument. fileptr holds file object file opened successfully, will execute print statement close() method Once operations done file, must close through Python script using close() method. unwritten information gets destroyed once close() method called file object. perform operation file externally using file system which currently opened Python; hence good practice close file once operations done. syntax close() method given below. Syntax fileobject.close() Consider following example. opens file file.txt read mode fileptr open("file.txt","r") fileptr: print("file opened successfully") #closes opened file fileptr.close() After closing file, cannot perform operation file. file needs properly closed. exception occurs while performing some operations file then program terminates without closing file. should following method overcome such type problem. try: fileptr open("file.txt") perform file operations finally: fileptr.close() with statement with statement introduced python 2.5. with statement useful case manipulating files. used scenario where pair statements executed with block code between. syntax open file using with statement given below. with open(<file name>, <access mode>) <file-pointer>: #statement suite advantage using with statement that provides guarantee close file regardless nested block exits. always suggestible with statement case files because, break, return, exception occurs nested block code then automatically closes file, don't need write close() function. doesn't file corrupt. Consider following example. Example with open("file.txt",'r') content f.read(); print(content) Writing file write some text file, need open file using open method with following access modes. will overwrite file file exists. file pointer beginning file. will append existing file. file pointer file. creates file file exists. Consider following example. Example open file.txt append mode. Create file such file exists. fileptr open("file2.txt", "w") appending content file fileptr.write('''Python modern language. makes things simple. fastest-growing programing language''') closing opened file fileptr.close() Output: File2.txt Python modern-day language. makes things simple. fastest growing programming language. Snapshot file2.txt have opened file mode. file1.txt file doesn't exist, created file have written content file using write() function. Example #open file.txt write mode. fileptr open("file2.txt","a") #overwriting content file fileptr.write(" Python easy syntax user-friendly interaction.") #closing opened file fileptr.close() Output: Python modern language. makes things simple. fastest growing programing language Python easy syntax user-friendly interaction. Snapshot file2.txt that content file modified. have opened file mode appended content existing file2.txt. read file using Python script, Python provides read() method. read() method reads string from file. read data text well binary format. syntax read() method given below. Syntax: fileobj.read(<count>) Here, count number bytes read from file starting from beginning file. count specified, then read content file until end. Consider following example. Example #open file.txt read mode. causes error such file exists. fileptr open("file2.txt","r") #stores data file into variable content content fileptr.read(10) prints type data stored file print(type(content)) #prints content file print(content) #closes opened file fileptr.close() Output: <class 'str'> Python above code, have read content file2.txt using read() function. have passed count value which means will read first characters from file. following line, then will print content file. content fileptr.read() print(content) Output: Python modern-day language. makes things simple. fastest-growing programing language Python easy syntax user-friendly interaction. Read file through loop read file using loop. Consider following example. #open file.txt read mode. causes error such file exists. fileptr open("file2.txt","r"); #running loop fileptr: print(i) contains each line file Output: Python modern language. makes things simple. Python easy syntax user-friendly interaction. Read Lines file Python facilitates read file line line using function readline() method. readline() method reads lines file from beginning, i.e., readline() method times, then first lines file. Consider following example which contains function readline() that reads first line file "file2.txt" containing three lines. Consider following example. Example Reading lines using readline() function #open file.txt read mode. causes error such file exists. fileptr open("file2.txt","r"); #stores data file into variable content content fileptr.readline() content1 fileptr.readline() #prints content file print(content) print(content1) #closes opened file fileptr.close() Output: Python modern language. makes things simple. called readline() function times that's read lines from file. Python provides also readlines() method which used reading lines. returns list lines till file(EOF) reached. Example Reading Lines Using readlines() function #open file.txt read mode. causes error such file exists. fileptr open("file2.txt","r"); #stores data file into variable content content fileptr.readlines() #prints content file print(content) #closes opened file fileptr.close() Output: ['Python modern language.\n', makes things simple.\n', 'Python easy syntax user-friendly interaction.'] Creating file file created using following access modes with function open(). creates file with specified name. causes error file exists with same name. creates file with specified name such file exists. appends content file file already exists with specified name. creates file with specified name such file exists. overwrites existing file. Consider following example. Example #open file.txt read mode. causes error such file exists. fileptr open("file2.txt","x") print(fileptr) fileptr: print("File created successfully") Output: <_io.TextIOWrapper name='file2.txt' mode='x' encoding='cp1252'> File created successfully File Pointer positions Python provides tell() method which used print byte number which file pointer currently exists. Consider following example. open file file2.txt read mode fileptr open("file2.txt","r") #initially filepointer print("The filepointer byte :",fileptr.tell()) #reading content file content fileptr.read(); #after read operation file pointer modifies. tell() returns location fileptr. print("After reading, filepointer at:",fileptr.tell()) Output: filepointer byte After reading, filepointer Modifying file pointer position real-world applications, sometimes need change file pointer location externally since need read write content various locations. this purpose, Python provides seek() method which enables modify file pointer position externally. syntax seek() method given below. Syntax: <file-ptr>.seek(offset[, from) seek() method accepts parameters: offset: refers position file pointer within file. from: indicates reference position from where bytes moved. beginning file used reference position. current position file pointer used reference position. file pointer used reference position. Consider following example. Example open file file2.txt read mode fileptr open("file2.txt","r") #initially filepointer print("The filepointer byte :",fileptr.tell()) #changing file pointer location fileptr.seek(10); #tell() returns location fileptr. print("After reading, filepointer at:",fileptr.tell()) Output: filepointer byte After reading, filepointer Python module Renaming file Python module enables interaction with operating system. module provides functions that involved file processing operations like renaming, deleting, etc. provides rename() method rename specified file name. syntax rename() method given below. Syntax: rename(current-name, new-name) first argument current file name second argument modified name. change file name bypassing these arguments. Example import #rename file2.txt file3.txt os.rename("file2.txt","file3.txt") Output: above code renamed current file2.txt file3.txt Removing file module provides remove() method which used remove specified file. syntax remove() method given below. remove(file-name) Example import os; #deleting file named file3.txt os.remove("file3.txt") Creating directory mkdir() method used create directories current working directory. syntax create directory given below. Syntax: mkdir(directory name) Example import #creating directory with name os.mkdir("new") getcwd() method This method returns current working directory. syntax getcwd() method given below. Syntax os.getcwd() Example import os.getcwd() Output: 'C:\\Users\\DEVANSH SHARMA' Changing current working directory chdir() method used change current working directory specified directory. syntax chdir() method given below. Syntax chdir("new-directory") Example import Changing current directory with directiory os.chdir("C:\\Users\\DEVANSH SHARMA\\Documents") #It will display current working directory os.getcwd() Output: 'C:\\Users\\DEVANSH SHARMA\\Documents' Deleting directory rmdir() method used delete specified directory. syntax rmdir() method given below. Syntax os.rmdir(directory name) Example import #removing directory os.rmdir("directory_name") will remove specified directory. Writing Python output files Python, there requirements write output Python script file. check_call() method module subprocess used execute Python script write output that script file. following example contains python scripts. script file1.py executes script file.py writes output text file output.txt. Example file.py temperatures=[10,-20,-289,100] c_to_f(c): c< -273.15: return "That temperature doesn't make sense!" else: f=c*9/5+32 return temperatures: print(c_to_f(t)) file.py import subprocess with open("output.txt", "wb") subprocess.check_call(["python", "file.py"], stdout=f) file related methods file object provides following methods manipulate files various operating systems. Method Description file.close() closes opened file. file once closed, can't read write anymore. File.fush() flushes internal buffer. File.fileno() returns file descriptor used underlying implementation request from File.isatty() returns true file connected TTY device, otherwise returns false. File.next() returns next line from file. File.read([size]) reads file specified size. File.readline([size]) reads line from file places file pointer beginning line. File.readlines([sizehint]) returns list containing lines file. reads file until occurs using readline() function. File.seek(offset[,from) modifies position file pointer specified offset with specified reference. File.tell() returns current position file pointer within file. File.truncate([size]) truncates file optional specified size. File.write(str) writes specified string file File.writelines(seq) writes sequence strings file. Next TopicPython Modules prev next