next prev Python Shelve Module have come across many instances daily life where have database management system store required information data. often very simple database management system, sometimes becomes difficult when have store some complex structured data. Database Management Systems various types, most common type usually daily lives Relational Database Management System (RDBMS). RDBMS effective tool management system where store necessary information data manage them very easily. There many instances when don't have Relational Database Management System, possible RDBMS store data. such cases, some questions come mind: there other alternatives this situation, there other methods tools store data, etc. answer these questions Yes! have other tools methods through which store data when don't have RDBMS method. have other tools, many these tools associated with library programming language. means that, programming world, there libraries that provide effective tools when using Relational Database Management System option. This thing also applicable Python, have libraries Python through which store important data creating DBMS-like interface. such libraries modules Python Shelve Module, effective tool storing persistent data storage. will learn about this Shelve Module Python this tutorial, where store data inside using Shelve Module inside Python program. Shelve Module Python Shelve Module Python very popular module Python which works like effective tool persistent data storage inside files using Python program. name this module suggests, i.e., Shelve, easily interpret that will work shelf object keep data inside file save necessary information. Shelve Module, shelf object defined, which acts like dictionary-type object, persistently stored disk file computer. That's save data information through Python Shelve Module system keep till whenever want. Shelve Module: Introduction Shelve Module Python effective tool through which store data information inside file keep computer's storage until change mind remove Shelve Module only helpful storing information inside file, also very effective modifying already present information adding some information same file. perform these operations (creating, reading, writing, deleting from file) from Shelve Module using this module functions inside Python program. Shelve Module creates very similar file DBMS database present systems such UNIX. only string data type keys special dictionary object present file, whereas pickable objects from shelve files serve value keys. Shelve Module: Classes Like other Python module, there some classes present Shelve Module Python, too, going discuss these classes this section. following three classes defined inside Python Shelve Module: Module Class Description Shelf Class shelf class base class from Shelve Module, used shelf implementation shelve file. initialize Shelf class from Shelve Module using dict-like object inside Python program. DBFileNameShelf Class This sub-class base Shelf class, accepts name shelve files parameter constructor rather than dict-like object parameter. BsdDbShelf Class BsdDbShelf Class also sub-class from base shelf class, this class accepts dict-like object parameter which makes this sub-class different from DBFileNameShelf class. dict-like object parameter which pass parameter constructors should support first(), last(), previous(), next() set_location() methods. Now, here have described classes sub-classes present inside Shelve Module, have also learned which object type taken parameter inside these classes. Working with Shelve Module Shelve Module in-built library Python, find this module pre-installed versions Python Therefore, working with Shelve Module, don't have installer command first install Shelve Module. directly 'import shelve' statement Python program import functions Shelve module that program. understand working Shelve Module, will divide implementation part into three parts where first create shelve file store data secondly, open file retrieve values from last, update data inside shelve file. will learn working implementation Shelve Module through following three steps: Creating shelve file store data Retrieving Data from Shelve file Updating data Shelve file will learn about each three parts mentioned above using example program where perform respective tasks using functions Shelve Module. Now, let's learn implementation each part working Shelve Module first creating Sample Shelve file. Creating Shelve File Store Data: want store some data inside shelve file, have first create one, only then desirable data. create shelve file simply using open() function, which works similarly open() function during file handling process. With open() function Shelve Module, have follow given below syntax open create shelve file: shelve open(NameOfFile, flag 'c', protocol None, writeback True) will return shelf object from DbfilenameShelf sub-class, where object will collect data from user stored file. Following description parameters used inside open() function's syntax given above: NameOfFile: name file which want have assigned database (shelve file) creating/opening using open() flag: flag parameters open() function's syntax which default one. keyword flag parameter represents gave read write access file, represents gave write-only access, represents gave only read access, represents that creating file with NameOfFile name. Writeback: Writeback parameter false default, this parameter true, entries give shelve file will cached program's cache memory. Protocol: protocol parameter function denotes pickle protocol entries. have learned parameters syntax Shelve Module's open() function, time should this function example program understand implementation. Example Look following Python program where created shelve file stored data inside that file: Importing Shelve Module import shelve Creating shelve file with open() function shelveVariable shelve.open("SampleFile") print("A Shelve file with SampleFile name successfully created") Making entries inside shelve file shelveVariable['Employee Name'] 'Jackie Chan' shelveVariable['Employee Age'] shelveVariable['Employee department'] Management shelveVariable['Employee Performance'] Excellent shelveVariable['Employee Score'] shelveVariable.close() print("All entries successfully made inside sample shelve file") Output: Shelve file with SampleFile name successfully created entries successfully made inside sample shelve file Explanation: have first imported Shelve Module example program that open() function create sample shelve file. Then, used open() function inside initialized shelveVariable further entries created sample shelve file with 'SampleFile' name. then used initialized shelveVariable make entries inside sample shelve file created, used dictionary method make multiple entries made multiple entries separate columns using initialized variable, last, used close() function save these entries file. When example program given above, shelve file with 'SampleFile.dir' will created device, entries will made Note: Every time access shelve file present system, sync() close() operations performed along with which slow down overall process. Methods Shelve Module: above example, used open() method create database shelve file, this isn't only method present shelve module. Shelve Module provides with many different methods, each these methods different functionality, which very useful Following various types methods present shelve module: Method Name Description Method get() This method will return value associated with (provided argument inside method) present database file. keys() Keys() method used return names keys present shelve file (which name have provided argument method). values() values() method works very similarly keys() method shelve module returns values present shelve file. items() want both keys values from shelve file single call, this items() method providing name shelve file argument method. close() close method first synchronizes items gave shelve file, then closes persistent dict object, which initialized while opening/creating shelve file. update() want update shelve file more entries, update() method same. pop() pop() method exactly opposite update() method used remove entry (Key value resemble with from Shelve file. sync() sync() method used write back entries into cache memory program whenever writeback True while opening shelve file. methods shelve module perform various functions database shelve file created, going some these methods later examples. Retrieving Data from Shelve File: After creating shelve file making data entries into this file, first thing which want check entries successfully made into file not. best check print these entries output whether entries printed. This method also useful when don't know what data present shelve file (cases someone worked shelve file working someone else's shelve file). access data from Shelve many methods like get(), values(), items(), keys(). These methods work very differently return same data different forms, therefore will each them return data from sample shelve file created example Getting single value get() method: directly print value from particular providing inside get() method, understand this method, will this example program. Example Importing Shelve Module import shelve Opening sample shelve file with open() function shelveVariable shelve.open("SampleFile") Print data entries from sample shelve file output print("Name Employee file: shelveVariable['Employee Name']) print("Age Employee: shelveVariable['Employee Age']) print("Department Employee: shelveVariable['Employee department']) print("Score Employee: shelveVariable['Employee Score']) Output: Name Employee file: Jackie Chan Employee: Department Employee: Management Score Employee: see, data value with respective given get() method printed output. (ii) Getting items once from shelve file: want retrieve items from shelve file once, items() method with shelve object, will return items present inside sample shelve file output. will following example program understand implementation this method: Example Importing Shelve Module import shelve Opening sample shelve file with open() function shelveVariable shelve.open("SampleFile") Print data entries from sample shelve file list form print("Items sample shelve file: list(shelveVariable.items())) Output: Items sample shelve file: [('Employee Name', 'Jackie Chan'), ('Employee Age', 27), ('Employee department', 'Management'), ('Employee Performance', 'Excellent'), ('Employee Score', 9.2)] output, items present sample file were printed when used items() function. (iii) Retrieving only keys from shelve file: want print only keys present sample shelve file, keys() method inside program after opening shelve file. Example Importing Shelve Module import shelve Opening sample shelve file with open() function shelveVariable shelve.open("SampleFile") Print only keys from sample shelve file output print("Keys sample shelve file: list(shelveVariable.keys())) Output: Keys sample shelve file: ['Employee Name', 'Employee Age', 'Employee department', 'Employee Performance', 'Employee Score'] keys present sample shelve file printed output with keys() method. (iv) Retrieving only values from shelve file: This method implementation work exactly like previous method where used keys() function, here have values() function print values from shelve file. Example Importing Shelve Module import shelve Opening sample shelve file with open() function shelveVariable shelve.open("SampleFile") Print only values from sample shelve file output print("Values sample shelve file: list(shelveVariable.values())) Output: Values sample shelve file: ['Jackie Chan', 'Management', 'Excellent', 9.2] values present sample shelve file printed output with keys() method. Updating Data Shelve File: even update data already present shelve file, this method, perform three tasks, here will perform only two. First, update value already present file; second, entries; last, remove entry from file. want update current value associated with value, have write value with object, program will assign value that key. Adding entries shelve file: want entries, first have define dictionary variable program, then write entries there with key-value pair. After that, update() method providing name dictionary variable argument method, will entries file. Example Importing Shelve Module import shelve Opening sample shelve file with open() function shelveVariable shelve.open("SampleFile") Adding fields inside sample shelve file sampleDict {'Employee Salary' 50000, 'Employee Sub-department' 'Field Work'} shelveVariable.update(sampleDict) Print data entries from sample shelve file list form print("Items sample shelve file: list(shelveVariable.items())) Output: Items sample shelve file: [('Employee Name', 'Jackie Chan'), ('Employee Age', 27), ('Employee department', 'Management'), ('Employee Performance', 'Excellent'), ('Employee Score', 9.2), ('Employee Salary', 50000), ('Employee Sub-department', 'Field Work')] see, when printed items from sample shelve file, items were also present, which means entries were made file. (ii) Removing entry from shelve file: want remove already existing entry file, pop() method. have write name function, will remove value associated with from shelve file. verify this through printing items from shelve file. Example Importing Shelve Module import shelve Opening sample shelve file with open() function shelveVariable shelve.open("SampleFile") Delete field from shelve file shelveVariable.pop('Employee Performance') Print data entries from sample shelve file list form print("Items sample shelve file: list(shelveVariable.items())) Output: Items sample shelve file: [('Employee Name', 'Jackie Chan'), ('Employee Age', 27), ('Employee department', 'Management'), ('Employee Score', 9.2), ('Employee Salary', 50000), ('Employee Sub-department', 'Field Work')] see, employee performance key-value entry present output have removed through pop() method. Next TopicCreating Interactive forms using Python prev next