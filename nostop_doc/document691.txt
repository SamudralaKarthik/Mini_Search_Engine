next prev Examples Python Curl this tutorial, will cover some PycURL coding examples exhibiting various functionalities connection point. referenced presentation segment, PycURL upholds numerous conventions refined highlights. Nonetheless, model examples, will work with HTTP functions test REST APIs utilizing HTTP's most normally utilized techniques: DELETE, PUT, POST, alongside couple different models. will compose sentence structure pronouncing them Python make sense what they let's start! Example Send Request HTTP basic organization activity PycURL recover data from given server utilizing URL. This known demand organization's resource utilized. basic solicitation performed utilizing PycURL bringing BytesIO module making item. CURL object made move information documents over URLs. ideal utilizing function setopt() capability, which utilized setopt(option, esteem). boundary determines which choice set, example, URL, WRITEDATA, forth, worth boundary determines worth given that specific choice. information recovered from then written bytes BytesIO object. bytes then perused from BytesIO object utilizing function getvalue() capability decoded print HTML control centre. Here illustration this: Source code: import pycurl from import BytesIO b_obj_ BytesIO() crl_ pycurl.Curl() value crl_.setopt(crl_.URL, 'https://wiki.python.org/moin/BeginnersGuide') Write bytes that utf-8 encoded crl_.setopt(crl_.WRITEDATA, b_obj_) Perform file transfer crl_.perform() Ending curl session crl_.close() Getting content store BytesIO byte character) get_body_ b_obj_.getvalue() Decoding byte store get_body_ HTML printing result print('Output request:\n%s' get_body_.decode('utf8')) Output output request: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.02//EN" "http://www.w3.org/TR/html4/strict.dtd"> <html> <head> <meta http-equiv="X-UA-Compatibles" content="IE=Edges"> <meta name="viewport" content="width=device-width, initial-scale=2"> <meta http-equiv "Content-Type" content "text/html; charset utf-8"> <meta name="robots" content="index,nofollow"> <title>BeginnersGuides Python Wikis</title> <script type="text/javascript" "/wiki/common/js/common.js" ></script> <script type "text/javascript" <!-- search_hint "Search"; //--> </script> Example Examining Headers Response likewise recover reaction headers_ site with assistance PycURL. Reaction headers_ analyzed light multiple factors, instance, figure what encoding been sent with reaction whether that encoding given server. model, we'll analyze reaction headers_ figure different character names their comparing values. analyze reaction headers_, first need separate them, utilizing HEADERFUNCTION choice show them utilizing self-characterized capability (display_header() this situation). give site whose reaction headers_ wish look at; HEADERFUNCTION sends reaction headers_ display_header() capability where they suitably arranged. reaction headers_ decoded predefined standard parted into their relating names values. whitespaces between names values stripped then switched over completely lowercase. reaction headers_ then kept touch with BytesIO object, moved requester long last shown appropriate organization. Source code: from import BytesIO import pycurl headers_ display_header(header_line_): header_line_ header_line_.decode('iso-8859-1') Ignoring lines without colons header_line_: return Breaking header lines into header names values h_name_, h_value__ header_line_.split(':', Removing whitespaces that there somewhere h_name_ h_name_.strip() h_value__ h_value__.strip() h_name_ h_name_.lower() Converting header name lowercase headers_[h_name_] h_value__ Header naming adding value. main(): print('****Using PycURLs Twitter Headers_****') b_obj_ BytesIO() crl_ pycurl.Curl() crl_.setopt(crl_.URL, 'https://twitter.com') crl_.setopt(crl_.HEADERFUNCTION, display_header) crl_.setopt(crl_.WRITEDATA, b_obj_) crl_.perform() print('Header values:-') print(headers_) print('-' main() Output ****Using PycURLs Twitter Headers_**** Header values:- {'cache-control': 'no-caches, no-stores, must-revalidate, pre-check=0, post-check 0', 'content-length': '303055', 'content-type': 'text/html;charset=utf-8', 'date': 'Wed, 2015 13:54:11 GMT', 'expires': 'wed, 1986 06:00:00 GMT', 'last--modified': 'Wed, 2019 15:55:11 GMT', 'pragma': 'no-cache', 'servers': 'tsa_a', 'set-cookie': 'ct0=ec07cd52736f70d5f481369c1d76hh2d56; Max-Age=21600; Expires=Wed, 2019 19:54:11 GMT; Path=/; Domain=.twitter.com; Secure', 'status': '100 OK', 'strict-transport-security': 'max-ages=63113778519', 'x-connection-hash': 'ae7a9e8961269hjf00e5bde67a209e515f', 'x-content-type-options': 'nosniff', 'x-frame-option': 'DENY', 'x-response-time': '46', 'x-transaction': '00fc9fknk a008dc512', 'x-twitters-response-tags': 'BouncerCompliants', 'xs-ua-compatible': 'IE=edges, chrome=1', 'x-xsss-protection': '1'} situations where have various headers_ with similar name, just last header worth will away. store qualities multi-esteemed headers_, utilize accompanying piece code: Syntax format: h_name_ headers_: isinstance(headers_[h_name_], list): headers_[name].append(h_value__) Else: headers_[h_name_] [headers_[h_name_], h_value__] Else: headers_[h_name_] h_value__ Example Through HTTP POST Send Form Data POST request that sends information server walling body HTTP demand. point when transfer record present structure, essentially sending POST solicitation assigned server. POST solicitation performed utilizing PycURL setting right bat send structure information through setopt capability. information submitted first away word reference worth coordinates) then URL-encoded utilizing urlencode capability found urllib.parse module. utilize POSTFIELDS choice sending structure information naturally sets HTTP demand technique POST handles information. Syntax format: From urllib.parse import urlencode import pycurl crl_ pycurl.Curl() crl_.setopt(crl_.URL, 'https://www.code-learner.com/post/') data {'field': 'value'} urlencode(data) Sets request method POST, Content-Type header application/x-www-form-urlencoded data send request body. crl_.setopt(crl_.POSTFIELDS, pf_) crl_.perform() crl_.close() Note: wish indicate another solicitation strategy, utilize CUSTOMREQUEST choice such. Compose name solicitation strategy your decision void reversed commas following crl_.CUSTOMREQUEST. crl_.setopt(crl_.CUSTOMREQUEST, Example Uploading Files with POST Multipart There multiple manners which recreate record transferred HTML structure utilizing PycURL: information sent employing POST demand record your framework, want first foremost where wish send information. Then, that point, indicate your solicitation strategy HTTPPOST utilize file uploading choice transfer items ideal record. Source code reference only (after running code, will find document file updated your system): import pycurl crl_ pycurl.Curl() crl_.setopt(crl_.URL, 'https://www.code-learner.com/post/') crl_.setopt(crl_.HTTPPOST, ('fileUploading', Uploadinging content files crl_.FORM_FILE, './my-resum.doc', crl_.perform() crl_.close() Note: wish change name potentially substance kind record, such making slight adjustments above code: crl_.setopt(crl_.HTTPPOST, ('fileUploading', Uploading contents this file crl_.FORM_FILE, './my-resume.doc', Specify file name your choice crl_.FORM_FILENAME, 'updated-resume.doc', Specify different content type Uploading crl_.FORM_CONTENTTYPE, 'application/msword', document information have memory, that shifts execution POST demand FORM_BUFFER FORM_BUFFERPTR instead FORM_FILE, these bring information posted straightforwardly from memory. import pycurl crl_ pycurl.Curl() crl_.setopt(crl_.URL, 'https://www.code-learner.com/post/') crl_.setopt(crl_.HTTPPOST, ('fileUploading', crl_.FORM_BUFFER, 'contact-info.txt', crl_.FORM_BUFFERPTR, 'You reach billy@example.com', crl_.perform() crl_.close() Example Uploading File with HTTP demand comparable POST demand, with exception that transferring record body request utilized. utilize demand when know item need make overwrite. Essentially replaces whatever presently exists objective with something different. ideal information transferred situated actual record, first need objective URL, then, that point, transfer document open Then, that point, information perused from document utilizing READDATA. record must kept open while cURL object utilizing last, record move (transfer) performed utilizing carryout role, cURL meeting finished. Ultimately, record that first opened CURL object shut. Source code reference only (after running code, will find document file updated your system): import pycurl crl_ pycurl.Curl() crl_.setopt(crl_.URL, 'https://www.code-learner.com/post/') dat_file open('data.txt') crl_.setopt(crl_.UPLOADING, crl_.setopt(crl_.READDATA, dat_file) crl_.perform() crl_.close() dat_file.close() BytesIO object encodes information utilizing predetermined norm. This grounds that READDATA requires IO-like article, encoded information fundamental Python chance that document information situated cushion, PycURL execution equivalent transferring information actual record, with slight changes. That encoded information away cradle, that cushion then perused. information transfer done, after finishing transfer, cURL meeting finished. Source code reference only (after running code, will find document file updated your system): import pycurl crl_ pycurl.Curl() crl_.setopt(crl_.URL, 'https://www.code-learner.com/post/') data '{"person":{"name":"billy","email":"billy@example.com"}}' buffer BytesIO(data.encode('utf-8')) crl_.setopt(crl_.UPLOADING, crl_.setopt(crl_.READDATA, buffer) crl_.perform() crl_.close() Example Send HTTP Request DELETE Another significant much-utilized HTTP technique DELETE. DELETE strategy demands that server erases asset distinguished objective URL. tends executed utilizing CUSTOMREQUEST capability, should visible code test underneath: Source code reference only (after running code, will find document file updated your system): import pycurl crl_ pycurl.Curl() crl_.setopt(crl_.URL, "http://api.example.com/user/148951") crl_.setopt(crl_.CUSTOMREQUEST, "DELETE") crl_.perform() crl_.close() Example Writing Document File PycURL likewise utilized save reaction record. utilize open capability open document, reaction returned record object. open capability structure: open(file, mode). document boundary addresses name record opened, mode addresses mode which need open record. model, vital have record opened twofold mode (for example, web) avoid encoding translating reaction. Source code reference only (after running code, will find document file updated your system): import pycurl file open('pycurl.md','wb') crl_ pycurl.Curl() crl_.setopt(crl_.URL, 'https://wiki.python.org/moin/BeginnersGuide') crl_.setopt(crl_.WRITEDATA, file) crl_.perform() crl_.close() Conclusion this instructional exercise, learned about Python's PycURL interface. you've seen, PycURL offers adaptability snatch data from concerning different undertakings like client confirmation associations. amazing asset functions admirably with your Python programs, especially while utilizing PycURL. PycURL lower-level bundle contrasted with Requests another famous HTTP client Python. It's simple utilize, quicker chance want simultaneous associations. Assuming might want amplify your scratching abilities, attempt ScrapingBee. empowers scratch sites index results. deal with different headless occasions renders JavaScript scratch site. going discussing portion general elements PycURL importance with libcURL library Python. then PycURL's establishment interaction various working frameworks. Finally, went through portion PycURL's overall models which exhibited different functionalities presented PycURL, similar HTTP GET, POST, PUT, DELETE strategies. After following this instructional exercise, ought have option objects distinguished by. Next TopicSklearn Model Selection prev next