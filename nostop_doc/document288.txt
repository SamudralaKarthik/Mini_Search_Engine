next prev InfluxDB Python While searching monitoring infrastructure third-party applications, built-in plugins Telegraph become great choice searching system resources such disk network utilization performance MySQL database. What creating application, nonetheless, where like store data from user Time Series Database? Maybe consider Internet Things (IoT) application based smart home, every user requires access readings from, example, their smart toothbrush. want store time duration every session brushing, send alerts reminding kids brush their teeth keep track things such health battery, duration existing brush head been use. Collecting custom data, whether user-facing application infrastructure requirement that plugins Telegraf already cover, probably going need writing block code. consider example based smart toothbrush, where have base station that runs embedded Linux communicates with toothbrush with help Bluetooth. have already written block code listening incoming data, seems working well; now, want into InfluxDB. would Telegraf together with application send data over UDP, Unix, socket, letting Telegraf handle connection InfluxDB batching writing points. This method absolutely fine require data collection; however, want query that data users, will probably need take benefit libraries InfluxDB available different languages order handle interaction with InfluxDB within application itself. There multiple languages there that already have libraries InfluxDB, many them managed community. will understand influxdb-python library. let's started. Understanding InfluxDB Python Client Library InfluxDB open-source time-series database TSDB, designed developed company named InfluxData. written programming language store retrieve time series data fields like operations monitoring, Internet Things sensor data, application metrics, real-time analytics. also provides support data processing from Graphite. Influxdb-python library acts Python client interacting with InfluxDB. library hosted GitHub account InfluxDB maintained trio community volunteers. Installing library installer that also simplest install libraries Python. syntax install influxdb library shown below: Syntax: install influxdb Once installation completed, verify simply creating Python program file typing following snippet code. Syntax: from influxdb import InfluxDBClient Now, save file executing error raised, library installed properly. However, case exception, reinstalling consider taking help from official documentation. Creating Connection next step, will create instance InfluxDBClient, using information regarding server that have access. following snippet code that will replace values host port with appropriate URL/IP address port host InfluxDB. following case, running locally default port: Example: importing required module from influxdb import InfluxDBClient defining host port my_Client InfluxDBClient(host 'localhost', port 8086) Explanation: above snippet code, have imported InfluxDBClient module from influxdb library. have then defined host port variable named my_Client using InfluxDBClient() function, where have defined values parameters such host port, respectively. Some other parameters also available InfluxDBClient constructor, involving username password, which database needs connected, whether utilize SSL, timeout, parameters. have connect remote host somedomain.com port 8086 with username (say, anonymous) password (say, somepass) with help SSL, could utilize following snippet code instead enabling verification with other parameters, True ssl_verify True: Example: importing required module from influxdb import InfluxDBClient defining different entities my_Client InfluxDBClient( host 'somedomain.com', port 8086, username 'anonymous', password "somepass", True, verify_ssl True Explanation: above snippet code, have imported InfluxDBClient module from influxdb library. have then used module define host, port, username, password, ssl, verify_ssl, stored values my_Client variable. Now, build database named mydatabase order data shown below: Example: importing required module from influxdb import InfluxDBClient defining host port my_Client InfluxDBClient( host 'somedomain.com', port 8086, username 'anonymous', password "somepass", True, verify_ssl True creating database my_Client.create_database('mydatabase') Explanation: above snippet code, have created database named mydatabase using create_database my_Client. check whether database created with help get_list_database() function my_Client, shown below: Example: importing required module from influxdb import InfluxDBClient defining host port my_Client InfluxDBClient( host 'somedomain.com', port 8086, username 'anonymous', password "somepass", True, verify_ssl True creating database my_Client.create_database('mydatabase') verifying database created my_Client.get_list_database() Output: [{'name': 'telegraf'}, {'name': '_internal'}, {'name': 'mydatabase'}] Explanation: above snippet code, have used get_list_database() function verify whether database created not. result, observe that database named mydatabase present along with telegraf _internal databases have install. Finally, client this database using following snippet code: Example: importing required module from influxdb import InfluxDBClient defining host port my_Client InfluxDBClient( host 'somedomain.com', port 8086, username 'anonymous', password "somepass", True, verify_ssl True creating database my_Client.create_database('mydatabase') setting client specified database my_Client.switch_database('mydatabase') Explanation: above snippet code, have used switch_database client specified database, i.e., mydatabase. Inserting Data that have database write data client properly configured, time some data. going utilize write_points() method client This method accepts list points some other parameters involving "batch size", which provides ability insert data batches opposed once. this insert large amount data. write_points() method parameter known my_points, list dictionaries consists points that need written database. create some sample data now, insert First all, insert three points JSON format variable known json_body, shown following snippet code: Example: json_body "measurement": "brushEvents", "tags": "user": "Derek", "brushId": "6a89f539-71c6-490d-a28d-6c5d84c0ee2f" "time": "2021-08-04T8:01:00Z", "fields": "duration": "measurement": "brushEvents", "tags": "user": "Derek", "brushId": "6a89f539-71c6-4xx90d-a28d-6c5d84c0ee2f" "time": "2021-08-05T8:04:00Z", "fields": "duration": "measurement": "brushEvents", "tags": "user": "Derek", "brushId": "6a89f539-71c6-490d-a28d-6c5d84c0ee2f" "time": "2021-08-06T8:02:00Z", "fields": "duration": Explanation: above snippet code indicates "brush events" smart toothbrush; each occurs around eight o'clock morning, tagged with username person utilizing toothbrush brush itself (which helps track duration using same brush head), field containing duration user using brush, seconds. already have database set, default input write_points() JSON, invoke method with help json_body variable only parameter, shown below: Example: my_Client.write_points(json_body) Output: True Explanation: above snippet code, have used write_points() with help json_body variable parameter. result, response terms Boolean value which true, function write operation been successful. create application, would need this data collection automatic, inserting points database each time user tries interact with toothbrush. Querying Data Once have data database, working with some queries order back out. will utilize same client object utilized write data, except this time will execute query InfluxDB back results utilize with query() function client. Example: my_Client.query('SELECT "duration" FROM "mydatabase"."autogen"."brushEvents" WHERE time now() 4d GROUP "user"') Explanation: above snippet code, have used query() function returning ResultSet object containing data output together with some convenience methods. query requesting measurements mydatabase database, grouped user. utilize parameter called .raw order access JSON response from InfluxDB. Example: results.raw Output: {'statement_id': 'series': [{'name': 'brushEvents', 'tags': {'user': 'Derek'}, 'columns': ['time', 'duration'], 'values': [['2021-08-04T08:01:00Z', 147], ['2021-08-05T08:04:00Z', 131], ['2018-08-06T08:02:00Z', 124]]}]} Explanation: above snippet code, have used parameter order access JSON response from InfluxDB. most cases, won't have access JSON directly. Instead, utilize get_points() method ResultSet measurements from request, filtering field. wanted iterated through Derek's brushing sessions; could points that grouped under "user" with value "Derek", utilizing following command: Example: my_points results.get_points(tags {'user':'Derek'}) Explanation: above example, my_points variable Python Generator, which function working similarly Iterator; iterate over utilizing loop, shown below: Example: my_points results.get_points(tags {'user': 'Derek'}) my_point my_points: print("Time: Duration: %i" (my_point['time'], my_point['duration'])) Output: Time: 2021-08-04T08:01:00Z, Duration: Time: 2021-08-05T08:04:00Z, Duration: Time: 2021-08-06T08:02:00Z, Duration: Explanation: above snippet code, have used loop print time duration each brushing time user. Depending application, might iterate through these points order compute average brushing time user just verify that there been number brushing events day. Next TopicKafka Tutorial Python prev next