next prev Python YAML Parser this tutorial, will learn read, write perform various operations YAML files using Python. will discuss YAML file format, usage, manipulate using Python. Let's have brief introduction YAML. What YAML? YAML abbreviation Another Markup Language. stores configuration file data serialized manner; gained much popularity recent years since human-readable data format often used data storage transmission. YAML supports three data types scalars (strings, integers, floats), lists, associative arrays. YAML files saved with .yaml .yml extension. comment YAML using symbol. hyphen precedes each subitem inside. values nested using indentation. Advantages YAML Some important advantages YAML follows. programming languages support YAML need write YAML language used with almost every programming language without modification. Object Serialization serialize YAML data format. Easy Read There hard-written rule create YAML file. simple indentation used define individual block documents. Before starting further, assume that have basic understanding Python beginner-level programming experience with Python programming language. PyYAML Module PyYAML Python module that provides range methods perform several operations YAML file. easily convert YAML file into Dictionary read content. With help YAML module, read write complex configuration YAML files, serializing persisting YAML data. PyYAML, need install system. Below installation steps PyYAML module. Installing PyYAML install using below method. Install using command Install source code Using command install using command. Type following command terminal install PyYAML module. install pyyaml Install source code alternative installation case facing error using command. Follow below instructions. Open PyYAML Github repository, click code section download file. Extract downloaded file. open terminal change directory where file extracted. python setup.py command enter button. will install PyYAML module your machine. Reading YAML File First, create YAML file named sample.yaml file that will read using PyYAML module. sample.py YAML Document starts with Comments start with UserName: Antonio Password: fire123 phone: 9879098 Skills: -Python -SQL -Django -Rest Framework -JavaScript yaml.load() method used read YAML file. This method parses converts YAML object Python dictionary that read content easily. This process called Deserialization YAML files into Python. load() method takes argument, which either byte string, open binary file object, Unicode string, open YAML file object. pass file byte-string argument, should encoded utf-8, utf-16-be, utf-16-le. Let's understand following example. Example import yaml from yaml.loader import SafeLoader #open yaml file read mode with open('sample.yaml', 'r') data list(yaml.load(f, Loader=SafeLoader)) print(data) Output: [{'UserName': 'Antonio', 'Password': 'fire123 'phone': 9879098, 'Skills': '-Python -SQL -Django -Rest Framework -JavaScript'}] Explanation have imported yaml Loader reader YAML file above code. load() function comes with four types Loader. SafeLoader used this Loader above example. loads subset YAML safely. mostly used when input from untrusted source. BaseLoader loads basic YAML scalars Strings. FullLoader works same BaseLoader avoids arbitrary code execution. input from untrusted source, pose security threat. UnsaeLoader recommended Loader untrusted source inputs generally used backward compatibility. load() method returned generator object that type cased into list could access element. also same values form dictionary. Let's understand following example. also yaml values form dictionary. Let's understand following example. Example import yaml from yaml.loader import FullLoader #open yaml file read with open('sample.yaml', 'r') yaml_data yaml.load(f, Loader=FullLoader) print(yaml_data) Output: {'UserName': 'Antonio', 'Password': 'fire123 'phone': 9879098, 'Skills': '-Python -SQL -Django -Rest Framework -JavaScript'} changed scalar argument SafeLoader FullLoader that converted YAML data into Dictionary. advantage this loader that, don't need type cast loaded data into list. Read Multiple YAML Document read multiple yaml document using yaml.load_all() method. single YAML file have multiple documents. Below example multiple documents single file. sample.yaml UserName: Antonio Password: fire123 phone: 9879098 Skills: -Python -SQL -Django -Rest Framework -JavaScript UserName: Maino Password: fire123 phone: 9879098 Skills: -Python -SQL -Django -Rest Framework -JavaScript UserName: George Password: fire123 phone: 9879098 Skills: -Python -SQL -Django -Rest Framework -JavaScript document starts with three dashes (---) ends with three dots (…). Let's understand following example. Example import yaml from yaml.loader import SafeLoader #open yaml file read with open('sample.yaml', 'r') yaml_data list(yaml.load_all(f, Loader=SafeLoader)) print(yaml_data) Output: [{'UserName': 'Antonio', 'Password': 'fire123 'phone': 9879098, 'Skills': '-Python -SQL -Django -Rest Framework -JavaScript'}, {'UserName': 'Maino', 'Password': 'fire123 'phone': 9879098, 'Skills': '-Python -SQL -Django -Rest Framework -JavaScript'}, {'UserName': 'George', 'Password': 'fire123 'phone': 9879098, 'Skills': '-Python -SQL -Django -Rest Framework -JavaScript'}] Explanation load() method returned generator object that typed cased into list could access element. previous examples, learned read YAML file. will learn dump data into YAML file. Write YAML File Using PyYAML Module Writing Python data into YAML known serialization. dump data into yaml file, will yaml.dump() method. Let's understand following example. Example import yaml dict object members [{'User': 'Zoey', 'Password': 'Xavier@123', 'Phone': 345464, 'Skills': ['Python', 'SQL', 'Django', 'Rest Framework', 'JavaScript']}, {'name': 'Zaara', 'occupation': 'Dentist'}] Convert Python dictionary into YAML document print(yaml.dump(members)) Output: Password: [email protected] Phone: 345464 Skills: Python Django Rest Framework JavaScript User: Zoey name: Zaara occupation: Dentist Explanation dump() method transforms Python objects into YAML format writes them into YAML file. have done same above example. dump() method takes arguments data stream. data argument represents Python object that will transform into YAML stream. second parameter file that must text binary file. YAML stream data written given file name; otherwise, dump() will return produced document. Let's understand example writing Python data file. Example import yaml dict object python_data [{'User': 'Zoey', 'Password': 'Xavier@123', 'Phone': 345464, 'Skills': ['Python', 'SQL', 'Django', 'Rest Framework', 'JavaScript']}, {'name': 'Zaara', 'occupation': 'Dentist'}] with open('NewDetails.yaml', 'w') data yaml.dump(python_data, sort_keys=False, default_flow_style=False) Output: NewDetails.yaml User: Zoey Password: [email protected] Phone: 345464 Skills: Python Django Rest Framework JavaScript name: Zaara occupation: Dentist Explanation above example, First, defined Python dictionary written file. Then, opened details.YAML file write mode. used dump() method passed Python dict object with other tags. These tags default_flow_style used display contents nested block with proper indentation. default, True. value false value inside nested lists shown flow style, will display block style's content with proper indentation. sort_keys used sort keys alphabetical order. default, True. value false, will maintain insertion order. Dump Multiple YAML Documents yaml.dump_all() method used dump multiple YAML documents single stream. This method takes list generator producing Python objects serialized into YAML document second optional argument open file. Let's understand following example. Example import yaml dict object python_data [{'User': 'Zoey', 'Password': 'Xavier@123', 'Phone': 345464, 'Skills': ['Python', 'SQL', 'Django', 'Rest Framework', 'JavaScript']}, {'name': 'Zaara', 'occupation': 'Software Engineer'}] data1 yaml.dump(python_data) print("Using dump() method") print(data1) data2 yaml.dump_all(python_data) print("Using dump_all() method") print(data2) Output: Using dump() method Password: [email protected] Phone: 345464 Skills: Python Django Rest Framework JavaScript User: Zoey name: Zaara occupation: Dentist Using dump_all() method Password: [email protected] Phone: 345464 Skills: Python Django Rest Framework JavaScript User: Zoey name: Zaara occupation: Dentist Python YAML sorting keys sort_keys optional used while dumping Python data into file. True, will sort keys YAML documents alphabetically. Let's understand following example. Example import yaml from yaml.loader import FullLoader #open yaml file read with open('sample.yaml', 'r') print("Before Sorting?..") yaml_data yaml.load(f, Loader=FullLoader) print(yaml_data) print("After Sorting......") sorted_data yaml.dump(yaml_data, sort_keys=True) print(sorted_data) Output: import yaml from yaml.loader import FullLoader #open yaml file read with open('sample.yaml', 'r') print("Before Sorting?..") yaml_data yaml.load(f, Loader=FullLoader) print(yaml_data) print("After Sorting......") sorted_data yaml.dump(yaml_data, sort_keys=True) print(sorted_data) Format YAML File PyYaml module provides facility format YAML file while writing YAML document dump() method supports various formatting arguments. Below formatting arguments. Parameter indent helps preferred indentation. width helps preferred width. canonical=True forces preferred style scalars collections. Let's understand following example Example import yaml from yaml.loader import FullLoader #open yaml file read with open('sample.yaml', 'r') yaml_data yaml.load(f, Loader=FullLoader) sorted_data yaml.dump(yaml_data, indent=10, default_flow_style=False) print(sorted_data) Output: Password: fire123 Skills: -Python -SQL -Django -Rest Framework -JavaScript UserName: Antonio phone: 9879098 Custom Python Class YAML Serializable create custom Python class that convert YAML into custom Python object instead list, built types. Let's understand following example Example import yaml from yaml.loader import UnsafeLoader class Person: __init__(self, user, password): self.user user self.password password __repr__(self): return "%s(user=%r, password=%r)" self.__class__.__name__, self.user, self.password) Make Python Class YAML Serializable person Person('Jessa', 'queue@123') yaml_obj yaml.dump(person) Deserialize YAML into Custom Python Class new_person yaml.load(yaml_obj, Loader=UnsafeLoader) print(new_person.user, new_person.password) Output: Jessa [email protected] Custom Tags with PyYAML create custom tags according application requirements assign default value custom tags while parsing YAML file. involves certain steps that given below. first step, define constructor function that takes loader YAML node. call constuct_mapping() method created constructor, that will return Python dictionary corresponding YAML node. will return constructor with dictionary. returned constructor will passed add_constructor() that transforms YAML representation graph native Python object. constructor takes instance Loader node returns Python objects. Now, load() method accept many fields required with same custom defined add_constructor(). fields without values will allotted default values defined __init__() method. Let's understand following example. Example import yaml custom_constructor(loader, node) fields loader.construct_mapping(node) return Test(**fields) yaml.add_constructor('!Custom Tags', custom_constructor) class Test(object) __init__(self, user, password, phone=11000) self.user user self.password password self.phone phone __repr__(self): return "%s(user=%s, password=%r,phone=%r)" (self.__class__.__name__, self.user, self.password, self.phone) print (yaml.load(""" !Custom Tags user: 'Sam' !Custom Tags user: 'Gaby', password: 'admin@123',phone: 5656}""")) Output: [Custom Tags(user=Sam, [email protected],phone=1100), Test(name=Gaby, password= [email protected], phone=5656)] Conversion Table PyYAML Module Below table that PyYAML module uses convert Python objects into YAML equivalent. dump() method uses translation while encoding. YAML Python Type !!null None !!bool Bool !!float Float !!int !!binary (bytes Python3) !!timestamp Datetime.datetime !!omap, !!pairs Lists pairs !!set !!seq list !!str unicode (str Python) !!map dict YAML Errors YAML parser raises exception called YAMLError case error. With help this error, debug problem. recommended YAML serialization code try-expect block. Let's understand following example. Example import yaml try: config yaml.load('Userdetails.yaml') except yaml.YAMLError: print("Error configuration file:") Tokens Tokens generally used level application applications such syntax highlighting. produce scan() method produce tokens. Let's understand following example. Example import yaml with open('sample.yaml') data yaml.scan(f, Loader=yaml.FullLoader) token data: print(token) Output: StreamStartToken(encoding=None) DocumentStartToken() BlockMappingStartToken() KeyToken() ScalarToken(plain=True, style=None, value='UserName') ValueToken() ScalarToken(plain=True, style=None, value='Antonio') KeyToken() ScalarToken(plain=True, style=None, value='Password') ValueToken() ScalarToken(plain=True, style=None, value='fire123 KeyToken() ScalarToken(plain=True, style=None, value='phone') ValueToken() ScalarToken(plain=True, style=None, value='9879098') KeyToken() ScalarToken(plain=True, style=None, value='Skills') ValueToken() ScalarToken(plain=True, style=None, value='-Python -SQL -Django -Rest Framework -JavaScript') BlockEndToken() DocumentEndToken() StreamEndToken() Python YAML YAML data converted into format using XMLPlain module. abbreviation name eXtensible Markup Language which uses HTML tags define tags. obj_from_yaml() method used generate plain from YAML stream string. keep plain object element order, YAML streams stored OrderDict. Let's take sample YAML file with employee details convert into file. Example StudentRecord: -Student: 'rollno': st01 name: Alexa class: subject: python, Java -Student: 'rollno': st02 name: Prince class: subject: Webservices, REST Let's understand code implementation. Example import xmlplain Read YAML file with open("student.yaml") inf: root xmlplain.obj_from_yaml(inf) Output back with open("student.xml", "w") outf: xmlplain.xml_from_obj(root, outf, pretty=True) Conclusion this tutorial, have learned some important concepts YAML PyYAML modules. covered create custom tags, loading contents YAML file into Python program dictionaries. have also discussed manipulate YAML formatted files. This tutorial included quite brief basic functionality library. Next TopicEffective Root Searching Algorithms Python prev next