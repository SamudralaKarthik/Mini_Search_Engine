next prev Python Program Move zeros Array this tutorial, will write Python program move zero array. problem statement given array random number consists some zero random place zero, need maintain order given array. example given array should transform array maintained relative order items array. expected time complexity O(n) extra space O(1). Example Input Output Input Output There several ways solve this problem, will some methods solve this excitingly. Solution Implementation this method, traverse given array left right place element next available position array. Once non-zero elements placed, fill remaining indices with zeros. Let's implement this approach through Python program. Example move_zeros(num_list): variable `k` manage index next available position iterate given list num_list: check whether current element non-zero then store next free position list num_list[k] move list (remaining indices) range(k, len(num_list)): num_list[i] return num_list num_list order_list move_zeros(num_list) print(order_list) Output: Explanation above code, defined move_zero() function that takes list argument. Inside function, initialized variable with zero, which keeps track next available index position. Then, traverse list check whether current element non-zero; true, then next position increase counter Once non-zero elements stored list, another loop from given list's length. remaining indices, zero list. Time Complexity time complexity 0(n), where size input. above solution easy implement. Let's understand another solution. Method Using partitioning logic Quicksort also solve this problem partitioning Quicksort's portioning logic. this approach, make pivot make pass partitioning process. partitioning logic reads elements swaps every non-pivot element with first occurrence pivot. Let's understand following example. Example swap(num_list, temp num_list[i] num_list[i] num_list[j] num_list[j] temp list_partition(num_list): range(len(num_list)): num_list[i]: pivot swap(num_list, num_list list_partition(num_list) print(num_list) Output: Explanation above code, created swap function swap elements. Then, created partition() method, which calls swap method each time encounter non-zero ''j'' increased. element placed before pivot. time complexity above code 0(n), where size input. Conclusion this tutorial, have discussed some solutions above problem. introductory Python list-related problem, this problem asked technical interviews. Next TopicRegular Dictionary Ordered Dictionary Python prev next