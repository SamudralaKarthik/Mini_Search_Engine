next prev Python Built-in Functions Python built-in functions defined functions whose functionality pre-defined Python. python interpreter several functions that always present use. These functions known Built-in Functions. There several built-in functions Python which listed below: Python abs() Function python abs() function used return absolute value number. takes only argument, number whose absolute value returned. argument integer floating-point number. argument complex number, then, abs() returns magnitude. Python abs() Function Example integer number	 integer print('Absolute value is:', abs(integer)) floating number floating -20.83 print('Absolute value -40.83 is:', abs(floating)) Output: Absolute value Absolute value -20.83 20.83 Python all() Function python all() function accepts iterable object (such list, dictionary, etc.). returns true items passed iterable true. Otherwise, returns False. iterable object empty, all() function returns True. Python all() Function Example values true print(all(k)) values false False] print(all(k)) false value print(all(k)) true value False, print(all(k)) empty iterable print(all(k)) Output: True False False False True Python bin() Function python bin() function used return binary representation specified integer. result always starts with prefix 0b. Python bin() Function Example bin(x) print Output: 0b1010 Python bool() python bool() converts value boolean(True False) using standard truth testing procedure. Python bool() Example test1 print(test1,'is',bool(test1)) test1 print(test1,'is',bool(test1)) test1 print(test1,'is',bool(test1)) test1 None print(test1,'is',bool(test1)) test1 True print(test1,'is',bool(test1)) test1 'Easy string' print(test1,'is',bool(test1)) Output: False True False None False True True Easy string True Python bytes() python bytes() Python used returning bytes object. immutable version bytearray() function. create empty bytes object specified size. Python bytes() Example string "Hello World." array bytes(string, 'utf-8') print(array) Output: Hello World.' Python callable() Function python callable() function Python something that called. This built-in function checks returns true object passed appears callable, otherwise false. Python callable() Function Example print(callable(x)) Output: False Python compile() Function python compile() function takes source code input returns code object which later executed exec() function. Python compile() Function Example compile string source code code_str 'x=5\ny=10\nprint("sum =",x+y)' code compile(code_str, 'sum.py', 'exec') print(type(code)) exec(code) exec(x) Output: <class 'code'> Python exec() Function python exec() function used dynamic execution Python program which either string object code accepts large blocks code, unlike eval() function which only accepts single expression. Python exec() Function Example exec('print(x==8)') exec('print(x+4)') Output: True Python sum() Function name says, python sum() function used numbers iterable, i.e., list. Python sum() Function Example sum([1, 2,4 print(s) sum([1, print(s) Output: Python any() Function python any() function returns true item iterable true. Otherwise, returns False. Python any() Function Example print(any(l)) False] print(any(l)) False, print(any(l)) print(any(l)) Output: True False True False Python ascii() Function python ascii() function returns string containing printable representation object escapes non-ASCII characters string using \x, \u \U escapes. Python ascii() Function Example normalText 'Python interesting' print(ascii(normalText)) otherText 'Pyth�n interesting' print(ascii(otherText)) print('Pyth\xf6n interesting') Output: 'Python interesting' 'Pyth\xf6n interesting' Pyth�n interesting Python bytearray() python bytearray() returns bytearray object convert objects into bytearray objects, create empty bytearray object specified size. Python bytearray() Example string "Python programming language." string with encoding 'utf-8' bytearray(string, 'utf-8') print(arr) Output: bytearray(b'Python programming language.') Python eval() Function python eval() function parses expression passed runs python expression(code) within program. Python eval() Function Example print(eval('x 1')) Output: Python float() python float() function returns floating-point number from number string. Python float() Example integers print(float(9)) floats print(float(8.19)) string floats print(float("-24.27")) string floats with whitespaces print(float(" -17.19\n")) string float error print(float("xyz")) Output: 8.19 -24.27 -17.19 ValueError: could convert string float: 'xyz' Python format() Function python format() function returns formatted representation given value. Python format() Function Example type integer print(format(123, "d")) float arguments print(format(123.4567898, "f")) binary format print(format(12, "b")) Output: 123.456790 1100 Python frozenset() python frozenset() function returns immutable frozenset object initialized with elements from given iterable. Python frozenset() Example tuple letters letters ('m', 'r', 'o', 't', 's') fSet frozenset(letters) print('Frozen is:', fSet) print('Empty frozen is:', frozenset()) Output: Frozen frozenset({'o', 'm', 's', 'r', 't'}) Empty frozen frozenset() Python getattr() Function python getattr() function returns value named attribute object. found, returns default value. Python getattr() Function Example class Details: name "Phill" details Details() print('The is:', getattr(details, "age")) print('The is:', details.age) Output: Python globals() Function python globals() function returns dictionary current global symbol table. Symbol table defined data structure which contains necessary information about program. includes variable names, methods, classes, etc. Python globals() Function Example globals()['age'] print('The is:', age) Output: Python hasattr() Function python any() function returns true item iterable true, otherwise returns False. Python hasattr() Function Example print(any(l)) False] print(any(l)) False, print(any(l)) print(any(l)) Output: True False True False Python iter() Function python iter() function used return iterator object. creates object which iterated element time. Python iter() Function Example list numbers list [1,2,3,4,5] listIter iter(list) prints print(next(listIter)) prints print(next(listIter)) prints print(next(listIter)) prints print(next(listIter)) prints print(next(listIter)) Output: Python len() Function python len() function used return length (the number items) object. Python len() Function Example strA 'Python' print(len(strA)) Output: Python list() python list() creates list python. Python list() Example empty list print(list()) string String 'abcde' print(list(String)) tuple Tuple (1,2,3,4,5) print(list(Tuple)) list List [1,2,3,4,5] print(list(List)) Output: ['a', 'b', 'c', 'd', 'e'] [1,2,3,4,5] [1,2,3,4,5] Python locals() Function python locals() method updates returns dictionary current local symbol table. Symbol table defined data structure which contains necessary information about program. includes variable names, methods, classes, etc. Python locals() Function Example localsAbsent(): return locals() localsPresent(): present True return locals() print('localsNotPresent:', localsAbsent()) print('localsPresent:', localsPresent()) Output: localsAbsent: localsPresent: {'present': True} Python map() Function python map() function used return list results after applying given function each item iterable(list, tuple etc.). Python map() Function Example calculateAddition(n): return n+n numbers result map(calculateAddition, numbers) print(result) converting object numbersAddition set(result) print(numbersAddition) Output: <map object 0x7fb04a6bec18> {8, Python memoryview() Function python memoryview() function returns memoryview object given argument. Python memoryview Function Example random bytearray randomByteArray bytearray('ABC', 'utf-8') mv memoryview(randomByteArray) access memory view's zeroth index print(mv[0]) create byte from memory view print(bytes(mv[0:2])) create list from memory view print(list(mv[0:3])) Output: b'AB' [65, Python object() python object() returns empty object. base classes holds built-in properties methods which default classes. Python object() Example python object() print(type(python)) print(dir(python)) Output: <class 'object'> ['__class__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__le__', '__lt__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__'] Python open() Function python open() function opens file returns corresponding file object. Python open() Function Example opens python.text file current directory open("python.txt") specifying full path open("C:/Python33/README.txt") Output: Since mode omitted, file opened mode; opens reading. Python chr() Function Python chr() function used string representing character which points Unicode code integer. example, chr(97) returns string 'a'. This function takes integer argument throws error exceeds specified range. standard range argument from 1,114,111. Python chr() Function Example Calling function result chr(102) returns string representation char result2 chr(112) Displaying result print(result) print(result2) Verify, string type? print("is string type:", type(result) str) Output: ValueError: chr() range(0x110000) Python complex() Python complex() function used convert numbers string into complex number. This method takes optional parameters returns complex number. first parameter called real second imaginary parts. Python complex() Example Python complex() function example Calling function complex(1) Passing single parameter complex(1,2) Passing both parameters Displaying result print(a) print(b) Output: (1.5+0j) (1.5+2.2j) Python delattr() Function Python delattr() function used delete attribute from class. takes parameters, first object class second attribute which want delete. After deleting attribute, longer available class throws error call using class object. Python delattr() Function Example class Student: name "Pranshu" email "pranshu@abc.com" Declaring function getinfo(self): print(self.id, self.name, self.email) Student() s.getinfo() delattr(Student,'course') Removing attribute which available s.getinfo() error: throws error Output: Pranshu [email protected] AttributeError: course Python dir() Function Python dir() function returns list names current local scope. object which method called method named __dir__(), this method will called must return list attributes. takes single object type argument. Python dir() Function Example Calling function att dir() Displaying result print(att) Output: ['__annotations__', '__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__'] Python divmod() Function Python divmod() function used remainder quotient numbers. This function takes numeric arguments returns tuple. Both arguments required numeric Python divmod() Function Example Python divmod() function example Calling function result divmod(10,2) Displaying result print(result) Output: Python enumerate() Function Python enumerate() function returns enumerated object. takes parameters, first sequence elements second start index sequence. elements sequence either through loop next() method. Python enumerate() Function Example Calling function result enumerate([1,2,3]) Displaying result print(result) print(list(result)) Output: <enumerate object 0x7ff641093d80> [(0, Python dict() Python dict() function constructor which creates dictionary. Python dictionary provides three different constructors create dictionary: argument passed, creates empty dictionary. positional argument given, dictionary created with same key-value pairs. Otherwise, pass iterable object. keyword arguments given, keyword arguments their values added dictionary created from positional argument. Python dict() Example Calling function result dict() returns empty dictionary result2 dict(a=1,b=2) Displaying result print(result) print(result2) Output: {'a': 'b': Python filter() Function Python filter() function used filtered elements. This function takes arguments, first function second iterable. filter function returns sequence those elements iterable object which function returns true value. first argument none, function available returns only elements that true. Python filter() Function Example Python filter() function example filterdata(x): x>5: return Calling function result filter(filterdata,(1,2,6)) Displaying result print(list(result)) Output: Python hash() Function Python hash() function used hash value object. Python calculates hash value using hash algorithm. hash values integers used compare dictionary keys during dictionary lookup. hash only types which given below: Hashable types: bool long float string Unicode tuple code object. Python hash() Function Example Calling function result hash(21) integer value result2 hash(22.2) decimal value Displaying result print(result) print(result2) Output: 461168601842737174 Python help() Function Python help() function used help related object passed during call. takes optional parameter returns help information. argument given, shows Python help console. internally calls python's help function. Python help() Function Example Calling function info help() argument Displaying result print(info) Output: Welcome Python 3.5's help utility! Python min() Function Python min() function used smallest element from collection. This function takes arguments, first collection elements second key, returns smallest element from collection. Python min() Function Example Calling function small min(2225,325,2025) returns smallest element small2 min(1000.25,2025.35,5625.36,10052.50) Displaying result print(small) print(small2) Output: 325 1000.25 Python set() Function python, built-in class, this function constructor this class. used create using elements passed during call. takes iterable object argument returns object. Python set() Function Example Calling function result set() empty result2 set('12') result3 set('javatpoint') Displaying result print(result) print(result2) print(result3) Output: set() {'1', '2'} {'a', 'n', 'v', 't', 'j', 'p', 'i', 'o'} Python hex() Function Python hex() function used generate value integer argument. takes integer argument returns integer converted into hexadecimal string. case, want hexadecimal value float, then float.hex() function. Python hex() Function Example Calling function result hex(1) integer value result2 hex(342) Displaying result print(result) print(result2) Output: 0x1 0x156 Python id() Function Python id() function returns identity object. This integer which guaranteed unique. This function takes argument object returns unique integer number which represents identity. objects with non-overlapping lifetimes have same id() value. Python id() Function Example Calling function id("Javatpoint") string object val2 id(1200) integer object val3 id([25,336,95,236,92,3225]) List object Displaying result print(val) print(val2) print(val3) Output: 139963782059696 139963805666864 139963781994504 Python setattr() Function Python setattr() function used value object's attribute. takes three arguments, i.e., object, string, arbitrary value, returns none. helpful when want attribute object value Python setattr() Function Example class Student: name __init__(self, name): self.id self.name name student Student(102,"Sohan") print(student.id) print(student.name) #print(student.email) product error setattr(student, 'email','sohan@abc.com') adding attribute print(student.email) Output: Sohan [email protected] Python slice() Function Python slice() function used slice elements from collection elements. Python provides overloaded slice functions. first function takes single argument while second function takes three arguments returns slice object. This slice object used subsection collection. Python slice() Function Example Calling function result slice(5) returns slice object result2 slice(0,5,3) returns slice object Displaying result print(result) print(result2) Output: slice(None, None) slice(0, Python sorted() Function Python sorted() function used sort elements. default, sorts elements ascending order sorted descending also. takes four arguments returns collection sorted order. case dictionary, sorts only keys, values. Python sorted() Function Example "javatpoint" declaring string Calling function sorted1 sorted(str) sorting string Displaying result print(sorted1) Output: ['a', 'a', 'i', 'j', 'n', 'o', 'p', 't', 't', 'v'] Python next() Function Python next() function used fetch next item from collection. takes arguments, i.e., iterator default value, returns element. This method calls iterator throws error item present. avoid error, default value. Python next() Function Example number iter([256, 82]) Creating iterator Calling function item next(number) Displaying result print(item) second item item next(number) print(item) third item item next(number) print(item) Output: Python input() Function Python input() function used input from user. prompts user input reads line. After reading data, converts into string returns throws error EOFError read. Python input() Function Example Calling function input("Enter value: Displaying result print("You entered:",val) Output: Enter value: entered: Python int() Function Python int() function used integer value. returns expression converted into integer number. argument floating-point, conversion truncates number. argument outside integer range, then converts number into long type. number number base given, number must string. Python int() Function Example Calling function int(10) integer value val2 int(10.52) float value val3 int('10') string value Displaying result print("integer values :",val, val2, val3) Output: integer values Python isinstance() Function Python isinstance() function used check whether given object instance that class. object belongs class, returns true. Otherwise returns False. also returns true class subclass. isinstance() function takes arguments, i.e., object classinfo, then returns either True False. Python isinstance() function Example class Student: name "John" __init__(self, name): self.id=id self.name=name student Student(1010,"John") [12,34,5,6,767] Calling function print(isinstance(student, Student)) isinstance Student class print(isinstance(lst, Student)) Output: True False Python oct() Function Python oct() function used octal value integer number. This method takes argument returns integer converted into octal string. throws error TypeError, argument type other than integer. Python oct() function Example Calling function oct(10) Displaying result print("Octal value 10:",val) Output: Octal value 0o12 Python ord() Function python ord() function returns integer representing Unicode code point given Unicode character. Python ord() function Example Code point integer print(ord('8')) Code point alphabet print(ord('R')) Code point character print(ord('&')) Output: Python pow() Function python pow() function used compute power number. returns power third argument(z) given, returns power modulus i.e. Python pow() function Example positive positive (x**y) print(pow(4, negative positive print(pow(-4, positive negative (x**-y) print(pow(4, -2)) negative negative print(pow(-4, -2)) Output: 0.0625 0.0625 Python print() Function python print() function prints given object screen other standard output devices. Python print() function Example print("Python programming language.") objects passed print("x Three objects passed print('x y') Output: Python programming language. Python range() Function python range() function returns immutable sequence numbers starting from default, increments default) ends specified number. Python range() function Example empty range print(list(range(0))) using range(stop) print(list(range(4))) using range(start, stop) print(list(range(1,7 ))) Output: Python reversed() Function python reversed() function returns reversed iterator given sequence. Python reversed() function Example string String 'Java' print(list(reversed(String))) tuple Tuple ('J', 'a', 'v', 'a') print(list(reversed(Tuple))) range Range range(8, print(list(reversed(Range))) list List print(list(reversed(List))) Output: ['a', 'v', 'a', 'J'] ['a', 'v', 'a', 'J'] [11, Python round() Function python round() function rounds digits number returns floating point number. Python round() Function Example integers print(round(10)) floating point print(round(10.8)) even choice print(round(6.6)) Output: Python issubclass() Function python issubclass() function returns true object argument(first argument) subclass second class(second argument). Python issubclass() Function Example class Rectangle: __init__(rectangleType): print('Rectangle rectangleType) class Square(Rectangle): __init__(self): Rectangle.__init__('square') print(issubclass(Square, Rectangle)) print(issubclass(Square, list)) print(issubclass(Square, (list, Rectangle))) print(issubclass(Rectangle, (list, Rectangle))) Output: True False True True Python python str() converts specified value into string. Python str() Function Example str('4') Output: Python tuple() Function python tuple() function used create tuple object. Python tuple() Function Example tuple() print('t1=', creating tuple from list tuple([1, print('t2=', creating tuple from string tuple('Java') print('t1=',t1) creating tuple from dictionary tuple({4: 'four', 'five'}) print('t1=',t1) Output: t2= ('J', 'a', 'v', 'a') Python type() python type() returns type specified object single argument passed type() built function. three arguments passed, then returns type object. Python type() Function Example List print(type(List)) Dict 'four', 'five'} print(type(Dict)) class Python: InstanceOfPython Python() print(type(InstanceOfPython)) Output: <class 'list'> <class 'dict'> <class '__main__.Python'> Python vars() function python vars() function returns __dict__ attribute given object. Python vars() Function Example class Python: __init__(self, 9): self.x self.y InstanceOfPython Python() print(vars(InstanceOfPython)) Output: {'y': 'x': Python zip() Function python zip() Function returns object, which maps similar index multiple containers. takes iterables (can zero more), makes iterator that aggregates elements based iterables passed, returns iterator tuples. Python zip() Function Example numList [4,5, strList ['four', 'five', 'six'] iterables passed result zip() Converting itertor list resultList list(result) print(resultList) iterables passed result zip(numList, strList) Converting itertor resultSet set(result) print(resultSet) Output: {(5, 'five'), 'four'), 'six')} Next TopicPython Lambda Functions prev next