next prev Image Steganography using Python modern world computation revolves around word "Data". However, data fascinating? this modern world, people starting realize significance data order expand scope their businesses. Business owners used data potentially predict customer trends, increase sales, push organization newer heights. With help rapid advancement technology data nonstop revolution, become chief importance secure data. Data sharing also increased thousands messages data being transmitted internet day-to-day from place another. Data protection concern sender, and, significantly, encrypt message secret method that only receiver understand. following tutorial, will understand concept Steganography along with practical implementation using Python programming language. Understanding concept Steganography Steganography refers process hiding secret message within larger such manner that someone cannot know presence contents hidden message. objective Steganography maintain secret communication between parties. Unlike Cryptography, where conceal contents secret message, Steganography conceals fact that message transmitted. Even though Steganography differs from Cryptography, there various analogies between two. Some authors classify Steganography form Cryptography hidden communication seems like secret message. Understanding benefits using Steganography over Cryptography know, Cryptography always ultimate role protecting confidentiality between sender expected receiver. However, usage methods Steganography besides Cryptography increased gradually include more protective layers hidden data. benefits utilizing Steganography over Cryptography alone that proposed secret message does attract attention itself object scrutiny. Visible encrypted messages, matter unbreakable they are, arouse interest themselves convicting countries where encryption illegal. Understanding types Steganography works Steganography have been carried various transmission media, categorizing into different types: Text Steganography Image Steganography Video Steganography Audio Steganography Network Steganography E-mail Steganography Now, understand basic model Steganography Basic Model Steganography observe above image, both actual file secret message (M) that must hidden into steganographic encoder input. Steganographic Encoder function, f(X, M, embeds secret message into cover image file using techniques like least significant encoding. resulting stego image looks very similar your cover image file, with visible changes. This completes encoding. retrieve secret message, stego object into Steganographic Decoder. This tutorial will support implementing image steganography with help Python programming language. will help write Python script order hide text messages using technique known Least Significant Bit. Understanding Least Significant Steganography describe digital image finite digital values, known Pixels. Pixels smallest individual element image, holding values representing brightness particular colour specific point. Thus, think image matrix two-dimensional array) pixels consisting static number rows columns. Least Significant Bit) method where modify last every pixel, replacing them with data secret message. From above image, observe that alter Most Significant MSB), will have larger impact final values; however, alter Least Significant LSB), impact final value minimal. Hence, Least Significant (LSB) Steganography. Understanding working Least Significant technique Each pixel consists three values Red, Green, Blue. These values range from 255, which means that they 8-bit values. understand working this technique using example. Suppose that want hide message "hi" into image size 4x4, which pixel values shown below: [(225, 99), (155, 50), (99, 15), (15, 22), (155, 87), (63, 17), 19), (99, 66), (219l, 91), (69, 50), (18, 200, 33), (25, 190)] With help ASCII Table, convert secret message into decimal values then into binary form: 0110100 0110101. Now, iterate through pixel values after one. Once convert them into binary, replace each least significant with that message bits sequential manner (For instance, binary 11100001, then replace last bit, right (1), with initial data on). This will allow modify values pixel only, which perceptible all. output values pixels after performing LSBS follows: [(224, 99), (154, 50), (98, 15), (15, 23), (154, 87), (63, 17), 19), (99, 66), (219, 91), (69, 50), (18, 200, 33), (25, 190)] Hiding Text within Image using Python following section mainly focuses step-by-step approach hide reveal process with help Python script. steps this approach follows: Step Importing required Python libraries. Step Defining function convert type data into binary, will this convert secret data pixels' values into binary encoding decoding phase. Step Defining another function hide secret message image changing LSB. Step Writing function decode hidden message from Steganographic image. Step Writing another function that accepts user's image name secret message calls hide_data() function encode message. Step Defining function user enter image name that requires decoded call show_data() function return decoded message. Step Defining main function. above steps action: Importing Python libraries will start importing necessary libraries that need project. used libraries found system, install using installer. consider following Python script understand same: Example: importing required libraries import import numpy import types Explanation: above snippet code, have imported OpenCV library along with NumPy types libraries. Converting Types Binary will define function order convert type data into binary. will using this method convert secret data pixel values binary encoding decoding phase. consider following Python script understand same: Example: converting types binary msg_to_bin(msg): type(msg) str: return ''.join([format(ord(i), "08b") msg]) elif type(msg) bytes type(msg) np.ndarray: return [format(i, "08b") msg] elif type(msg) type(msg) np.uint8: return format(msg, "08b") else: raise TypeError("Input type supported") Output: Explanation: above snippet, have defined function msg_to_bin() that accepts parameter form data input user. have then used if-elif-else conditional statements check data type input secret data form message image convert them into Binary. Hiding Secret Data Image Once conversion into binary format complete, will define function order hide secret message image changing Least Significant Bit. consider following script understand same: Example: defining function hide secret message into image hide_data(img, secret_msg): calculating maximum bytes encoding nBytes img.shape[0] img.shape[1] print("Maximum Bytes encoding:", nBytes) checking whether number bytes encoding less than maximum bytes image len(secret_msg) nBytes: raise ValueError("Error encountered insufficient bytes, need bigger image less data!!") secret_msg '#####' utilize string delimiter dataIndex converting input data binary format using msg_to_bin() function bin_secret_msg msg_to_bin(secret_msg) finding length data that requires hidden dataLen len(bin_secret_msg) values img: pixels values: converting values binary format msg_to_bin(pixels) modifying only there data remaining store dataIndex dataLen: hiding data into pixel pixels[0] int(r[:-1] bin_secret_msg[dataIndex], dataIndex dataIndex dataLen: hiding data into Green pixel pixels[1] int(g[:-1] bin_secret_msg[dataIndex], dataIndex dataIndex dataLen: hiding data into Blue pixel pixels[2] int(b[:-1] bin_secret_msg[dataIndex], dataIndex data encoded, break loop dataIndex dataLen: break return Explanation: above snippet code, have defined function that accepts parameters form image file secret message. have then calculated maximum bytes encoding checked number bytes encode less than maximum bytes image. have then index data converted secret data into binary. then found length data used for-loop iterate through pixel values image, convert values binary format, hide data each pixel. Decoding hidden message from Steganographic image Now, will write function decode hidden message from Steganographic image. consider following script understand same: Example: show_data(img): bin_data values img: pixels values: converting Red, Green, Blue values into binary format msg_to_bin(pixels) data extraction from pixel bin_data r[-1] data extraction from Green pixel bin_data g[-1] data extraction from Blue pixel bin_data b[-1] splitting 8-bits allBytes [bin_data[i: range(0, len(bin_data), converting from bits characters decodedData bytes allBytes: decodedData chr(int(bytes, checking have reached delimiter which "#####" decodedData[-5:] "#####": break print(decodedData) removing delimiter display actual hidden message return decodedData[:-5] Explanation: above snippet code, have defined show_data() function that accepts image file. Within this function, have defined empty binary data used for-loop iterate through image pixels convert pixels into binary format. have also extracted data from each pixel, have then split them 8-bits converted them characters. last, checked delimiter removed display actual hidden message. Encoding message will define function that accepts name image secret message from user. will also call hide_data() function order encode message. consider following script understand same: Example: defining function encode data into Image encodeText(): img_name input("Enter image name (with extension): reading input image using OpenCV-Python cv2.imread(img_name) printing details image print("The shape image img.shape) checking image shape calculate number bytes print("The original image shown below: resizing image need resizedImg cv2.resize(img, (500, 500)) displaying image cv2_imshow(resizedImg) data input("Enter data encoded: (len(data) raise ValueError('Data Empty') file_name input("Enter name encoded image (with extension): calling hide_data() function hide secret message into selected image encodedImage hide_data(img, data) cv2.imwrite(file_name, encodedImage) Explanation: above snippet code, have defined function encodeText() encode secret message along with image. Within function, have asked user name image file using input() function used OpenCV library read that file. have then printed details image along with image itself. have then asked user text message encoded file name encoded image. last, have called hide_data() function order hide secret message selected image. Decoding message Now, will define function user enter name image file that decoded call show_data() function order return decoded message. consider following Python script illustrates same: Example: defining function decode data image decodeText(): reading image containing hidden image img_name input("Enter name Steganographic image that decoded (with extension): cv2.imread(img_name) reading image using imread() function print("The Steganographic image follow: resizedImg cv2.resize(img, (500, 500)) resizing actual image needs cv2_imshow(resizedImg) displaying Steganographic image text show_data(img) return text Explanation: above snippet code, have defined another function decodeText() that allows user decode image file. Within this function, have asked user name image file that decoded read same using functions OpenCV library. have then resized image displayed Steganographic image. have also extracted secret text data from image file calling show_data() function returning text users. main function will main function order commence operation image steganography. will include menu user either encode data decode continue execution afterward. consider following Python script demonstrating same: Example: image ste image steganography steganography(): int(input("Image Steganography \n1. Encode data \n2. Decode data Select option: print("\nEncoding...") encodeText() elif print("\nDecoding...") print("Decoded message decodeText()) else: raise Exception("Inserted value incorrect!") steganography() encoding image Explanation: above snippet code, have defined main function steganography(). created menu within this function asked users their input 'int' data type. have then used if-elif-else conditional statements execute function user input. last, have called this main function execute program. complete program code output after execution. Complete Program File: imgSteganography.py importing required libraries import import numpy import types from google.colab.patches import cv2_imshow converting types binary msg_to_bin(msg): type(msg) str: return ''.join([format(ord(i), "08b") msg]) elif type(msg) bytes type(msg) np.ndarray: return [format(i, "08b") msg] elif type(msg) type(msg) np.uint8: return format(msg, "08b") else: raise TypeError("Input type supported") defining function hide secret message into image hide_data(img, secret_msg): calculating maximum bytes encoding nBytes img.shape[0] img.shape[1] print("Maximum Bytes encoding:", nBytes) checking whether number bytes encoding less than maximum bytes image len(secret_msg) nBytes: raise ValueError("Error encountered insufficient bytes, need bigger image less data!!") secret_msg '#####' utilize string delimiter dataIndex converting input data binary format using msg_to_bin() function bin_secret_msg msg_to_bin(secret_msg) finding length data that requires hidden dataLen len(bin_secret_msg) values img: pixels values: converting values binary format msg_to_bin(pixels) modifying only there data remaining store dataIndex dataLen: hiding data into pixel pixels[0] int(r[:-1] bin_secret_msg[dataIndex], dataIndex dataIndex dataLen: hiding data into Green pixel pixels[1] int(g[:-1] bin_secret_msg[dataIndex], dataIndex dataIndex dataLen: hiding data into Blue pixel pixels[2] int(b[:-1] bin_secret_msg[dataIndex], dataIndex data encoded, break loop dataIndex dataLen: break return show_data(img): bin_data values img: pixels values: converting Red, Green, Blue values into binary format msg_to_bin(pixels) data extraction from pixel bin_data r[-1] data extraction from Green pixel bin_data g[-1] data extraction from Blue pixel bin_data b[-1] split 8-Bits allBytes [bin_data[i: range(0, len(bin_data), converting from bits characters decodedData bytes allBytes: decodedData chr(int(bytes, checking have reached delimiter which "#####" decodedData[-5:] "#####": break print(decodedData) removing delimiter display actual hidden message return decodedData[:-5] defining function encode data into Image encodeText(): img_name input("Enter image name (with extension): reading input image using OpenCV-Python cv2.imread(img_name) printing details image print("The shape image img.shape) checking image shape calculate number bytes print("The original image shown below: resizing image need resizedImg cv2.resize(img, (500, 500)) displaying image cv2_imshow(resizedImg) data input("Enter data encoded: (len(data) raise ValueError('Data Empty') file_name input("Enter name encoded image (with extension): calling hide_data() function hide secret message into selected image encodedImage hide_data(img, data) cv2.imwrite(file_name, encodedImage) defining function decode data image decodeText(): reading image containing hidden image img_name input("Enter name Steganographic image that decoded (with extension): cv2.imread(img_name) reading image using imread() function print("The Steganographic image follow: resizedImg cv2.resize(img, (500, 500)) resizing actual image needs cv2_imshow(resizedImg) displaying Steganographic image text show_data(img) return text image steganography steganography(): int(input("Image Steganography \n1. Encode data \n2. Decode data Select option: print("\nEncoding...") encodeText() elif print("\nDecoding...") print("Decoded message decodeText()) else: raise Exception("Inserted value incorrect!") steganography() encoding image Output Data Encoding: Image Steganography Encode data Decode data Select option: Encoding... Enter image name (with extension): my_image.jpg shape image (1080, 1920, original image shown below: Enter data encoded: python tutorial Enter name encoded image (with extension): testimage.jpg Maximum bytes encode: 589693 Output Data Decoding: Image Steganography Encode data Decode data Select option: Decoding... Enter name Steganographic image that decoded (with extension): testimage.jpg Steganographic image follow: Decoded message python tutorial Next TopicInconsistent tabs spaces indentation prev next