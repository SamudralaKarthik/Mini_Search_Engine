next prev Python Module Python module provides facility establish interaction between user operating system. offers many useful functions that used perform OS-based tasks related information about operating system. comes under Python's standard utility modules. This module offers portable using operating system dependent functionality. Python module lets work with files directories. work with module, need import module. import There some functions module which given below: os.name() This function provides name operating system module that imports. Currently, registers 'posix', 'nt', 'os2', 'ce', 'java' 'riscos'. Example import print(os.name) Output: os.mkdir() os.mkdir() function used create directory. Consider following example. import os.mkdir("d:\\newdir") will create directory path string argument function drive named folder newdir. os.getcwd() returns current working directory(CWD) file. Example import print(os.getcwd()) Output: C:\Users\Python\Desktop\ModuleOS os.chdir() module provides chdir() function change current working directory. import os.chdir("d:\\") Output: d:\\ os.rmdir() rmdir() function removes specified directory with absolute related path. First, have change current working directory remove folder. Example import will throw Permission error; that's have change current working directory. os.rmdir("d:\\newdir") os.chdir("..") os.rmdir("newdir") os.error() os.error() function defines level errors. raises OSError case invalid inaccessible file names path etc. Example import try: file does exist, then throw IOError filename 'Python.txt' open(filename, 'rU') text f.read() f.close() Control jumps directly here lines throws IOError. except IOError: print(os.error) will <class 'OSError'> print('Problem reading: filename) Output: Problem reading: Python.txt os.popen() This function opens file from command specified, returns file object which connected pipe. Example import "python.txt" popen() similar open() file open(fd, 'w') file.write("This awesome") file.close() file open(fd, 'r') text file.read() print(text) popen() provides gateway accesses file directly file os.popen(fd, 'w') file.write("This awesome") File closed, shown next function. Output: This awesome os.close() This function closes associated file with descriptor fr. Example import "Python1.txt" file open(fr, 'r') text file.read() print(text) os.close(file) Output: Traceback (most recent call last): File "main.py", line file open(fr, 'r') FileNotFoundError: [Errno such file directory: 'Python1.txt' os.rename() file directory renamed using function os.rename(). user rename file privilege change file. Example import "python.txt" os.rename(fd,'Python1.txt') os.rename(fd,'Python1.txt') Output: Traceback (most recent call last): File "main.py", line os.rename(fd,'Python1.txt') FileNotFoundError: [Errno such file directory: 'python.txt' 'Python1.txt' os.access() This function uses real uid/gid test invoking user access path. Example import import path1 os.access("Python.txt", os.F_OK) print("Exist path:", path1) Checking access with os.R_OK path2 os.access("Python.txt", os.R_OK) print("It access read file:", path2) Checking access with os.W_OK path3 os.access("Python.txt", os.W_OK) print("It access write file:", path3) Checking access with os.X_OK path4 os.access("Python.txt", os.X_OK) print("Check path executed:", path4) Output: Exist path: False access read file: False access write file: False Check path executed: False Next TopicPython Random module prev next