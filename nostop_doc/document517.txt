next prev Essential Recursion Programs Python Recursion important concept programming solve problems. Every beginner encounters with recursion even experience developers' recursion. familiar with recursion, function that called itself. example Place parallel mirrors facing each other, object appear between them, would reflected recursively. learn more about recursion, follow www.javatpoint.com/recursion-in-python. this tutorial, will solve some important Python problem using recursion. will help make good understanding recursion take approach solve problems. Let's these problems following. Find Number introductory famous problem recursion. factorial number calculated multiply number itself until one. Suppose want want factorial then will goes below. 0! 1x0! 1x1 2x1! 3x2! 3x2 4x3! 4x6 5x4! 5x24 that, calculating n*(n-1) repeatedly. Hence recursion. Here factorial recursion's base case below n==0 return fact(n) f(n-1) n<1 code will below. Example factorial(n): n==0: return else: return n*factorial(n-1) int(input("Enter number: print("The factorial ".format(num), factorial(num)) Output: Enter number: factorial Fibonacci Sequence most famous mathematical problem sometime also asked interview entry level jobs. this sequence, each number sequence numbers that precede series will 8,.â€¦so first element second hence third element first third element. Suppose want element Fibonacci series, preceding elements will fib(6) fib(5) fib(4) fib(5) fib(4) fib(3) fib(4) fib(3) fib(2) fib(3) fib(2) fib(1) sequence defined recurrence relation below. Fn-1 Fn-2 With seed values F0 Let's implement recurrence relation using Python code. Example fib(n) n==0: return elif ==1 return else return fib(n-1) +fib(n-2) int(input("Enter number: print("The {num} element fibonacci series ".format(num), fib(7)) Output: Enter number: element fibonacci series First Natural Numbers simple problem, where find natural number using recursion. Example sumnums(n): return return sumnums(n int(input("Enter number: "))print(sumnums(3)) print(sumnums(6)) print(sumnums(9)) Output: Enter number: Power Number find power number, there Base number Exponent. product multiplying number itself same number times exponent's value. exponent written above right base number. decreased every time when base number multiplied. Example power_of_num(num, topwr): topwr return else: return power_of_num(num, topwr print('{} power '.format(4, power_of_num(3, 7))) print('{} power '.format(2, power_of_num(4, 3))) Output: power 2187 power Least Common Multiple (LCM) Numbers mathematics, smallest common factor more numbers. example want find common factor then Multiples Multiples Least Common Factor Let's following example Example LCM(x, return return LCM(y, print("The least common factor LCM(4, 16)) Output: least common factor 16.0 Greatest Common Divisor (GCD) Numbers also known Highest Common Factor (HCF), highest common factor that divides both given numbers. example Suppose want find Here change value subtracting remain same =98 times Let's implement using Python code. Example gcd(a,b): 		return 		return base case recursion 		return when greater 		return gcd(a-b, when greater 	return gcd(a, b-a) if(gcd(a, b)): 	print('GCD of', 'and', 'is', gcd(a, else: 	print('not found') Output: Tower Hanoi famous mathematical puzzle where three rods have three disks. main task move entire stack another that should follow given rules Only disk moved time. most upper disk from stimulated move. smaller disk cannot placed lower largest disk Let's solve code using following example. Example Creating recursive function tower_of_hanoi(disks, source, auxiliary, target): if(disks print('Move disk from {}.'.format(source, target)) return function call itself tower_of_hanoi(disks source, target, auxiliary) print('Move disk from {}.'.format(disks, source, target)) tower_of_hanoi(disks auxiliary, source, target) disks int(input('Enter number disks: referring source auxiliary target tower_of_hanoi(disks, 'A', 'B', 'C') Calling function Output: Enter number disks: Move disk from Move disk from Move disk from Digits Number also recursion solve such problems. Suppose user enters 143, digits will 1+4+3 Let's understand following example. Example sumDigits(no): return else return int(no sumDigits(int(no 10)) nums int(input("Enter number: print("The is:", sumDigits(nums)) Output: Enter number: Merge Sort merge sort algorithm works Divide conquers most efficient algorithm. merge sort algorithm, given array breaks down several arrays until each array consists single element. After that, sorting performed merged into single array. Visit merge sort algorithm Python detailed explanations. Example merge_sort(list1): length len(list1) length middle length left_arr list1[:middle] right_arr list1[middle:] merge_sort(left_arr) merge_sort(right_arr) left_length len(left_arr) right_length len(right_arr) while left_length right_length: left_arr[p] right_arr[q]: list1[r] left_arr[p] else: list1[r] right_arr[q] while left_length: list1[r] left_arr[p] while right_length: list1[r] right_arr[q] list1 [24, print("Input Array: print(list1) merge_sort(list1) print("Sorted Array print(list1) Output: Input Array: [24, Sorted Array [11, Pascals Triangle Pascals triangle different kind triangle where each number above apart from edges, which '1'. Let's understand following code. Example pascal(n): return else: line previous_line pascal(n-1) range(len(previous_line)-1): line.append(previous_line[i] previous_line[i+1]) line return line int(input("Enter number: print(pascal(num)) Output: Enter number: Conclusion Recursion allows reduce number lines from code uses more memory. this tutorial, have discussed some simple problem that solved using recursion. These common problems asked programming interviews. Next TopicHow Design Hashset Python prev next