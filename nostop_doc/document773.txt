next prev Application live rate using Tkinter Python this lesson, we'll create Python project that lets convert between different currencies. We'll utilise tkinter library create user interface. Therefore, creating application current value INR. What Currency Converter There hundreds different currencies globe, each different value when compared others, thus need currency converter. order translate value money into another currency, need currency converter. This helps easily understand value particular currency currency. this project will focussing mainly current conversion rate United States Dollars (USD) Indian Rupees (INR). Requirements will using three different modules this project: Tkinter Requests request link extract data. Bs4 Python package called Beautiful Soup extract data from HTML files. These libraries installed with certain commands terminal, present already. install tkinter install requests install Steps followed Take information from provided URL. After choosing appropriate place, copy URL. Utilize requests BeautifulSoup module scrape data. that information into HTML Find necessary information, then filter Explanation Step Import necessary modules. Importing required modules into program import requests from import BeautifulSoup Step Creating method. Defining Method extracting html data getinfo(url): requests.get(url) return req.text Step order transform data (currency information) into HTML code, send into getinfo() method. Here's corresponding https://finance.yahoo.com/quote/usdinr=X?ltr=1 Extracting data then converting data extracted htmlinfo getinfo("https://finance.yahoo.com/quote/usdinr=X?ltr=1") soups BeautifulSoup(htmlinfo, 'html.parser') (soups.find_all("div", class_ "D(ib) Va(m) Maw(65%) Ov(h)") Output: Step Apply filters available data determine currency's specifics quality (increment/decrement). myinfostr Filtering data which converted table soup.find_all("div", class_ "D(ib) Va(m) Maw(65%) Ov(h)"): myinfostr table.get_text() Showing ultimate output print(myinfostr) Output: '74.3721-1.3801 (-0.39%) 7:30PM BST. Market open.' Walking through code Importing modules required code from tkinter import import requests from import BeautifulSoup Firstly, will import Tkinter requests module BeautifulSoup module's class into code. creating function extracting details regarding currency getinfo(url): requests.get(url) return req.text Then, will create method getinfo() generate details from store them variable after receiving using get() method. Creating function computing showing currency detalis get_data(): try: htmlinfo getinfo("https://finance.yahoo.com/quote/usdinr=X?ltr=1") soups BeautifulSoup(htmlinfo, 'html.parser') myinfostr table soups.find_all("div", class_ "D(ib) Va(m) Maw(65%) Ov(h)"): myinfostr table.get_text() list_info myinfostr.split() list_info[0].split("-") rate.set(tmp[0]) incr.set(tmp[1]) perrate.set(list_info[1]) time.set(list_info[3]) res.set("success") except: res.set("Oops! something wrong") Then, will create another method called get_data() order collect information from html version mentioned then convert required format from BeautifulSoup module storing different variables using set() method. Main Code creating instance tkinter object root Tk() Setting colour background window root.configure(bg 'light grey') Next, will start with main code program first creating window from Tkinter then setting it's background colour light grey, using configure() method. using Variable Classes inside tkinter StringVar() rate StringVar() perrate StringVar() time StringVar() incr StringVar() Then, created variable classes order store different data that displayed window. Creating label every data field Label(root, text "Status "light grey").grid(row sticky Label(root, text "Current rate "light grey").grid(row sticky Label(root, text "Incrrease/decrease "light grey").grid(row sticky Label(root, text "Rate change "light grey").grid(row sticky Label(root, text "Rate time "light grey").grid(row sticky Next, created labels using Label widget state heading respective text areas. position labels help grid() method. Creating label introduced class variables Label(root, text textvariable res, "light grey").grid(row column sticky Label(root, text textvariable rate, "light grey").grid(row column sticky Label(root, text textvariable incr, "light grey").grid( column sticky Label(root, text textvariable perrate, "light grey").grid(row column sticky Label(root, text textvariable time, "light grey").grid(row column sticky Then, defined corresponding labels headings created previously using Label widget displaying information extracted. these labels were placed precisely help grid() method. Creating submit button getting results Button(root, text "Show", command get_data, "Blue").grid(row Lastly, created Show button using Button widget, which clicking will show information extracted organized manner. This button will also positioned using grid() method. Complete code Python program create application live rate using Tkinter module. Importing modules required code from tkinter import import requests from import BeautifulSoup creating function extracting details regarding currency getinfo(url): requests.get(url) return req.text Creating function computing showing currency detalis get_data(): try: htmlinfo getinfo("https://finance.yahoo.com/quote/usdinr=X?ltr=1") soups BeautifulSoup(htmlinfo, 'html.parser') myinfostr table soups.find_all("div", class_ "D(ib) Va(m) Maw(65%) Ov(h)"): myinfostr table.get_text() list_info myinfostr.split() list_info[0].split("-") rate.set(tmp[0]) incr.set(tmp[1]) perrate.set(list_info[1]) time.set(list_info[3]) res.set("success") except: res.set("Oops! something wrong") Main Code creating instance tkinter object root Tk() Setting colour background window root.configure(bg 'light grey') using Variable Classes inside tkinter StringVar() rate StringVar() perrate StringVar() time StringVar() incr StringVar() Creating label every data field Label(root, text "Status "light grey").grid(row sticky Label(root, text "Current rate "light grey").grid(row sticky Label(root, text "Incrrease/decrease "light grey").grid(row sticky Label(root, text "Rate change "light grey").grid(row sticky Label(root, text "Rate time "light grey").grid(row sticky Creating label introduced class variables Label(root, text textvariable res, "light grey").grid(row column sticky Label(root, text textvariable rate, "light grey").grid(row column sticky Label(root, text textvariable incr, "light grey").grid( column sticky Label(root, text textvariable perrate, "light grey").grid(row column sticky Label(root, text textvariable time, "light grey").grid(row column sticky Creating submit button getting results Button(root, text "Show", command get_data, "Blue").grid(row Executing mainloop() Output: output aforementioned code creating application live rate using Tkinter attached below screenshot. Next TopicCreate First Application using PyQt5 Python prev next