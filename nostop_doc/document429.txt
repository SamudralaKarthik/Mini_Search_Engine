next prev Some Cryptocurrency Libraries Python know, without doubt that popularity Cryptocurrency risen steeply last years, trying understand working blockchain what Bitcoin annoying puzzling. There blockchains, contracts, ledgers, even more buzzwords than 'Big Data' revolution. Suppose want dip toes into world Cryptocurrency have some experience development. that case, this tutorial best choice about some publicly available libraries that Cryptocurrency. This easy method jump-start experience with Cryptocurrency involved community learn about technical side things. following tutorial, will explore some excellent Python libraries that allow perform various activities cryptocurrency world. will able live price quotes different coins, connect various exchanges, place trades even build live algorithmic trading very own. understand some best libraries Cryptocurrency offered Python programming language. will discovering about following Python libraries: CryptoCompare Cryptofeed FreqTrade CCXT will discuss above libraries brief. Understanding CryptoCompare library CryptoCompare among leading websites live cryptocurrency price quotations information. This website been around since 2015 offers users latest crypto news, detailed coin information, market statistics. CryptoCompare also reviews various cryptocurrency exchanges, wallets, services arm buyers with possible latest information. CryptoCompare also offers data services fully functional API. This where cryptocompare library comes This Python library offers convenient wrapper CryptoCompare API. install cryptocurrency library using installer shown below: Syntax: pip3 install cryptocompare Once installation done, consider following usage this library current price Bitcoin against USD: Example: importing required library import cryptocompare using get_price() function the_price cryptocompare.get_price('BTC', 'USD') printing price print(the_price) Output: {'BTC': {'USD': 48146.45}} Explanation: above snippet code, have imported required module. have then used get_price() function return current price Bitcoin against USD. last, have printed price users. above example only scratches surface what CryptoCompare capable also submit orders exchange, look historical prices, present market information. also visit official website CryptoCompare even more live statistics data. link same follows: https://www.cryptocompare.com/ Understanding Cryptofeed library Cryptofeed library more complicated than simple wrapper like cryptocompare. Cryptofeed allows programmers stream market data from various exchanges application directly. custom functions handle each update, store data supported backends utilize data construct live trading application. This library high level complexity hard understand initially; however, extremely powerful. order started, install cryptofeed library using installer shown below: Syntax: pip3 install cryptofeed There variety examples implement Cryptofeed offered repository; however, will looking simplified version obtaining National Best Bid Offer (NBBO) example: Example: from cryptofeed import FeedHandler from cryptofeed.exchanges import Coinbase nbboUpdate(symbol, bid, bid_size, ask, ask_size, bid_feed, ask_feed): print( f'Pair: {symbol} f'Bid Price: {bid .2f} f'Bid Size: {bid_size .6f} f'Bid Feed: {bid_feed} f'Ask Price: {ask .2f} f'Ask Size: {ask_size .6f} f'Ask Feed: {ask_feed}' main(): the_feed FeedHandler() the_feed.add_nbbo([Coinbase], ['BTC-USD'], nbboUpdate) the_feed.run() __name__ "__main__": main() Explanation: above snippet code, have imported required modules from library. have then defined function nbboUpdate() where have included some parameters like symbol, bid, bid_size, ask, ask_size, bid_feed, ask_feed print their values altogether. have then defined main() function where have assigned variable FeedHandler method. have then used add_nbbo() function specifying exchange symbol. have then used run() function execute operation. last, have called main() function. execute above program, handler will stream current NBBO information offered Coinbase exchange. output will printed console able view what going There volumes, must prepared lots information. This snippet code will loop, updating with most recent data until exit. Cryptofeed library fantastic resource build high-quality applications cryptocurrency trading. check detailed documentation more useful examples updated exchange info. https://github.com/bmoscon/cryptofeed Understanding Freqtrade library This specifically single Python library; however, excellent example Python trading application. This application entirely written Python programming language. enables custom trading bot, complete with large range trading strategies responding various commands. Freqtrade provides supports multiple exchanges offers simple integration with Telegram. Another amazing fact about Freqtrade that trading strategies also written Python. have mess around with another unfamiliar language download configuration files order simple strategy. order begin with Freqtrade, head over installation section official documentation using following link: https://www.freqtrade.io/en/latest/installation/ also even running quacking with help Docker. Understanding CCXT library CCXT considered truly monolithic trading library. This library plethora features very supportive community. This library provided JavaScript, PHP, Python simple, easy-to-utilize modules. CCXT quite like Cryptofeed; however, must easier started with. have content with loop constant stream data. simply make calls CCXT orders, exchange info, many more. install CCXT module using installer shown below: Syntax: pip3 install ccxt Once installation complete, consider following example demonstrating operation obtaining latest trade data from Kraken exchange. Example: importing required module import ccxt using kraken() function the_kraken ccxt.kraken() using for-loop iterate through trades kraken trade the_kraken.fetch_trades('BTC/USD'): print( f"date: {trade['datetime']} f"symbol: {trade['symbol']} f"price: {trade['price']} f"amount: {trade['amount']} f"cost: {trade['cost']} f"side: {trade['side']} f"type: {trade['type']}" Output: date: 2021-12-16T10:00:43.897Z symbol: BTC/USD price: 48936.7 amount: 0.00096371 cost: 47.160787157 side: type: limit date: 2021-12-16T10:00:47.152Z symbol: BTC/USD price: 48936.5 amount: 0.03011824 cost: 1473.88125176 side: type: limit date: 2021-12-16T10:01:06.050Z symbol: BTC/USD price: 48963.6 amount: 0.00012934 cost: 6.332952024 side: type: market date: 2021-12-16T10:01:11.162Z symbol: BTC/USD price: 48961.1 amount: 0.02751697 cost: 1347.261119867 side: type: market date: 2021-12-16T10:01:24.230Z symbol: BTC/USD price: 48971.3 amount: 0.02043248 cost: 1000.605107824 side: sell type: limit date: 2021-12-16T10:01:25.279Z symbol: BTC/USD price: 48971.3 amount: 0.02043248 cost: 1000.605107824 side: sell type: limit date: 2021-12-16T10:01:26.483Z symbol: BTC/USD price: 48971.3 amount: 0.00634731 cost: 310.836022203 side: sell type: limit date: 2021-12-16T10:01:27.653Z symbol: BTC/USD price: 48971.4 amount: 0.00160946 cost: 78.817509444 side: type: limit date: 2021-12-16T10:01:28.176Z symbol: BTC/USD price: 48971.4 amount: 0.00013384 cost: 6.554332176 side: type: market date: 2021-12-16T10:01:28.177Z symbol: BTC/USD price: 48977.2 amount: 0.00204177 cost: 100.000177644 side: type: market date: 2021-12-16T10:01:28.178Z symbol: BTC/USD price: 48978.0 amount: 0.00082439 cost: 40.37697342 side: type: market date: 2021-12-16T10:01:28.434Z symbol: BTC/USD price: 48978.4 amount: 0.0204306 cost: 1000.65809904 side: sell type: limit date: 2021-12-16T10:01:29.471Z symbol: BTC/USD price: 48978.4 amount: 0.020432 cost: 1000.7266688 side: sell type: limit date: 2021-12-16T10:01:30.524Z symbol: BTC/USD price: 48978.4 amount: 0.02043201 cost: 1000.727158584 side: sell type: limit date: 2021-12-16T10:01:31.592Z symbol: BTC/USD price: 48978.5 amount: 0.020432 cost: 1000.728712 side: sell type: limit date: 2021-12-16T10:01:31.788Z symbol: BTC/USD price: 48978.6 amount: 0.003 cost: 146.9358 side: type: market date: 2021-12-16T10:01:32.644Z symbol: BTC/USD price: 48978.5 amount: 0.020432 cost: 1000.728712 side: sell type: limit date: 2021-12-16T10:01:33.157Z symbol: BTC/USD price: 48978.6 amount: 0.013 cost: 636.7218 side: type: market date: 2021-12-16T10:01:33.752Z symbol: BTC/USD price: 48978.5 amount: 0.00640702 cost: 313.80622907 side: sell type: limit date: 2021-12-16T10:01:36.476Z symbol: BTC/USD price: 48984.2 amount: 0.02042724 cost: 1000.612009608 side: sell type: limit date: 2021-12-16T10:01:36.564Z symbol: BTC/USD price: 48985.8 amount: 0.004 cost: 195.9432 side: type: market date: 2021-12-16T11:03:23.696Z symbol: BTC/USD price: 49169.3 amount: 0.0002 cost: 9.83386 side: type: market date: 2021-12-16T11:03:23.697Z symbol: BTC/USD price: 49169.4 amount: 0.0002 cost: 9.83388 side: type: market date: 2021-12-16T11:03:23.698Z symbol: BTC/USD price: 49169.5 amount: 0.04488859 cost: 2207.149526005 side: type: market date: 2021-12-16T11:03:24.363Z symbol: BTC/USD price: 49169.4 amount: 0.00057311 cost: 28.179474834 side: sell type: limit date: 2021-12-16T11:03:24.364Z symbol: BTC/USD price: 49169.2 amount: 0.0010087 cost: 49.59697204 side: sell type: limit date: 2021-12-16T11:03:33.278Z symbol: BTC/USD price: 49169.3 amount: 0.0002 cost: 9.83386 side: type: market date: 2021-12-16T11:03:33.280Z symbol: BTC/USD price: 49169.4 amount: 0.0001 cost: 4.91694 side: type: market date: 2021-12-16T11:03:33.281Z symbol: BTC/USD price: 49169.4 amount: 0.0001 cost: 4.91694 side: type: market date: 2021-12-16T11:03:33.282Z symbol: BTC/USD price: 49169.4 amount: 0.002006 cost: 98.6338164 side: type: market Explanation: above snippet code, have imported required library assigned variable kraken() function. have then used fetch_trade() extract details about various prices, amounts, timestamps, etc., print them using for-loop print function. Once execute above code, should view long list trade executions with details about price, amount, timestamp, many more. data fetched list consisting trade information versus stream data. CCXT library also offers asynchronous concurrency mode support. Anyone interested read more about implementation from official documentation using following link: https://github.com/ccxt/ccxt/wiki/Manual#synchronous-vs-asynchronous-calls CCXT offers flexible utility with compatibility across different languages, exchanges, platforms. This well-thought-out, well-supported platform allows programmers construct pragmatic trading applications. Next TopicBuilding Blockchain using Python prev next