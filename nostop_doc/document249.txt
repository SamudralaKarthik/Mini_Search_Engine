next prev Python KeyError data structure Python that maps into another values. Python dictionary most widely used mapping. assigned each value, which used value. keyerror happens when does exist mapping that used look value. this article, going discuss Python keyerror keyerror handling with their examples. before discussing Python keyerror, will know about dictionary Python. Dictionary Python dictionary (dict) Python discrete collection values containing stored data values equivalent map. differs from other data types that only element, which single value. contains value pair. more efficient because value. colon denotes separation value pair, comma denotes separation each key. This Python dictionary works same regular dictionary. keys must unique made unchangeable data types, including strings, integers, tuples. example: Let's take example understand dictionary (dict) python. null Dictionary Dict print("Null dict: print(Dict) Dictionary using Integers Dict 'Hill', 'And', 'Mountin'} print("nDictionary with Integers: print(Dict) Dictionary using Mixed keys Dict {'Name': 'John', [17, 51]} print("nDictionary with Mixed Keys: print(Dict) Dictionary using dict() method Dict dict({1: 'London', 'America', 3:'France'}) print("nDictionary with dict(): print(Dict) Dictionary having each item Pair Dict dict([(1, 'Hello'), 'World')]) print("nDictionary with each item pair: print(Dict) Output: After executing this above code, will output shown below: Null dict: nDictionary with Integers: 'Hill', 'And', 'Mountin'} nDictionary with Mixed Keys: {'Name': 'John', [17, 51]} nDictionary with dict(): 'London', 'America', 'France'} nDictionary with each item pair: 'Hello', 'World'} Keyerror Python When access from dict that does exist, Python raises Keyerror. It's built-in exception class raised several modules that interact with dicts objects containing key-value pairs. Now, know that what Python dictionary works. look what defines Keyerror. Python raises Keyerror whenever want access that isn't Python dictionary. Mapping logic data structure that connects piece data other significant data. result, when mapping accessed found, error raised. It's similar lookup error, where semantic fault that we're seeking isn't memory. better represented below example. example: Let's take example understand Keyerror Python. take keys which present python dictionary. Although, remaining keys present dictionary show output correctly, shows keyerror. Check Keyerror ages={'A':45,'B':51,'C':67} print(ages['A']) print(ages['B']) print(ages['C']) print(ages['D']) Output: After executing this above code, will output shown below: Traceback (most recent call last): File line KeyError: Handling Mechanism keyerror Python Anyone comes across Keyerror deal with responsibly. examine possible inputs specific program correctly manage risky entries. When KeyError, there conventional methods dealing with addition, some methods handling mechanism keyerror. usual solution: .get() method Some these options better exact solution searching for, depending case. However, ultimate goal prevent unexpected error exceptions from occurring. example, obtain error from dictionary code, .get() method either specified default value. Example: Let's take example understand handle mechanism keyerror Python. List vehicles their prices. vehicles {"Car=": 300000, "Byke": 115000, "Bus": 250000} vehicle input("Get price for: vehicle1 vehicles.get(vehicle) vehicle1: print("{vehicle} {vehicle1} rupees.") else: print("{vehicle}'s cost unknown.") Output: After executing this above code, will output shown below: price for: 300000 rupees. generic solution keyerror: try-except method common approach utilize try-except block address such issues raising relevant code providing backup solution. example: Let's take example understand apply generic solution keyerror. Creating dictionary store items prices items {"Pen" "12", "Book" "45", "Pencil" "10"} try: print (items["Book"]) except: print ("The items does contain record this key.") Output: After executing this code, will output shown below: Here that getting value book from items. Therefore, want print other key-value which items, will print this output. Creating dictionary store items prices items {"Pen" "12", "Book" "45", "Pencil" "10"} try: print (items["Notebook"]) except: print ("The items does contain record this key.") Output: After executing this code, will output shown below: items does contain record this key. Conclusion Now, understand some common scenarios which Python's Keyerror exception thrown, well several excellent strategies preventing them from terminating program. next time encounter Keyerror, we'll know it's most likely faulty dictionary lookup. looking last lines traceback, information would need figure where problem comes from. issue dictionary lookup code, safer .get() function with default return value instead querying directly dictionary. code doesn't cause issue, try-except block best bet regulating flow code. Exceptions have scary. utilize these methods make programs flow more predictably comprehend information presented their tracebacks root cause error. Next TopicPython super() Function prev next