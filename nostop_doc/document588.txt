next prev handle Time zones Python this tutorial, will define work with different timezones Python. will also learn about local time zone Python. Timezone described geographical area where standard time observed. Let's have brief introduction timezone. will Python's pytz library work with timezone. What Timezone? Timezone defined standard time depending geographical representation that place. other words, timezone refers local time particular region based earth's rotation. defined (Coordinated Universal Time), standard against which world's region-based time coordinated. Note recommended your base timezone. Example Singapore hours ahead India timezone North either hours behind represented UTC-5 UTC-6 based light. Let's following table different timezones across world. Python pytz Library Python pytz Olson database into Python supports almost timezones. This module allows with date-time conversion functionalities serve international base client. also perform calculations project requirement also create timezone aware datetime instances. also solve problem ambiguous times light. Installation need install system work with timezone. install using below command. install pytz above command will install pytz your machine. recommended install virtual environment. Python comes with DateTime.tzinfo() abstract base class. This class allows handle timezone. good practice instantiate directly. information about particular time zone, need create subclass DateTime.tzinfo(). pytz library overcomes this demerits, implanted timzone class handling arbitrary fixed offset from timezones UTC. Example current time Python, datetime.now() functions. However, this method doesn't return timzone. Using timezone, pass timezone this function will return current datetime given timezone. pytz Attributes pytz provides three attributes methods work with timezone Python. pytz.utc pytz.timezone('region') pytz.astimezone() current time? current time, time module. following functions time module. localtime()- allows current local time. strftime("%H:%M:%S", t)- allows define format time used display time. Example import time current_time time.localtime() current_clock time.strftime("%H:%M:%S", current_time) print("The current timezone is:", current_clock) Output: current timezone 21:22:41 current time zone region standard UTC. Create Timezone Na誰ve Datetime Object data object defined with without timezones Python. This object also known Aware Na誰ve. holds timezone value, aware data object defined with without timezones Python. This object also known Aware Na誰ve. holds timezone value, aware Datetime object; others, na誰ve object default. Let's understand following example creating timezone object. Example from datetime import datetime import pytz current Datetime unaware_object datetime.now() print('Timezone naive:', unaware_object) Standard timezone aware Datetime aware_object datetime.now(pytz.utc) print('Timezone Aware:', aware_object) US/Central timezone datetime aware_us_central datetime.now(pytz.timezone('US/Central')) print('US Central DateTime', aware_us_central) Output: Timezone naive: 2022-05-08 11:38:01.362134 Timezone Aware: 2022-05-08 06:08:01.363137+00:00 Central DateTime 2022-05-08 01:08:11.323668-05:00 Explanation above code, have used pytz.utc parameter datetime.now() function. offset +0.00 which standard offset. another line, used 'US/Central' region create timezone. offset -05:00 offset CDT region. pytz library large lists timezone, print timezones using below code. import pytz timezone pytz.all_timezones: print(timezone) Output: ['Africa/Abidjan', 'Africa/Accra', 'Africa/Addis_Ababa', 'Africa/Algiers', 'Africa/Asmara', 'Africa/Asmera', 'Africa/Bamako', 'Africa/Bangui', 'Africa/Banjul', 'Africa/Bissau', 'Africa/Blantyre', 'Africa/Brazzaville', 'Africa/Bujumbura', 'Africa/Cairo', 'Africa/Casablanca', 'Africa/Ceuta', 'Africa/Conakry', 'Africa/Dakar', 'Africa/Dar_es_Salaam', 'Africa/Djibouti', 'Africa/Douala', 'Africa/El_Aaiun', 'Africa/Freetown', 'Africa/Gaborone', 'Africa/Harare', 'Africa/Johannesburg', 'Africa/Juba', 'Africa/Kampala', 'Africa/Khartoum', 'Africa/Kigali', 'Africa/Kinshasa', 'Canada/Pacific', 'Canada/Saskatchewan', 'Canada/Yukon', 'Chile/Continental', 'Chile/EasterIsland', 'Cuba', 'EET', 'EST', 'EST5EDT', 'Egypt', 'Eire', 'Etc/GMT', 'Etc/GMT+0', 'Etc/GMT+1', 'Etc/GMT+10', 'Etc/GMT+11', 'Etc/GMT+12', 'Etc/GMT+2', 'Etc/GMT+3', 'Etc/GMT+4', 'Etc/GMT+5', 'Etc/GMT+6', 'Etc/GMT+7', 'Etc/GMT+8', 'Etc/GMT+9', 'Etc/GMT-0', 'Etc/GMT-1', 'Etc/GMT-10', 'Etc/GMT-11', 'Etc/GMT-12', 'Etc/GMT-13', 'Etc/GMT-14', 'Etc/GMT-2', 'Etc/GMT-3', 'Etc/GMT-4', 'Etc/GMT-5', 'Etc/GMT-6', 'Etc/GMT-7', 'Etc/GMT-8', 'Etc/GMT-9', 'Etc/GMT0', 'Etc/Greenwich', 'Etc/UCT', 'Etc/UTC', 'Etc/Universal', 'Etc/Zulu', 'Europe/Amsterdam', 'Europe/Andorra', 'Europe/Astrakhan', 'Europe/Athens', 'Europe/Belfast', 'Europe/Belgrade', 'Europe/Berlin', 'Europe/Bratislava', 'Europe/Brussels', 'Europe/Bucharest', 'Europe/Budapest', 'Europe/Busingen', 'Europe/Chisinau', 'Europe/Copenhagen', 'Europe/Dublin', 'Europe/Gibraltar', 'Europe/Guernsey', 'Europe/Helsinki', 'Europe/Isle_of_Man', 'Europe/Istanbul', 'Europe/Jersey', 'Europe/Kaliningrad', 'Europe/Kiev', 'Europe/Kirov', 'Europe/Lisbon', 'Europe/Ljubljana', 'Europe/London', 'Europe/Luxembourg', 'Europe/Madrid', 'Europe/Malta', 'Europe/Mariehamn', 'Europe/Minsk', 'Europe/Monaco', 'Europe/Moscow', 'Europe/Nicosia', 'Europe/Oslo', 'Europe/Paris', 'Europe/Podgorica', 'Europe/Prague', 'Europe/Riga', 'Europe/Rome', 'Europe/Samara', 'Europe/San_Marino', 'Europe/Sarajevo', 'Europe/Saratov', 'Europe/Simferopol', 'Europe/Skopje', 'Europe/Sofia', 'Europe/Stockholm', 'Europe/Tallinn', 'Europe/Tirane', 'Europe/Tiraspol', 'Europe/Ulyanovsk', 'Europe/Uzhgorod', 'Europe/Vaduz', 'Europe/Vatican', 'Europe/Vienna', 'Europe/Vilnius', 'Europe/Volgograd', 'Europe/Warsaw', 'Europe/Zagreb', 'Europe/Zaporozhye', 'Europe/Zurich', 'GB', 'GB-Eire', 'GMT', 'GMT+0', 'GMT-0', 'GMT0', 'Greenwich', 'HST', 'Hongkong', 'Iceland', 'Indian/Antananarivo', 'Indian/Chagos', 'Indian/Christmas', 'Indian/Cocos', 'Indian/Comoro', 'Indian/Kerguelen', 'Indian/Mahe', 'Indian/Maldives', 'Indian/Mauritius', 'Indian/Mayotte', 'Indian/Reunion', 'Iran', 'Israel', 'Jamaica', 'Japan', 'Kwajalein', 'Libya', 'MET', 'MST', 'MST7MDT', 'Mexico/BajaNorte', 'Mexico/BajaSur', 'Mexico/General', 'NZ', 'NZ-CHAT', 'Navajo', 'PRC',.............. 'Pacific/Efate', 'Pacific/Enderbury', 'Pacific/Fakaofo', 'Pacific/Fiji', 'Pacific/Funafuti', 'Pacific/Galapagos', 'Pacific/Gambier', 'Pacific/Guadalcanal', 'Pacific/Guam', 'Pacific/Honolulu', 'Pacific/Johnston', 'Pacific/Kiritimati', 'Pacific/Kosrae', 'Pacific/Kwajalein', 'Pacific/Majuro', 'Pacific/Marquesas', 'Pacific/Midway', 'Pacific/Nauru', 'Pacific/Niue', 'Pacific/Norfolk', 'Pacific/Noumea', 'Pacific/Pago_Pago', 'Pacific/Palau', 'Pacific/Pitcairn', 'Pacific/Pohnpei', 'Pacific/Ponape', 'Pacific/Port_Moresby', 'Pacific/Rarotonga', 'Pacific/Saipan', 'Pacific/Samoa', 'Pacific/Tahiti', 'Pacific/Tarawa', 'Pacific/Tongatapu', 'Pacific/Truk', 'Pacific/Wake', 'Pacific/Wallis', 'Pacific/Yap', 'Poland', 'Portugal', 'ROC', 'ROK', 'Singapore', 'Turkey', 'UCT', 'US/Alaska', 'US/Aleutian', 'US/Arizona', 'US/Central', 'US/East-Indiana', 'US/Eastern', 'US/Hawaii', 'US/Indiana-Starke', 'US/Michigan', 'US/Mountain', 'US/Pacific', 'US/Samoa', 'UTC', 'Universal', 'W-SU', 'WET', 'Zulu'] Current Time Different Timezone pytz module allows current date time timezone using below method. Syntax datetime.now(pytz.timezone('timezone name')) First, create timezone object using pytz.timezone('region name') function, pass this object datetime.now(timezone_obj) current datetime given timezone. Using above list timezone, will current timezone various timzones. Example from datetime import datetime import pytz dt_us_Buenos datetime.now(pytz.timezone('America/Argentina/Buenos_Aires')) print("US Buenos DateTime:", dt_us_Buenos.strftime("%Y:%m:%d %H:%M:%S %z")) dt_us_adak datetime.now(pytz.timezone('America/Adak')) print("US Adak timezone DateTime:", dt_us_adak.strftime("%Y:%m:%d %H:%M:%S %z")) dt_us_anchorage datetime.now(pytz.timezone('America/Anchorage')) print("US Eastern timezone DateTime:", dt_us_anchorage.strftime("%Y:%m:%d %H:%M:%S %z")) dt_us_chihuahua datetime.datetime.now(pytz.timezone('America/Chihuahua')) print("US Chihuahua timezone DateTime:", dt_us_chihuahua.strftime("%Y:%m:%d %H:%M:%S %z")) dt_us_belam datetime.now(pytz.timezone('America/Belem')) print("US Belam timezone DateTime:", dt_us_belam.strftime("%Y:%m:%d %H:%M:%S %z")) Output: Buenos DateTime: 2022:05:08 03:52:13 -0300 Adak timezone DateTime: 2022:05:07 21:52:13 HDT -0900 Eastern timezone DateTime: 2022:05:07 22:52:13 AKDT -0800 Michigan timezone DateTime: 2022:05:08 02:52:13 EDT -0400 Belam timezone DateTime: 2022:05:08 03:52:13 -0300 Explanation above code, have gotten current time different regions America. Example Timezone Different Country from datetime import datetime import pytz dt_israel datetime.now(pytz.timezone('Israel')) print("Israel DateTime:", dt_israel.strftime("%Y:%m:%d %H:%M:%S %z")) dt_rome datetime.now(pytz.timezone('Europe/Rome')) print("Rome DateTime:", dt_rome.strftime("%Y:%m:%d %H:%M:%S %z")) dt_amsterdam datetime.now(pytz.timezone('Europe/Amsterdam')) print("Amsterdam DateTime:", dt_amsterdam.strftime("%Y:%m:%d %H:%M:%S %z")) dt_hongkong datetime.now(pytz.timezone('Hongkong')) print("Hongkong DateTime:", dt_hongkong.strftime("%Y:%m:%d %H:%M:%S %z")) dt_jamaica datetime.now(pytz.timezone('Jamaica')) print("Jamaica DateTime:", dt_jamaica.strftime("%Y:%m:%d %H:%M:%S %z")) dt_turkey datetime.now(pytz.timezone('Turkey')) print("Turkey: DateTime:", dt_turkey.strftime("%Y:%m:%d %H:%M:%S %z")) Output: Israel DateTime: 2022:05:08 10:16:46 IDT +0300 Rome DateTime: 2022:05:08 09:16:46 CEST +0200 Amsterdam DateTime: 2022:05:08 09:16:46 CEST +0200 Hongkong DateTime: 2022:05:08 15:16:46 HKT +0800 Jamaica DateTime: 2022:05:08 02:16:46 EST -0500 Turkey: DateTime: 2022:05:08 10:16:46 +03 +0300 When code, returns current timezone various countries. Timezone Information Using tzinfo Using DateTime.tzinfo class, information about date time. tzinfo generally following information. timezone datetime. Daylight saving Offset from UTC. tzinfo class abstract class which class provides following methods timezone information. utcoffset(dt) returns total offset from UTC, which should timedelta object. time delta east UTC, time delta value will positive. time delta west UTC, time delta value will negative. local timezone both timezone values. Therefore, range time delta between timedelta hours=24 timedelta(hours=24). tzname(dt) This method returns time zone name corresponding datetime object. utcoffset(dt) This method used offset zones where effect. effect, will return only timedelta(0).The DTC information already part offset. Let's understand following example. Example from datetime import datetime import pytz timezone: Central Time dt_eur_london datetime.now(pytz.timezone('Europe/London')) print("Europe London DateTime:", dt_eur_london.strftime("%Y:%m:%d %H:%M:%S %z")) current TimeZone name print(dt_eur_london.tzname()) Offset print(dt_eur_london.utcoffset()) daylight saving time (DST offset) adjustment print(dt_eur_london.dst()) Output: Europe London DateTime: 2022:05:08 09:12:09 +0100 1:00:00 1:00:00 Converting Between Timezones convert datetime from timezone another timezone using datetime.astimezone() method. This method takes datetime object parameter returns datetime given timezone. Let's understand following example. Example import datetime import pytz timezone Datetime dt_local datetime.datetime.now(pytz.utc) print("UTC DateTime:", dt_local.strftime("%Y:%m:%d %H:%M:%S %z")) convert timezone 'US/Central' dt_us_hawaii dt_local.astimezone(pytz.timezone('US/Hawaii')) print("US Hawaii DateTime:", dt_us_hawaii.strftime("%Y:%m:%d %H:%M:%S %z")) Convert 'US/Mountain' timezone US/Central dt_us_central dt_us_hawaii.astimezone(pytz.timezone('US/Mountain')) print("US Mountain DateTime:", dt_us_central.strftime("%Y:%m:%d %H:%M:%S %z")) Convert US/Central timezone (India) timezone dt_ind dt_us_central.astimezone(pytz.timezone('Asia/Kolkata')) print("India DateTime:", dt_ind.strftime("%Y:%m:%d %H:%M:%S %z")) Output: DateTime: 2022:05:08 08:23:21 +0000 Hawaii DateTime: 2022:05:07 22:23:21 -1000 Mountain DateTime: 2022:05:07 22:23:21 -1000 India DateTime: 2022:05:08 13:53:21 +0530 Working with Local Timezones above section, have mentioned that na誰ve datetime aware datetime instance. pass timezone value local standardized value. pytz module provides localize() method that used convert na誰ve local time. takes arguments, namely datetime object localize optional is_dst flag. tzinfo method dst() which will return Daylight Saving Time (DST) information flag true. Let's understand following example. Example from datetime import datetime import pytz date_format '%Y-%m-%d %H:%M:%S %Z%z' Indian Standard Time timezone_ind= pytz.timezone('Asia/Kolkata') ist_local timezone_ind.localize(datetime.now()) print("Indian Standard Time::", ist_local.strftime(date_format)) Europe/Amsterdam Time amdam_tz pytz.timezone('Europe/Amsterdam') datetime(1997, cest_local amdam_tz.localize(dt, is_dst=True) print("Amsterdam with daylight saving time::", cest_local.strftime(date_format)) Light Saving print("Daylight saving time amsterdam 3/8/83::", cest_local.tzinfo.dst(cest_local)) Output: Indian Standard Time:: 2022-05-08 14:28:37 IST+0530 Amsterdam with daylight saving time:: 1997-12-03 02:00:00 CET+0100 Daylight saving time amsterdam 3/8/83:: 0:00:00 Example Converting format format from datetime import datetime import pytz pytz.utc timezone_Kol pytz.timezone('Asia/Kolkata') dt_Kl datetime.now(timezone_Kol) utc_Kl dt_Kl.astimezone(UTC) timezone_New pytz.timezone('America/New_York') dt_Ny datetime.now(timezone_New) utc_Ny dt_Ny.astimezone(UTC) timezone_Mase pytz.timezone('Africa/Maseru') dt_Ma datetime.now(timezone_Mase) utc_Ma dt_Ma.astimezone(UTC) timezone_central pytz.timezone('US/Central') dt_Ce datetime.now(timezone_central) utc_Ce dt_Ce.astimezone(UTC) timezone_athens= pytz.timezone('Europe/Athens') dt_At datetime.now(timezone_athens) utc_At dt_At.astimezone(UTC) print("UTC Format \t\t\t Format") print(utc_Kl.strftime('%Y-%m-%d %H:%M:%S %z'), dt_Kl.strftime('%Y-%m-%d %H:%M:%S %z')) print(utc_Ny.strftime('%Y-%m-%d %H:%M:%S %z'), dt_Kl.strftime('%Y-%m-%d %H:%M:%S %z')) print(utc_Ma.strftime('%Y-%m-%d %H:%M:%S %z'), dt_Kl.strftime('%Y-%m-%d %H:%M:%S %z')) print(utc_Ce.strftime('%Y-%m-%d %H:%M:%S %z'), dt_Kl.strftime('%Y-%m-%d %H:%M:%S %z')) print(utc_At.strftime('%Y-%m-%d %H:%M:%S %z'), dt_Kl.strftime('%Y-%m-%d %H:%M:%S %z')) Output: Format 			IST Format 2022-05-08 09:05:46 +0000 2022-05-08 14:35:46 +0530 2022-05-08 09:05:46 +0000 2022-05-08 14:35:46 +0530 2022-05-08 09:05:46 +0000 2022-05-08 14:35:46 +0530 2022-05-08 09:05:46 +0000 2022-05-08 14:35:46 +0530 2022-05-08 09:05:46 +0000 2022-05-08 14:35:46 +0530 Conclusion This tutorial covered essential methods pytz library. Timezones play essential roles software development/web development, have discussed current time timezone. This tutorial will help familiar with pytz library timezones. Next TopicPython Secret Module Generate Secure Random Numbers prev next