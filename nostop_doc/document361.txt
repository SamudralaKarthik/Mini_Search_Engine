next prev Python wxPython Module would have wondered what makes application different attractive very first place? thinking about application's User Interface, yes, right. User Interface application makes huge difference number people coming visit application. interactive User Interface allows developers build more attractive relatable applications that even stand better market. Also, application with interactive makes user stay more application than application with standard Now, question will surely come mind: what makes application more interactive more attractive users. there important points that make interface more attractive likeable users. Following such points that make application more attractive appealing users: First all, application should more dynamic have high-resolution graphics application should match theme application. application should also provide ease feature users. have keep points mentioned above minds implement them while creating user interface application. points have mentioned above, talked about graphics user interface, which makes interface application more attractive. Such UIs that built with graphics called (Graphical User Interface). very popular topic nowadays become essential part almost every application around provides graphical icons audio indicators well, which makes application more attractive appealing users. this tutorial, will learn about Python module, i.e., wxPython Module, which provides with functionalities create application. will only cover introduction part wxPython module will create using this module inside Python program. Python wxPython Module Introduction: wxPython Module wxPython module, name suggests, module Python that help creating highly functional very interactive GUIs applications. wxPython module open-source module which means freely available everyone, anyone look contribute source code modifying When wxPython module Python, implemented extension modules. This extension modules wraps components wxWidgets library, which written C++. wxWidgets library wxPython module works like cross-platform toolkit Python that allows functions create highly functional interactive GUIs. Pheonix with Pheonix version actually next-generation upgraded version wxPython module Python. This next-generation version wxPython module mainly focuses extensibility, speed maintainability application. Installation: wxPython module wxPython module doesn't come in-built inside Python, therefore have install first before start working with install wxPython module system, will installer from command prompt. will following command command prompt terminal device install wxPython module system: install wxPython When press enter after writing command, installer will start installation process wxPython module, after while, will successfully installed system. wxPython successfully installed device, start working with build GUIs using functions. Working: wxPython module this section, will create some basic GUIs with help functions wxPython module importing this module into program. import wxPython module Python program, have following line code: import Here, will call wxPython module from system, that's will able functions program. Now, will some different examples where will create some basic GUIs like with button, with radio buttons etc. Look following example programs understand working wxPython module: Example Creating simple having title "Welcome JavaTpoint", using wxPython module: Importing wxPython module import Creating object application appGUI wx.App() Create frame application frmGUI wx.Frame(None, title ="Welcome JavaTpoint!") panelGUI wx.Panel(frmGUI) Panel frame application Adding static text inside frame object application text1 wx.StaticText(panelGUI, label ="Hello Python Developers! welcomed JavaTpoint", (120, 60)) Show frame object frmGUI.Show() Start Event loop display application appGUI.MainLoop() Output: Explanation: have firstly imported wxPython module into program functions. Then, used App() function create Object application. After that, have created frame object panel frame object using Frame() Panel() function, respectively. Inside frame object created, title application object "Welcome JavaTpoint." After that, added static text using StaticText() function inside frame application that should displayed while opening application window output. Inside StaticText() function, used pos() function parameter position static text display. Then, used show() function with frame object created show Finally, started MainLoop() function with application object display this application when execute program. application window output when program executed, static text title object Example Creating button application using wxPython module program: Importing wxPython module import Creating object application appGUI wx.App() Create frame application frmGUI wx.Frame(None, title ="Welcome JavaTpoint!") panelGUI wx.Panel(frmGUI) Panel frame application Creating buttons application wx.Button(panelGUI, "First Button", (180, 120)) wx.Button(panelGUI, "Second Button", (180, 150)) Show frame object frmGUI.Show() Start Event loop display application appGUI.MainLoop() Output: Explanation: After creating frame object application panel frame object, have created buttons inside application built, using Button() function provided wxPython module. used panel object inside Button() object parameter. have also used pos() function here Button() position button inside frame application. After that, displayed application output, buttons created application window. Example Creating check boxes application using wxPython module program: Importing wxPython module import Creating object application appGUI wx.App() Create frame application frmGUI wx.Frame(None, title ="Welcome JavaTpoint!") panelGUI wx.Panel(frmGUI) Panel frame application Creating check boxes inside frame object application wx.CheckBox(panelGUI, "First Check Box", (160, 130)) wx.CheckBox(panelGUI, "Second Check Box", (160, 150)) Show frame object frmGUI.Show() Start Event loop display application appGUI.MainLoop() Output: Explanation: After creating frame object application panel frame object, created checkboxes inside frame object. used CheckBox() function create these CheckBoxes gave them name "First Check Box" "Second Check Box." used position function parameter CheckBox() function positions checkboxes frame application. After that, displayed application output, checkboxes created application window. Example Creating radio buttons application using wxPython module program: Importing wxPython module import Creating object application appGUI wx.App() Create frame application frmGUI wx.Frame(None, title ="Welcome JavaTpoint!") panelGUI wx.Panel(frmGUI) Panel frame application Creating radio buttons inside frame object application wx.RadioButton(panelGUI, "First Radio Button", (160, 120)) wx.RadioButton(panelGUI, "Second Radio Button", (160, 140)) wx.RadioButton(panelGUI, "Third Radio Button", (160, 160)) Show frame object frmGUI.Show() Start Event loop display application appGUI.MainLoop() Output: Explanation: After creating frame object application panel frame object, created multiple radio buttons inside frame application. used RadioButton() function create these Radio buttons gave them name "First Radio Button", "Second Radio Button", "Third Radio Button." used position function parameter RadioButton() function positions radio buttons frame object application. After that, displayed application output, radio buttons created application window. Next TopicRandom Uniform Python prev next