next prev Combinatoric Iterators Python this tutorial, will learn about Combinatoric iterators Python. know, iterators objects that iterated iterable, Iterators used traverse iterable values. Generators also known advance iterators, they cannot return complete result, they yield results. Generators recursive, just like functions. will learn itertools module infinite iterators. will also discuss Python iterators terminate shortest input sequence. let's understand Python itertools module. Python Itertools Module Python itertools module provides facility create iterators efficient looping. There multiple types iterators, some infinite iterators, some terminate shortest input sequence. Combinatoric iterators. Let's have brief overview infinite iterators. Infinite Iterators Python name suggests, infinite iterators generate value infinite times. There three types infinite iterators, let's understand following functions. count([start=0, step=1]) count() method takes arguments start step. start parameter prints from given start number prints infinitely. step parameter optional steps given; given numbers skipped; default step one. Let's understand following example. Example import itertools loop itertools.count(3, 36: break else: print(i, Output: Example With Argument import itertools loop itertools.count(3): print(i) Output: Traceback (most recent call last): File "d:/Python Project/bubble_sort.py", line 308, print(i) KeyboardInterrupt cycle(iterable) cycle() function prints values order they pass. iterable elements printed, restarts printing value from beginning. Let's understand following example. Example import itertools count loop itertools.cycle('ABC'): count break else: print(i, count Output: Example import itertools itertools.cycle(['red','green','blue']): print(i, Output: green blue green blue green blue green blue green blue green blue green blue green blue green blue green blue green blue green blue green blue green blue File "d:/Python Project/iterators.py", line print(i, KeyboardInterrupt Example Using next() Method import itertools list1 ['Java', 'T', 'Point'] defining iterator iterators itertools.cycle(list1) loop range(12): Using next function print(next(iterators), Output: Java Point Java Point Java Point Java Point repeat(element, num) prints passed value infinite number times repeatedly. optional keyword given, repeatedly prints numbers times. Let's understand following example. Example import itertools print (list(itertools.repeat(100, 20))) Output: [100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100] Example import itertools itertools.repeat('Blue'): print(i, Output: Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Blue Traceback (most recent call last): File "d:/Python Project/iterators.py", line 332, print(i, KeyboardInterrupt Here have discussed three methods infinite iterator. will learn about Combinatoric iterators. Combinatoric Iterators Combinatoric iterators arrangements operations, selection discrete mathematical elements. type recursive generators which used simplify combinatorial constructs such permutation, combination, Cartesian products. Let's understand about combinatoric iterators. product(*iterables, repeat=1) These iterators calculate Cartesian product input iterables. need specify optional repeat keyword argument compute product iterable with itself. returns tuples sorted order. Let's understand following example. Example from itertools import product print("The cartesian product using repeat:") print(list(product([2, repeat=2))) print() print("The cartesian product containers:") print(list(product(['Learn', 'from', 'JavaTpoint'], '3'))) print() print("The cartesian product containers:") print(list(product('AB', [3,4]))) Output: cartesian product using repeat: [(2, cartesian product containers: [('Learn', '3'), ('from', '3'), ('JavaTpoint', '3')] cartesian product containers: [('A', ('A', ('B', ('B', Example from itertools import product product('VX','YZ',repeat=3): print(i) Output: ('V', 'Z', 'X', 'Y', 'V', 'Y') ('V', 'Z', 'X', 'Y', 'V', 'Z') ('V', 'Z', 'X', 'Y', 'X', 'Y') ('V', 'Z', 'X', 'Y', 'X', 'Z') ('V', 'Z', 'X', 'Z', 'V', 'Y') ('V', 'Z', 'X', 'Z', 'V', 'Z') ('V', 'Z', 'X', 'Z', 'X', 'Y') ('V', 'Z', 'X', 'Z', 'X', 'Z') ('X', 'Y', 'V', 'Y', 'V', 'Y') ('X', 'Y', 'V', 'Y', 'V', 'Z') ('X', 'Y', 'V', 'Y', 'X', 'Y') ('X', 'Y', 'V', 'Y', 'X', 'Z') ('X', 'Y', 'V', 'Z', 'V', 'Y') ('X', 'Y', 'V', 'Z', 'V', 'Z') ('X', 'Y', 'V', 'Z', 'X', 'Y') ('X', 'Y', 'V', 'Z', 'X', 'Z') ('X', 'Y', 'X', 'Y', 'V', 'Y') ('X', 'Y', 'X', 'Y', 'V', 'Z') ('X', 'Y', 'X', 'Y', 'X', 'Y') ('X', 'Y', 'X', 'Y', 'X', 'Z') ('X', 'Y', 'X', 'Z', 'V', 'Y') ('X', 'Y', 'X', 'Z', 'V', 'Z') ('X', 'Y', 'X', 'Z', 'X', 'Y') ('X', 'Y', 'X', 'Z', 'X', 'Z') ('X', 'Z', 'V', 'Y', 'V', 'Y') ('X', 'Z', 'V', 'Y', 'V', 'Z') ('X', 'Z', 'V', 'Y', 'X', 'Y') ('X', 'Z', 'V', 'Y', 'X', 'Z') ('X', 'Z', 'V', 'Z', 'V', 'Y') ('X', 'Z', 'V', 'Z', 'V', 'Z') ('X', 'Z', 'V', 'Z', 'X', 'Y') ('X', 'Z', 'V', 'Z', 'X', 'Z') ('X', 'Z', 'X', 'Y', 'V', 'Y') ('X', 'Z', 'X', 'Y', 'V', 'Z') ('X', 'Z', 'X', 'Y', 'X', 'Y') ('X', 'Z', 'X', 'Y', 'X', 'Z') ('X', 'Z', 'X', 'Z', 'V', 'Y') ('X', 'Z', 'X', 'Z', 'V', 'Z') ('X', 'Z', 'X', 'Z', 'X', 'Y') ('X', 'Z', 'X', 'Z', 'X', 'Z') Example from itertools import product product([1,2,3],[4,5,6]): print(i) Output: Let's look another one. Example from itertools import product product('UV','WX','YZ'): print(i) Output: ('U', 'W', 'Y') ('U', 'W', 'Z') ('U', 'X', 'Y') ('U', 'X', 'Z') ('V', 'W', 'Y') ('V', 'W', 'Z') ('V', 'X', 'Y') ('V', 'X', 'Z') permutation(iterables*, group_size=None) permutation() function generates possible permutations iterable lexicographic order returns unique elements. uses element's position, value. takes iterable object group_size; value group_size given equal None, value group_size becomes length iterable. Let's understand following example. Example from itertools import permutations print ("All permutations is:") print (list(permutations([1, 'JavaTpoint'], 2))) print() print ("All permutations is:") print (list(permutations('CD'))) print() print ("All permutations is:") print(list(permutations(range(3), 2))) Output: permutations [(1, 'JavaTpoint'), ('JavaTpoint', permutations [('C', 'D'), ('D', 'C')] permutations [(0, Example from itertools import permutations permutations('ABCD'): print(i) Output: ('A', 'B', 'C', 'D') ('A', 'B', 'D', 'C') ('A', 'C', 'B', 'D') ('A', 'C', 'D', 'B') ('A', 'D', 'B', 'C') ('A', 'D', 'C', 'B') ('B', 'A', 'C', 'D') ('B', 'A', 'D', 'C') ('B', 'C', 'A', 'D') ('B', 'C', 'D', 'A') ('B', 'D', 'A', 'C') ('B', 'D', 'C', 'A') ('C', 'A', 'B', 'D') ('C', 'A', 'D', 'B') ('C', 'B', 'A', 'D') ('C', 'B', 'D', 'A') ('C', 'D', 'A', 'B') ('C', 'D', 'B', 'A') ('D', 'A', 'B', 'C') ('D', 'A', 'C', 'B') ('D', 'B', 'A', 'C') ('D', 'B', 'C', 'A') ('D', 'C', 'A', 'B') ('D', 'C', 'B', 'A') above code, didn't pass second argument takes length tuple iterable. below example, pass length. Example from itertools import permutations permutations('ABCD', print(i) Output: ('A', 'B', 'C') ('A', 'B', 'D') ('A', 'C', 'B') ('A', 'C', 'D') ('A', 'D', 'B') ('A', 'D', 'C') ('B', 'A', 'C') ('B', 'A', 'D') ('B', 'C', 'A') ('B', 'C', 'D') ('B', 'D', 'A') ('B', 'D', 'C') ('C', 'A', 'B') ('C', 'A', 'D') ('C', 'B', 'A') ('C', 'B', 'D') ('C', 'D', 'A') ('C', 'D', 'B') ('D', 'A', 'B') ('D', 'A', 'C') ('D', 'B', 'A') ('D', 'B', 'C') ('D', 'C', 'A') ('D', 'C', 'B') combinations(iterable, prints possible combination iterable without replacement. takes iterable object group_size, value group_size given equal None, value group_size becomes length iterable. Let's understand following example. Example from itertools import combinations print ("All combination is:") print(list(combinations(['D', 2))) print() print ("All combination is:") print(list(combinations('ABCD', 2))) print() print ("All combination is:") print(list(combinations(range(7),1))) Output: combination [('D', combination [('A', 'B'), ('A', 'C'), ('A', 'D'), ('B', 'C'), ('B', 'D'), ('C', 'D')] combination [(0,), (1,), (2,), (3,), (4,), (5,), (6,)] Example from itertools import combinations combinations('ABCD',2): print(i) Output: ('A', 'B') ('A', 'C') ('A', 'D') ('B', 'C') ('B', 'D') ('C', 'D') Let's another example. Example from itertools import combinations combinations(range(10),3): print(i) Output: combinations_with_replacement(iterable, similar combination() include individual elements itself. returns subsequence length from elements iterable when parameter that determines length generated combination. Let's understand following example. Example from itertools import combinations_with_replacement print ("All combination is:") print(list(combinations_with_replacement([1, 2))) print() print ("All combination is:") print(list(combinations_with_replacement('ABCD', 2))) print() print ("All combination is:") print(list(combinations_with_replacement(range(7),1))) Output: combination [(1, combination [('A', 'A'), ('A', 'B'), ('A', 'C'), ('A', 'D'), ('B', 'B'), ('B', 'C'), ('B', 'D'), ('C', 'C'), ('C', 'D'), ('D', 'D')] combination [(0,), (1,), (2,), (3,), (4,), (5,), (6,)] Iterator Terminating Shortest Input Sequence Below some important methods that also used iterators. Let's understand following methods. accumulate(iterable, func]) used make iterator with accumulated sums. other words, accumulates results specified binary function. Let's understand following example. Example from itertools import accumulate accumulate([2,1,0,1,0,2,3,5]): print(i) Output: Example from itertools import accumulate import operator accumulate([1, 10],operator.mul): print(i) Output: 5040 40320 362880 3628800 chain(*iterables) chain() function iterates given iterable one. moves next iterable iterable terminates. Example from itertools import chain chain('Hello','World','How you'): print(i) Output: compress(data, selectors) makes iterator filter, filter elements from data which selector values amount True. Let's understand following example. Example from itertools import compress compress('ABCDEF',[1,0,1,True,0,' ']): print(i) Output: dropwhile(predicate, iterable) dropwhile() method drops element from iterable long predicate True. False, starts returning every element. Let's understand following example. Example from itertools import dropwhile dropwhile(lambda x:x<7,[10,12,67,9,5,39,29,91]): print(i) Output: There many other methods, have discussed some essential methods. Conclusion have discussed extended version iterators Python. have mentioned Combinatoric iterators infinite iterators, these iterators pretty helpful mathematic operations. Next TopicDifference between Class Method, Static Method, Instance Method prev next