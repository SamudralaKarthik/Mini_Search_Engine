next prev __name__ Python Python's __name__ special variable stores name currently running Python script module. Python __name__ variable added Python present Python 2.x. When Python script module being executed, __name__ variable given value __main__ present Python script module. What does _name_ mean Python built-in variable called __name__ that records name currently running module script. __name__ variable merely holds name module script unless current module executing, which case value __main__ Therefore, Python script imported into another Python script, __name__ variable should always have value __main__ when that Python script running. Otherwise, would have name module. Example further understand this, let's example. Make script Python called testing.py, append following code Code define function anything(): print('Value __name__ __name__) anything() Output: Value __name__ __main__ Explanation value __name__ variable __main__ when test.py script. Let's build another Python script called mains.py import previous into Example importing testing.py import testing testing.anything() Output: Value __name__ testing Explanation Because displayed testing,py module's value __name__ variable from output code above that value variable testing. Using condition name main statement condition __name__ __main__ declare that certain Python code should only performed when script directly. Example importing testing.py import testing __name__ __main__: testing.anything() Here, string __main__ used determine present module script executing independently not. underscores each side name __name__ variable were there Python interpreter know that it's reserved special keyword. Code example name Python previously said, when code file, value __name__ variable changes __main__ because code executed directly, without even being imported into another file. Code Here ScriptP1.py, code file. defining function anything(): print('It function ScriptP1.') __name__=='__main__': anything() print('Called from ScriptP1.') else: print('ScriptP1 imported into another file.') Output: function ScriptP1. Called from ScriptP1. Let's create Python script file called ScriptP2.py, import ScriptP1.py into attempt invoke function anything() that defined ScriptP1. Code ScriptP2.py code provided here: import ScriptP1 __name__=='__main__': ScriptP1.anything() print('Called from ScriptP2.') Output: ScriptP1 imported into another file. function ScriptP1. Called from ScriptP2. __name__ variable value ScriptP1 (the name module) when import statement ScriptP1 inside ScriptP2, ScriptP2 first script executed, will have value __main__. Printing Value __name__ Let's print value __name__ variable each stage execution help understand better. Example ScriptP1.py Python script's source code provided below print('Value variable __name__ __name__) Output: Value variable __name__ __main__ Example here script ScriptP2.py's source code importing file ScriptP1.py import ScriptP1 print('Value variable __name__ __name__) Output: Value variable __name__ __main__ Summary primary method function typically used point which program executed most programming languages. What about Python, though? Python program (script) typically begins execution first line, which program's indentation level __name__ variable generated prior execution Python program, though. Python, this variable could used place main method. Next Topic_name_ _main_ Python prev next