next prev Data Visualization Python using Bokeh Library Bokeh Python library which used data visualization through high-performance interactive charts plots. creates plots using HTML JavaScript languages. output bokeh library generated several platforms such browser, HTML, server, notebook. also possible create bokeh plots Django flask applications. bokeh library provides visualization interfaces users: models: low-level interface which provides high flexibility application developers. plotting: high-level interface which used creating visual glyphs. this tutorial, will learn create different types data visualization graphs charts using bokeh library Python. Installation: install bokeh library, following command: !pip3 install bokeh Code Create Scatter Circle Markers create Scatter Circle Markers Plot using bokeh library. this, will circle() function. Example: First, will import required modules from bokeh.plotting import figure from bokeh.plotting import output_notebook from bokeh.plotting import show output notebook ON() creating figure plot1 fig(plot_width 500, plot_height 500, title "Scatter Markers") adding circle renderer with size, color alpha plot1.circle([1, size color "green", alpha show results show(plot1) Output: Code Create Single Line create single line using bokeh library Python. this, will line() function. Example: First, will import required modules from bokeh.plotting import figure from bokeh.plotting import output_notebook from bokeh.plotting import show output notebook ON() creating figure plot1 fig(plot_width 500, plot_height 500, title "Scatter Markers") adding line renderer plot1.line([1, line_width color "red") show results show(plot1) Output: Code Create chart charts used representing categorical data with rectangular bars. length proportional values they representing. Example: Vertical Chart First, will import required modules from bokeh.plotting import figure from bokeh.plotting import output_file from bokeh.plotting import show file save model output_file("jtp.html") Now, instantiate figure object graph1 fig(title "Bokeh Graph") x-coordinates plotted y-coordinates edges top1 width thickness bars width1 plot graph graph1.vbar(x, top1, width width1, color "green") display model show(graph1) Output: Example Horizontal Chart First, will import required modules from bokeh.plotting import figure from bokeh.plotting import output_file from bokeh.plotting import show file save model output_file("jtp.html") Now, instantiate figure object graph1 fig(title "Bokeh Graph") x-coordinates plotted y-coordinates edges right1 width thickness bars height1 plot graph graph1.hbar(x, right right1, height height1, color "green") display model show(graph1) Output: Output: Code Create Plot plot used representing statistical data plots, helpful summarizing statistical properties several groups present dataset. Example: import numpy import pandas from bokeh.plotting import figure from bokeh.plotting import show generate some time series different categories cats_1 list("xyzprq") y_y nmp.random.randn(2000) g_1 nmp.random.choice(cats_1, 2000) enumerate(cats_1): y_y[g_1 l] data_frame pnd.DataFrame(dict(score y_y, group g_1)) now, will find quartiles each category groups1 data_frame.groupby('group') q_1 groups1.quantile(q 0.25) q_2 groups1.quantile(q 0.5) q_3 groups1.quantile(q 0.75) upper lower will find outliers each category outliers(group2): cat_2 group2.name return group2[(group2.score upper.loc[cat_2]['score']) (group2.score lower.loc[cat_2]['score'])]['score'] groups.apply(outliers).dropna() here, will prepare outlier data plot, would needing coordinates every outlier. out.empty: out_x list(out.index.get_level_values(0)) out_y list(out.values) plot1 fig(tools background_fill_color "#efefef", x_range cats_1, toolbar_location None) outliers, will shrink lengths stems longer than minimums maximums q_min groups1.quantile(q 0.00) q_max groups1.quantile(q 1.00) upper.score [min([x,y]) (x,y) zip(list(q_max.loc[:, 'score']), upper.score)] lower.score [max([x,y]) (x,y) zip(list(q_min.loc[:, 'score']), lower.score)] stems plot1.segment(cats_1, upper.score, cats_1, q_3.score, line_color "black") plot1.segment(cats_1, lower.score, cats_1, q_1.score, line_color "black") boxes plot1.vbar(cats_1, 0.7, q_2.score, q_3.score, fill_color "#E08E79", line_color "black") plot1.vbar(cats_1, 0.7, q_1.score, q_2.score, fill_color "#3B8686", line_color "black") whiskers (almost-0 height rects simpler than segments) plot1.rect(cats_1, lower.score, 0.2, 0.01, line_color "black") plot1.rect(cats_1, upper.score, 0.2, 0.01, line_color "black") outliers out.empty: plot1.circle(outx, outy, size color "#F38630", fill_alpha 0.6) plot1.xgrid.grid_line_color None plot1.ygrid.grid_line_color "white" plot1.grid.grid_line_width plot1.xaxis.major_label_text_font_size "16px" show(plot1) Output: Code Create Scatter Plot Scatter plot used plotting values variables dataset. helpful finding correlation between variables which selected. Example: First, will import required modules from bokeh.plotting import figure from bokeh.plotting import output_file from bokeh.plotting import show file saving model OF("jtp.html") instantiate figure object graph1 fig(title "Bokeh Scatter Graph") points plotted Scatter Plot [1.4, 5.1, 5.9, 2.3, 5.6, 8.6, 4.5, 2.1, 3.1, 4.3, 5.5, 4.4, 6.9, 2.1, 5.2, 6.3, 7.2, 7.9, [3.4, 2.1, 5.7, 8.5, 4.3, 4.2, 5.7, 6.5, 8.9, 9.1, 1.5, 2.1, 6.8, 5.2, 4.5, 7.4, 7.5, 6.3] plott graph graph1.scatter(x1, display model show(graph1) Output: Conclusion this tutorial, have discussed various types data visualization, namely chart, plot, Scatter Markers, Scatter Plots, Single lines, which created using bokeh library Python. Next TopicHow Plot glyphs over Google using Bokeh Library Python prev next