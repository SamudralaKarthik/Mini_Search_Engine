next prev Python tqdm Module create terminal progress Whenever install Python library, module, installing software, progress screen, which denotes small progress that estimates long process would take complete render. gives impression activity calm nerves. familiar with various progress bar. Some them attractive some them boring. this article, will create progress without involving Python's code core logging library. Progress bars filled according percentage progress made accomplishing task. progress calculated dividing number_of_item_processed total_input_item. Various factors affect progress bar, such network speed, latency, persisting data into local storage derive more accurate ETA (Estimated Time Arrival). create simple hassle-free progress bars using Python external library named tqdm. code make look lovely. tqdm stands taqadum Arabic, which means progress. Python tqdm module works various platform such Linux, Window, Mac, etc. also compatible with IPython/Jupyter notebooks. Need Progress working with smaller data set, progress will bother workflow. However, progress used iterating over dataset, training model, encoding large information set. progress provides estimation process that been given approximation time might take more. gives information that progress still running been terminated rudely. Prerequisites Python must installed system also create virtual environment install tqdm library. Installation Open command-line terminal type following. install tqdm pip3 install tqdm above command will successfully install system. verify using following statement. import tqdm there error which means this library successfully installed. Adding Progress Bars Loops Program import time import from tqdm import trange do_something(): time.sleep(1) do_another_something(): time.sleep(1) trange(10, file=sys.stdout, desc='outer loop'): do_something() trange(100,file=sys.stdout, leave=False, unit_scale=True, desc='inner loop'): do_another_something() Output: outer loop: 0/10 [00:00<?, ?it/s] inner loop: 0.00/100 [00:00<?, ?it/s] inner loop: 1.00/100 [00:01<01:40, 1.02s/it] inner loop: 2%|▏ 2.00/100 [00:02<01:39, 1.02s/it] inner loop: 3%|▎ 3.00/100 [00:03<01:38, 1.01s/it] inner loop: 4%|▍ 4.00/100 [00:04<01:37, 1.01s/it] inner loop: 5%|▌ 5.00/100 [00:05<01:35, 1.01s/it] inner loop: 6%|▌ 6.00/100 [00:06<01:34, 1.01s/it] inner loop: 7%|▋ 7.00/100 [00:07<01:34, 1.01s/it] inner loop: 8%|▊ 8.00/100 [00:08<01:33, 1.02s/it] inner loop: 9%|▉ 9.00/100 [00:09<01:32, 1.02s/it] inner loop: 10%|█ 10.0/100 [00:10<01:31, 1.02s/it] inner loop: 11%|█ 11.0/100 [00:11<01:30, 1.01s/it] inner loop: 12%|█▏ 12.0/100 [00:12<01:29, 1.01s/it] inner loop: 13%|█▎ 13.0/100 [00:13<01:28, 1.01s/it] inner loop: 14%|█▍ 14.0/100 [00:14<01:29, 1.04s/it] inner loop: 15%|█▌ 15.0/100 [00:15<01:27, 1.03s/it] inner loop: 16%|█▌ 16.0/100 [00:16<01:26, 1.02s/it] inner loop: 17%|█▋ 17.0/100 [00:17<01:24, 1.02s/it] inner loop: 18%|█▊ 18.0/100 [00:18<01:23, 1.02s/it] inner loop: 19%|█▉ 19.0/100 [00:19<01:22, 1.02s/it] ……………………………………………………………………………………………. …………………………………………………………………………………………….. will till reached 100%. Let's understand another example. Example importing modules from tqdm import trange from time import sleep creating loop trange(10, desc="loop slowing loop sleep(0.1) Output: loop 100%|██████████| 10/10 [00:01<00:00, 9.08it/s] Example importing modules from tqdm import tnrange from time import sleep creating loop tnrange(2, dec="loop 1"): creating nested loop tnrange(5, dec="loop 2"): slowing loop sleep(0.3) Output: outer loop: 0/10 [00:00<?, ?it/s] inner loop: 0.00/100 [00:00<?, ?it/s] inner loop: 1.00/100 [00:01<01:39, 1.00s/it] inner loop: 2%|▏ 2.00/100 [00:02<01:38, 1.00s/it] inner loop: 3%|▎ 3.00/100 [00:03<01:37, 1.00s/it] inner loop: 4%|▍ 4.00/100 [00:04<01:36, 1.00s/it] inner loop: 5%|▌ 5.00/100 [00:05<01:35, 1.00s/it] inner loop: 6%|▌ 6.00/100 [00:06<01:34, 1.01s/it] inner loop: 7%|▋ 7.00/100 [00:07<01:33, 1.01s/it] inner loop: 8%|▊ 8.00/100 [00:08<01:32, 1.01s/it] inner loop: 9%|▉ 9.00/100 [00:09<01:31, 1.00s/it] inner loop: 10%|█ 10.0/100 [00:10<01:30, 1.01s/it] Example importing modules import time import from tqdm import trange creating random function random_function(): time.sleep(0.5) another random function another_random_function(): time.sleep(0.2) defining outer loop trange(3, file=sys.stdout, desc='Outer loop'): random_function() inner loop trange(5, file=sys.stdout, desc='Inner loop'): another_random_function() Output: Outer loop: 0/3 [00:00<?, ?it/s] Inner loop: [00:00<?, ?it/s] Inner loop: 20%|██ [00:00<00:00, 4.62it/s] Inner loop: 40%|████ [00:00<00:00, 4.64it/s] Inner loop: 60%|██████ [00:00<00:00, 4.63it/s] Inner loop: 80%|████████ [00:00<00:00, 4.65it/s] Outer loop: 33%|███▎ [00:01<00:03, 1.58s/it] Inner loop: [00:00<?, ?it/s] Inner loop: 20%|██ [00:00<00:00, 4.91it/s] Inner loop: 40%|████ [00:00<00:00, 4.85it/s] Inner loop: 60%|██████ [00:00<00:00, 4.79it/s] Inner loop: 80%|████████ [00:00<00:00, 4.77it/s] Outer loop: 67%|██████▋ 2/3 [00:03<00:01, 1.58s/it] Inner loop: [00:00<?, ?it/s] Inner loop: 20%|██ [00:00<00:00, 4.43it/s] Inner loop: 40%|████ [00:00<00:00, 4.56it/s] Inner loop: 60%|██████ [00:00<00:00, 4.65it/s] Inner loop: 80%|████████ [00:00<00:00, 4.72it/s] Outer loop: 100%|██████████| 3/3 [00:04<00:00, 1.57s/it] Predictive Manual Updates Progress tqdm module provides facility update progress certain intervals manually. When download multi-part file chunks streaming data, manually update process function. Let's understand following example. Example importing modules import time import from tqdm import tqdm task(): time.sleep(1) with tqdm(total=100, file=sys.stdout) pbar: range(10): task() Here updating progress manually, useful streams such reading files. pbar.update(10) Updates increments stops Output: 100%|██████████| 100/100 [00:10<00:00, 9.93it/s] Explanation above code, have attribute 100. called function incremented each iteration until 100% achieved. pass value update() method. Threaded Progress also trap Python tqdm package into Python threads. Multiprocessing best total number cores. tqdm position argument allows specify line offset print this bar. automatic default case unscripted. Let's understand following example. value must specified manage multiple bars once. ignore this argument, will overridden different threads. Example import time from random import randrange from multiprocessing.pool import ThreadPool from tqdm import tqdm func_call(position, total): text 'progressbar #{position}'.format(position=position) with tqdm(total=total, position=position, desc=text) progress: range(0, total, progress.update(5) time.sleep(randrange(3)) pool ThreadPool(10) tasks range(5) enumerate(tasks, pool.apply_async(func_call, args=(i, 100)) pool.close() pool.join() Output: progressbar 0/100 [00:00<?, ?it/s] progressbar 0/100 [00:00<?, ?it/s] progressbar 0/100 [00:00<?, ?it/s] progressbar 0/100 [00:00<?, ?it/s] progressbar 0/100 [00:00<?, ?it/s] progressbar 10%|█ 10/100 [00:01<00:09, 9.91it/s] progressbar 10%|█ 10/100 [00:01<00:09, 9.91it/s] progressbar 10%|█ 10/100 [00:02<00:18, 4.97it/s] progressbar 10%|█ 10/100 [00:02<00:18, 4.96it/s] progressbar 10%|█ 10/100 [00:02<00:18, 4.96it/s] progressbar 15%|█▌ 15/100 [00:02<00:11, 7.64it/s] progressbar 15%|█▌ 15/100 [00:02<00:11, 7.64it/s] progressbar 15%|█▌ 15/100 [00:03<00:17, 4.96it/s] progressbar 15%|█▌ 15/100 [00:03<00:17, 4.95it/s] progressbar 20%|██ 20/100 [00:04<00:16, 4.71it/s] progressbar 25%|██▌ 25/100 [00:04<00:11, 6.58it/s] progressbar 20%|██ 20/100 [00:04<00:16, 4.97it/s] progressbar 20%|██ 20/100 [00:04<00:16, 4.96it/s] Color Tqdm Progress Color make progress very attractive. However, doesn't functionality working bar. tqdm work with Colorama, simple cross-platform color terminal text Python. Let's understand following example. Example from tqdm import trange from colorama import Fore Cross-platform colored terminal text. color_bars [Fore.BLACK, Fore.RED, Fore.GREEN, Fore.YELLOW, Fore.BLUE, Fore.MAGENTA, Fore.CYAN, Fore.WHITE] color color_bars: trange(int(7e7), bar_format="{l_bar}%s{bar}%s{r_bar}" (color, Fore.RESET)): pass Output: Conclusion have discussed basic concepts related progress bar. Python comes with tqdm module that helps design manually. have defined suitable examples important operation that perform tqdm module. tqdm module collaborate with subprocess threads where multiple process bars same time. Next TopicCaesar Cipher Python prev next