next prev GraphQL Implementation Django| Graphene Tutorial GraphQL query language APIs developed Facebook. applies runtime queries APIs fetch required data instead loading every data. optimizes RESTful calls compared Rest APIs. provides power client programmer exactly what they need provide complete description data API. this tutorial, will demonstrate working GraphQL Django framework. Introduction GraphQL provides standard describe data server statically typed schema. make Query that defines data requirements receive data Response, only data have requested. more information, Graphene Python. GraphQL getting popular among developers fewer calls also considered REST replacement. question arise need GraphQL where have REST which also tremendously perfect data exchange. Let's have brief comparison between GraphQL REST. GraphQL Django Implementation this section, will give detailed overview connect models from Django Graphene object types. will graphene library, which works with GraphQL Python. Django Project will create virtual environment install dependencies into following setup created. Create Django Project school project must include Follow below steps create setup. Create project directory mkdir MyProject MyProject Create virtual environment isolate package dependencies locally linux user virtualenv source env/bin/activate Windows python venv env\Scripts\activate` Install Django Graphene with Django support install django install graphene_django project with single application. Note trailing character django-admin startproject teacher teacher django-admin startapp student have built setup project. following command sync database first time. python manage.py migrate Let's move creating tables database. Defining Models create models model.py file. #student/models.py class Teacher(models.Model): name models.CharField(max_length=100) __str__(self): return self.name class Student(models.Model): name models.CharField(max_length=100) roll_no= models.CharField(max_length) class_teacher models.ForeignKey( Teacher, related_name="teacher", on_delete=models.CASCADE __str__(self): return self.name student graphene_django INSTALLED_APPS settings.py file. #school/settings.py INSTALLED_APPS 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'student', 'graphene_django', following commands create tables database. python manage.py makemigrations python manage.py migrate Create Some Data Testing create some sample information query API. First, need create superuser. don't know, superuser responsible creating, deleting, updating admin panel. create superuser, following command. python manage.py createsuperuser After that register models with admin panel: #student/admin.py from django.contrib import admin from cookbook.ingredients.models import Teacher, Student admin.site.register(Teacher) admin.site.register(Student)) Implementation GraphQL Schema Object Types have done with basic Django. ready make queries Django project. GraphQL presents data graph structure instead hierarchical structure. achieve this, need specify each type object that GraphQL represent graph. This graph also root type through which access begins. This Query class below. will import DjangoObjectType class create GraphQL types each Django models. will automatically define GraphQL fields context fields Django models. create schema.py file that will hold schema Query. #school/schema.py class TeacherType(DjangoObjectType): class Meta: model Teacher fields ("id", "name") class StudentType(DjangoObjectType): class Meta: model Student fields ("id", "name", "roll_no", "class_teacher") class Query(graphene.ObjectType): all_students graphene.List(StudentType) teacher_by_name graphene.Field(TeacherType, name=graphene.String(required=True)) resolve_all_students(root, info): return Student.objects.select_related("class_teacher").all() resolve_teacher_by_name(root, info, name): try: return Teacher.objects.get(name=name) except Teacher.DoesNotExist: return None assume being something urls.py file. Testing GraphQL Queries Here will need some configuration GraphQL server where test queries. Updating Settings Open settings.py file simply SCHEMA GRAPHENE config. school/settings.py GRAPHENE "SCHEMA": "schema.schema" also alternative where pass schema urls definitions. Let's below implementation. Creating GraphQL GraphiQL Views GraphiQL web-based integrated development environment that allows write execute GraphQL queries. slightly different from REST because there single from which GraphQL accessed. Graphene's GraphQLView view handles requests that come from this URL. create GraphQL endpoint specify parameter with graphiql=True. #school/urls.py from django.contrib import admin from django.urls import path from django.views.decorators.csrf import csrf_exempt from graphene_django.views import GraphQLView from .schema import schema urlpatterns path('admin/', admin.site.urls), path("graphql", csrf_exempt(GraphQLView.as_view(graphiql=True))), discussed above, don't specify Graphene SCHEMA settings.py, pass below. #school/urls.py from django.contrib import admin from django.urls import path from django.views.decorators.csrf import csrf_exempt from graphene_django.views import GraphQLView from .schema import schema urlpatterns path('admin/', admin.site.urls), path("graphql", csrf_exempt(GraphQLView.as_view(graphiql=True, schema=schema))), Django Server Now, ready test have built fire some queries Before that, following command. python manage.py runserver System check identified issues silenced). March 03, 2022 16:04:03 Django version 4.0.3, using settings 'school.settings' Starting development server http://127.0.0.1:8000/ Quit server with CTRL-BREAK. Visit http://127.0.0.1:8000/ GraphQL page. will show following interface. left-side, fire queries right-side displays result. GraphQL Queries Let's fire first query. Query query allStudents name classTeacher name Output: "data": "allStudents": "id": "1", "name": "Alex", "classTeacher": "name": "Pat Cummins" "id": "2", "name": "Robert", "classTeacher": "name": "Pat Cummins" "id": "3", "name": "Ricky", "classTeacher": "name": "David Warner" "id": "4", "name": "Princy", "classTeacher": "name": "Mathew Wade" "id": "5", "name": "Maria", "classTeacher": "name": "David Warner" Congratulations, have completed first GraphQL query. need camelcase field names better JavaScript client's compatibility. also Query relation using current schema. That's GraphQL become more popular powerful. query allStudents name rollNo teacherByName(name:"Mathew Wade"){ name Output: "data": "allStudents": "id": "1", "name": "Alex", "rollNo": "101" "id": "2", "name": "Robert", "rollNo": "102" "id": "3", "name": "Ricky", "rollNo": "103" "id": "4", "name": "Princy", "rollNo": "104" "id": "5", "name": "Maria", "rollNo": "105" "teacherByName": "id": "2", "name": "Mathew Wade" Conclusion GraphQL powerful popular tool integrated with Python that allows working very efficiently. this tutorial, have integrated Django model with GraphQL. allows started working with server quickly. GraphQL will take over REST soon fast processing. Next TopicHow Implement Protobuf Python prev next