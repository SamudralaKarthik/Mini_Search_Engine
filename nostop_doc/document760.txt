next prev Tqdm Integration with Pandas this tutorial, will learn implement tqdm with pandas library. tqdm module used create process requirement. Process bars valuable tools estimating displaying time task will take. understand this tutorial, should familiar with tqdm module concept create process bar. have complete tutorial tqdm module; unfamiliar with concept, visit Python tqdm module. Integration with Pandas Pandas famous useful library used manipulate numerical data. most commonly used libraries handling tabular data. Pandas represent data different ways Series Dataframe. Dataframe tabular structure with rows columns also represent heterogeneous data. This library built upon Numpy library; extensively used field Data Science. pandas library, need install system using command. install pandas Example import pandas import numpy from tqdm import tqdm pd.DataFrame(np.random.randint(0, 100, (100, 100))) print(df.head(10).iloc[:,:5]) #print first rows first columns tqdm.pandas(desc='pandas tqdm integration demo') df=df.progress_apply(lambda number:number +5) #add each number print(df.head(10).iloc[:,:5]) Output: pandas tqdm integration demo: 100%|????????????????????????????????????????????????????????????????| 100/100 [00:00<00:00, 659.65it/s] above code, have imported pandas tqdm library initialized dataframe size with random integers between 100. Then used tqdm.pandas method specify pandas.progress_apply function with tqdm. process_apply function place apply function. This function used display tqdm denote percentage progress. Both apply, process_apply() function takes function parameter. code, have passed lambda function that takes number, adds returns Tqdm Notebook Jupiter notebook open-source supports multiple programming languages such Python However; popular among Python developers. provides live interactive Python runtime environment. Jupyter notebook quite popular among practitioners data engineers, helps inspect data test step-by-step. display tqdm loaders inside Jupyter notebook. first need setup Jupyter notebook system. After setting this, need install tqdm.notebook module, which similar tqdm. Open notebook install ipywidgets ensure that progress displayed dynamically updated notebook. tqdm comes three colors. Green indicates successfully completed progress, blue ongoing process, indicates that been terminated midway. Example from tqdm.notebook import tqdm_notebook import time tqdm_notebook(range(15), desc 'Tqdm notebook Example'): time.sleep(1) Output Output ongoing process Output successful process tqdm_notebook should wrapped around iterable same tqdm. Jupyter notebook implement functions features tqdm library. example desc keyword used print description progress bar, total iteration, etc. Alternative tqdm tqdm handy powerful tool track progress process Python. Apart from that, many other libraries also used achieve same similar goal. these libraries processbar, processbar2, alive-process. processbar library pretty simple printed with symbol. also print process spinner like loading circle shown browser. creates problem with print statement process bar. After every print statement, progress displayed. overcome this, progressbar2 library, which allows standard redirect output, able print statement along with clean progress bar. last alternative library alive-process which offers some attractive progress bars. alive-progress library need animated progress bar. Advantages tqdm Following benefits tqdm library. tqdm library comes with much speed compared alternatives. cannot only used with Jupyter notebook also with popular Python frameworks such Keras, Dask, etc. Custom integration options with Discord, Slack, Telegram based project requirements also available. Conclusion This tutorial included implementation tqdm with pandas library. have explored features advantages. Instead using tqdm library, alternative libraries such processbar, processbar2 alive-progress. offers multiple benefits like visual estimation progress your task, indicates when issue error encounters program. also estimates time required complete task. also apply multiple customizations project requirement, which overhead smart progress bar. Next TopicBisect Module Python prev next