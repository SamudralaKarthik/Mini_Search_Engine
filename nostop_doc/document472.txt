next prev Reading NetCDF Data using Python following tutorial, will understand read NetCDF Data with help Python programming language. before started, briefly understand what exactly NetCDF Understanding NetCDF Network common data form (also known NetCDF) generally utilized store multi-dimensional geographic data. Some examples these data precipitation, temperature, wind speed. Variables stored NetCDF usually measured more than once over large (continental) areas. With more than measurement day, data values accumulate quickly become unwieldy work with. Data management further complicated when each value also assigned geographic location. NetCDF offers solution these challenges. This tutorial will begin reading data from NetCDF file using modules Python programming language. Installation read NetCDF files using different Python modules. Some such famous modules include netCDF4 gdal. this tutorial, will mainly focus netCDF4 module. process installing module simple. either installer anaconda Python distribution. syntax install netCDF4 module using installer shown below: Syntax: install netCDF4 also anaconda Python distribution order eliminate confusion that come with dependencies versioning. syntax install module using anaconda (conda) shown below: Syntax: conda install netCDF4 Verifying Installation Once module installed, verify creating empty Python program file writing import statement follows: File: verify.py import netCDF4 Now, save above file execute using following command terminal: Syntax: python verify.py above Python program file does return error, module installed properly. However, case where exception raised, reinstalling module, also recommended refer official documentation module. Loading NetCDF Dataset Loading dataset quite easy. have pass NetCDF file path netCDF4.Dataset() function. this tutorial, will using file consisting climate data. consider following snippet code demonstrating same: Example: importing required module import netCDF4 defining path file filePath 'sample.nc' using Dataset() function dSet nc.Dataset(filePath) Output: Explanation: above snippet code, have imported required module. have then specified path NetCDF file. have then converted data NetCDF file dataset using Dataset() function. General File Structure netCDF4 module enables access metadata data related NetCDF file. NetCDF file consists three basic segments: metadata, dimensions, variables. Variables consist both metadata data. Accessing Metadata Printing dataset provides information regarding variables stored file along with their dimension. consider following snippet code demonstrating same. Example: printing dataset print(dSet) Output: <class 'netCDF4._netCDF4.Dataset'> root group (NETCDF4 data model, file format HDF5): start_year: 2021 month: source: Daymet Software Version Version_software: Daymet Software Version Version_data: Daymet Data Version Conventions: CF-1.6 citation: Please http://daymet.ornl.gov/ current Daymet data citation information references: Please http://daymet.ornl.gov/ current information Daymet references dimensions(sizes): x(284), y(584), time(31), nv(2) variables(dimensions): float32 x(x), float32 y(y), float32 lat(y, float32 lon(y, float32 time(time), int16 yearday(time), float32 time_bnds(time, nv), int16 lambert_conformal_conic(), float32 prcp(time, groups: Explanation: above snippet code, have used print() function print dataset users. observe, above information includes file format, data source, data version, citation, dimensions, variables. variables interested lat, lon, time, prcp (precipitation). find precipitation specific location given time with these variables. This file only consists 31-time steps (the time dimension 31). also access Metadata Python dictionary, which more helpful. consider following example demonstrating same. Example: importing required module import netCDF4 defining path file filePath 'sample.nc' using Dataset() function dSet nc.Dataset(filePath) printing metadata dictionary print(dSet.__dict__) Output: {'start_year': 2021, 'month': '01', 'source': 'Daymet Software Version 4.0', 'Version_software': 'Daymet Software Version 4.0', 'Version_data': 'Daymet Data Version 4.0', 'Conventions': 'CF-1.6', 'citation': 'Please http://daymet.ornl.gov/ current Daymet data citation information', 'references': 'Please http://daymet.ornl.gov/ current information Daymet references'} Explanation: above snippet code, have imported required module defined path NetCDF file. have then used Dataset() function create dataset file. last, have converted data into dictionary printed resultant data users. then access metadata element using key. consider following example demonstrating same: Example: importing required module import netCDF4 defining path file filePath 'sample.nc' using Dataset() function dSet nc.Dataset(filePath) printing metadata dictionary print(dSet.__dict__['start_year']) Output: 2021 Explanation: above snippet code, have specified printed resulting value users. Dimensions Accessing dimensions similar file metadata. Each dimension stored dimension class which consists pertinent information. access Metadata dimensions looping through available dimensions. consider following snippet code demonstrating same. Example: importing required module import netCDF4 defining path file filePath 'sample.nc' using Dataset() function dSet nc.Dataset(filePath) printing dimensions dataset dimension dSet.dimensions.values(): print(dimension) Output: <class 'netCDF4._netCDF4.Dimension'>: name 'x', size <class 'netCDF4._netCDF4.Dimension'>: name 'y', size 584 <class 'netCDF4._netCDF4.Dimension'> (unlimited): name 'time', size <class 'netCDF4._netCDF4.Dimension'>: name 'nv', size Explanation: following snippet code, have imported required libraries defined path NetCDF file. have then used Dataset() function create dataset file. last, have printed dimensions dataset using for-loop iterating through each dimension given dataset. also access individual dimensions like so: dSet.dimensions['x']. Variable Metadata access variable metadata similar dimensions. consider following snippet code demonstrating same. Example: importing required module import netCDF4 defining path file filePath 'sample.nc' using Dataset() function dSet nc.Dataset(filePath) printing variables dataset variable dSet.variables.values(): print(variable) Output: <class 'netCDF4._netCDF4.Variable'> float32 x(x) units: long_name: coordinate projection standard_name: projection_x_coordinate unlimited dimensions: current shape (284,) filling default _FillValue 9.969209968386869e+36 used <class 'netCDF4._netCDF4.Variable'> float32 y(y) units: long_name: coordinate projection standard_name: projection_y_coordinate unlimited dimensions: current shape (584,) filling default _FillValue 9.969209968386869e+36 used <class 'netCDF4._netCDF4.Variable'> float32 lat(y, units: degrees_north long_name: latitude coordinate standard_name: latitude unlimited dimensions: current shape (584, 284) filling default _FillValue 9.969209968386869e+36 used <class 'netCDF4._netCDF4.Variable'> float32 lon(y, units: degrees_east long_name: longitude coordinate standard_name: longitude unlimited dimensions: current shape (584, 284) filling default _FillValue 9.969209968386869e+36 used <class 'netCDF4._netCDF4.Variable'> float32 time(time) standard_name: time calendar: standard units: days since 1950-01-01 00:00:00 bounds: time_bnds long_name: 24-hour based local time unlimited dimensions: time current shape (31,) filling default _FillValue 9.969209968386869e+36 used <class 'netCDF4._netCDF4.Variable'> int16 yearday(time) long_name: year (DOY) starting with January unlimited dimensions: time current shape (31,) filling default _FillValue -32767 used <class 'netCDF4._netCDF4.Variable'> float32 time_bnds(time, nv) unlimited dimensions: time current shape (31, filling default _FillValue 9.969209968386869e+36 used <class 'netCDF4._netCDF4.Variable'> int16 lambert_conformal_conic() grid_mapping_name: lambert_conformal_conic longitude_of_central_meridian: -100.0 latitude_of_projection_origin: 42.5 false_easting: false_northing: standard_parallel: [25. 60.] semi_major_axis: 6378137.0 inverse_flattening: 298.257223563 unlimited dimensions: current shape filling default _FillValue -32767 used <class 'netCDF4._netCDF4.Variable'> float32 prcp(time, _FillValue: -9999.0 long_name: daily total precipitation units: mm/day missing_value: -9999.0 coordinates: grid_mapping: lambert_conformal_conic cell_methods: area: mean time: unlimited dimensions: time current shape (31, 584, 284) filling Explanation: above snippet code, have imported required module defined path NetCDF file. have then used Dataset() function create dataset file. last, have used for-loop iterate through variables dataset print them users. also access individual variables. consider following example demonstrating same: Example: importing required module import netCDF4 defining path file filePath 'sample.nc' using Dataset() function dSet nc.Dataset(filePath) printing value prcp variable print(dSet['prcp']) Output: <class 'netCDF4._netCDF4.Variable'> float32 prcp(time, _FillValue: -9999.0 long_name: daily total precipitation units: mm/day missing_value: -9999.0 coordinates: grid_mapping: lambert_conformal_conic cell_methods: area: mean time: unlimited dimensions: time current shape (31, 584, 284) filling Explanation: above snippet code, have printed value prcp variable specifying parameter dSet variable. Conclusion NetCDF files generally utilized geographic time-series data. Initially, they quite intimidating work with large amounts data different formats from raster files that most utilized. NetCDF great manner documenting geographic data because built-in documentation metadata. This makes easy end-users understand exactly what data represent with little ambiguity. NetCDF data accessed NumPy arrays, which present many possibilities analysis incorporation existing utilities workflows. Next TopicThe reprlib module Python prev next