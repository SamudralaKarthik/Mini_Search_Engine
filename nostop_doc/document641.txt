next prev PYTHON NULL STATEMENT Mathematics, null represent nothing, some programming languages such Java, NULL represents same, Python, different. Generally, other programming languages, null used when pointer point nothing when variable nothing/ empty. equivalent zero. place null, 'None' Python. This article discusses concept None with examples. None keyword Python. does functions that null can, along with that, there whole concept functionality behind None. languages like null built-in constant with zero value. But, Python, None object. Like True False, Python, None immutable keyword with significance different scenarios. print (type(None))	 Output: <class 'NoneType'> Represents that None object class NoneType. type object class belongs functions: return type Generally, functions expected return least value. function does return anything, returns None: function(a, print (function Output: None Understanding: function takes parameters performs addition returning value. Hence, when printed function, None printed. Interesting fact: know that print function Python. observe that print prints given string, doesn't return value? When print print statement, that None printed: print (print("Hello world!")) Output: Hello world! None Understanding: First, string printed first statement, then return value printed-None. default value optional parameters functions When syntax some functions, observe some parameters don't even know function. Those optional parameters. These parameters have some functionality, won't them frequently. assign argument parameter only when need them. other time, they hold None. Example: list. sort function Generally, call using list with arguments, there arguments function: list1 list1. sort print (list1) Output: actual syntax sort: help (list. sort) Help method_descriptor: sort(self, key=None, reverse=False) Sort list ascending order return None. Null variables statically typed languages like programmer only variable program after defining declaring some value. don't declare with value, takes some garbage value null. same Python. assign variable with None, making null variable. But, null variables same defined variables. print (var) Output: Traceback (most recent call last): File "C:\Users\Jeevani\untitled0.py", line print (var) NameError: name 'var' defined Here, defined used print statement. didn't take None default value. Hence, raised error. None print (var) Output: None Here, assigned None variable var. When printed value, that None printed. Attribute Errors have been programming quite some time, might have into these errors: AttributeError: 'NoneType; object attribute 'append' This error occurs when perform operations null value that defined. These situations occur unexpectedly some error code. think they normal variables, they null variables. Example: function (l): l. append function (l). append ('hey') print (l)	 Output: Traceback (most recent call last): File "C:\Users\Jeevani\untitled0.py", line function(l). append('hey') AttributeError: 'NoneType' object attribute 'append' Understanding: Here, created list wrote function append value list. called function forgot return list. discussed above, function doesn't have return statement, returns None, here tried append "hey" none object, which impossible. Hence, attribute error raised. Comparison equality understand this using example: even_or_odd (num): (num return True (input ("Enter number check even: even_or_odd (num) None: print (num, number") else: print (num, even number") Output: Enter number check even: number Enter number check even: even number Understanding: took integer input from user. wrote function check number even odd. number divisible True will returned. divisible, returning anything, which means None returned. used this check number odd. Important point: check variable None, comparison operators !=. Even would have given same output above case. But, using leads bugs some cases: "is", gives True when both variables pointing same object checks objects that both variables pointing same. example: class name: 	def __eq__ (self, other): 		return True name print (obj None) print (obj None) Output: True False Understanding: When None, check both None same objects. Obj object class name, None predefined object. They same. When check None, check None equivalents, i.e., they have same value. Both None holding None. Hence True printed. True False When None, means there isn't anything. Generally, statement will executed there some positive integer True value statement's condition. None represents nothing which means represents false. Then, None represents True: food None (food): print ("She ate food") else: print ("She food") Output: food Understanding: gave food None, which means blank-it nothing. represents False. Hence, else statement executed. default argument understand this using example: trying create function that appends list with given element. list given, want single-element list with element provide. function(element, list1 []): list1. append (element) return list1 print (function 2])) print (function (4)) print (function (4)) Output: Understanding: When gave list appended first case, function worked fine. But, failed when stopped giving list gave only element. When call function without list, function updates list with appended values list re-defined empty list. Solution: function(element, list1 None): list1 None: list1 list1. append (element) return list1 print (function 2])) print (function (4)) print (function (5)) Output: Here, assigned None default value parameter. Whenever function called, include condition check None then re-assigned list empty list. These some uses None Python. When create large programs, significance None will more. improves readability reduces number lines program, making beautiful user-friendly feature Python every programmer. Next TopicPython Operator prev next