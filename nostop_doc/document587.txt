next prev Desktop Notifier Python Notification support people remembering things. little piece text that appears desktop mobile screen inform user about updates other significant chunks information. This information enables user focus vital events ignore less significant ones. notifications stored notification bar, which refer after completing work. following tutorial, will learn create customized desktop notifier application computer some easy steps with help Python programming language. before started, briefly understand desktop notifier working. Understanding Desktop Notifier Desktop Notifier straightforward application that generates notification message form pop-up message desktop. main objective desktop notification application that will learn develop today constantly remind different things that require accomplish throughout day. This task like to-do list, where have goats accomplish. desktop notifier will constantly notify different to-do actions take throughout day. Now, prerequisites 'Desktop Notifier' project. Prerequisites Python project this Python project, required install necessary packages. first package 'requests', which will help fetch data from web, second package 'plyer', which will allow create notifications computer. install these packages using installer typing following commands command prompt terminal. Syntax: installing requests package install requests installing plyer package install plyer understand plyer building simple Desktop Notifier Python. Example based Plyer package following example, will create simple desktop notifier with help plyer package. Example: from plyer import notification notification_title 'GREETINGS FROM JAVATPOINT!' notification_message 'Thank reading. Have Good Day.' notification.notify( title notification_title, message notification_message, app_icon None, timeout toast False Output: Explanation: above snippet code, have imported notification object from plyer package. then defined string variables that stores value title message desktop notifier. last, have used notify() method. Within this method, have specified parameters like title consisting notification's title, message containing message displayed, app_icon containing icon displayed along with message, timeout consisting time display message (defaults 10), toast consisting Boolean value depicting simple message instead full notification. result, pop-up desktop displaying title message users. build desktop notifier daily tracker COVID statistics. Implementation Desktop Notifier Python order build Desktop Notifier Python daily tracker COVID stats, will follow steps shown below: STEP Installing required packages STEP Reading Coronavirus data from STEP Building Desktop Notifier Application STEP Making program background Since have already covered first step previous section, will start reading data associated with COVID stats from web. let's into project. Reading COVID stats from fetch data associated with Coronavirus using shown below, free replace country name with their country name. will using coronavirus data India this application. https://corona-rest-api.herokuapp.com/Api/india/ website will look like following: Building Desktop Notifier application have utilities required build this application, write code this application. Note: will easier code this offline compiler than online compiler, later stages this tutorial, will making this application execute background process computer; running online compiler then have download file which necessary offline compiler. Using offline editor like Visual Studio Code Code) suggested. Importing required libraries modules will start importing required libraries modules like datetime, time, requests, plyer. consider following snippet code demonstrating same: File: notifier.py importing required modules libraries import datetime read present date import time suspend execution specific time import requests retrieve COVID stats from from plyer import notification notification computer Explanation: have imported datetime module read current date above snippet code. have also imported time module suspend execution specific time. have then imported requests library order retrieve coronavirus data from web. last, have imported notification object from plyer library that will help notifications computer. Fetching data from will retrieve data from using requests library. consider following snippet code demonstrating same: File: notifier.py initializing variable with None (temporary) indicating that there data available currently covidStats None try: covidStats requests.get("https://corona-rest-api.herokuapp.com/Api/india") except: case data fetched lack internet print("Consider Checking internet connection") Explanation: above snippet code, have initialized variable covidStats that will store coronavirus data from web. However, have initially this variable None. then used try-except block. Within block, have used get() method requests library specifying website mentioned previously stored data covidStats variable. have printed statement within except block data fetched lack internet. Creating custom notification project. will create custom notification project using notify() method notification object imported from plyer library. snippet code same given below: File: notifier.py case fetched data (covidStats None): converting data into JSON format jsonData covidStats.json()['Success'] repeating loop multiple times while(True): notification.notify( defining title notification, title "COVID19 Stats {}".format(datetime.date.today()), defining message notification message "Total cases {totalcases}\nToday cases {todaycases}\nToday deaths {todaydeaths}\nTotal active {active}".format( totalcases jsonData['cases'], todaycases jsonData['todayCases'], todaydeaths jsonData['todayDeaths'], active jsonData["active"]), creating icon notification have download icon file format app_icon "covidProtection.ico", notification stays seconds timeout sleep seconds notification repeats after every hours time.sleep(60 Explanation: above snippet code, have used conditional statement check covidStats variable contains some data from web. have then converted this data into JSON format using json() method stored variable jsonData. have then used while() loop True repeat loop multiple times. Within this loop, have used notify() method notification object create notifier desktop. have specified title notification within this method followed message, icon, timeout. have printed current date title parameter data from jsonData variable message parameter. have icon notification, which have downloaded .ico file format specifying path app_icon parameter. have then timeout seconds that notification will stay that period. last, have used sleep() method time module order repeat above process every hours. coding section complete, application ready run. also change values timeout sleep() their preferences. Moreover, icon found https://icon-icons.com/icon/Covid-Corona-Hygiene-Mask-Health-Protect-Doctor/140787. save file following command command shell terminal: Syntax: python notifier.py before output, here complete project code. Complete Project Code following program file complete code 'Desktop Notifier' project. File: notifier.py importing required modules libraries import datetime read present date import time suspend execution specific time import requests retrieve COVID stats from from plyer import notification notification computer initializing variable with None (temporary) indicating that there data available currently covidStats None try: covidStats requests.get("https://corona-rest-api.herokuapp.com/Api/india") except: case data fetched lack internet print("Consider Checking internet connection") case fetched data (covidStats None): converting data into JSON format jsonData covidStats.json()['Success'] repeating loop multiple times while(True): notification.notify( defining title notification, title "COVID19 Stats {}".format(datetime.date.today()), defining message notification message "Total cases {totalcases}\nToday cases {todaycases}\nToday deaths {todaydeaths}\nTotal active {active}".format( totalcases jsonData['cases'], todaycases jsonData['todayCases'], todaydeaths jsonData['todayDeaths'], active jsonData["active"]), creating icon notification have download icon file format app_icon "covidProtection.ico", notification stays seconds timeout sleep seconds notification repeats after every hours time.sleep(60 Output: Making application background have finally built Python application, runs fine when execute program. However, isn't tedious execute application every time order notification? Here solution that will allow make this process automated running application background process computer system. method making Python application background following command will allow make application background. Note that required type this command command prompt they utilizing Windows their Operating System terminal case Linux Operating System. Syntax: pythonw.exe .\<file-name> Note: replace <file-name> with their filename. above desktop notifier application background using this command. Syntax: pythonw.exe .\notifier.py Hence, application started running background. confirm that application running background? order confirm application running background, open task manager their computer system, background process Python running. following image depicts same: stop getting Notifications from Desktop Notifier Application? order stop getting notifications, open task manager search background process named Python. Right-click process click 'End task' option kill process. Other areas where utilize this approach There different areas available where this approach. Some examples Daily notification take medicines. Hourly notification take break drink water. Monthly notifications bills, many more. this desktop notifier application their requirements. Conclusion have learned build simple desktop notifier using plyer library Python programming language from this tutorial. have also learned retrieve data from desktop notifier. have also understood method creating customized desktop notification application. This application works operating system like Windows, Linux, Mac. last, have learned make application background. Next TopicHow handle Time zones Python prev next