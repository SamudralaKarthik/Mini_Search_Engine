next prev Shallow Copy Deep Copy Python this tutorial, will learn create shallow copy deep copy using Python script. Generally, (assignment operator) create copy Python object. Let's understand full concept related creating copies Python. Copy Python know, assignment operator used create copy Python object, this true; only create binding between target object. When assignment operator, instead creating object, creates variable that shares object's reference. copies helpful when user wants make changes without modifying original object same time. user also prefers create copy work with mutable objects. Let's understand following example. Example list1 [[1, 'a']] list2 list1 list2[1][2] print('Old List:', list1) print('ID List:', id(list1)) print('New List:', list2) print('ID List:', id(list2)) Output: List: [[1, 'a']] List: 1909447368968 List: [[1, 'a']] List: 1909447368968 Explanation above output, that both variable list1 list2 share same 1909447368968. make changes value list1 list2, change will reflect both. Types Copies Python main motive create copy Python object that modify copy without changing original data. Python, there methods create copies. Shallow Copy Deep Copy will copy module create above copies. copy Module copy module used create shallow copy deep copy. Let's each method. Shallow Copy shallow copy copy object that stores reference original elements. creates collection object then occupying with reference child objects found original. makes copies nested objects' reference doesn't create copy nested objects. make changes copy object will reflect original object. will copy() function implement Example importing "copy" copy operations import copy initializing list list1 [3,5], using copy shallow copy list2 copy.copy(list1) original elements list print ("The original elements before shallow copying") range(0,len(list1)): print (list1[i],end=" print("\r") adding element list list2[2][0] checking change reflected print ("The original elements after shallow copying") range(0,len( list1)): print (list1[i],end=" Output: original elements before shallow copying original elements after shallow copying [10, above code, made chance list1 that reflected other list. Example import copy list1 [[1, [10, 12]] list2 copy.copy(list1) list1.append([13, 14,15]) print("Old list:", list1) print("New list:", list2) Output: list: [[1, [10, 12], [13, 15]] list: [[1, [10, 12]] Explanation above code, have created shallow copy list1. newly created list2 contains reference original nested object stored list1. have then appended [13, into list sublist copied list. Deep Copy Python deep copy process where create object copy elements recursively. will deecopy() method which present copy module. independent copy created original object entire object. Let's understand following example. Example import copy [[1, copy.deepcopy(xs) print(x) prin(z) Output: [[1, [[1, Explanation above output, that clone that have created using deecopy() method. make change child won't affect original object. Both objects fully independent deep copy. list cloned recursively, including child objects. import copy [[1, copy.deepcopy(x) x[2][2] 'Hello' print(x) Example import copy list1 [3,5], using deepcopy deep copy list2 copy.deepcopy(list1) original elements list print ("The original list: range(0,len(list1)): print (list1[i],end=" print("\r") adding element list list2[1][0] Change reflected print ("The list after deep copying: range(0,len( list1)): print (list2[i],end=" print("\r") Change reflected original list deep copy print ("The original elements:") range(0,len( list1)): print (list1[i],end=" Output: original list: list after deep copying: original elements: Copying Arbitrary Python Objects also copy arbitrary Python objects including custom classes using copy method. copy.copy() copy.deepcopy() method used duplicate objects. Let's understand following example. Example import copy class Func_New: __init__(self, self.x self.y __repr__(self): return 'Func_new(%r, %r)' (self.x, self.y) Func_New(50, copy.copy(a) print(a) print(b) print(a print(b Output: Func_new(50, Func_new(50, False False Explanation above code, have created user define class named Func_new defined __repr__() inspect objects. Next, created shallow copy using copy module. instantiated class check whether both original shallow copy. Points Remember compound objects main difference between shallow deep copy. objects that contain other objects, such list class instance, called list class instances. shallow copy creates compound object then adds reference object found original. deep copy creates compound object then adds reference object found original. copy arbitrary objects (including custom classes) with copy module. Next TopicAtom Python prev next