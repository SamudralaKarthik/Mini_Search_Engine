next prev Sklearn Logistic Regression this tutorial, will learn about logistic regression model, linear model used classifier classification dependent features. will implement this model datasets using sklearn logistic regression class. What logistic regression? Predictive analytics classification frequently this kind machine learning regression model, also referred logit model. Depending given dataset independent features, logistic regression model calculates probability that event will occur, such voting voting. Given that result probability happening event, dependent feature's range logistic regression model, odds winning probability success event divided probability failure-are transformed using logit formula. following formulas used represent this logistic function, which sometimes referred odds natural logarithm odds: Logit(pi) dependent target feature equation logistic regression model, while independent feature. most frequent method estimating coefficients this linear model using maximum likelihood estimation (MLE). find best odds, this approach iteratively evaluates various values coefficients. log-likelihood function created after each these iterations, logistic regression aims maximise this function most accurate parameter estimate. conditional probabilities every class observations computed, logged, added together produce forecast probability once best coefficient coefficients, there multiple independent features) been identified. classification binary, probability less than predicts probability more than indicates Once logistic regression model been computed, recommended assess linear model's goodness well predicts classes dependent feature. Hosmer-Lemeshow test well-liked technique evaluating model fit. Sklearn Logistic Regression Example Sklearn Logistic Regression class sklearn.linear_model.LogisticRegression(penalty 'l2', dual False, 0.0001, 1.0, fit_intercept True, intercept_scaling class_weight None, random_state None, solver 'lbfgs', max_iter 100, multi_class 'auto', verbose warm_start False, n_jobs None, l1_ratio None) Parameters: penalty{'l1', 'l2', 'elasticnet', 'none'}, default='l2': This parameter will define rule penalty: "none": penalty imposed; "l2": specify penalty term, default option. Specify penalty term with "l1" command. Specify penalty term with 'elasticnet' command. dualbool, default=False: This parameter defines type formulation, dual primary. tolfloat, default=1e-4: This specifies tolerance value stop iteration. Cfloat, default=1.0: inverse regularisation strength must positive floating point number. fit_interceptbool, default=True: This parameter specifies bias intercept constant must included decision function. intercept_scalingfloat, default=1: useful only self.fit_intercept defined True solver 'liblinear' applied. class_weightdict 'balanced', default=None: This parameter associates weights classes format {"class label: weight"}. classes expected possess weight weights provided. random_stateint, RandomState instance, default=None: This parameter used shuffle input data solver ["sag," "saga," "liblinear"]. solver{'newton-cg', 'lbfgs', 'liblinear', 'sag', 'saga'}, default='lbfgs Algorithm optimization problem. Default 'lbfgs'. Sklearn Logistic Regression Classifier Code Python program implement sklearn logistic regression model load_iris dataset sklearn Importing required libraries from sklearn.datasets import load_iris from sklearn.linear_model import LogisticRegression Loading dataset load_iris(return_X_y True) Creating instance class Logistic Regression model logreg LogisticRegression(random_state Fitting dataset logistic regression model logreg.fit(X, Predicting values Y_pred logreg.predict(X[:2, print(Y_pred) Y_predict logreg.predict_proba(X[:2, print(Y_predict) Calculating accuracy score model score logreg.score(X, print(score) Output: [[9.81764058e-01 1.82359281e-02 1.43020498e-08] [9.71660947e-01 2.83390229e-02 2.99214023e-08]] 0.9733333333333334 Logistic Regression Example Code Python program implement sklearn logistic regression model load_iris dataset sklearn Importing required libraries from sklearn.datasets import load_iris from sklearn.linear_model import LogisticRegressionCV Loading dataset load_iris(return_X_y True) Creating instance class Logistic Regression logreg LogisticRegressionCV(cv random_state Fitting dataset logistic regression model logreg.fit(X, Predicting values Y_pred logreg.predict(X[:2, print(Y_pred) Y_predict logreg.predict_proba(X[:2, print(Y_predict) Calculating accuracy score model score logreg.score(X, print(score) Output: [[9.91624054e-01 8.37594552e-03 2.92559111e-11] [9.85295789e-01 1.47042107e-02 1.03510087e-10]] 0.9866666666666667 Scikit-learn Logistic Regression Coefficients this part, will learn sklearn logistic regression coefficients. number which multiply value independent feature referred coefficient that feature. Here, feature's size direction expressed using logistic regression. Code Python code perform Logistic Regression using sklearn.linear_model Importing required modules classes from sklearn.datasets import load_iris from sklearn.metrics import accuracy_score from sklearn.linear_model import LogisticRegression from sklearn.model_selection import train_test_split Loading dataset data load_iris() Splitting independent dependent variables data.data data.target print("The size complete dataset len(X)) Creating instance LogisticRegression class implementing logistic regression log_reg LogisticRegression() Segregating training testing dataset X_train, X_test, Y_train, Y_test train_test_split(X, test_size=0.3, random_state Performing logistic regression train dataset log_reg.fit(X_train, Y_train) Printing coefficients print(log_reg.coef_) Output: size complete dataset [[-0.35041623 0.91723236 -2.23583834 -0.97778255] 0.56061567 -0.44283218 -0.21739708 -0.64651405] [-0.21019944 -0.47440019 2.45323542 1.6242966 Sklearn Logistic Regression Feature Importance this part, will study sklearn's logistic regression's feature importance. method called "feature importance" assigns weight each independent feature and, based that value, concludes valuable information forecasting target feature. Code Python program learn feature importance logistic regression Importing required libraries from sklearn.datasets import make_classification from sklearn.linear_model import LogisticRegression import matplotlib.pyplot Creating dependent independent features using make_classification sklearn make_classification(n_samples 1500, n_features n_informative n_redundant random_state Creating instance model logreg LogisticRegression() Fitting data train model logreg.fit(X, weights logreg.coef_[0] print(weights) Plotting feature importance graph each feature ind, coeff enumerate(weights): print(f"Feature: {ind}, weight: {coeff}") plt.bar([n range(len(weights))], weights) plt.show() Output: 1.96365376 -0.11875128 -0.32930302 1.23664458 -1.40461804] Feature: weight: 1.9636537611525497 Feature: weight: -0.1187512810730595 Feature: weight: -0.32930302369908127 Feature: weight: 1.236644582783369 Feature: weight: -1.4046180417231233 Sklearn Logistic Regression Cross-Validation Code Python program test accuracy Logistic Regression model using cross-validation test Improting required libraries from numpy import mean, from sklearn.datasets import make_classification from sklearn.linear_model import LogisticRegression from sklearn.model_selection import cross_val_score, KFold Creating dependent independent features using make_classification sklearn make_classification(n_samples 1500, n_features n_informative n_redundant random_state Creating instance model logreg LogisticRegression() Fitting data train model logreg.fit(X, Using KFold cross-validation validate dataset cross_validation KFold(n_splits random_state shuffle True) Calculation score using cross_val_score score cross_val_score(logreg, scoring 'accuracy', cross_validation, n_jobs print("Cross-validation accuracy scores each split score) print("mean standard deviation scores mean(score), std(score)) Output: Cross-validation accuracy scores each split [0.80666667 0.80666667 0.81333333 0.86666667 0.78666667 0.78 0.82 0.80666667 0.83333333] mean standard deviation scores 0.812 0.023247461032216934 Next TopicWhat Sklearn Python prev next