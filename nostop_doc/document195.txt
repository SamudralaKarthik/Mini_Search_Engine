next prev Python __call__ method Introduction Magic Methods Method Names having double underscores prefixes suffixes reserved methods particular Python. example, __init__ method used object constructors __call__ method making object callable. call these methods dunder methods, where dunder refers Double Under (Underscores). These dunder methods also known magic methods However, there nothing magical related them. There many developers Python community word 'magic', delivers feeling that this method discouraged, quite contradiction factual. Understanding callable function Object Python called callable when that object defined within __call__() function. function same defined x(arg …), which short x.__call__(arg1, arg2, …). Note: callable() method returns Boolean value whether object appears callable. This function returns True object callable; else, returns False. Moreover, also possible that this function return True even when object callable. Still, this method returns False, then object callable. Moreover, Python class always Callable. Thus, always utilize callable() function with object class, class itself. consider following example order understand behavior Python callable() function. Example: creating class class Employee: defining function __init__(self, emp_id): self.i emp_id instantiating class Employee(15) checking class object callable print('Employee Class callable callable(Employee)) print('Employee object callable Output: Employee Class callable True Employee object callable False Explanation: above example, have defined class Employee that takes variable have then defined function instantiated class. last, have checked whether class object callable using callable() function. consider example __call__() function. Example: creating Person Class class Person: person_id person_name defining initializing function __init__(self, personid, personname): self.person_id personid self.person_name personname defining callable function __call__(self, *args, **kwargs): print('Printing Arguments') print(*args) print('Printing Keyword Arguments') key, value kwargs.items(): print("%s (key, value)) instantiating class Person(15, 'George') printing object print(m) checking object callable print("The Person object callable: callable Output: <__main__.Person object 0x000002706DF41FD0> Person object callable: True Explanation: above example, have defined Person class variables person_id person_name have then defined initializing function along with callable function. last, have instantiated class, printed object, checked whether object callable not. result, person object appears callable. Moreover, observe that have used *args allow passing variable arguments **kwargs allow passing named arguments __call__() method. Now, consider another example where will have used callable() function check whether object callable then called object function. Example: callable(m): m() m(15, m.__call__(15, m(15, {'a': 'b': m(15, 'B', personname 'George', personid Output: Printing Arguments Printing Keyword Arguments Printing Arguments Printing Keyword Arguments Printing Arguments Printing Keyword Arguments Printing Arguments {'a': 'b': Printing Keyword Arguments Printing Arguments Printing Keyword Arguments personname George personid Explanation: above example, have defined if-statement where object callable, then object called function without arguments, with only arguments, with __call__() function, with arguments different types with arguments keyword arguments. result, required objects have been called successfully. Next TopicPython heapq module prev next