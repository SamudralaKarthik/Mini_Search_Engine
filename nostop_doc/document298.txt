next prev Difference Between Class-based views Function-Based Views Django most popular framework development. reason popularity that provides many built-in features that save lots time developer. beginners then will take some time understand flow project. once some experience then easily understand execution features. Django based pattern means Model View Template. mainly two-types view function-Based views class based views. beginners, must aware from function based views (FBV). When Django introduced, only supported function-based view later Django added concept class-based views. class-based views reduce redundancy code. also supports concept Django. this tutorial, will learn in-depth CBC different from each other. perform same task using function-based views class-based views. both approaches different. Requirements Django Views Below points that should remember about Django views. first positional argument view should should return HttpResponse object, should raise exception. Django views callable. both methods either function-based class-based. While using CBVs inherit method as_view() that uses dispatch() method call method appropriate depending HTTP requests. Let's have detailed explanation creating views. Function-based Views Function-based views simple beginners easy understand them. helps understand core concept Django fundamentals. provides advantages understand django concept from scratch. Django project usually have CRUD operations, need implement same code multiple times unnecessarily that's Django class-based views come into scenario. class based-views created solving code redundancy problems. Let's understand following pros cons FBV. Advantages Function Based Views advantages given below. Easy implement, read understand Explicit code flow Decorator implemented easily Good one-off specialized functionality Helps understand core concept Django. Disadvantages Function Based Views cons given below. Code Redundancy biggest concern FBV. Condition branching will used handle HTTP request. Hard extend code. Let's understand following implementation FBV. Code create_view(request, pk): 	template_name 'form.html' 	form_class MyForm 	form form_class request.method 'POST': form form_class(request.POST) form.is_valid(): form.save() return HttpResponseRedirect(reverse('list-view')) 	return render(request, template_name, {'form': form}) Class Based Views Class-based views advance create views Python. implemented project Python objects instead functions. substitute FBV, they provide advantages over function based views. reduces code repetition takes cares basic operations such deleting adding item. slightly hard concept class-based views beginners. should through documentation, will have study properly. have clear idea about function based views, move class based views. Let's understand following pros cons views Python. Advantages Class Based Views Below advantages class based views. biggest advantages inheritance. allows inherit another class modified different cases. supports principle. prevents repetition code. Code reusability possible class based views. comes with built-in generic class-based views. class based views provides proper code structuring. different class instance method (instead conditional branching statement inside function-based-views) generate HTTP requests. Disadvantages Class Based Views Below disadvantages class based views. Hard understand complex implement. Implicit code flow. Extra import method override required view decorators. Let's implementation class based view. class MyCreateView(View): 	template_name 'form.html' 	form_class MyForm 	def get(self, request, *args, **kwargs): 		form self.form_class 		return render(request, template_name, {'form': form}) post(self, request, *args, **kwargs): 		form self.form_class(request.POST) form.is_valid(): 			form.save() 		return HttpResonseRedirect(reverse('list-view')) 		else: 	return render(request, self.template_name, {'form': form}) call as_view() method serve request user. as_view() method calls dispatch() method determine which class method needs executed, depending HTTP request. implement following way. urlpatterns url(new/', MyCreateView.as_view(), name='original-create-view'), url(new_two/', MyCreateView.as_view(), name='modified-create-view') When Django generic class-based views, over-write helper method like get_form_class get_template_names. also some custom logic these points instead just overriding class attributes. ModelFormMixin best examples. form_valid method overridden with updated value stored self.object form_valid method overridden. Django Generic Class-Based View With help generic class based view, perform some important task such creating object, list views, pagination, form handling, archive views, delete view, etc. implement this importing django.views.generic. Generic class-based views excellent perform some essential tasks. speeds development process. Django provides mixins, generic class-based views. With help these tools solve most common tasks development. saves writing same code again again. below example, modify MyCreateView inherit from django.views.generic.CreateView. from django.views.generic import CreateView class FirstCreateView(CreateView): 	model MyModel 	form_class MyForm observe that, takes very less code comparison previous views. django.views.generic.CreateView comes with lots built-in functionality shortcuts. Let's discuss more details. default template should reside /<modelname>/<modelname>_form.html. modify setting class attributes template_name template_name_sufix. CreateView class, need specify model name form_class_attributes. also need specify success_url that will redirect that mentioned page after successful form submission. done using get_absoute_url(). specify fields' class attributes view. Below example form fields. from django import forms from models import MyModel class MyModelForm(forms.ModelForm): class Meta: 	model MyModel 	fields ['name', 'description'] Conclusion This debate among developers that which views best Class-based function-based views? have discussed use, cons, pros both types views. totally depends project requirement what comfortable for. some cases, class-based view performs well some case function based better. Next TopicHow handle cookies Django prev next