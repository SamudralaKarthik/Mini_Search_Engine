next prev Function Annotations Python Function annotations some random expressions which written with functions, they evaluated compile time. They exist time, there meaning these expressions python. They used interpreted third party external python libraries. know, function annotations used third-party libraries because different libraries have different benefits from these function annotations. example: Function annotations with strings used messages compile time describe functionality different methods, classes variables. [def fxn(a:"int", b:"float"=5.0) "int"] above example, these annotations used define data types parameters because python supports dynamic type checking, there check return type data type. Libraries like mypy these kinds annotations. Syntax function annotations Function annotations written many ways function like follows: Function annotation simple parameters: functionName(argumentName expression): this way, colons after argument name then write expression after colon. expression anything like data type argument string which contains message. Example: fxn(var1 expression1,var2:expression2:96): Function annotations excess parameters: want arbitrary number arguments function parameters with same expression, then this function annotation. Example: fxn(*arg1: expression1,**arg2:expression2): Function annotation nested parameters: want pass list function call argument, then have apply function annotations individual elements separately. Example: fxn((var1:expression,var2:expression),(var3:expression,var4:expression)): Function annotations return type: Annotation return type done '->' operator. Example: fxn(var1:expression) expression2: understand function annotations Python following example: Example: program print Fibonacci series using function annotations fibonacci(n:'int', res:'list'=[])-> 'list': 		return 	else: 		if len(res)< 			res.append(1) 			fibonacci(n-1, res) 		else: 			last res[-1] 			second_last res[-2] 			res.append(last second_last) 			fibonacci(n-1, res) 		return print(fibonacci(8)) Output: Explanation: above code, have function which used calculate starting Fibonacci numbers. takes empty list argument returns list which contains answer. function description, have defined that will type integer variable will type list. With function annotation, also defined that return type would list. Note: access function annotations used function various methods: Using '__annotations__': attribute __annotations__ used annotations function. returns dictionary, which contains pairs keys values where will arguments value will their individual expression. Example Python program print Fibonacci series using function annotations access annotations fibonacci(n:'int', res:'list'=[])-> 'list': 		return 	else: 		if len(res)< 			res.append(1) 			fibonacci(n-1, res) 		else: 			last res[-1] 			second_last res[-2] 			res.append(last second_last) 			fibonacci(n-1, res) 		return print(fibonacci(8)) print(fibonacci.__annotations__) Output: Explanation: above code, have used function annotations function, which returns list starting Fibonacci numbers. Also, printed function annotation using '__annotations__' attribute, result form dictionary. Using standard python module: Python, there standard module named pydoc which used function annotations. pydoc.help() function provides shell environment where information related file, easily function's annotations also. Using inspect module: python, have another standard module named inspect. This module provides information about file, module, class object. functions information. Inspect module's getfullargspec function will used function annotation details other information. Example Python program print Fibonacci series using function annotations import inspect fibonacci(n:'int', res:'list'=[])-> 'list': 		return 	else: 		if len(res)< 			res.append(1) 			fibonacci(n-1, res) 		else: 			last res[-1] 			second_last res[-2] 			res.append(last second_last) 			fibonacci(n-1, res) 		return print(fibonacci(8)) print(inspect.getfullargspec(fibonacci)) Output: Explanation: above code, used getfullargspec function, complete details about function, including function annotation also. Next TopicNumpy-3d Matrix Multiplication prev next