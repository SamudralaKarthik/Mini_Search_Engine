next prev Looping technique Python Python specific inbuilt functions, which supports numerous looping techniques several sequential containers. These looping functions methods very useful competitive coding. used different projects which user some specific technique with loops maintaining whole structure program. These techniques help save time memory space user does have declare extra variables traditional approach loops. Where these looping techniques used? Different types looping techniques used places where user does have manipulate structure code orders whole containers. Instead, user print elements single-use instance, in-place change occurs container. These also used saving time memory. Looping Techniques using Python Data Structures: enumerate(): enumerate() function used looping through containers printing index number with value present that specific index. Example: key, value enumerate(['Joe', 'waited', 'for', 'the', 'train', ',', 'but', 'the', 'train', 'was', 'late', '.']): print(key, value) Output: waited train train late zip(): zip() function used combining similar containers, such dict with dict list with list, printing their values sequence. loop will exist only after smaller container. Example: first, will initialize list question ['animal', 'shape', 'time'] answer ['tiger', 'square', '11 clock'] zip() function will used combining these containers question, answer zip(question, answer): print('What this {0}? this {1}.'.format(question, answer)) Output: What this animal? this tiger. What this shape? this square. What this time? this clock. items(): items() function used looping through dictionary printing values sequence. Example: dict "Joe" "waited", "for" "the", "train" "but", "the" "train", "was" "late" items print dictionary key-value pair print ("The value pair using items dict.items(): print(a, Output: value pair using items waited train train late sorted(): sorted() function used printing container sorted order. This function does sort container, used printing container sorted order, instance. user set() function with sorted() function remove duplicate value output. Example first, initialize list list using sorted() print list sorted order print ("The list sorted order sorted(list) print print ("\r") sorted() function set() function printing list sorted order set() removes duplicates output value. print ("The list sorted order (without duplicates) sorted(set(list)) print Output: list sorted order list sorted order (without duplicates) Example initializing list list2 ['Joe', 'waited', 'for', 'the', 'train', 'but', 'the', 'train', 'was', 'late'] sorted() function set() function printing list sorted order sentence sorted(set(list2)): print(sentence) Output: late train waited reversed(): reserved() function used printing values container reversed order. Example initializing list list using revered() function printing list reversed order print ("The list reversed order reversed(list) print Output: list reversed order Example reversed(range(1, 2)): print Output: Conclusion this tutorial, have discussed different types lopping techniques that useful saving memories time. Next TopicMetaprogramming with Metaclasses Python prev next