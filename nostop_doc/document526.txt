next prev Pathlib module Python Interacting with file system working with files crucial various reasons. simplest situations merely entail reading writing files, more sophisticated actions occasionally required. Perhaps need show files directory specific kind, locate file's parent directory, generate file name that doesn't exist. It's impossible develop Python script that doesn't file system somehow. might easy reading data file into pandas DataFrame difficult processing hundreds files highly nested directory structure. these purposes, Python's standard library includes numerous useful methods, notably pathlib module. pathlib module initially appeared Python 3.4, since been improved each succeeding version. Pathlib object-oriented filesystem interface that provides more natural, platform-agnostic, pythonic interact with filesystem. recently completed short project which opted sort handle thousands files nested directory structure using pathlib pandas. That project inspired this article. Once came together, blown away pathlib's capabilities, I'll using future projects without hesitation. versions Python contain pathlib library. obtain newest upgrades, recommend using most recent version Python. I'll using Python this post. advantages pathlib module that easier create routes without using os.joindir. When start tiny projects, example, os.getcwd() create directories subdirectories beneath current working directory. keep working input output files those locations. This that code might look: Syntax: import in_dir os.path.join(os.getcwd(), "in") out_dir os.path.join(os.getcwd(), "out") in_file os.path.join(in_dir, "input.xlsx") out_file os.path.join(out_dir, "output.xlsx") Traditionally, Python used ordinary text strings represent file paths. This proved adequate, little laborious, with help from os.path standard library second example introduction shows). However, because paths strings, functionality dispersed across standard library, including libraries such os, glob, shutil. move text files archive directory, following example requires three import statements: Syntax: import glob import import shutil file_name glob.glob('*.txt'): new_path os.path.join('archive', file_name) shutil.move(file_name, new_path) conceivable, usually, terrible idea, utilise standard string methods with pathways represented strings. Instead joining paths with would with conventional strings, should os.path.join(), which joins paths using operating system's correct path separator. Remember that Windows, separator whereas, Linux, This distinction result difficult-to-detect problems like first example introduction, which only works Windows paths. address these issues, pathlib module added Python (PEP 428). collects required functionality place makes accessible methods properties simple Path object. Other packages used strings file paths first, since Python 3.6, pathlib module been supported throughout standard library, thanks part creating file system path protocol. backport Python also available stuck with legacy Python. Code: #Sample python code usage pathlib module provided python importing required libraries that used across program import pathlib import class written which will have different functions perform simulate different functionalities pathlib library provided python class FunctionalitiesOfPathlib: 	#Constructor written that will just placeholder case further actions taken before object initialisation this class 	def __init__(self): 		pass this function used list subdirectories that present directory this function prints directories that present directory which passed parameter this function part directory which passed parameter this function used parent directory directory inside parent directory treated children directories 	def list_all_subdirectories_in_a_directory(self,path_of_main_directory): path_object pathlib.Path(path_of_main_directory) item path_object.iterdir(): item.is_dir(): 		print(item) this function used list files that present particular directory list files that present directory this function called with parameter directory whose files want list point noted here that this function only list files inside parent directory will list subdirectories children directories present inside parent directory 	def list_all_files_in_a_directory(self,path_of_main_directory): 		path_object pathlib.Path(path_of_main_directory) 		for item path_object.iterdir(): 			if item.is_dir(): 				print(item) function written that will used check whether file present particular location return type this function Boolean type which means returning value this function determined presence file that particular location file specified present specified location then return type this function true other hand specified file present particular directory return type this function will changed false type similar message printed according 	def check_file_present(self,path_to_file): 		path_object pathlib.Path(path_to_file) 		if path_object.is_file(): 			print("File present.") 			return True 		else: 			print("File present.") 			return False function written current working directory code execution whenever user selects execution this function returns prints current working directory where code getting executed point noted here that user performed change directory operation then latest directory will created current working directory program execution same will printed displays current working directory code 	def get_current_working_directory(self): 		code_cwd pathlib.Path().cwd() 		print("The current working directory {}".format(code_cwd)) this function used change current working directory code execution let's code executed directory want change current working directory directory this function that will change current working directory directory whose path specified parameter this function show absolute path which passed parameter this function will treated next current working directory return type this function Boolean type that means returning value this function determined success failure change current working directory operation current working directory changed successfully then return type true whereas other hand Changing current working directory field some reasons that return type this function will changed false 	def change_current_working_directory(self,path_to_new_directory): 		code_cwd pathlib.Path().cwd() 		path_object pathlib.Path(path_to_new_directory) 		return_code path_object.cd() 		if return_code: 			print("The Current working directory changed successfully from {}".format(code_cwd,path_to_new_directory)) 			return True 		else: 			print("Unable change current working directory.") 			return False main function written that will provide menu-driven approach user call above-written functions showing different functionalities pathlib module Python this main function called execute code main(): 	while(True): 		print("Please choose appropriate options::") 		print("1. print sub-directories folder/dir.") 		print("2. print files present inside folder/directory.") 		print("3. Check existence specified file") 		print("4. check current directory code execution.") 		print("5. modify current directory code execution. (using chdir() function)") 		print("6. exit from code execution.") 		menu_choice input() 		menu_choice int(menu_choice) 		pathlib_object FunctionalitiesOfPathlib() user chooses first option then user asked absolute path directory whose subdirectories wants list after entering absolute path subdirectories present entered directory listed 		if menu_choice 			print(">Enter absolute path directory whose sub-directories want list::") 			input_str input() 			pathlib_object.list_all_subdirectories_in_a_directory(input_str) selecting second option user again asked absolute path directory whose files user wants list after adding path directory files present that directory listed 		elif menu_choice 			print(">Enter absolute path directory whose files want list::") 			input_str input() 			pathlib_object.list_all_files_in_a_directory(input_str) selecting option user have path file whose existence user wants check file present specified location user prompted with successful message other hand file present user prompted with unsuccessful message 		elif menu_choice 			print(">Enter absolute path file which want check present::") 			input_str input() 			pathlib_object.check_file_present(input_str) selecting fourth option current working directory code printed 		elif menu_choice 			pathlib_object.get_current_working_directory() selecting fifth option above show menu user asked absolute path directory which user wants change then that directory will treated current working directory code execution successful change current working directory specified directory successful message prompted user whereas other hand change current working directory unsuccessful reason same message will prompted user indicating about unsuccessful change directory 		elif menu_choice 			print(">Enter absolute path directory which want change::") 			input_str input() 			pathlib_object.change_current_working_directory(input_str) 		print("Do want continue exit code execution?[y/n]") 		continue_or_exit input() 		#After completion round question prompted user asking whether want continue code execution want exit code depending upon input provided user further actions taken user wants continue code execution perform further operations related listing dir, code continued whereas other hand user wants exit code execution exit function called program ended 		if continue_or_exit continue_or_exit 'Y': 			pass 		elif continue_or_exit continue_or_exit 'N': 			sys.exit() __name__ '__main__': 	main() Output: [emailÂ protected]:/# python3 /home/nirnay/code.py Please choose appropriate options:: print sub-directories folder/dir. print files present inside folder/directory. Check existence specified file check current directory code execution. modify current directory code execution. (using chdir() function) exit from code execution. >Enter absolute path directory whose sub-directories want list:: /directory1 /directory1/directory4 /directory1/directory3 /directory1/directory2 want continue exit code execution?[y/n] Please choose appropriate options:: print sub-directories folder/dir. print files present inside folder/directory. Check existence specified file check current directory code execution. modify current directory code execution. (using chdir() function) exit from code execution. >Enter absolute path directory whose files want list:: /directory1 /directory1/java_code.java /directory1/c++_code.c++ /directory1/python_code.py want continue exit code execution?[y/n] Please choose appropriate options:: print sub-directories folder/dir. print files present inside folder/directory. Check existence specified file check current directory code execution. modify current directory code execution. (using chdir() function) exit from code execution. >Enter absolute path file which want check present:: /directory1/python_code.py file present. want continue exit code execution?[y/n] Please choose appropriate options:: print sub-directories folder/dir. print files present inside folder/directory. Check existence specified file check current directory code execution. modify current directory code execution. (using chdir() function) exit from code execution. current working directory want continue exit code execution?[y/n] Please choose appropriate options:: print sub-directories folder/dir. print files present inside folder/directory. Check existence specified file check current directory code execution. modify current directory code execution. (using chdir() function) exit from code execution. >Enter absolute path directory which want change:: /directory1 Current working directory changed successfully from /directory1 want continue exit code execution?[y/n] Please choose appropriate options:: print sub-directories folder/dir. print files present inside folder/directory. Check existence specified file check current directory code execution. modify current directory code execution. (using chdir() function) exit from code execution. current working directory /directory1 want continue exit code execution?[y/n] Please choose appropriate options:: print sub-directories folder/dir. print files present inside folder/directory. Check existence specified file check current directory code execution. modify current directory code execution. (using chdir() function) exit from code execution. >Enter absolute path directory whose sub-directories want list:: /directory1 /directory1/directory4 /directory1/directory3 /directory1/directory2 want continue exit code execution?[y/n] Please choose appropriate options:: print sub-directories folder/dir. print files present inside folder/directory. Check existence specified file check current directory code execution. modify current directory code execution. (using chdir() function) exit from code execution. >Enter absolute path directory which want change:: /directory1/directory2 Current working directory changed successfully from /directory1 /directory1/directory2 want continue exit code execution?[y/n] Please choose appropriate options:: print sub-directories folder/dir. print files present inside folder/directory. Check existence specified file check current directory code execution. modify current directory code execution. (using chdir() function) exit from code execution. current working directory /directory1/directory2 want continue exit code execution?[y/n] Please choose appropriate options:: print sub-directories folder/dir. print files present inside folder/directory. Check existence specified file check current directory code execution. modify current directory code execution. (using chdir() function) exit from code execution. >Enter absolute path directory whose files want list:: /directory1/directory2 /directory1/directory2/files6 /directory1/directory2/files1 /directory1/directory2/files3 /directory1/directory2/files4 /directory1/directory2/files2 /directory1/directory2/files5 /directory1/directory2/files8 /directory1/directory2/files10 /directory1/directory2/files7 /directory1/directory2/files9 want continue exit code execution?[y/n] Please choose appropriate options:: print sub-directories folder/dir. print files present inside folder/directory. Check existence specified file check current directory code execution. modify current directory code execution. (using chdir() function) exit from code execution. >Enter absolute path directory which want change:: /directory1/directory4 Current working directory changed successfully from /directory1/directory2 /directory1/directory4 want continue exit code execution?[y/n] Please choose appropriate options:: print sub-directories folder/dir. print files present inside folder/directory. Check existence specified file check current directory code execution. modify current directory code execution. (using chdir() function) exit from code execution. >Enter absolute path directory which want change:: /directory1/directory3 Current working directory changed successfully from /directory1/directory4 /directory1/directory3 want continue exit code execution?[y/n] Please choose appropriate options:: print sub-directories folder/dir. print files present inside folder/directory. Check existence specified file check current directory code execution. modify current directory code execution. (using chdir() function) exit from code execution. current working directory /directory1/directory3 want continue exit code execution?[y/n] [emailÂ protected]:/# tree directory1 directory1/ c++_code.c++ directory2 files1 files10 files2 files3 files4 files5 files6 files7 files8 files9 directory3 files11 files12 files13 files14 files15 files16 files17 files18 files19 files20 directory4 files21 files22 files23 files24 files25 files26 files27 files28 files29 files30 java_code.java python_code.py Explanation: Before looking into output above-written code, directory structure shows parent directory named directory three children directories named directory directory directory respectively. There files present inside each child's directory, parent directory, apart from these three children's directories, three files also present. look output above-written code, execution above-written program, user prompted with options first list subdirectories that present inside parent directories second option list files that present particular directory option check whether particular file existing particular location option print current working directory code execution option change current working directory code execution directory that specified parameter this functionality method. last options execute code execution. Conclusion this article, have understood pathlib module python have seen various case scenarios where different functionalities offered pathlib module. Next TopicHow Build Hash Function Python Beginners prev next