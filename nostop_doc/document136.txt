next prev Python Forensics Virtualization Hash Functions this tutorial, will learn Forensics science using Python, basic Python forensics applications, Hash functions, Cracking Encryption, Visualization, Naming Conventions, Dshell Scapy, Network Forensics with detailed explanation. Introduction Collecting preserving evidence most essential cyber forensic investigation analysis computer devices. plays important role court room used against criminal. Nowadays, technology facilitates information just typing query browser. also invites cyber crooks. Cyber crooks those perform malicious activity using their system internet. They your information from sitting somewhere else. With wide applications, Python also provides facility work with digital forensics. using gather data, extract evidence, also encrypt password. will support reinstate reliability evidence. Before further, must familiar with Python advance concepts. Introduction Computational Forensics Computational Forensics part study which used solve problems various forensics disciplines. uses computer-based modeling, analysis, computer simulation recognition. Python Forensics invented Chet Homster. There also pattern evidence, such fingerprints, shoeprints, toolmarks documents. makes procedures, scope objects, substances. There also physiological behavioral patterns such digital evidence, DNA, crime scenes. also various algorithms deal with signal image processing. using algorithms, also handle the, data mining, computer graphics, machine learning, computer vision data visualization, statistical pattern recognition. words, computation forensics used study digital evidence, computational forensics deals with various types evidence. Naming Conventions Python Forensics Application must familiar with naming convention patterns follow Python Forensics guidelines. Consider following table. Naming Convention Example Local variables camelCase with optional underscore studentName Constant Uppercase, words separated underscores STUDENT_NAME Global variable Prefix with camelCase with optional underscores my_studentName Function PascalCase with optional underscores; active voice MystudentName Module Prefix with camel case _studentname Class Prefix class with Pascalcase; keep sort class_MyStudentName Object Prefix ob_with camelcase ob_studentName hashing algorithm best ways take input stream binary data. real life scenario, encrypt password, file, even kinds digital file data. algorithm takes input generates encrypted message. Let's given example. Example import sys,string,md5 print("Enter name") line=sys.stdin.readline() line=line.rstrip() md5_object=md5.new() md5_object.update(line) print(md5_object.hexdigest()) Python Hash Function Python hash function used vast amount data fixed value. input returns same output. hash stores features with precise information. Once data fixed value, that cannot revert. That's also refer one-way cryptographic algorithm. Let's understand following example Example import hashlib import uuid hash_pass(password): uuid.uuid4().hex return hashlib.sha256(s.encode() password.encode()).hexdigest() verify_password(hashed_password, user_password): password, hashed_password.split(':') return password hashlib.sha256(s.encode() user_password.encode()).hexdigest() new_password input('Enter your password :') hashed_password hash_pass(new_password) print('The hash string store hashed_password) Output: Enter your password: sharma hash string store 947782bdb0c7a5ad642f1f26179b6aef2d9857427b45a09af4fce3b8f1346e91:8a8371941513482487e5ab8af2ae6466 Now, will re-enter password. old_password input('Enter password verify_password(hashed_password, old_password): print(' Entered password correct') else: print('Passwords match') Output: Enter your password devansh hash string store 4762866edd3b49c7736163ef3d981e42629a09a9ca7e081f56d116e137d77b9c:ebbf5b16bd9f4b989505a495bf7ae9b9 Enter password sharma Passwords match hash function following properties. simply transform hash value input value. doesn't able produce same output given hash value. unrealistic transform input without moving hash value. Cracking Encryption Python must know encrypt text data that fetch during analysis evidence. First, understand basic cryptographic. Generally, secret messages sent army person convey their plans without read their enemies. These messages human-readable format. plain texts encrypted using encryption algorithm these texts called cipher text. Suppose general commander sends message senior save text from their enemies. Here, take shift plain text letter four place alphabet. Now, will each Let's understand following example crack vector data. Example import decryption(text,cipher): simple_text='' each cipher: (ord(each)-text) x+=95 simple_text chr(x) print(simple_text) cipher_text input('Enter message: range(1,95,1): decryption(i,cipher_text) Output: Enter message: r~ p| o{ nz lx kw jv iu ht eq dp dp~ co} bn bn| am{ `l `lz _k _ky jx iw hv gu Virtualization virtualization emulate system such workstations, networks storage. make virtual instance such resource. done with help hypervisor. virtualization hardware plays very important role computer forensics. using virtualization, following advantages. workstation validate state each investigation. recover deleted data including images drive virtual machine. virtual machine turn into recovery device that will help gather evidence. define following steps create virtual machine using Python Step Suppose consider local machine "dummy". Each Virtual Machine will have least memory. virmach_memory 1024 1024 Step Now, attach this virtual machine default cluster. virmach_cluster api.clusters.get(name "Default") Step Next, boot virtual machine from virtual HDD. vm_os params.OperatingSystem(boot [params.Boot(dev "hd")]) Now, will combine above steps into virtual machine parameter object. Let's understand following example. Example from ovirtsdk.xml import params from ovirtsdk.api import try: need provide credentials virtual machine API(url="https://HOST", username="Example", password="example123", ca_file="ca.crt") virmach_name "dummy" virmach_memory 1024 1024 calculating memory bytes virmach_cluster api.clusters.get(name="Default") virmach_template api.templates.get(name="Blank") here assigning parameters operating system virmach_os params.OperatingSystem(boot=[params.Boot(dev="hd")]) virmach_params params.VM(name=virmach_name, memory=virmach_memory, cluster=virmach_cluster, template=virmach_template, virmach_os) try: api.vms.add(vm=virmach_params) print("Virtual machine '%s' added successfully." virmach_name) except Exception print("Adding virtual machine '%s' failed: (virmach_name, ex)) api.disconnect() except Exception Output: Virtual Machine dummy added successfully. Network Forensics Python Python also provide facility work with network forensics. modern days, Python network forensics environment investing come across many difficulties. These problems responding breach report, executing assessments pertaining susceptibility, validating regularity compliances. Let's understand basic terminology network forensics. Client client runs personal computer workstation. Server server executes client's request. Protocols Protocols rule that must followed while data transfer. Websockets websockets protocol that provides full-duplex communication runs over connection. send bi-direction messages using websockets. With help those protocols, authenticate information sent received third party users. But, encryption necessary secure channels. Let's understand following example network Example import socket creating socket object sock socket.socket(socket.AF_INET, socket.SOCK_STREAM) getting local machine name host socket.gethostname() port 8080 connection hostname port. sock.connect((host, port)) Receive more than 1024 bytes temp sock.recv(1024) print("The client waits connection") sock.close() Output: client waits connection Python Scapy Dshell Let's understand brief introduction Python Scapy Dshell. Python Scapy scapy Python-based tool which analyze manipulate network traffic. With help scapy, analyze packet manipulation. also capture decode packets wide number protocols. benefit using scapy detailed report about network traffic investigator. third-party tools such fingerprint also used Scapy. Let's understand following example. Example #Imports scapy GeoIP toolkit import scapy, GeoIP from scapy import geoIp GeoIP.new(GeoIP.GEOIP_MEMORY_CACHE) locatePackage(pkg): extracts source address source pkg.getlayer(IP).src extracts destination address destination pkg.getlayer(IP).dst gets Country details source srcCountry geoIp.country_code_by_addr(source) dstCountry geoIp.country_code_by_addr(destination) gets country details destination print src+"("+sourceCountry+") "+destination+"("+destinationcountry+")\n" Output: source INDIA destination Python Dshell Dshell Python-based network forensics analysis toolkit. developed army research laboratory released open-source 2014. makes forensics investigation very easy. Dshell provides following decoders. reservedips used identify solutions problems. rip-http extracts files from HTTP traffic. large-flows decoder that represents list flows. Protocols identifies non-standard protocols. dns extracts DNS-related queries. Python Searching Searching most important part forensics investigation. Nowadays, good search upon investigator running evidence. Keyword searching from message pillar investigation. find strong evidence with help keyword. experience knowledge both required information from deleted messages. Python provides various built-in modules support search operation. investigator find result using keywords such "who", "what", "where", "when", "which", etc. Let's understand following example. Example Searching particular word from message str1 "This example Computational forensics gathering evidence!" str2 "string" print(str1.find(str2)) print(str1.find(str2, 10)) print(str1.find(str2, 40)) Output: Python Indexing Indexing feature that investigator gather potential evidence from files. evidence restricted within memory snapshot, disk image, file, network trace. very helpful reduce time time-consuming tasks like keyword searching. indexing also used locate keywords interactive searching phase. following example, have explained indexing Python. Example list1 [123, 'example', 'creative', 'indexing'] print("Index example list1.index('example')) print("Index indexing list1.index('indexing')) str1 "This message forensic investigation indexing" str2 "message" print("Index character keyword found print(str1.index(str2)) Output: Index example Index indexing Index character keyword found Python Image Library real meaning forensics investigation extract valuable information from available resources. Getting relevant information from resource essential report. helps derive appropriate result. Resource data either simple data structure such databases complex data structures such JPEG image. Investigator easily access information from simple data structure extracting information from complex data structure tedious task. Python provides Image library which known PIL. used image processing capabilities Python interpreter. also support file formats, graphics capabilities also provides powerful image processing. Let's understand following image extracting data from images. define programming example explain actually works. Step Suppose have following image where need extract details. Step image consists various pixel values. library uses extract image details gather evidence. Let's understand following example. Example from import Image im Image.open('penguin.jpeg', 'r') pix_val list(im.getdata()) pix_val_flat sets pix_val sets] print(pix_val_flat) Outputoutput returned form list. pixel value combination that gives better picture what data needed. Python Multiprocessing Support Forensics experts find difficulties apply digital solutions large digital evidence common crime. Most digital evidences single threaded that mean execute only command time. Let's brief introduction multiprocessing. Multiprocessing Multiprocessing ability system that support more than process. enables several programs concurrently. There types multiprocessing symmetric asymmetric processing. Let's understand following example multiprocessing. Example import random import multiprocessing list_append(count, out_list): count number process time range(count): out_list.append(random.random()) __name__ "__main__": size 810 procs jobs range(0, procs): out_list list() list processes process1 multiprocessing.Process( target=list_append, args=(size, out_list)) appends list processes jobs.append(process1) Calculate random number processes jobs: j.start() initiate process After processes have finished execution jobs: j.join() print("List processing complete.") Output: List processing complete Mobile Forensics Python Forensics investing only limited standard computer hardware such hard disk, CPUs, etc. Hardware followed with help techniques analyze non-standard hardware transient evidence. Nowadays, smartphones widely used digital investigation, they still meant non-standard. With proper research smartphones, extract photos, smartphones, messages. android smartphones uses PIN, alphanumeric password. password between digits/characters. following example, will through lock screen extract data. smartphone password generally stores inside file password.key /data/system. Android stores salted SHA1-hashsum MD5-hashsum this password. Let's following example. Example public byte[] passwordToHash(String password) (password null) return null; String algo null; byte[] hashed null; byte[] saltedPassword (password getSalt()).getBytes(); byte[] sha1 MessageDigest.getInstance(algo "SHA-1").digest(saltedPassword); byte[] MessageDigest.getInstance(algo "MD5").digest(saltedPassword); hashed (toHex(sha1) toHex(md5)).getBytes(); catch (NoSuchAlgorithmException Log.w(TAG, "Failed encode string because missing algorithm: algo); return hashed; above code sample code crack smartphone password. dictionary attack won't affected crack password since hashed password stored salt file. salt file string hexadecimal representation random integer bit. Rooted smartphones JTAG Adapter access salt file. Rooted Smartphones file's dump /data/system/password.key stored SQLite database under lock screen.password_salt. Password stored under settings.db. JTAG Adapter JTAG stands Joint Test Action Group which used access salt. Similarly, Riff-Box JIG-Adapter used access sale files. find position encrypted data using obtained information from Riff-box. rules given below. Find associated string "password_salt". width salt file represents bytes. This length. This length which actually searched stored password/pin smartphones. Memory Forensics Python forensics primarily focuses volatile memory with help Volatility which Python based framework. Volatile Memory Volatile memory type memory that erased when system's power turned interrupted. simple words, working document that been saved hard disk suddenly power goes off, will lose data. volatile memory follows same pattern other forensics investigations. First, needs selected target investing. Acquire forensics data. Forensics Analysis dump tool which used analysis gathered data from RAM. YARA Rules YARA tool which used examine suspected files/ directories match strings. based pattern matching implementation. plays important role forensics analysis. Example import operator import import sys.path.insert(0, os.getcwd()) import plyara.interp interp Plyara script that lexes parses file consisting more Yara __name__ '__main__': file_to_analyze sys.argv[1] Dictrules interp.parseString(open(file_to_analyze).read()) authors imps meta_keys max_strings max_string_len tags rule_count rule Dictrules: rule_count Imports 'imports' rule: rule['imports']: imp.replace('"', imps: imps[imp] else: imps[imp] Tags 'tags' rule: rule['tags']: tags: tags[tag] else: tags[tag] Metadata 'metadata' rule: rule['metadata']: meta_keys: meta_keys[key] else: meta_keys[key] ['Author', 'author']: rule['metadata'][key] authors: authors[rule['metadata'][key]] else: authors[rule['metadata'][key]] Strings 'strings' rule: strr rule['strings']: len(strr['value']) max_string_len: max_string_len len(strr['value']) max_strings [(rule['rule_name'], strr['name'], strr['value'])] elif len(strr['value']) max_string_len: max_strings.append((rule['rule_name'], strr['key'], strr['value'])) print("\nThe number rules implemented" str(rule_count)) ordered_meta_keys sorted(meta_keys.items(), key=operator.itemgetter(1), reverse True) ordered_authors sorted(authors.items(), key=operator.itemgetter(1), reverse True) ordered_imps sorted(imps.items(), key=operator.itemgetter(1), reverse=True) ordered_tags sorted(tags.items(), key=operator.itemgetter(1), reverse=True) Next TopicBest Books Learn Python prev next