next prev Introspection Python this tutorial, will learn about introspection which greatest strength Python programming language. Let's have brief introduction introspection. What Introspection? Introspection technique determine type object runtime. know, everything Python object wide support various introspection methods. code that inspects other modules functions memory objects, getting information about them manipulating them. provides facility familiar with object's properties attributes. using introspection, dynamically inspect Python objects. Python dynamic, object-oriented, introspection support language that runs deep wide throughout. introspection feature makes more powerful language than others. Python provides several functions utilities code introspection. also define call functions reference functions with no-name. dir() Function dir() function returns sorted list attributes methods belonging object. Let's understand following example, which uses dir() function return names methods that used given program. Example myList [1,2,3,4,5] print(dir(myList)) Output: ['__add__', '__class__', '__contains__', '__delattr__', '__delitem__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__', '__sizeof__', '__str__', '__subclasshook__', 'append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort'] dir() function returns methods attributes used list object. Example print("The methods attributes used with integer: print(dir(num)) print("The methods attributes used with string: string 'javatpoint' print(dir(string)) Output: methods attributes used with integer: ['__abs__', '__add__', '__and__', '__bool__', '__ceil__', '__class__', '__delattr__', '__dir__', '__divmod__', '__doc__', '__eq__', '__float__', '__floor__', '__floordiv__', '__format__', '__ge__', '__getattribute__', '__getnewargs__', '__gt__', '__hash__', '__index__', '__init__', '__init_subclass__', '__int__', '__invert__', '__le__', '__lshift__', '__lt__', '__mod__', '__mul__', '__ne__', '__neg__', '__new__', '__or__', '__pos__', '__pow__', '__radd__', '__rand__', '__rdivmod__', '__reduce__', '__reduce_ex__', '__repr__', '__rfloordiv__', '__rlshift__', '__rmod__', '__rmul__', '__ror__', '__round__', '__rpow__', '__rrshift__', '__rshift__', '__rsub__', '__rtruediv__', '__rxor__', '__setattr__', '__sizeof__', '__str__', '__sub__', '__subclasshook__', '__truediv__', '__trunc__', '__xor__', 'as_integer_ratio', 'bit_length', 'conjugate', 'denominator', 'from_bytes', 'imag', 'numerator', 'real', 'to_bytes'] methods attributes used with string: ['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__getitem__', '__getnewargs__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__iter__', '__le__', '__len__', '__lt__', '__mod__', '__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__rmod__', '__rmul__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', 'capitalize', 'casefold', 'center', 'count', 'encode', 'endswith', 'expandtabs', 'find', 'format', 'format_map', 'index', 'isalnum', 'isalpha', 'isascii', 'isdecimal', 'isdigit', 'isidentifier', 'islower', 'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust', 'lower', 'lstrip', 'maketrans', 'partition', 'replace', 'rfind', 'rindex', 'rjust', 'rpartition', 'rsplit', 'rstrip', 'split', 'splitlines', 'startswith', 'strip', 'swapcase', 'title', 'translate', 'upper', 'zfill'] Python type() function type() function returns type object. Let's understand following example. Example print(type(num)) string 'javatpoint' print(type(string)) Output: <class 'int'> <class 'str'> Example import function(): pass class MyClass(object): __init__(self): pass MyObject() print(type(1)) print(type("")) print(type([])) print(type({})) print(type(())) print(type(object)) print(type(function)) print(type(MyClass)) print(type(obj)) print(type(sys)) Output: <class 'int'> <class 'str'> <class 'list'> <class 'dict'> <class 'tuple'> <class 'type'> <class 'function'> <class 'type'> <class '__main__.MyClass'> <class 'module'> Python hasattr() Function hasattr() function checks object attribute. Depending upon result, returns either true false object given attribute. Let's understand following example. Example class student: name "Tony" student() print(hasattr(obj, 'name')) print(hasattr(obj, 'gpa')) Output: True False Python id() Function id() function returns special object. Let's understand following example. Example import function(): pass class MyClass(object): __init__(self): pass MyClass() print("The integer id(1)) print("The string id("")) print("The list ",id([])) print("The ",id({})) print("The list ",id(())) print("The object ",id(object)) print("The functio ",id(function)) print("The MyClass ",id(MyClass)) print("The ",id(obj)) print("The module ",id(sys)) Output: integer 140736928548512 string 2423227163376 list 2423232862400 2423232820480 list 2423226957888 object 140736928328528 functio 2423231111520 MyClass 2423225796064 2423232892640 module 2423227235840 Python Module module allows interaction with system specific variables function used maintained interpreter function that interact strongly with interpreter. Let's understand following example. Example import print(sys.version) print(sys.platform) print(sys.path) Output: 3.8.6 (tags/v3.8.6:db45529, 2020, 15:52:53) [MSC v.1927 (AMD64)] win32 ['d:\\Python Project', 'D:\\python_project\\Myfirstdjangoproject\\Hello', 'c:\\users\\User\\appdata\\local\\programs\\python\\python38\\python38.zip', 'c:\\users\\User\\appdata\\local\\programs\\python\\python38\\DLLs', 'c:\\users\\User\\appdata\\local\\programs\\python\\python38\\lib', 'c:\\users\\User\\appdata\\local\\programs\\python\\python38', 'C:\\Users\\User\\.virtualenvs\\Django-ExvyqL3O', 'C:\\Users\\User\\.virtualenvs\\Django-ExvyqL3O\\lib\\site-packages'] inspect Python version, platform, search path locations above code. Some Other Introspection Methods There some other important introspection methods which given below. vars() contains instance variable (name value) dictionary. equivalent mycar.__dict__.* isinstance() checks object specified class. getsizeof() part module; contains size object bytes. help() obtains help object's interface based docstrings. callable() checks whether object callable. Introspection Attributes Python going discuss some attributes that give useful information about objects. Let's some important introspection attribute. __name__ shows original name class, function method. __qualname__ qualified name class function method. often useful where class/function/method definitions nested. __doc__ documentation string, which also retrieved calling built-in function help() __self__ instance which method found. Conclusion have discussed what introspection important. have seen some important methods examples. learn more about introspection, check Python inspect module. Next TopicClass Decorator Python prev next