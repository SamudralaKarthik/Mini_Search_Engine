next prev __getitem__() Python Python, there functions that used particular purposes, they have double underscores before after function name. They called magic functions dunder methods. example: __abs__ __contains__ etc. Some examples magic methods follows: __str__() function: This function used return printable string. __add__() function: This function used objects attributes. _ge__() function: This function used overload greater than equal operator. >=). __floor__() function: This function called Math.floor() function internally. __ceil__() function: This function called Math.ceil() function internally. __trunc__() function: This function called Math.trunc() function internally. __init__() function: This constructor class, which called __new__() function. __getitem__() method: __getitem__() also magic method Python that used class, gives flexibility instance class indexer operator. Syntax: __getitem__(self,key) used evaluate value self[key] object instance class. Let's suppose have object obj, then obj[key] will equivalent obj.__getitem(key). will some examples understand __getitem__() function: Example1: class JavatPoint: __getitem__(self, key): print('hello world from javatpoint ayush from jaipur key) myObj JavatPoint() myObj[6000] myObj['hi intern'] Output: Explanation: above code, have custom class named JavatPoint. this class, have definition __getitem__() function where print some statement with key. Then created instance name myObj, then passed numeric value 6000 key. will print statement value key. Then next line, used string using indexer, which will print statement accordingly. Example class JavatPoint: __init__(self, lst): self.lst __getitem__(self, key): print('this statement from __getitem__', key) return self.lst[key] __setitem__(self, key, value): print('this statement from__setitem__', key, value) self.lst[key] value __delitem__(self, key): print('this statement from__delitem__', key) self.lst[key] myObj JavatPoint(['Ayush', 'Shivani', 'Mansi','Gopal']) print(myObj[1]) myObj[1] '69' print(myObj[1]) myObj[1] print(myObj[1]) Output: Explanation: above code, have class named JavatPoint, where have defined four functions. init function, have taken list. Then have created instance class with list with four string values. first statement, have printed value index will print value statement __getitem__() function. Then changed value from string integer again called indexer, printed again. Then deleted first index value list using __delitem__() function. value second index will shifted left, will printed first index. Example Python Code demonstrate __getitem__() Python class JavatPoint(object): This function prints type object passed well object item 	def __getitem__(self, items): 		print (type(items), items) test JavatPoint() test[69] test[1:69:2] test['Javatpoint: Ayush, Shivani Gopal Mansi from jaipur'] test[1, 'x', 10.0] test['a':'z':2] test[object()] Output: Explanation: above code, have class named Javatpoint, which accepts object function __getitem__ which pass items, this function, print type value key. Then created object instance Javatpoint class named test passed different types keys into test using indexer([ ]). first example, passed value printed data type 'int' value. second example type slice object, printed class slice. third example statement, which datatype string. fourth example type tuple, fifth example type slice. last example type object, prints value address object. Next TopicGET POST Requests using Python prev next