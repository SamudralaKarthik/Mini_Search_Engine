next prev Write Python Program Search Element Sorted Array this tutorial, will solve interesting problems sorted array. there twist; given array rotated some index position. means elements sorted array might rotated given index. understand better, let's understand following problem statement. Problem Statement array given list1 sorted ascending order with distinct values. rotated unknown pivot index list1.length) such that resulting array [list1[k], list1[k+1], ..., list1[n-1], list1[0], list1[1], ..., list1[k-1]] (0-indexed). Suppose given array might rotated pivot index become 7]. Given array list1 after possible rotation integer target, return index target; exist otherwise, return Example Input: list1 target Output: Example Input: list1 ,6, target 3Output: will find best approach solve this problem. slightly tricky question, easily write code when break down solution. Let's understand following solution. Solution search related problems, think implement binary search algorithm first because easy quite efficient algorithm search element. However, given list must sorted, case array sorted rotated some place. Let's following array. list1 observe closely, that normal array will rotated index array that array split into parts, left portion sorted 7,] right portion Let's represents using graph take advantage binary search algorithm this problem. draw basic graph that contiguously basic increasing line might necessary linear always increasing order. Hence graph will formed below. find pattern that help write solution. know that there three-pointers binary search left, right, mid. There portions array, both independently sorted. know that there three pointers binary search left, right, mid. Suppose given array target value means target value greater than won't exited left side. search element right side. What target value less than mid? that scenario, less than less than know which side searched for? here check leftmost value list, less than target value then don't need search left side anymore. search will placed right side from target value greater than leftmost value, search element left side. consider mid-value only element less than search will happen left side. check leftmost value compare with target value greater than rightmost value. Let's implement using Python code. Note check whether middle value belongs left portion right, compare with leftmost value mid. mid-value greater than leftmost value, must belonged left portion vice-versa. Python Code class Solution: search(self, list1: List[int], target: int) int: len(list1) while l<=r: target list1[mid]: return left sorted portion list1[l] list1[mid]: target list1[mid] target list1[l]: else: else: target list1[mid] target list1[r]: else: return list1 target Solution() print("The element the", obj.search(list1, target), "index") Output: element index might seem slightly complicated once understand concept. will clear. Time Complexity time complexity will O(logN) because binary search requires comparison find element. space complexity will O(1) because don't require extra space. Next TopicPathlib module Python prev next