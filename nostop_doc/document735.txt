next prev First Unique Character String Python This tutorial will show various approaches finding first unique character given string. instance, result should given string "stringstutorial," "S" given string "StringsTutorial". Explanation Input: "stringstutorial" Explanation: Step Creating frequency list characters given string freq['s'] freq['t'] freq['r'] freq['i'] freq['n'] freq['g'] freq['u'] freq['o'] freq['a'] freq['l'] Step Find first character having unit frequency. Creating Frequency Hash character only appears once given string, considered non-repeating character. Calculating frequency each letter string sequence determining which letter frequency steps locating such unique characters. hash map, which maps characters their corresponding frequencies allows concurrently modify frequency characters have already encountered constant time, effective tool this work. ASCII system, unique characters limit. maximum length hash 256. Reread string, letter whose frequency equal solution. Algorithm: Create hash associate each character with frequency. pointer navigate input string. Modify number characters present hash map. Next, through string once more determine whether present character frequency Resume traverse frequency exceeds not, loop output present character solution. Code Python implementation hash algorithm find first unique character max_chars Defining function give list length containing frequency characters string CharFreq(string): freq max_chars Iterating over string updating frequency string: freq[ord(_)] return freq Defining function return first unique letter string firstUnique(string): freq CharFreq(string) Initializing index unique character case string: freq[ord(_)] break return Driver code above methods string "stringstutorial" firstUnique(string) print ("The given string unique character empty string given") else: print ("The first unique character is", string[idx]) Output first unique character Finding Unique Character Traversing String Only Once primary method requires O(n) runtime, although make faster application. count array constructed first step procedure iteratively traversing text O(n) runtime. This step makes sense. However, second portion, where replay string's initial non-repeater, isn't good idea. string anticipated much longer than character actual circumstances. Consider sequences, which contain billions letters only have four-letter alphabet. What transpires unique character string's end? Then, would require lengthy scan. Creating Hash Traversing String Once Instead using hash map, create frequency array with length character list 256. adding frequency array, store only frequency also position letter's first appearance, such letter, which indicates that recorded five times originally appeared position locate first unique character, only need scan frequency array rather than string. Below implementation this idea. Code Python program find first unique character traversing only once import max_chars Defining function give index first unique letter given string firstUnique(string): listt [[] range(max_chars)] range(max_chars): listt[_] [0,0] range(len(string)): listt[ord(string[_])][0] listt[ord(string[_])][1] Initialising result sys.maxsize unique character case sys.maxsize range(max_chars): current character's frequency present before current value, then modify (listt[_][0] min(r, listt[_][1]) return Driver code above function string "stringstutorial" firstUnique(string) (idx sys.maxsize): print("The given string unique character empty string given") else: print("First unique character ",string[idx]) Output First unique character Creating Frequency List Looping Only Once Creating frequency list maximum characters. initialize items this list will iterate over string's characters examine list elements with this particular character have index not. turns will change j; does turn this indicates that character already been used; that case, will change -2. repeated characters will eventually altered while unique characters will still retain index which they first appeared. quickly discover least initial index iterating unique characters. Code Python program find first unique character import Creating function find index first unique character character unique, function will return firstUnique(string): freq [-1 range(256)] Setting non-unique elements unique elements store index which they occur string range(len(string)): if(freq[ord(string[j])] -1): freq[ord(string[j])] else: freq[ord(string[j])] result sys.maxsize range(256): current character does have value then character must present only once string. will find minimum index characters uniquely present string. This value index need. if(freq[j] result min(result, freq[j]) result remains int_max, that implies there unique characters string if(result sys.maxsize): return else: return result Drivers code above method string "stringstutorial" firstUnique(string) (firstUnique -1): print("The given string unique character, empty string given") else: print("The first unique character str(string[idx])) Output first unique character Using in-built Functions Python Utilize Counter() function determine frequency characters. over string find which elements have frequency Printing unique character breaking loop there. Code Python program find first unique character string using Counter function Python from collections import Counter Defining function give unique character printUnique(string): Computing frequency characters using Counter function freq Counter(string) Looping over string string: if(freq[j] print("The first unique character break Drivers code above method string "stringstutorial" Giving function above string printUnique(string) Output first unique character Using find() Function Strings After current letter, look each subsequent letter. returns signifies that letter only appears once, which present index. Code Python program find unique character string using find function FirstUnique(string): string: (string.find(_,(string.find(_)+1))) print("The first unique character break return Drivers code 'stringstutorial' FirstUnique(string) Output first unique character Using count() Function character's count() within string indicates that character unique repeated. will break loop print first unique character find. Code Python program find first unique character string using count() function string "stringstutorial" freq string: string.count(_) freq break else: print ("The given string unique character, empty string given") else: print ("The first unique character is", freq) Output first unique character Next TopicUsing Python Create Movies Recommendation Engine prev next