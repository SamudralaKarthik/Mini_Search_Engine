next prev Tic-Tac-Toe Python following tutorial, will create game known Tic-Tac-Toe using Python programming language from scratch. have divided whole program into various steps better understanding. before into procedure, understand about game. What Tic-Tac-Toe? Tic-Tac-Toe among games played between players played square grid. Each player inhabits cell their respective turns, keeping objective placing three similar marks vertical, horizontal, diagonal pattern. first player utilizes Cross marker, whereas other utilizes Naught Zero (O). Now, understand design Tic-Tac-Toe. Design Tic-Tac-Toe will using command prompt order play Tic-Tac-Toe. Thus, primary objective construct design Tic-Tac-Toe game. Objective: player needs mark specific block, he/she must input corresponding digit displayed grid. instance, wanted occupy upper right block, then have enter digit terminal. understand snippet code generate grid. Program: Function print Tic-Tac-Toe Design mytictactoe(val): print("\n") print("\t print("\t {}".format(val[0], val[1], val[2])) print('\t_____|_____|_____') print("\t print("\t {}".format(val[3], val[4], val[5])) print('\t_____|_____|_____') print("\t print("\t {}".format(val[6], val[7], val[8])) print("\t print("\n") Explanation: above snippet code, have defined function Tic-Tac-Toe game that takes values parameter. Here parameter list consists status each cell grid. Within function, have then printed design Tic-Tac-Toe grid. Now, next step store data with help data structures. Storing Data using Data Structures principle game relies mechanics behind game. Since creating relatively simple easy game, mechanics included simple well. point Time, there crucial pieces information required: Grid Status:We have create data structure that will contain state each cell. state either occupied vacant. Moves each player:The knowledge past present moves each player somehow required, that positions occupied 'O'. Note: above data accessed with help Grid Status. However, will require traverse this information every Time want positions player. This known Time versus Space Complexity Trade-off. general technique order conserve Time. syntax same shown below: Snippet code: Function single game Tic-Tac-Toe singlegame(curplayer): Representing Tic-Tac-Toe range(9)] Storing positions occupied playerpos {'X' Explanation: above snippet code, have defined function single game Tic-Tac-Toe where represents parameter previous function playerpos stores position block occupied cross naught (O), respectively. There generally three values list characters that manages Grid Status: This character signifies vacant empty cell. This character signifies that Cell inhabited Player. This character signifies that Cell inhabited Player. Moves each player kept dictionary list integers where keys denoted corresponding player. Their respective lists consist digits provided cells grid they inhabit. Note: curplayer variable stores current player making move, 'O'. Understanding Game Loop Every game consists some type game loop that allows player play game until player wins game tie. game Tic-Tac-Toe, every loop iteration denotes single move made player. consider following snippet code order design Game Loop. Syntax: Loop Game single game Tic-Tac-Toe while True: mytictactoe(val) Explanation: observe, have used while loop print values function mytictactoe(), generating game loop single game Tic-Tac-Toe. Handling input from Player every iteration game, player provide input move. consider following syntax order handle Player's input. Syntax: Try-Exception block CHANCE input try: print("Player curplayer, turn. Choose your Block end="") chance int(input()) except ValueError: print("Invalid Input!!! Again") continue Sanity check CHANCE input chance chance print("Invalid Input!!! Again") continue Checking block occupied already val[chance print("Oops! Place already occupied. again!!") continue Explanation: above snippet code, have created block handle unintended value players. have then handled exception ValueError that game must stopped. Later have performed sanity checks, such whether entered value valid position not, valid position, filled already? Now, move onto next step. Updating Game information input provided player, have update information smooth working game. update game information adding following snippet code main project. Syntax: Updating game information Update status grid val[chance curplayer Update positions player playerpos[curplayer].append(chance) Explanation: above snippet code, have updated game information updating status grid position player. list will update cell filled current player. position player will position just occupied current player. Once list updated, will call mytictactoe() function, grid would look like following: Output: _____|_____|_____ _____|_____|_____ Checking After each move, need check player match match been tied. check with help syntax given below: Syntax: Calling Function check Victory check_Victory(playerpos, curplayer): mytictactoe(val) print("Congratulations! Player curplayer, game!") print("\n") return curplayer Calling Function check check_Tie(playerpos): mytictactoe(val) print("Oh! Game Tied") print("\n") return Explanation: above syntax, have used statement check Tie. singlegame() function will return current player he/she wins game. Otherwise, game tied, sent back. consider function checking whether player won. Syntax: Defining Function check Victory check_Victory(playerpos, curplayer): probable winning combinations solution [[1, Loop check whether winning combination satisfied solution: all(j playerpos[curplayer] Return True winning combination satisfied return True Return False combination satisfied return False Defining Function check game Tied check_Tie(playerpos): len(playerpos['X']) len(playerpos['O']) return True return False Explanation: above snippet code, have defined functions check Victory Tie. These functions check_Victory() check_Tie(), respectively. check_Victory(): stores combinations winning game. function checks position current player satisfies winning combinations. does, will return TRUE; else, will FALSE satisfying requirement. check_Tie(): pretty simple, which checks 'Nine' positions occupied, game tied. Switching current player Every player only chance time. Thus, after every successful more, current player will swapped. consider following snippet code same: Syntax: Switching moves player curplayer 'X': curplayer else: curplayer Explanation: following snippet code, have used if-else statement order switch moves player such that current player marks position, then current player will changed, other player will mark their move. These some steps need concerned about while making single game. However, will creating Scoreboard System keep track players wanting play multiple games. Entering Names Players Since creating Scoreboard, becomes necessary display names each player. Here syntax shown below same: Syntax: __name__ "__main__": print("First Player") FirstPlayer input("Specify Name: print("\n") print("Second Player") SecondPlayer input("Specify Name: print("\n") Explanation: observe, have used special variable __name__ have value "__main__". have then provided input names first second players, respectively. This will become entry point program, when program will executed, will names first. Storing Information regarding Game have store information such current player, player's selection (i.e., available selections scoreboard. Syntax: Storing player chooses curplayer FirstPlayer Storing Players' choice playerchoice {'X' Storing options ['X', 'O'] Storing scoreboard scoreboard {FirstPlayer: SecondPlayer: myscoreboard(scoreboard) Explanation: above snippet code, have current player First player. have also stored selections made Players, available options, scoreboard. Designing Scoreboard will design scoreboard dictionary data structure. this scoreboard, player names will keys, their total number victories will values. consider following snippet code design Scoreboard Tic-Tac-Toe. Syntax: myscoreboard(scoreboard): print("\t--------------------------------") print("\t SCORE BOARD print("\t--------------------------------") listofplayers list(scoreboard.keys()) print("\t listofplayers[0], scoreboard[listofplayers[0]]) print("\t listofplayers[1], scoreboard[listofplayers[1]]) print("\t--------------------------------\n") Explanation: above snippet code, have defined function myscoreboard that takes parameter scoreboard. have then printed design Score Board. have defined variable that stores names players list using .keys() function. have then indexed them into scoreboard displayed scores. Creating Outer Game Loop order maintain multiple matches Tic-Tac-Toe, require another loop game. current player will choose mark each match. menu selection should displayed every iteration game. consider following syntax create Outer Gamer Loop. Syntax: Loop series Tic-Tac-Toe game loop executes until players quit while True: Main Menu Players print(curplayer, "will make choice:") print("Press X") print("Press O") print("Press Quit") Explanation: above snippet code, have created while loop display main menu Players where current player make selection between marks (Cross Naught 'O') exit game. Output: First Player Specify Name: Andy Second Player Specify Name: Carlo -------------------------------- SCORE BOARD -------------------------------- Andy Carlo -------------------------------- Andy will make choice: Press Press Press Quit Handling Assigning Selections Player need handle store choice current player each iteration. consider following snippet code same. Syntax: exception THE_CHOICE input try: the_choice int(input()) except ValueError: print("Invalid Input!!! Again\n") continue Conditions player choice the_choice playerchoice['X'] curplayer curplayer FirstPlayer: playerchoice['O'] SecondPlayer else: playerchoice['O'] FirstPlayer elif the_choice playerchoice['O'] curplayer curplayer FirstPlayer: playerchoice['X'] SecondPlayer else: playerchoice['X'] FirstPlayer elif the_choice print("The Final Scores") myscoreboard(scoreboard) break else: print("Invalid Selection!! Again\n") Explanation: above snippet code, have used try-exception block handle exception the_choice input. have then used if-else statement create choice menu current player select from. selection made player, data will stored. This significant will tell which player after every match. Executing Game Once required information stored, execute independent match record victory mark. syntax same been shown below. Syntax: Storing winner single game Tic-Tac-Toe singlegame(opt[the_choice Explanation: above snippet code, have stored winner details single game Tic-Tac-Toe. Updating Scoreboard have update scoreboard after every match Tic-Tac-Toe game. consider following snippet code update scoreboard. Syntax: Updation scoreboard winner playerWon playerchoice[win] scoreboard[playerWon] scoreboard[playerWon] myscoreboard(scoreboard) Explanation: above snippet code, have used statement check match tied. Once match drawn, scoreboard will updated. Switching Selecting Player While playing game, becomes mandatory switch chance choosing mark. consider following syntax understanding swapping. Syntax: Switching player chooses curplayer FirstPlayer: curplayer SecondPlayer else: curplayer FirstPlayer Explanation: above snippet code, have again used if-else statement switch between players choose marks (Cross Naught). Hence, have successfully constructed very Tic-Tac-Toe game. code game downloaded from this link: Click Here Download It's Gameplay Time Since steps finally completed, here final output game. Output: First Player Specify Name: Andy Second Player Specify Name: Carlo -------------------------------- SCORE BOARD -------------------------------- Andy Carlo -------------------------------- Andy will make choice: Press Press Press Quit _____|_____|_____ _____|_____|_____ Player turn. Choose your Block _____|_____|_____ _____|_____|_____ Player turn. Choose your Block _____|_____|_____ _____|_____|_____ Player turn. Choose your Block _____|_____|_____ _____|_____|_____ Player turn. Choose your Block _____|_____|_____ _____|_____|_____ Player turn. Choose your Block _____|_____|_____ _____|_____|_____ Player turn. Choose your Block _____|_____|_____ _____|_____|_____ Player turn. Choose your Block _____|_____|_____ _____|_____|_____ Player turn. Choose your Block _____|_____|_____ _____|_____|_____ Player turn. Choose your Block _____|_____|_____ _____|_____|_____ Game Tied -------------------------------- SCORE BOARD -------------------------------- Andy Carlo -------------------------------- Carlo will make choice: Press Press Press Quit Final Scores -------------------------------- SCORE BOARD -------------------------------- Andy Carlo -------------------------------- Next TopicPython Asynchronous Programming asyncio await prev next