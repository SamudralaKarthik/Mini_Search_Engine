next prev Simple To-Do List Application Python There tasks that awaits every day. Some them might interesting, some tedious. However, significance completing these tasks unquestionable, specifically case they build regular basis. There might times when many struggle keep record what require. Perhaps some habit using handwritten to-do list remind ourselves pending things their deadlines. However, handwritten notes have higher chance getting lost forgotten. Since Python coders, makes sense build To-do list manager application using Tkinter. following tutorial, will step-by-step procedure build simple To-Do list manager application using Tkinter library Python programming language. before start, briefly understand what To-Do list benefits. What To-Do list? To-Do list list tasks require complete things would like Most typically, tasks this list arranged order priority. tradition, they written piece paper post-it notes memory aid. evolution technology, have been able create To-Do lists with Excel Spreadsheets, Word Documents, E-mail Lists, To-Do List applications like Microsoft to-do Google to-do lists. utilize to-do list home, workplace, personal life. Having list everything supposed written down place implies that should forget anything significant. prioritizing tasks list, play order doing them quickly observe what requires immediate attention what tasks delayed while. Understanding Advantages using To-Do List significant reasons to-do list that will support staying planned. Whenever write tasks list, they appear more convenient. When have clear outline tasks that require action those have completed, supports staying concentrated. same time, releasing space minds other, more creative tasks. When finish task, either mark down cross list. This provides with sense progress achievement, something will lack always rush from task next. feel sense achievement, spurs motivates keep moving. However, that's only advantage To-Do list. Some advantages using To-Do list shown below: helps improve memory. To-Do list acts external memory which only possible while pieces information time. Keeping to-do list allows keep track everything, rather than just some tasks need perform. To-Do list will also reinforce information, making things less likely forgotten. also helps increase productivity. To-Do list enables user prioritize more significant tasks. list will help stay concentrated many important tasks. This statement implies that have waste time tasks that require immediate attention. also supports with motivation. To-Do lists great motivational tool they help clarify objectives. divide long-term objectives into smaller, more achievable short-term milestones, mark each list, confidence will boosted. that have learned about To-Do lists their benefits, time start building To-Do list application manage day-to-day tasks. Building To-Do list application using Tkinter procedure building To-Do list management application using Tkinter divided into several steps. These steps shown below: Step First, will import modules required build project. Step will then define some functions necessary execute application. Step will then create main window application. Step will then database application store data. Step will necessary widgets application apply event triggers. Step Calling functions main function application. discuss these steps detail. Importing required modules Before start building projects, important import modules necessary working application. will import required widgets modules from Tkinter library provide Graphical User Interface touch application. will also import sqlite3 module store data database. consider following snippet code demonstrating same. File: todo_application.py importing required modules import tkinter importing tkinter module from tkinter import importing module from tkinter library from tkinter import messagebox importing messagebox module from tkinter library import sqlite3 importing sqlite3 module Explanation: above code snippet, have imported tkinter module tk. then imported module messagebox from Tkinter library. last, have imported sqlite3 module sql. Defining functions application Once have successfully imported required modules, time define various functions operate different events application. These functions will allow task list, delete task from list, delete tasks from list, update list, clear list, retrieve database, close application. will start defining empty list that will help store tasks. following snippet code demonstrating same. File: todo_application.py defining empty list tasks Explanation: have defined empty list tasks above code snippet. This list will allow store tasks entered. define functions necessary execution application. Adding Task list first function will define application will task list. This function will retrieve string containing task from entry field store list database. following snippet code illustrating definition such function. File: todo_application.py defining function tasks list add_task(): getting string from entry field task_string task_field.get() checking whether string empty len(task_string) displaying message with 'Empty Field' message messagebox.showinfo('Error', 'Field Empty.') else: adding string tasks list tasks.append(task_string) using execute() method execute statement the_cursor.execute('insert into tasks values (?)', (task_string,)) calling function update list list_update() deleting entry entry field task_field.delete(0, 'end') Explanation: above snippet code, have defined function add_task. have used get() method retrieve string from entry field stored task_string variable. then check whether string empty. length task_string variable zero, message will displayed showing 'Field Empty' message. case string empty, have used append() method this string list created earlier. have also used execute() method execute statement 'insert into tasks values (?)' stored value present task_string database. have then called list_update() function update list deleted entry entry field with help delete() method. Updating list will define another function that will allow update list insert entries list box. consider following snippet code illustrating same. File: todo_application.py defining function update list list_update(): calling function clear list clear_list() iterating through strings list task tasks: using insert() method insert tasks list task_listbox.insert('end', task) Explanation: above snippet code, have defined function list_update. Within this function, have called clear_list() function clear list. then used for-loop iterate through tasks list insert() method insert tasks list box. Deleting task from list will define function delete selected task from list database. following snippet code illustrating same. File: todo_application.py defining function delete task from list delete_task(): using try-except method try: getting selected entry from list the_value task_listbox.get(task_listbox.curselection()) checking stored value present tasks list the_value tasks: removing task from list tasks.remove(the_value) calling function update list list_update() using execute() method execute statement the_cursor.execute('delete from tasks where title (the_value,)) except: displaying message with Item Selected' message exception messagebox.showinfo('Error', Task Selected. Cannot Delete.') Explanation: above snippet code, have defined function delete_task. Within this function, have used try-except method selected entry from list using get() method store the_value variable. then checked selected value tasks list removed from list. have then called list_update() function update list used execute() method execute statement 'delete from tasks where title delete value from the_value variable. have also displayed message with Task Selected' message exception. Deleting entries from list will define function that will delete tasks from list. consider following snippet code demonstrating same. File: todo_application.py function delete tasks from list delete_all_tasks(): displaying message user confirmation message_box messagebox.askyesno('Delete All', 'Are sure?') value turns True message_box True: using while loop iterate through tasks list until it's empty while(len(tasks) using pop() method elements from list tasks.pop() using execute() method execute statement the_cursor.execute('delete from tasks') calling function update list list_update() Explanation: above code snippet, have defined function delete_all_tasks. Within this function, have displayed message user their confirmation. have then used conditional statement check value True. have then used while loop iterate through elements tasks list them with help pop() method. have then used execute() method execute statement 'delete from tasks'. last, have called list_update() function update list. Clearing list will define function clear list. following snippet code illustrates same. File: todo_application.py function clear list clear_list(): using delete method delete entries from list task_listbox.delete(0, 'end') Explanation: above code snippet, have defined function clear_list. Within this function, have used delete() method delete entries from list box. Closing application will define function close application. will also print final list Command Prompt. consider following snippet code demonstrating same. File: todo_application.py function close application close(): printing elements from tasks list print(tasks) using destroy() method close application guiWindow.destroy() Explanation: above code snippet, have defined function close. Within this function, have printed tasks list users. have then used destroy() method close application. Retrieve data from database will define function retrieve data from database append values list. following snippet code illustrating same. File: todo_application.py function retrieve data from database retrieve_database(): using while loop iterate through elements tasks list while(len(tasks) using pop() method elements from list tasks.pop() iterating through rows database table the_cursor.execute('select title from tasks'): using append() method insert titles from table list tasks.append(row[0]) Explanation: above code snippet, have defined function retrieve_database. Within this function, have used while loop iterate through elements tasks list them with help pop() method. then used for-loop iterate through rows database table used append() method insert values from table list. Creating main window application that have defined necessary functions application, time design main window application where widgets will displayed. This done creating object Tk() class Tkinter library. consider following snippet code demonstrating same. File: todo_application.py main function __name__ "__main__": creating object Tk() class guiWindow tk.Tk() setting title window guiWindow.title("To-Do List Manager JAVATPOINT") setting geometry window guiWindow.geometry("500x500+750+250") disabling resizable option guiWindow.resizable(0, setting background color #FAEBD7 guiWindow.configure(bg "#FAEBD7") Explanation: above code snippet, have created object Tk() class Tkinter library. have then title window using title() method. have then used geometry() method size position window. have also disabled resizable option better setting parameters resizable() method zeros. last, have used configure() method background color window #FAEBD7. Adding database application will database application, which will store data user. will start using connect() method connect database. will then create object cursor class, which will allow execute SQLite statements fetch data from result sets queries. will then execute() method execute statement. File: todo_application.py using connect() method connect database the_connection sql.connect('listOfTasks.db') creating object cursor class the_cursor the_connection.cursor() using execute() method execute statement the_cursor.execute('create table exists tasks (title text)') Explanation: above code snippet, used connect() method. have then created object cursor class. have then used execute() method execute statement 'create table exists tasks (title text)'. Adding necessary widgets application applying event triggers that have successfully added database application, time necessary widgets main window apply essential event triggers. will start adding frames main window. These frames will provide proper structure other widgets. will then some labels these frames provide some information. will then entry field user enter their task. will also some buttons that perform specific functions like adding task list, deleting task from list, deleting tasks from list, closing application when clicked. will also list display entered tasks. understand implementation same detail. Frames First, will frames application using Frame() widget tkinter module. consider following snippet code demonstrating implementation Frame() widget. File: todo_application.py defining frames using tk.Frame() widget header_frame tk.Frame(guiWindow, "#FAEBD7") functions_frame tk.Frame(guiWindow, "#FAEBD7") listbox_frame tk.Frame(guiWindow, "#FAEBD7") using pack() method place frames application header_frame.pack(fill "both") functions_frame.pack(side "left", expand True, fill "both") listbox_frame.pack(side "right", expand True, fill "both") Explanation: above snippet code, have used Frame() widget define some frames application. have master parameter these widgets guiWindow, object Tk() class parameter specifying background color "#FAEBD7". have then used pack() method place these frames application. Labels will labels these frames using Label() widget module Tkinter library. These labels will represent application's heading entry field's title. understand implementation labels following snippet code. File: todo_application.py defining label using ttk.Label() widget header_label ttk.Label( header_frame, text "The To-Do List", font ("Brush Script MT", "30"), background "#FAEBD7", foreground "#8B4513" using pack() method place label application header_label.pack(padx pady defining another label using ttk.Label() widget task_label ttk.Label( functions_frame, text "Enter Task:", font ("Consolas", "11", "bold"), background "#FAEBD7", foreground "#000000" using place() method place label application task_label.place(x Explanation: above snippet code, have used Label() widget module define label setting master parameter header_frame, frame defined earlier. have also text, font style size, background, foreground color. have then used pack() method position this label window. have then defined another label using Label() widget module master parameter functions_frame, another frame defined earlier. have again text, font style size, background, foreground color. have then used place() method position this label main window. Entry Field will entry field application using Entry() widget module Tkinter library. This entry field will allow insert task title list. consider following snippet code demonstrating implementation Entry() widget. File: todo_application.py defining entry field using ttk.Entry() widget task_field ttk.Entry( functions_frame, font ("Consolas", "12"), width background "#FFF8DC", foreground "#A52A2A" using place() method place entry field application task_field.place(x Explanation: above snippet code, have defined entry field using Entry() widget module master parameter this widget functions_frame, frame defined earlier. have also font style size along with width widget. have also background foreground color entry field. have then used place() method place this entry field application. Buttons time some buttons application perform certain functions defined earlier. create these buttons using Button() widget module Tkinter library. following snippet code illustrating creation buttons. File: todo_application.py adding buttons application using ttk.Button() widget add_button ttk.Button( functions_frame, text "Add Task", width command add_task del_button ttk.Button( functions_frame, text "Delete Task", width command delete_task del_all_button ttk.Button( functions_frame, text "Delete Tasks", width command delete_all_tasks exit_button ttk.Button( functions_frame, text "Exit", width command close using place() method position buttons application add_button.place(x 120) del_button.place(x 160) del_all_button.place(x 200) exit_button.place(x 240) Explanation: above snippet code, have defined some buttons using Button() widget module. have their master parameters functions_frame, frame defined earlier. have also text these buttons will display along with width each button. have then value command parameter functions they will call. have then used place() method their positions main window. List will list application using Listbox() widget tkinter library. This list will display list tasks. consider following snippet code illustrating implementation list box. File: todo_application.py defining list using tk.Listbox() widget task_listbox tk.Listbox( listbox_frame, width height selectmode 'SINGLE', background "#FFFFFF", foreground "#000000", selectbackground "#CD853F", selectforeground "#FFFFFF" using place() method place list application task_listbox.place(x Explanation: above code snippet, used Listbox() widget tkinter module. have master parameter this widget listbox_frame, frame defined earlier. have width height list box. have also selectmode parameter SINGLE that entry will selected once time. have then background foreground color background foreground color selected entity. have then used place() method place list application. Calling functions will call functions retrieve database update list. will also mainloop() method application establish connection with database. consider following snippet code demonstrating same. File: todo_application.py calling some functions retrieve_database() list_update() using mainloop() method application guiWindow.mainloop() establishing connection with database the_connection.commit() the_cursor.close() Explanation: above snippet code have called retrieve_database() function along with list_update() function. have then used mainloop() method with guiWindow, object Tk() class, application. have then established connection with database using commit() method close() method. Hence, project code completed. save file following command command shell terminal output. Syntax: python todo_application.py Before output, consider complete code "To-do List Application" project Python. Complete Project Code following snippet code To-do List Application" project Python programming language. File: todo_application.py importing required modules import tkinter importing tkinter module from tkinter import importing module from tkinter library from tkinter import messagebox importing messagebox module from tkinter library import sqlite3 importing sqlite3 module defining function tasks list add_task(): getting string from entry field task_string task_field.get() checking whether string empty len(task_string) displaying message with 'Empty Field' message messagebox.showinfo('Error', 'Field Empty.') else: adding string tasks list tasks.append(task_string) using execute() method execute statement the_cursor.execute('insert into tasks values (?)', (task_string ,)) calling function update list list_update() deleting entry entry field task_field.delete(0, 'end') defining function update list list_update(): calling function clear list clear_list() iterating through strings list task tasks: using insert() method insert tasks list task_listbox.insert('end', task) defining function delete task from list delete_task(): using try-except method try: getting selected entry from list the_value task_listbox.get(task_listbox.curselection()) checking stored value present tasks list the_value tasks: removing task from list tasks.remove(the_value) calling function update list list_update() using execute() method execute statement the_cursor.execute('delete from tasks where title (the_value,)) except: displaying message with Item Selected' message exception messagebox.showinfo('Error', Task Selected. Cannot Delete.') function delete tasks from list delete_all_tasks(): displaying message user confirmation message_box messagebox.askyesno('Delete All', 'Are sure?') value turns True message_box True: using while loop iterate through tasks list until it's empty while(len(tasks) using pop() method elements from list tasks.pop() using execute() method execute statement the_cursor.execute('delete from tasks') calling function update list list_update() function clear list clear_list(): using delete method delete entries from list task_listbox.delete(0, 'end') function close application close(): printing elements from tasks list print(tasks) using destroy() method close application guiWindow.destroy() function retrieve data from database retrieve_database(): using while loop iterate through elements tasks list while(len(tasks) using pop() method elements from list tasks.pop() iterating through rows database table the_cursor.execute('select title from tasks'): using append() method insert titles from table list tasks.append(row[0]) main function __name__ "__main__": creating object Tk() class guiWindow tk.Tk() setting title window guiWindow.title("To-Do List Manager JAVATPOINT") setting geometry window guiWindow.geometry("500x450+750+250") disabling resizable option guiWindow.resizable(0, setting background color #FAEBD7 guiWindow.configure(bg "#FAEBD7") using connect() method connect database the_connection sql.connect('listOfTasks.db') creating cursor object cursor class the_cursor the_connection.cursor() using execute() method execute statement the_cursor.execute('create table exists tasks (title text)') defining empty list tasks defining frames using tk.Frame() widget header_frame tk.Frame(guiWindow, "#FAEBD7") functions_frame tk.Frame(guiWindow, "#FAEBD7") listbox_frame tk.Frame(guiWindow, "#FAEBD7") using pack() method place frames application header_frame.pack(fill "both") functions_frame.pack(side "left", expand True, fill "both") listbox_frame.pack(side "right", expand True, fill "both") defining label using ttk.Label() widget header_label ttk.Label( header_frame, text "The To-Do List", font ("Brush Script MT", "30"), background "#FAEBD7", foreground "#8B4513" using pack() method place label application header_label.pack(padx pady defining another label using ttk.Label() widget task_label ttk.Label( functions_frame, text "Enter Task:", font ("Consolas", "11", "bold"), background "#FAEBD7", foreground "#000000" using place() method place label application task_label.place(x defining entry field using ttk.Entry() widget task_field ttk.Entry( functions_frame, font ("Consolas", "12"), width background "#FFF8DC", foreground "#A52A2A" using place() method place entry field application task_field.place(x adding buttons application using ttk.Button() widget add_button ttk.Button( functions_frame, text "Add Task", width command add_task del_button ttk.Button( functions_frame, text "Delete Task", width command delete_task del_all_button ttk.Button( functions_frame, text "Delete Tasks", width command delete_all_tasks exit_button ttk.Button( functions_frame, text "Exit", width command close using place() method position buttons application add_button.place(x 120) del_button.place(x 160) del_all_button.place(x 200) exit_button.place(x 240) defining list using tk.Listbox() widget task_listbox tk.Listbox( listbox_frame, width height selectmode 'SINGLE', background "#FFFFFF", foreground "#000000", selectbackground "#CD853F", selectforeground "#FFFFFF" using place() method place list application task_listbox.place(x calling some functions retrieve_database() list_update() using mainloop() method application guiWindow.mainloop() establishing connection with database the_connection.commit() the_cursor.close() Output: ['Exercise', 'Practice Coding', 'Complete Assignment', 'Shopping'] Next TopicAutomate Software Testing with Python prev next