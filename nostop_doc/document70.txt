next prev Python Constructor constructor special type method (function) which used initialize instance members class. Java, constructor same name class, treats constructor differently Python. used create object. Constructors types. Parameterized Constructor Non-parameterized Constructor Constructor definition executed when create object this class. Constructors also verify that there enough resources object perform start-up task. Creating constructor python Python, method __init__() simulates constructor class. This method called when class instantiated. accepts self-keyword first argument which allows accessing attributes method class. pass number arguments time creating class object, depending upon __init__() definition. mostly used initialize class attributes. Every class must have constructor, even simply relies default constructor. Consider following example initialize Employee class attributes. Example class Employee: __init__(self, name, id): self.id self.name name display(self): print("ID: \nName: (self.id, self.name)) emp1 Employee("John", 101) emp2 Employee("David", 102) accessing display() method print employee information emp1.display() accessing display() method print employee information emp2.display() Output: Name: John Name: David Counting number objects class constructor called automatically when create object class. Consider following example. Example class Student: count __init__(self): Student.count Student.count s1=Student() s2=Student() s3=Student() print("The number students:",Student.count) Output: number students: Python Non-Parameterized Constructor non-parameterized constructor uses when want manipulate value constructor that only self argument. Consider following example. Example class Student: Constructor parameterized __init__(self): print("This parametrized constructor") show(self,name): print("Hello",name) student Student() student.show("John") Python Parameterized Constructor parameterized constructor multiple parameters along with self. Consider following example. Example class Student: Constructor parameterized __init__(self, name): print("This parametrized constructor") self.name name show(self): print("Hello",self.name) student Student("John") student.show() Output: This parametrized constructor Hello John Python Default Constructor When include constructor class forget declare then that becomes default constructor. does perform task initializes objects. Consider following example. Example class Student: roll_num name "Joseph" display(self): print(self.roll_num,self.name) Student() st.display() Output: Joseph More than Constructor Single class Let's have look another scenario, what happen declare same constructors class. Example class Student: __init__(self): print("The First Constructor") __init__(self): print("The second contructor") Student() Output: Second Constructor above code, object called second constructor whereas both have same configuration. first method accessible object. Internally, object class will always call last constructor class multiple constructors. Note: constructor overloading allowed Python. Python built-in class functions built-in functions defined class described following table. Function Description getattr(obj,name,default) used access attribute object. setattr(obj, name,value) used particular value specific attribute object. delattr(obj, name) used delete specific attribute. hasattr(obj, name) returns true object contains some specific attribute. Example class Student: __init__(self, name, age): self.name name self.id self.age creates object class Student Student("John", 101, prints attribute name object print(getattr(s, 'name')) reset value attribute setattr(s, "age", prints modified value print(getattr(s, 'age')) prints true student contains attribute with name print(hasattr(s, 'id')) deletes attribute delattr(s, 'age') this will give error since attribute been deleted print(s.age) Output: John True AttributeError: 'Student' object attribute 'age' Built-in class attributes Along with other attributes, Python class also contains some built-in class attributes which provide information about class. built-in class attributes given below table. Attribute Description __dict__ provides dictionary containing information about class namespace. __doc__ contains string which class documentation __name__ used access class name. __module__ used access module which, this class defined. __bases__ contains tuple including base classes. Example class Student: __init__(self,name,id,age): self.name name; self.id id; self.age display_details(self): print("Name:%s, ID:%d, age:%d"%(self.name,self.id)) Student("John",101,22) print(s.__doc__) print(s.__dict__) print(s.__module__) Output: None {'name': 'John', 'id': 101, 'age': __main__ Next TopicPython Inheritance prev next