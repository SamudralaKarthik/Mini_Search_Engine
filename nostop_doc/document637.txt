next prev Types inheritance Python Inheritance capacity particular class obtain inherit properties from another class then them when required. Inheritance following characteristics: excellent representation relationships real world. allows code reuse. doesn't require create same code repeatedly again. also allows options existing class without having modify existing code. transitive nature, meaning that inherited from another class subclasses belonging will inherit directly from class Example: Python program demonstrating inheritance Here, will create base class Parent class class Child1: here, apply Constructor 	def __init__(self, name): 		self.name name now, will creat class name 	def getName1(self): 		return self.name Now, will create class checking this person student 	def isStudent1(self): 		return False here, will create derived class child class class Student1(Child1): child student, will return true 	def isStudent1(self): 		return True Driver code Object Child Child1("Jackie") print(std.getName1(), std.isStudent1()) Object Student Student1("johnny") print(std.getName1(), std.isStudent1()) Output: Jackie False johnny True Types Inheritance Python types inheritance depend number children parents involved. There four kinds inheritance available Python: Single Inheritance Single inheritance allows derivate class inherit properties parent class, this allows code reuse introduction additional features existing code. Example: Python program demonstrating single inheritance Here, will create base class Parent class class Parent1: 	def func_1(self): 		print ("This function defined inside parent class.") now, will create Derived class class Child1(Parent1): 	def func_2(self): 		print ("This function defined inside child class.") Driver's code object Child1() object.func_1() object.func_2() Output: This function defined inside parent class. This function defined inside child class. Multiple Inheritance If class able created from multiple base classes, this kind Inheritance known multiple Inheritance. When there multiple Inheritance, each attributes that present classes base been passed class that derived from Example: Python program demonstrating multiple inheritance Here, will create Base class class Mother1: 	mothername1 	def mother1(self): 		print(self.mothername1) Here, will create Base class class Father1: 	fathername1 	def father1(self): 		print(self.fathername1) now, will create Derived class class Son1(Mother1, Father1): 	def parents1(self): 		print ("Father name self.fathername1) 		print ("Mother name self.mothername1) Driver's code Son1() s1.fathername1 "Rajesh" s1.mothername1 "Shreya" s1.parents1() Output: Father name Rajesh Mother name Shreya Multilevel inheritance, features that part original class, well class that derived from passed class. similar relationship involving grandparents children. Example: Python program demonstrating multilevel inheritance Here, will create Base class class Grandfather1: 	def __init__(self, grandfathername1): 		self.grandfathername1 grandfathername1 here, will create Intermediate class class Father1(Grandfather1): 	def __init__(self, fathername1, grandfathername1): 		self.fathername1 fathername1 here, will invoke constructor Grandfather class 		Grandfather1.__init__(self, grandfathername1) here, will create Derived class class Son1(Father1): 	def __init__(self,sonname1, fathername1, grandfathername1): 		self.sonname1 sonname1 here, will invoke constructor Father class 		Father1.__init__(self, fathername1, grandfathername1) 	def print_name(self): 		print('Grandfather name self.grandfathername1) 		print("Father name self.fathername1) 		print("Son name self.sonname1) Driver code Son1('John', 'John Jr', 'John Jr') print (s1.grandfathername1) s1.print_name() Output: John Grandfather name John Father name John Son name John Hierarchical Inheritance If multiple derived classes created from same base, this kind Inheritance known hierarchical inheritance. this instance, have base classes parent (base) class well children (derived) classes. Example: Python program demonstrating Hierarchical inheritance Here, will create Base class class Parent1: 	def func_1(self): 		print ("This function defined inside parent class.") Derived class1 class Child_1(Parent1): 	def func_2(self): 		print ("This function defined inside child 1.") Derivied class2 class Child_2(Parent1): 	def func_3(self): 		print ("This function defined inside child 2.") Driver's code object1 Child_1() object2 Child_2() object1.func_1() object1.func_2() object2.func_1() object2.func_3() Output: This function defined inside parent class. This function defined inside child This function defined inside parent class. This function defined inside child Next TopicPython Mechanical Engineers prev next