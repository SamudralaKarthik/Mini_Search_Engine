next prev Append (key: value) Pair Dictionary Dictionary most used data types Python. unordered collection key: value pairs. Every value corresponding that identifies dictionary mutable collection, meaning modify values. factor that makes dictionary unique among other data types that stores mapping key: value pairs while other data types store single value element. Example: dictionary {101: 'Ramya', 102: 'Sanya', 103: 'Sree'} print(dictionary) print(dictionary[101]) print(dictionary[102]) print(dictionary[103]) Output: {101: 'Ramya', 102: 'Sanya', 103: 'Sree'} Ramya Sanya Sree Given that dictionary mutable, should able alter values existing keys key: value pairs dictionary. This tutorial discusses key: value pair, into dictionary. Traditional using Subscripts: assign existing keys with values want. Python forgets value updates value key. Using same way, assign values keys, thus appending pairs. Example: dictionary {101: 'Ramya', 102: 'Sanya', 103: 'Sree'} print(dictionary) dictionary[102] "Priyanka" dictionary[103] "Ujjwala" dictionary[104] "Sanya" dictionary[105] "Sree" print(dictionary) Output: {101: 'Ramya', 102: 'Sanya', 103: 'Sree'} {101: 'Ramya', 102: 'Priyanka', 103: 'Ujjwala', 104: 'Sanya', 105: 'Sree'} update() Method: inbuilt dictionary method designed modify dictionary. method takes {key: value} pair argument adds dictionary. also update values pre-existing keys using this method. method accept number arguments, which means append dictionary with number {key: value} pairs once. Example: dictionary {101: 'Ramya', 102: 'Sanya', 103: 'Sree'} print(dictionary) dictionary.update({102: 'Priyanka'}) dictionary.update({103: 'Ujjwala'}) dictionary.update({104: 'Sanya'}) dictionary.update({105: 'Sree'}) print(dictionary) Output: {101: 'Ramya', 102: 'Sanya', 103: 'Sree'} {101: 'Ramya', 102: 'Priyanka', 103: 'Ujjwala', 104: 'Sanya', 105: 'Sree'} above example, dictionary modified times using update method. first statements updated values already existing keys, while next added pairs dictionary. What want thousands key: value pairs? can't keep adding individual pairs after other. takes time, making code complex lengthy. simple create dictionary with pairs want then append/ merge into dictionary. Example: dictionary {101: 'Ramya', 102: 'Sanya', 103: 'Sree'} print("The original dictionary: print(dictionary) print("New key: value pairs: append {104: 'Jeevani', 105: 'Rishitha', 106: 'Nikitha'} print(append) dictionary.update(append) print("The updated dictionary: print(dictionary) Output: original dictionary: {101: 'Ramya', 102: 'Sanya', 103: 'Sree'} key: value pairs: {104: 'Jeevani', 105: 'Rishitha', 106: 'Nikitha'} updated dictionary: {101: 'Ramya', 102: 'Sanya', 103: 'Sree', 104: 'Jeevani', 105: 'Rishitha', 106: 'Nikitha'} OOPS Way: OOPS nature Python create function capable adding key: value pairs into dictionary. logic same traditional way, difference create object dictionary, user input key: value pairs modify dictionary. Example: class append(dict): __init__(self, dictionary): self.dictionary dictionary add(self, key, value): self.dictionary[key] value dictionary {101: 'Ramya', 102: 'Sanya', 103: 'Sree'} print(dictionary) append(dictionary) obj.key int(input("Enter want modify: obj.value input("Enter value update: obj.add(obj.key, obj.value) print(obj.dictionary) Output: #updating existing key: {101: 'Ramya', 102: 'Sanya', 103: 'Sree'} Enter want modify: Enter value update: Priyanka {101: 'Ramya', 102: 'Priyanka', 103: 'Sree'} #adding key:value pair: {101: 'Ramya', 102: 'Sanya', 103: 'Sree'} Enter want modify: Enter value update: Sanya {101: 'Ramya', 102: 'Sanya', 103: 'Sree', 104: 'Sanya'} Rather than using existing dictionary, using dict(), create dictionary only from inputs user. Example: class append(dict): __init__(self): self dict() add(self, key, value): self[key] value Next Topicany() Python prev next