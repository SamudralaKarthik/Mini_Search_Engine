next prev Python Python collection unordered items. Each element must unique, immutable, sets remove duplicate elements. Sets mutable which means modify after creation. Unlike other collections Python, there index attached elements set, i.e., cannot directly access element index. However, print them together, list elements looping through set. Creating created enclosing comma-separated immutable items with curly braces Python also provides set() method, which used create passed sequence. Example Using curly braces Days {"Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"} print(Days) print(type(Days)) print("looping through elements Days: print(i) Output: {'Friday', 'Tuesday', 'Monday', 'Saturday', 'Thursday', 'Sunday', 'Wednesday'} <class 'set'> looping through elements Friday Tuesday Monday Saturday Thursday Sunday Wednesday Example Using set() method Days set(["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]) print(Days) print(type(Days)) print("looping through elements Days: print(i) Output: {'Friday', 'Wednesday', 'Thursday', 'Saturday', 'Monday', 'Tuesday', 'Sunday'} <class 'set'> looping through elements Friday Wednesday Thursday Saturday Monday Tuesday Sunday contain type element such integer, float, tuple etc. mutable elements (list, dictionary, set) can't member set. Consider following example. Creating which have immutable elements set1 {1,2,3, "JavaTpoint", 20.5, print(type(set1)) #Creating which have mutable element set2 {1,2,3,["Javatpoint",4]} print(type(set2)) Output: <class 'set'> Traceback (most recent call last) <ipython-input-5-9605bb6fbc68> <module> #Creating which holds mutable elements ----> set2 {1,2,3,["Javatpoint",4]} print(type(set2)) TypeError: unhashable type: 'list' above code, have created sets, set1 have immutable elements set2 have mutable element list. While checking type set2, raised error, which means contain only immutable elements. Creating empty different because empty curly braces also used create dictionary well. Python provides set() method used without argument create empty set. Empty curly braces will create dictionary set3 print(type(set3)) Empty using set() function set4 set() print(type(set4)) Output: <class 'dict'> <class 'set'> Let's what happened provide duplicate element set. set5 {1,2,4,4,5,8,9,9,10} print("Return with unique elements:",set5) Output: Return with unique elements: above code, that set5 consisted multiple duplicate elements when printed remove duplicity from set. Adding items Python provides add() method update() method which used some particular item set. add() method used single element whereas update() method used multiple elements set. Consider following example. Example: Using add() method Months set(["January","February", "March", "April", "May", "June"]) print("\nprinting original print(months) print("\nAdding other months set..."); Months.add("July"); Months.add ("August"); print("\nPrinting modified set..."); print(Months) print("\nlooping through elements Months: print(i) Output: printing original {'February', 'May', 'April', 'March', 'June', 'January'} Adding other months set... Printing modified set... {'February', 'July', 'May', 'April', 'March', 'August', 'June', 'January'} looping through elements February July April March August June January more than item set, Python provides update() method. accepts iterable argument. Consider following example. Example Using update() function Months set(["January","February", "March", "April", "May", "June"]) print("\nprinting original print(Months) print("\nupdating original Months.update(["July","August","September","October"]); print("\nprinting modified print(Months); Output: printing original {'January', 'February', 'April', 'May', 'June', 'March'} updating original printing modified {'January', 'February', 'April', 'August', 'October', 'May', 'June', 'July', 'September', 'March'} Removing items from Python provides discard() method remove() method which used remove items from set. difference between these function, using discard() function item does exist then remain unchanged whereas remove() method will through error. Consider following example. Example-1 Using discard() method months set(["January","February", "March", "April", "May", "June"]) print("\nprinting original print(months) print("\nRemoving some months from set..."); months.discard("January"); months.discard("May"); print("\nPrinting modified set..."); print(months) print("\nlooping through elements months: print(i) Output: printing original {'February', 'January', 'March', 'April', 'June', 'May'} Removing some months from set... Printing modified set... {'February', 'March', 'April', 'June'} looping through elements February March April June Python provides also remove() method remove item from set. Consider following example remove items using remove() method. Example-2 Using remove() function months set(["January","February", "March", "April", "May", "June"]) print("\nprinting original print(months) print("\nRemoving some months from set..."); months.remove("January"); months.remove("May"); print("\nPrinting modified set..."); print(months) Output: printing original {'February', 'June', 'April', 'May', 'January', 'March'} Removing some months from set... Printing modified set... {'February', 'June', 'April', 'March'} also pop() method remove item. Generally, pop() method will always remove last item unordered, can't determine which element will popped from set. Consider following example remove item from using pop() method. Months set(["January","February", "March", "April", "May", "June"]) print("\nprinting original print(Months) print("\nRemoving some months from set..."); Months.pop(); Months.pop(); print("\nPrinting modified set..."); print(Months) Output: printing original {'June', 'January', 'May', 'April', 'February', 'March'} Removing some months from set... Printing modified set... {'May', 'April', 'February', 'March'} above code, last element Month March pop() method removed June January because unordered pop() method could determine last element set. Python provides clear() method remove items from set. Consider following example. Months set(["January","February", "March", "April", "May", "June"]) print("\nprinting original print(Months) print("\nRemoving items from set..."); Months.clear() print("\nPrinting modified set...") print(Months) Output: printing original {'January', 'May', 'June', 'April', 'March', 'February'} Removing items from set... Printing modified set... set() Difference between discard() remove() Despite fact that discard() remove() method both perform same task, There main difference between discard() remove(). deleted from using discard() doesn't exist set, Python will give error. program maintains control flow. other hand, item deleted from using remove() doesn't exist set, Python will raise error. Consider following example. Example- Months set(["January","February", "March", "April", "May", "June"]) print("\nprinting original print(Months) print("\nRemoving items through discard() method..."); Months.discard("Feb"); #will give error although feb available print("\nprinting modified set...") print(Months) print("\nRemoving items through remove() method..."); Months.remove("Jan") #will give error jan available set. print("\nPrinting modified set...") print(Months) Output: printing original {'March', 'January', 'April', 'June', 'February', 'May'} Removing items through discard() method... printing modified set... {'March', 'January', 'April', 'June', 'February', 'May'} Removing items through remove() method... Traceback (most recent call last): File "set.py", line Months.remove("Jan") KeyError: 'Jan' Python Operations performed mathematical operation such union, intersection, difference, symmetric difference. Python provides facility carry these operations with operators methods. describe these operations follows. Union Sets union sets calculated using pipe operator. union sets contains items that present both sets. Consider following example calculate union sets. Example using union operator Days1 {"Monday","Tuesday","Wednesday","Thursday", "Sunday"} Days2 {"Friday","Saturday","Sunday"} print(Days1|Days2) #printing union sets Output: {'Friday', 'Sunday', 'Saturday', 'Tuesday', 'Wednesday', 'Monday', 'Thursday'} Python also provides union() method which also used calculate union sets. Consider following example. Example using union() method Days1 {"Monday","Tuesday","Wednesday","Thursday"} Days2 {"Friday","Saturday","Sunday"} print(Days1.union(Days2)) #printing union sets Output: {'Friday', 'Monday', 'Tuesday', 'Thursday', 'Wednesday', 'Sunday', 'Saturday'} Intersection sets intersection sets performed operator intersection() function. intersection sets given elements that common both sets. Consider following example. Example Using operator Days1 {"Monday","Tuesday", "Wednesday", "Thursday"} Days2 {"Monday","Tuesday","Sunday", "Friday"} print(Days1&Days2) #prints intersection sets Output: {'Monday', 'Tuesday'} Example Using intersection() method set1 {"Devansh","John", "David", "Martin"} set2 {"Steve", "Milan", "David", "Martin"} print(set1.intersection(set2)) #prints intersection sets Output: {'Martin', 'David'} Example set1 {1,2,3,4,5,6,7} set2 {1,2,20,32,5,9} set3 set1.intersection(set2) print(set3) Output: {1,2,5} intersection_update() method intersection_update() method removes items from original that present both sets (all sets more than specified). intersection_update() method different from intersection() method since modifies original removing unwanted items, other hand, intersection() method returns set. Consider following example. {"Devansh", "bob", "castle"} {"castle", "dude", "emyway"} {"fuson", "gaurav", "castle"} a.intersection_update(b, print(a) Output: {'castle'} Difference between sets difference sets calculated using subtraction operator intersection() method. Suppose there sets difference A-B that denotes resulting will obtained that element which present Consider following example. Example Using subtraction operator Days1 {"Monday", "Tuesday", "Wednesday", "Thursday"} Days2 {"Monday", "Tuesday", "Sunday"} print(Days1-Days2) #{"Wednesday", "Thursday" will printed} Output: {'Thursday', 'Wednesday'} Example Using difference() method Days1 {"Monday", "Tuesday", "Wednesday", "Thursday"} Days2 {"Monday", "Tuesday", "Sunday"} print(Days1.difference(Days2)) prints difference sets Days1 Days2 Output: {'Thursday', 'Wednesday'} Symmetric Difference sets symmetric difference sets calculated operator symmetric_difference() method. Symmetric difference sets, removes that element which present both sets. Consider following example: Example Using operator {1,2,3,4,5,6} {1,2,9,8,10} a^b print(c) Output: Example Using symmetric_difference() method {1,2,3,4,5,6} {1,2,9,8,10} a.symmetric_difference(b) print(c) Output: comparisons Python allows comparison operators i.e., with sets using which check whether subset, superset, equivalent other set. boolean true false returned depending upon items present inside sets. Consider following example. Days1 {"Monday", "Tuesday", "Wednesday", "Thursday"} Days2 {"Monday", "Tuesday"} Days3 {"Monday", "Tuesday", "Friday"} #Days1 superset Days2 hence will print true. print (Days1>Days2) #prints false since Days1 subset Days2 print (Days1<Days2) #prints false since Days2 Days3 equivalent print (Days2 Days3) Output: True False False FrozenSets frozen sets immutable form normal sets, i.e., items frozen cannot changed therefore used dictionary. elements frozen cannot changed after creation. cannot change append content frozen sets using methods like add() remove(). frozenset() method used create frozenset object. iterable sequence passed into this method which converted into frozen return type method. Consider following example create frozen set. Frozenset frozenset([1,2,3,4,5]) print(type(Frozenset)) print("\nprinting content frozen set...") Frozenset: print(i); Frozenset.add(6) #gives error since cannot change content Frozenset after creation Output: <class 'frozenset'> printing content frozen set... Traceback (most recent call last): File "set.py", line <module> Frozenset.add(6) #gives error since change content Frozenset after creation AttributeError: 'frozenset' object attribute 'add' Frozenset dictionary pass dictionary sequence inside frozenset() method, will take only keys from dictionary returns frozenset that contains dictionary elements. Consider following example. Dictionary {"Name":"John", "Country":"USA", "ID":101} print(type(Dictionary)) Frozenset frozenset(Dictionary); #Frozenset will contain keys dictionary print(type(Frozenset)) Frozenset: print(i) Output: <class 'dict'> <class 'frozenset'> Name Country Programming Example Example Write program remove given number from set. my_set {1,2,3,4,5,6,12,24} int(input("Enter number want remove")) my_set.discard(n) print("After Removing:",my_set) Output: Enter number want remove:12 After Removing: 24} Example Write program multiple elements set. set1 set([1,2,4,"John","CS"]) set1.update(["Apple","Mango","Grapes"]) print(set1) Output: 'Apple', 'John', 'CS', 'Mango', 'Grapes'} Example Write program find union between set. set1 set(["Peter","Joseph", 65,59,96]) set2 set(["Peter",1,2,"Joseph"]) set3 set1.union(set2) print(set3) Output: {96, 'Joseph', 'Peter', 59} Example- Write program find intersection between sets. set1 {23,44,56,67,90,45,"Javatpoint"} set2 {13,23,56,76,"Sachin"} set3 set1.intersection(set2) print(set3) Output: {56, 23} Example Write program element frozenset. set1 {23,44,56,67,90,45,"Javatpoint"} set2 {13,23,56,76,"Sachin"} set3 set1.intersection(set2) print(set3) Output: TypeError: 'frozenset' object does support item assignment Above code raised error because frozensets immutable can't changed after creation. Example Write program find issuperset, issubset superset. set1 set(["Peter","James","Camroon","Ricky","Donald"]) set2 set(["Camroon","Washington","Peter"]) set3 set(["Peter"]) issubset set1 set2 print(issubset) issuperset set1 set2 print(issuperset) issubset set3 set2 print(issubset) issuperset set2 set3 print(issuperset) Output: False False True True Python Built-in methods Python contains following methods used with sets. Method Description add(item) adds item set. effect item already present set. clear() deletes items from set. copy() returns shallow copy set. difference_update(....) modifies this removing items that also present specified sets. discard(item) removes specified item from set. intersection() returns that contains only common elements both sets. (all sets more than specified). intersection_update(....) removes items from original that present both sets (all sets more than specified). Isdisjoint(....) Return True sets have null intersection. Issubset(....) Report whether another contains this set. Issuperset(....) Report whether this contains another set. pop() Remove return arbitrary element that last element set. Raises KeyError empty. remove(item) Remove element from set; must member. element member, raise KeyError. symmetric_difference(....) Remove element from set; must member. element member, raise KeyError. symmetric_difference_update(....) Update with symmetric difference itself another. union(....) Return union sets set.(i.e. elements that either set.) update() Update with union itself others. Next TopicPython Dictionary prev next