next prev argparse Python this article, will learn argparse module Python. will explore working functionalities. very important topic fundamental developer, engineer, computer scientist. familiar, Python popular containing rich library. developer writes script command line, he/she also required pass command-line argument that create using argparse library. this article, will explore following topics related argparse. What command-line interface? What argparse Python? implement Python argparse library create command-line interface? Types Arguments Command-line Interface Python argparse Positional Argument Python argparse Positional Argument Default Values Using short name Optional Arguments Combining Optional Positional Arguments with argparse Conclusion Let's understand what argparse implement What command line interface? command-line interface also known CLI, which interacts with command-line script. Python provides many libraries that allow work with CLI, Python argparse most suitable library current scenario. does command line interface work? Before getting deep down into this topic, need understand command line interface works? open command line terminal type command entire list files available system. C:\Users\DEVANSH SHARMA>ls Output: face.png Favorites file1.txt file2.txt flower.jpg forest.jpg Gow-0.8.0.exe gradients.jpg hadoop-2.8.0 hadoop-2.8.0.tar.gz hello_fullstack highway.mp4 IBA_IOAPDATA innocentcat IntelGraphicsProfiles international-cricket-players-data.zip Iris.csv iris.zip java_error_in_pycharm_6408.log java_error_in_pycharm_6684.log jtp_logo.png linear_reg linear_reg.zip Links Local Settings main_image.jpg mario.png metastore_db MicrosoftEdgeBackups Music Documents mycus 9c409ba1dd3f}.TMContainer00000000000000000001.regtrans-ms NTUSER.DAT{42939bbc-edb6-11ea-9c24-9c409ba1dd3f}.TMContainer00000000000000000002.regtrans-ms ntuser.ini PySpark DataFrame.ipynb PySpark RDD.ipynb PySpark SQL.ipynb PySpark UDF.ipynb tesseract-3.02.02-win32-lib-include-dirs tesseract-3.02.02-win32-lib-include-dirs.zip above output, command returns many files that available current directory. Now, will command adding option command line. C:\Users\DEVANSH SHARMA>ls Output: total 717704 drw-rw-rw- DEVANSH SHARMA 2020-04-07 13:25 __pycache__ dr--r--r-- DEVANSH SHARMA 2020-09-03 13:42 Objects drw-rw-rw- DEVANSH SHARMA 2014-01-03 15:37 8235702-a50f7c449c41b6dc8eb87d8d393eeff62121b392 drw-rw-rw- DEVANSH SHARMA 32768 2020-12-07 16:20 Anaconda3 drw-rw-rw- DEVANSH SHARMA 2020-09-03 13:02 AppData drw-rw-rw- DEVANSH SHARMA 8192 2021-02-11 21:39 Application Data -rw-rw-rw- DEVANSH SHARMA 224 2019-11-13 14:38 array.mat -rw-rw-rw- DEVANSH SHARMA 69548 2019-12-03 14:18 ballon.jpg -rw-rw-rw- DEVANSH SHARMA 69548 2019-12-03 14:20 baloon.jpg -rw-rw-rw- DEVANSH SHARMA 1857 2019-10-15 12:16 binary.png -rw-rw-rw- DEVANSH SHARMA 2020-04-01 16:46 binfile.bin -rw-rw-rw- DEVANSH SHARMA 13911 2019-10-16 11:52 blob.jpg -rw-rw-rw- DEVANSH SHARMA 244879 2019-10-14 14:19 book1.jpg -rw-rw-rw- DEVANSH SHARMA 10064 2020-04-07 16:35 calculation.py -rw-rw-rw- DEVANSH SHARMA 23073 2019-12-06 15:30 calibresult.jpg -rw-rw-rw- DEVANSH SHARMA 2019-11-29 15:11 cat.jpeg -rw-rw-rw- DEVANSH SHARMA 2019-12-05 12:34 cat.jpg -rw-rw-rw- DEVANSH SHARMA 13001 2019-10-13 17:22 cat_16x9.jpg -rw-rw-rw- DEVANSH SHARMA 249726 2019-10-13 15:02 cat1.jpg -rw-rw-rw- DEVANSH SHARMA 5633 2019-12-04 11:16 coin.jpg -rw-rw-rw- DEVANSH SHARMA 8652 2019-12-04 11:23 coin1.png -rw-rw-rw- DEVANSH SHARMA 59918 2020-03-02 11:22 comic.png dr--r--r-- DEVANSH SHARMA 2020-09-03 13:42 Contacts What argparse Python? Python argparse command-line parsing module that recommended work with command line argument. This module released part standard library with Python 20th February 2011. similar getopt module, slightly hard requires more code lines perform same task. However, argparse module better replacement Python getopt optparse module. provides important features that given below. allows positional argument. allows customize prefix chars. supports variable numbers parameters single option. supports subcommands. implement argparse library create command-line interface? Let's following simple example understand working argparse module Python. Example following example, create simple Python program perform operation using argparse module. will pass argument through command-line interface. importing argparse module import argparse parser argparse.ArgumentParser() creating variables using add_argument method parser.add_argument("num1", help "first number") parser.add_argument("num2", help "second number") parser.add_argument("operation", help "operation") have imported argparse module created simple parser that will throughout program. have called add_argument() method pass arguments num1 help. have saved above code file named code.py. this program, open command-line interface above file. Command C:\Users\DEVANSH SHARMA\PycharmProjects\Elasticsearch>python code.py When press enter, will show following output. Output: usage: code.py [-h] num1 num2 operation code.py: error: following arguments required: num1, num2, operation see, shows error because didn't pass required argument. Now, will pass optional argument which basically used help. Command C:\Users\DEVANSH SHARMA\PycharmProjects\Elasticsearch>python code.py will show following output. usage: code.py [-h] num1 num2 operation positional arguments: num1 first number num2 second number operation operation optional arguments: -h, --help show this help message exit arguments list which have defined Python program. Now, will print both arguments operation adding following operation. When execute .parse_args(), Namespace object containing simple property each input argument received from command line. args parser.parse_args() print(args.num1) print(args.num2) print(args.operation) print argument console using args variable. default, takes input need typecast into integer. int(args.num1) int(args.num2) these numbers, define operation code. result print("The Result ",result) C:\Users\DEVANSH SHARMA\PycharmProjects\Elasticsearch>python code.py Result Example Simple Calculator Program using argparse importing argparse module import argparse parser argparse.ArgumentParser() creating variables using add_argument method parser.add_argument("num1", help "first number") parser.add_argument("num2", help "second number") parser.add_argument("operation", help "operation") args parser.parse_args() print(args.num1) print(args.num2) print(args.operation) int(args.num1) int(args.num2) args.operation "add": result print("The Result ",result) elif args.operation "sub": result elif args.operation "mul": result elif args.operation "div": result else: print("Unmatched Argument") print("result ",result) Output: Types Argument Command Line Interface There arguments that command-line interface. Positional Argument Optional Argument Let's understand both arguments. Positional Argument Positional arguments types argument that command operate. pass argument command perform some operations. Their position defines their function. That's they called positional argument. default, positional arguments treated String, however typecast other data types. previous example, have used positional arguments perform operation between numbers. Let's understand following code. Example import argparse parser argparse.ArgumentParser() default, treats input number string parser.add_argument('num', help="Enter nmber square it.") args parser.parse_args() print(args.num**2) Output: have passed returned 1515 because argparse treated string. correct this using type attribute. Example import argparse parser argparse.ArgumentParser() parser.add_argument('num', help="Enter number square it.", type int) args parser.parse_args() print(args.num**2) Output: Now, desired result. Optional Argument Optional Argument mandatory. will error passed script. These types arguments started with single dash "--" double dash prefix. need call .add_parse() pass optional arguments. Let's understand following example. Example importing argparse module import argparse parser argparse.ArgumentParser() creating variables using add_argument method parser.add_argument("--num1", help "first number") parser.add_argument("--num2", help "second number") parser.add_argument("--operation", help "operation") args parser.parse_args() print(args.num1) print(args.num2) print(args.operation) int(args.num1) int(args.num2) args.operation "add": result print("The Result ",result) elif args.operation "sub": result elif args.operation "mul": result elif args.operation "div": result else: print("Unmatched Argument") print("result ",result) When above code without passing arguments, will show following output. Output: above code, script without passing optional argument instead returning error returns none. help message data types optional parameters same positional parameters. Python argparse Positional Argument Sometimes, need arguments that mandatory passed script execution. Let's example passed. Example import argparse parser argparse.ArgumentParser() parser.add_argument("example") args parser.parse_args() args.example 'Hello Python': print('Welcome Javatpoint') else: print("Didn't make it!") When above code with different parameter, will show following argument. Output: show error argument passed command line terminal. Python argparse Positional Argument Default Values provide default value variable argument using argparse module. previous example, positional argument value empty when provided. Let's understand following example. Example import argparse parser argparse.ArgumentParser() parser.add_argument("example", default "Hello you") args parser.parse_args() args.example 'Hello': print('Welcome Javatpoint') else: print("Didn't make it!") Output: Using Short Name Optional Argument Passing many optional make Python script long. assign short name parameters well. give abbreviation name parameters; will help keep Python script short. Let's understand following example. Example import argparse parser argparse.ArgumentParser() parser.add_argument('-tut', '--tutorial', help="Best Tutorial parser.add_argument('-w', '--writer', help="Technical Content") args parser.parse_args() args.tutorial 'Javatpoint': print('Congratulation|| made it!') args.writer 'Devansh': print('Technical Writer.') Output: C:\Users\DEVANSH SHARMA\PycharmProjects\Elasticsearch>python code.py Devansh Technical Writer.	 above code, have assigned short both optional arguments. access using short name. Combining Optional Positional Arguments with argparse combine both optional position arguments using argparse follows. Let's understand following example. Example import argparse parser argparse.ArgumentParser() positionl Argument parser.add_argument('tutorial', help="Best Tutorial optional argument parser.add_argument('-w', '--writer', help="Technical Content") args parser.parse_args() args.tutorial 'Javatpoint': print('You made it!') args.writer 'Devansh': print('Technical Writer.') Output: C:\Users\DEVANSH SHARMA\PycharmProjects\Elasticsearch>python code.py Javatpoint Devansh made Technical Writer. have passed both types argument command-line above output. Conclusion far, have discussed all-important concept argparse Python module. have learned create them them through command-line interface. have also learned what argparse module important write command-line scripts Python. This module helps create self-explanatory programs provide users with means interacting with application. Next TopicPython tqdm Module prev next