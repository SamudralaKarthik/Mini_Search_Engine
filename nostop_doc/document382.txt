next prev Python Cmdparser Module Sometimes, have write commands using command prompt terminal, this terminal which interprets inline commands written various purposes, called command interpreters. write build framework which will write line-oriented command interpreters, achieving this task, sometimes have classes. class that provides framework command interpreters that write line-oriented commands known class. Now, many wonder what uses class helpful are. class very useful creating prototypes, test harnesses that will later wrapped, administrative tools present more sophisticated manner. Therefore, perform these tasks create these tools, have command-line interface, this easily built using class. command-line interpreters become very rare because Graphical User Interface (GUI) most applications been increased nowadays. Therefore, users more attracted using these applications only instead using simple line-oriented command interpreter using command-line interface advantages. Following several advantages using command-line interface interpreter: These command-line interpreters don't have GUI-based interfaces; that's memory resources from cheaper computers also available. Creating text-oriented document with command-line interpreter very easy, create very fastly. command line interpreters portable, therefore, them anywhere device. very easy open file command line interpreter, this method faster than getting into drivers searching into menu files. These some major advantages command-line interpreters, that's most users even today prefer them over many GUI-based applications whose interfaces more attractive. After seeing these advantages, understand conclude that much useful build command-line interpreter with class. will only help professional life professional tasks, will also helpful personal projects. Many would surprised hear that class also present Python packages, therefore possible create framework command-line interface using Python program. going learn about Cmdparser module Python which will class, will build framework command line interpreter using this module. Cmdparser Module Python Cmdparser Module Python package that comes with sub-modules which very useful write text command parsers create framework command-line interface. Cmdparser Module also uses class functions this will these functions programs build parse tree perform name matching operation. Cmdparser Module Python uses built-in module Python calls creating framework command-line interface. Cmdparser Module Python contains sub-modules Python packages that following: datetimeparse cmdparser this tutorial, will learn about implementation working both sub-modules Cmdparser package them Python program create simple parse tree. Cmdparser Module: Installation want functions sub-modules Cmdparser Module Python program, should ensure that this module present system because in-built module Python. Therefore, Cmdparser Module already present system, have install move further with implementation part sub-modules. install Cmdparser Module through various installation processes, here will installer perform this task because easiest simplest Write following command terminal shell install Cmdparser Module system through installer: install cmdparser After writing command given above, have press enter wait some time will take while install this module successfully. Cmdparser Module successfully installed system that, now, work with sub-modules importing into program. will first look overview implementation cmdparser sub-module Cmdparser package, then will through overview datetimeparser sub-module. Cmdparser Module: Overview cmdparser sub-module: cmdparser sub-module from Cmdparser package Python allows create parse tree structure with help textual command specifications like given below: fries( scam [eggs] peas [omelette [...]] check this particular command string using parse tree structures. cmdparser sub-module also allows validate partial command strings' completion listed parse tree. Let's understand this concept making parse tree from Python program using textual command specification have listed above. Example: Look following Python program where have created parse tree from cmdparser sub-module then matched tokens with parse tree: Import cmdparser package from cmdparser module from cmdparser import cmdparser Creating sample parse tree parseTree cmdparser.parse_spec("abcd (efgh|ijkl) <mnop> [qrst]") Matching tokens from parse tree parseTree.check_match(("abcd", "efgh", "something")) parseTree.check_match(("abcd", "efgh", "anything", "uvwx")) Will throw error Completing parse tree output parseTree.get_completions(("abcd", Output: "command invalid somewhere 'uvwx'" {'efgh', 'ijkl'} Explanation: have first imported cmdparser sub-module from cmdparser package create parse tree with tokens program. After that, have created sample parse tree parseTree variable using parse_spec() function from cmdparser package. Inside parse tree, have only defined static tokens used them later matching. After that, used parse_match() cmdparser package match tokens from parse tree defined. second matching, parse tree will throw error "uvwx" static token defined package. last, used parse_completions() function complete rest tokens from parse tree. This function will print rest static tokens parse tree output. Now, output, rest static tokens from parse printed, before that, error "uvwx" token also printed. used static tokens parse, which have created example given above, also create parse trees with help dynamic tokens using Cmdparser Module. While creating parse tree having dynamic tokens dynamic tokens where list strings accepted, this list strings dynamic tokens changes over time. also dynamic tokens where arbitrary string list strings accepted while dealing with fixed token string. want look specifications classes available Cmdparser Module setting dynamic tokens, check docstrings module. Here, will understand this creating parse tree with dynamic tokens using Cmdparser Module classes. Look following example where created parse tree using dynamic tokens from Cmdparser Module. Example Look following Python program where created parse tree with dynamic tokens accept dynamic list strings: Import cmdparser from Cmdparser module from cmdparser import cmdparser Class having fruit names token class tokenOfFruit(Cmdparser.Token): 	def get_values(self, context): 		return ["watermelon", "melon", "orange", "grapes", "lichi", "mango", "apple", "banana", "strawberry", "guava", "greenapple"] Tokens class with fruit name values Default function identification myIdentfictionFactory(token): token "number": 		return Cmdparser.IntegerToken(token) token number 	elif token "fruit": 		return tokenOfFruit(token) token fruit name 	return None Creating parse tree with fruit number token parseTree Cmdparser.parse_spec("keep <number> <fruit> packet", ident_factory myIdentfictionFactory) cmdFields Matching with parse tree parseTree.check_match(("keep", "26", "mango", "packet"), fields cmdFields) parseTree.check_match(("keep", "all", "orange", "packet")) Getting completions from parse tree parseTree.get_completions(("keep", "24",)) Output: "'all' valid {'apple', 'banana', 'grapes', 'greenapple', 'guava', 'lichi', 'mango', 'melon', 'orange', 'strawberry', 'watermelon'} Explanation: After importing cmdparser sub-module package from Cmdparser Module, created class with fruit names tokens parse tree program. fruit names defined inside 'tokenOfFurits' class will work static tokens parse tree, retrieving values fruit names from class, have defined default function inside class. Then, have defined another function (myIdentificationFactory) that will accept dynamic tokens parse tree, will accept numeric values (numbers) matching values. dynamic tokens with numeric value, used IntegerToken() function from Cmdparser package, thus will make this dynamic token that will accept integer value matching value from parse tree. After that, used parse_spec() function create parse tree having number fruit dynamic tokens "keep" "packet" static tokens. Then, used check_match() function gave token values perform matching operation from parse tree. output that when haven't provided number, will throw matching error. last, when used get_completions() function with parse tree, fruit values used token printed output. Classes cmdparser sub-module: Following four classes available inside cmdparser sub-package that suitable base classes creating user-derived tokens (static well dynamic): Token: Token base class from cmdparser sub-package, useful when sets fixed values suitable parse tree creating. parse tree, where list string values static dynamic, this class used create accept tokens. have override get_values() method want return list valid tokens list strings from parse tree result. AnyToken: This base class similar Token class sub-package, string expected result while using AnyToken base class. want perform validation tokens, this validate() method available sub-module. But, before using validate() method, should note that validate() method doesn't allow tab-completion because called only during entire command parsed. AnyToken base class also requires convert() method while calling list strings (both static dynamic). AnyTokenString: AnyTokenString base class very similar AnyToken class terms function performed both base classes. But, AnyTokenString class, remaining items from values defined command line consumed during parsing. Subtree: subtree base class from cmdparser sub-package matches entire command from parse tree created stores result matching process against specified token dictionary fields. While using subtree class, have pass command specification string class's constructor, then type classes will override convert() method interpret command. Cmdparser Module: Overview datetimeparser Sub-Module: Datetimeparser sub-module from Cmdparser package adds some specific token types creation parse tree, which will help parse human-readable specifications related date time format. datetimeparser sub-module, both absolute relative types dates specified, these types converted other instances also whenever required appropriate. Following examples types dates datetimeparser sub-module: November 2020 01: Thursday last week etc. Classes datetimeparser Sub-Module: Following five classes available inside datetimeparser sub-package Cmdparser Module that suitable base classes creating user-derived tokens (static well dynamic): TimeSubtree: TimeSubtree class datetimeparser sub-module used parse time given 24-hour format inside parse tree. returned value after parsing time given returned with help time.localtime() function. DateSubtree: DateSubtree class from datetimeparser sub-module acts similar TimeSubtree class. DateSubtree class includes literals different date formats, i.e., days from week related current (Monday last week), literal date (01-11-2021), descriptive date version (01-November-2021), well today, yesterday, tomorrow along with parse calendar dates. return value case DateSubtree class datetime.date instance from parse tree. DateTimeSubtree: After reading description first base classes datetimeparser sub-module, basic idea DateTimeSubtree class name. DateTimeSubtree class parses specifications from both date time given parse tree. DateTimeSubtree accepts combination TimeSubtree DateSubtree phrases phrase RelativeTimeSubtree class will read next about this class) parse specifications both date time. case phrase from RelativeTimeSubtree class, time taken relative format according time given. returned value DateTimeSubtree class datetime.datetime instance value. RelativeTimeSubtree: RelativeTimeSubtree base class from datetimeparser sub-module returns from wrapper class return value. RelativeTimeSubtree class used parse phrases given format, which indicates time offset from present time, such days ago, three hours ago, etc. returned value case RelativeTimeSubtree class instance cmdparser.DateDelta class wrapper class from datetimeparser sub-module) contains datetime.timedelta instance. CLassCalenderPeriodSubtree: CLassCalenderPeriodSubtree last base class from datetimeparser sub-module, parses specification calender periods given from past. return value case this class 2-tuple instances from datetime.date, which represents following return value format: ranges date specified from calendar, where first date from range inclusive second date from range exclusive etc. Conclusion read about Cmdparser Module this tutorial, learned could create interface cmdparser using packages this Module. learned about both cmdparser datetimeparser sub-modules Cmdparser package Python these helpful creating tokens parse tree. last, looked base classes both sub-modules Cmdparser package learned these classes helpful parsing specifications given token parse tree. Next TopicPython Dash module prev next