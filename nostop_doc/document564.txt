next prev Fiona module Python Fiona lets Python developers interface geographic information systems with other computer systems reading writing geographic data files. Fiona includes extension modules that connect Geospatial Data Abstraction Library other applications (GDAL). Fiona made easy dependable. focuses reading writing data usual Python paradigm, instead OGR-specific classes, employs basic Python types protocols like files, dictionaries, mappings, iterators. Fiona read write real-world data multi-layered formats zipped virtual file systems, it's easy with other Python tools like pyproj, Rtree, Shapely. Fiona API. read write data variety formats. rationale choosing instead that more Python-like, more trustworthy, less prone errors. uses WKT WKB markup languages convey spatial information relation vector data. result, works nicely with other Python libraries like Shapely. You'd Fiona input output, Shapely geospatial data creation manipulation. Need Fiona Module: Geographic information systems (GIS) assist anticipating, responding comprehending changes physical, political, economic, cultural landscapes. used something only huge institutions like nations cities did, thanks accurate inexpensive global positioning systems, commoditization satellite data, open-source software, it's commonplace. GIS, rasters represent continuous scalar fields (for example, land surface temperature elevation) while vectors represent discrete features such roads administrative borders. Fiona solely concerned with this. It's Python wrapper library's vector data access methods. minimalists, very basic wrapper. reads GeoJSON-like mappings from files publishes same kind mappings back files records. This concludes discussion. Layers, cursors, geometric operations, coordinate system transformations, remote method calls handled other Python packages like Shapely pyproj, well Python language protocols. Please keep this mind: Fiona built succeed specific duties while failing miserably others. Fiona sacrifices memory speed favor simplicity consistency. Fiona converts vector data from data source Python objects, unlike OGR's Python bindings, which utilize pointers. These easier operate safer, they take more memory. Fiona's performance slower only require access single record field nothing tops ogr2ogr program reprojecting filtering data files Fiona's performance substantially better than OGR's Python bindings need record's fields coordinates. Although copying limitation, makes programs easier understand. Fiona eliminates need manage references objects order avoid crashes, allows interact with vector data using Python mapping accessors. Records used represent discrete geographic characteristics geographic information systems. semantic implications record features well recognized [Kent1978]. Records have single type, records that type have same fields, record's fields concern single geographic attribute, among most important geographic data. Different systems describe records differently, enough similarities exist between them that programmers have been able develop effective abstract data models. model. Data Sources, Layers, Features three main components. Features contain characteristics Geometry rather than fields. Layer comprises just kind feature (for example, "roads" "wells"). GeoJSON paradigm little more straightforward, with Features replacing Data Sources Layers Feature Collections replacing Data Sources Layers. modeling, term "Feature" therefore overused, refers entities both conceptual data models. Record files come variety formats. until roughly 2005, ESRI Shapefile [ESRI1998] most important these, least United States, still popular today. It's binary file type. shape fields saved a.shapefile, whereas other fields saved a.dbf file have look code Fiona module Python. Code: sample understand usage Fiona module Python with help this module easily read file which stores geographical positioning data There different functions that have written that used perform different operations some functions requires some input case these functions user prompted with message give required input then processing input data done according functionality that function models which required writing code which written below important beginning program import fiona import sample class written that will consist functions that used perform different operations some functions require some input case these functions user prompted with message give required input then processing input data done according functionality that function class FionaClass: Sample constructor written that used initialize class variables above Britain class this class variable across different functions, name file from where want read data various information stored fname variable 	def __init__(self): 		self.fname None 		pass This function used read geographical data that stored file with help open function this module which provided Python have read shapefile which geographical data stored first this function asks user name file from which want read geographical data once user added name file from which want read geographical data that file opened with help open function this module Python then data which read from specified file presented user output this function 	def read_geo_data_from_the_file(self): 		print("Enter name file(.shp file)::") 		filename input() 		self.fname filename 		opne_handler fiona.open(filename, 'r') 		opne_handler.closed 		print("First data file is::") print(next(opne_handler)) 		print("Total length file openned {}".format(len(list(opne_handler)))) This another function which have returned this function schema data which read from file which specified previous function calculated result this function schema file which mentioned previous function from which reading geographical data printed user 	def get_schema_of_file(self): 		filename self.fname 		opne_handler fiona.open(filename, 'r') 		print("schema ::", opne_handler.schema) This another function which have returned this function bounds data which read from file which specified previous function calculated result this function bounds file which mentioned previous function from which reading geographical data printed user 	def get_bounds_of_file(self): 		filename self.fname 		opne_handler fiona.open(filename, 'r') 		print("bounds ::", opne_handler.bounds) This another function which have returned this function data which read from file which specified previous function calculated result this function file which mentioned previous function from which reading geographical data printed user 	def get_crs_of_file(self): 		filename self.fname 		opne_handler fiona.open(filename, 'r') 		print("crs ::", opne_handler.crs) This last function this class that have written this function used check whether specified file which opened read geographical data stored that file currently open other words that this function helps state file from which reading geographical data return type this function Boolean type that means return value this function will true file closed file open return type this function will changed false 	def check_is_file_closed(self): 		filename self.fname 		opne_handler fiona.open(filename, 'r') 		print("Is closed ::", opne_handler.closed)		 main(): 	my_geological_object FionaClass() 	while(True): 		print("These below-listed options, select them::") 		print("1. read data from shapefile(.shp .shx file) using Fiona module python.") 		print("2. schema specified shapefile(.shp .shx file) using Fiona module python.") 		print("3. bounds specified shapefile(.shp .shx file) using Fiona module python.") 		print("4. specified shapefile(.shp .shx file) using Fiona module python.") 		print("5. check whether specified shapefile(.shp .shx file) closed not.") 		print("6. stop displaying options exit from code.") 		menu_choice input() 		menu_choice int(menu_choice) 		if menu_choice 			my_geological_object.read_geo_data_from_the_file() 		elif menu_choice 			my_geological_object.get_schema_of_file() 		elif menu_choice 			my_geological_object.get_bounds_of_file() 		elif menu_choice 			my_geological_object.get_crs_of_file() 		elif menu_choice 			my_geological_object.check_is_file_closed() 		elif menu_choice 			sys.exit() 		print("Enter else [n], move ahead with code execution 		continue_or_exit input() 		if continue_or_exit continue_or_exit 'Y': 			pass 		elif continue_or_exit continue_or_exit 'N': 			sys.exit() __name__ '__main__': 	main() Output: These below-listed options, select them:: read data from shapefile(.shp .shx file) using Fiona module python. schema specified shapefile(.shp .shx file) using Fiona module python. bounds specified shapefile(.shp .shx file) using Fiona module python. specified shapefile(.shp .shx file) using Fiona module python. check whether specified shapefile(.shp .shx file) closed not. stop displaying options exit from code. Enter name file(.shp file):: IND_adm0.shx First data file is:: code1.py:18: FionaDeprecationWarning: Collection.__next__() buggy will removed Fiona 2.0. Switch `next(iter(collection))`. print(next(opne_handler)) {'type': 'Feature', 'id': '0', 'properties': OrderedDict(), 'geometry': {'type': 'MultiPolygon', 'coordinates': [[[(93.78772735595709, 6.852640151977823), (93.78849029541021, 6.8525710105896), (93.78904724121094, 6.8525710105896), (93.78904724121094, 6.852291107178019), (93.78967285156256, 6.852291107178019), (93.78987884521513, 6.852013111114502), (93.79015350341814, 6.851944923400879), (93.79064178466825, 6.851666927337931), (93.79077911376959, 6.851388931274414), (93.79091644287126, 6.851041793823185), (93.79050445556635, 6.8506250381472), (93.79029083251964, 6.850347042083854), (93.79000091552734, 6.85027885437006), (93.78948211669928, 6.849903106689453), (93.78900146484392, 6.849484920501936), (93.78837585449247, 6.849136829376391), (93.78801727294933, 6.848720073700008), (93.78778076171903, 6.848055839538688), (93.78750610351562, 6.848061084747542), (93.78721618652372, 6.847781181335449), (93.78639221191412, 6.847781181335449), (93.78610992431652, 6.848061084747542), (93.78527832031273, 6.848061084747542), (93.78443908691423, 6.848899841308821), (93.7844467163086, 6.849165916442814), (93.78549194335966, 6.849929809570426), (93.78625488281278, 6.8506250381472), (93.78676605224615, 6.851171970367432), (93.78694152832031, 6.8516712188723545), (93.78737640380882, 6.851666927337931), (93.78737640380882, 6.852084159851358), (93.78730773925781, 6.852358818054199), (93.78737640380882, 6.8525710105896), (93.78772735595709, 6.852640151977823)]], [[(93.71958160400408, 7.2075009346010575), (93.71958160400408, 7.206870079040755), (93.71930694580107, 7.206459999084416), (93.93312072753935, 6.970485210418644), (93.93327331542974, 6.969860076904467), (93.93333435058622, 6.96944284439104), (93.933891296387, 6.968889236450195), (93.933891296387, 6.968610763550032), (93.93444824218756, 6.96805477142334), (93.93444824218756, 6.967776775360392), (93.9347229003908, 6.967501163482893), (93.9347229003908, 6.967223167419377), (93.93499755859398, 6.9669451713564285), (93.93499755859398, 6.966111183166618), (93.9347229003908, 6.965833187103499), (93.9347229003908, 6.965001106262264), (93.93497467041021, 6.964021205902327), (93.93497467041021, 6.963535785675276), (93.9352493286134, 6.963325977325724), (93.935600280762, 6.963187217712687), (93.93601226806652, 6.962841033935774), (93.93622589111322, 6.962562084197941), (93.93656921386747, 6.962355136871281), (93.93722534179688, 6.962223052978686), (93.93805694580101, 6.962223052978686), (93.9388885498048, 6.961389064788875), (93.93945312500011, 6.961390972137451), (93.9397201538086, 6.961111068725586), (93.94000244140653, 6.961111068725586), (93.94027709960938, 6.960833072662581), (93.94110870361351, 6.960833072662581), (93.94139099121111, 6.960555076599064), (93.94167327880882, 6.9605607986450195), (93.94194793701166, 6.9602899551393875), (93.94246673584013, 6.959929943084887), (93.94288635253918, 6.95979118347185), total length file opened Enter else [n], move ahead with code execution These below-listed options, select them:: read data from shapefile(.shp .shx file) using Fiona module python. schema specified shapefile(.shp .shx file) using Fiona module python. bounds specified shapefile(.shp .shx file) using Fiona module python. specified shapefile(.shp .shx file) using Fiona module python. check whether specified shapefile(.shp .shx file) closed not. stop displaying options exit from code. schema {'properties': OrderedDict(), 'geometry': 'Polygon'} Enter else [n], move ahead with code execution These below-listed options, select them:: read data from shapefile(.shp .shx file) using Fiona module python. schema specified shapefile(.shp .shx file) using Fiona module python. bounds specified shapefile(.shp .shx file) using Fiona module python. specified shapefile(.shp .shx file) using Fiona module python. check whether specified shapefile(.shp .shx file) closed not. stop displaying options exit from code. bounds (68.18624877929699, 6.754255771636906, 97.41516113281256, 35.5013313293457) Enter else [n], move ahead with code execution These below-listed options, select them:: read data from shapefile(.shp .shx file) using Fiona module python. schema specified shapefile(.shp .shx file) using Fiona module python. bounds specified shapefile(.shp .shx file) using Fiona module python. specified shapefile(.shp .shx file) using Fiona module python. check whether specified shapefile(.shp .shx file) closed not. stop displaying options exit from code. Enter else [n], move ahead with code execution These below-listed options, select them:: read data from shapefile(.shp .shx file) using Fiona module python. schema specified shapefile(.shp .shx file) using Fiona module python. bounds specified shapefile(.shp .shx file) using Fiona module python. specified shapefile(.shp .shx file) using Fiona module python. check whether specified shapefile(.shp .shx file) closed not. stop displaying options exit from code. closed False Enter else [n], move ahead with code execution These below-listed options, select them:: read data from shapefile(.shp .shx file) using Fiona module python. schema specified shapefile(.shp .shx file) using Fiona module python. bounds specified shapefile(.shp .shx file) using Fiona module python. specified shapefile(.shp .shx file) using Fiona module python. check whether specified shapefile(.shp .shx file) closed not. stop displaying options exit from code. Explanation: above-written code, have shown usage Fiona module Python. this program have written different functions which will used perform various different functionalities such reading data from shapefile using this module python, various parameters shapefile with help different functions various parameters which have taken from shapefile scheme shapefile, bound shapefile, check whether specified shapefile currently opened these functions provided options user user choose from these options perform that particular operation these options presented user recursive manner until user stop displaying options exit from code Conclusion: this article, have understood usage Fiona module python what different functionalities provided this module. Next TopicFirebase module python prev next