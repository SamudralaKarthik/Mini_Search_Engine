next prev Parse JSON Python Foundation/ brief pre-requisite knowledge: JSON stands "JavaScript Object Notation". standard syntactic style used store form files exchange data (Interchange) over networks. syntax JSON just simple text, which makes more high-level. derived from JavaScript, language-independent usage. Data storage achieved with types data structures used almost programming languages other form: Key: value pairs also referred objects, records, structures, hash tables, keyed lists, dictionary. ordered collection data values like array, vector, list. JSON files have extension.json, network transfers have wide range electronics digital systems applications. programmer parse data into some programming language work with human-readable data inside JSON files. There inbuilt software's/modules almost programming languages interact with these files. Example JSON Data Representation: 		"StudentName": "Raghav", 		"Course": "Electronics", 		"isAlive": true, 		"Year": 	"Place": "Chennai", 	"Grades": 	[ {"1-1": "9.2"}, {"1-2": "9.1"}, {"2-1": "8.9"}, {"2-2": "9.0"} 		] shown above sample, JSON files store data form key: value pairs sequences like lists, arrays, etc. This tutorial explains Python's parsing JSON file. Package: json Python inbuilt package built interact with these files called "json". programmer must import this package into code work with data from json files. very first line code programmer start with import json Equivalent Data Types Python with json Files: Python JSON dictionary Object string string Lists tuples Arrays Int, long, float, double Numbers True true False false None null above representation student information json file, numbers, strings, arrays used. Working with json files Python, there possible mechanisms: Serialization Encoding De-serialization Decoding Serialization refers encoding Python objects into their equivalent json series bytes transferring data networks. De-serialization, other hand, refers decoding json bytes into equivalent Python objects. JSON package, there methods simplify processes: encoding: json.dump() json.dumps() decoding: json.load() json.loads() This article discusses parsing concept which de-serialization concept. Parsing means breaking file components into parts decoding JSON data into respective programming languages, which this case Python. load() loads() purpose load() method read given JSON file. Syntax: json.load(file_object) purpose loads() method convert data JSON file into Python dictionary, thus decoding data. Syntax: json.loads(string/byte/byte array JSON file) Example: import json json_string """{ "StudentName": "Raghav", "Course": "Electronics", "isAlive": true, "Year": "Place": "Chennai", "Grades": {"1-1": "9.2"}, {"1-2": "9.1"}, {"2-1": "8.9"}, {"2-2": "9.0"} python json.loads(json_string) 	print(Python) Output: Point Remember: JSON object provide loads() string, bytes, byte array dictionary. above code, multi-line string given using """. Check JSON representation correct using online JSON validation websites. Difference between load() loads(): Both load() loads() de-serializes JSON data into Python dictionary. difference that load() method takes file input, reads converts Python dictionary. contrast, loads() method takes JSON data input form native JSON string/bytes byte array converts into Python dictionary. Read JSON File Python: Suppose some JSON data stored file, "samplefile.json". parse file's data, need read file using load() method. Code: import json with open ('samplefile.json', 'r') jsonfile: data json. load (jsonfile) print (data) Output: Extended Syntax load() loads(): load(): json. load (fp, None, object_hook None, parse_float None, parse_int None, parse_constant None, object_pairs_hook None, **kw) File pointer that reads JSON data from file. object_hook: Specifying this parameter with type decodes JSON data into specified type. default None. mostly invoked creating custom decoders different needs. parse_float, parse_int, parse_constant: These three parameters called whenever JSON float, int, constants decoded file. three parameters default None. object_pairs_hook: This also similar object_hook parameter. invoked creating customized decoders, difference that, here, JSON string will parsed list tuples, while object_hook, parsed dictionary. using this parameter, duplicate keys avoided. loads(): json. loads (s, encoding None, None, object_hook None, parse_float None, parse_int None, parse_constant None, object_pairs_hook None, **kw) JSON data parsed other parameters same load method. object_hook object_pairs_hook Parameters: import json json_string """{ 	"StudentName": "Raghav", "Course": "Electronics", "isAlive": true, "Year": "Place": "Chennai" }"""	 json. loads (json_string, object_pairs_hook print) json. loads (json_string, object_hook=print) Output: Understanding: JSON data parsed dictionary when object_pairs_hook parameter printed parsed list tuples when object_hook parameter printed. Next TopicHow Make First Column Index Python prev next