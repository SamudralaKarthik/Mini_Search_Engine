next prev Underscore Python this article, will discuss what role Single Underscore Double Underscore (__). When user writes code Python, some cases they single Underscore some cases they double underscore (__). following some cases where user uses underscore. user wants store value last expression interpreter. user wants declare variable function code. user wants separate digits number lateral value. ignoring some values. Underscore also used 'localization (l10n)' 'Internationalization (i18n)' functions. Let's some examples these cases. Using Interpreter interpreter Python will store last expression value '_'. Example: print(47) print(_) print(_ print(_) print(_ Ignoring Values Here, will Underscore ignoring values. Example: (10, Here, 	A 	B 	C 	D 	E 	F 	G underscore used ignoring value Using Underscore Declare Variable Function Python language does support private variables functions, users cannot force private variables function somethings they call them directly from other modules. Example: using_single_underscore_ users trailing underscore avoiding conflicts with Python keywords built-ins. Example: __double_leading_underscore above double underscore (__) used avoiding conflicts with attributes names between names. users writing function name "__display" class, name will then modified "_ClassName__display" form. Example: __double_leading_and_trailing_underscore__ some cases, users this form __init__. Separating Digits Number Lateral Value underscore used separating digits number lateral value Example: decoder_base 5_000_000 print (decoder_base) Output: 5000000 Localization (l10n) International (i18n) functions This just principle syntactic function. underscore used binding i18n/l10n variable with underscore. concept taken from convention. Underscore Prefix with Python Variables Means? names class, which have leading underscore indicating other users that attribute function intended private program. users recommended that they should single underscore semiprivate double underscore (__) fully private variables. following example, will show difference between Single Underscore Double Underscore (__) prefixes. Example: class UserClass(): __init__(self): self.__fully_private "JavaTpoint" self.__fully_private "to" self._semi_private "Hello" self._semi_private "Say" UserClass() print(mc._semi_private) print(mc.__fully_private) Output: --------------------------------------------------------------------------- AttributeError Traceback (most recent call last) <ipython-input-10-4f3b78146b9f> <module> UserClass() print(mc._semi_private) ----> print(mc.__fully_private) AttributeError: 'UserClass' object attribute '__fully_private' above code, user tried access fully private variables output, they will error saying that UserClass does have attribute called '__fully_private'. Conclusion this article, have discussed single underscore double underscore (__) python with different example. Next TopicDifference between List Python prev next