next prev Calculator using Python following tutorial, will learn build simple calculator using Tkinter library Python. will learning entire snippet code stepwise. let's started. Getting started with Calculator using Tkinter Tkinter library offers fastest easiest develop applications based Graphical User Interface (GUI) Python programming language. Tkinter package, also known "Tk interface", standard Python interface Tcl/Tk toolkit. Both Tkinter available most Unix platforms Windows systems. case someone working Linux/Ubuntu, installing Tkinter package their machines required programs; however, comes pre-installed with Python installation Windows. Tkinter pre-installed Python, then install using 'pip' installer typing following command Windows Command Prompt: Syntax: install python-tk What Tkinter Messagebox? Messagebox widget Python's Tkinter library. This widget utilized show message boxes Python applications. this module display message utilizing several functions. Syntax: messagebox.NameOfTheFunction(title, message, **options) Parameters: NameOfTheFunction:This argument utilized represent appropriate function message box. title:This argument string that signifies title message box. message:This argument also string that consists message displayed message box. **options:There options that utilized here: default:This option utilized denote default button such ABORT, RETRY, IGNORE message box. parent:This option utilized denote window which message displayed. Understanding Structure Calculator order start building calculator, becomes necessary understand structure. This analysis will make work much more efficient effective. following structure Calculator that will build. above structure consists Labels, Frames, Buttons. briefly discuss these widgets: Python Tkinter Label: Label widget utilized specify container where user text images. This widget utilized provide message user related other widgets utilized Python application. Python Tkinter Frame: Frame widget type widget only. Frames Python containers child elements. These widgets provide mainframes child elements allow divide entire layout application frame frame. example, application having structure consisting label beginning then some buttons root window. divide this root window section section. Suppose label segment then buttons into different segment. these segments frame, this frame will parent element. This will allow simplify complex design. Once include frames structure calculator, structure will look like this: Label First Frame: Four Buttons Second Frame: Four Buttons Third Frame: Four Buttons Fourth Frame: Four Buttons Python Tkinter Buttons: Button widget utilized insert buttons Python application. These buttons show text images that express objective buttons. attach method function button called automatically whenever click button. that have understood structure calculator that going build, head onto code section. Code Implementation calculator Python following section, will code implementation calculator Python programming language. This implementation project will carried stepwise: Step Defining Functions Step Creating window calculator Step Setting label formatting Step Packing button window Step Adding buttons calculator Defining Functions will start importing required libraries modules. consider following snippet code demonstrating same: File: guiCalci.py importing required libraries import tkinter from tkinter import from tkinter import messagebox Explanation: above snippet code, have imported necessary library like Tkinter along with widget classes, including messagebox module. will define functions that will operate working buttons. consider following snippet code illustrating implementation function that called whenever user presses button '1'. File: guiCalci.py setting initial values some variables operator defining function Button button_1_is_Clicked(): global the_data.set(var) Explanation: above snippet code, have defined some variables initialized them with initial values. have then defined function that will called whenever user presses button '1'. have then used global keyword along with variable within this function. This will allow modify value variable inside this function. have then concatenated variable this variable StringVar using set() method that will define later tutorial. Whenever user clicks number button, this function will called. This function will display clicked number label store different variable that becomes easy calculate. will follow same steps Tkinter buttons. Here snippet code demonstrating implementation same. File: guiCalci.py defining function Button button_2_is_Clicked(): global the_data.set(var) defining function Button button_3_is_Clicked(): global the_data.set(var) defining function Button button_4_is_Clicked(): global the_data.set(var) defining function Button button_5_is_Clicked(): global the_data.set(var) defining function Button button_6_is_Clicked(): global the_data.set(var) defining function Button button_7_is_Clicked(): global the_data.set(var) defining function Button button_8_is_Clicked(): global the_data.set(var) defining function Button button_9_is_Clicked(): global the_data.set(var) defining function Button button_0_is_Clicked(): global the_data.set(var) defining function Button button_Add_is_Clicked(): global global global operator float(var) operator the_data.set(var) defining function Button button_Sub_is_Clicked(): global global global operator float(var) operator the_data.set(var) defining function Button button_Mul_is_Clicked(): global global global operator float(var) operator the_data.set(var) defining function Button button_Div_is_Clicked(): global global global operator float(var) operator the_data.set(var) defining function Button button_Equal_is_Clicked(): global global global operator float(var) operator the_data.set(var) defining function Button button_C_is_Clicked(): global global global operator operator the_data.set(var) defining function display result res(): global global operator global var2 operator "+": float((var2.split("+")[1])) the_data.set(x) str(x) elif operator "-": float((var2.split("-")[1])) the_data.set(x) str(x) elif operator "*": float((var2.split("*")[1])) the_data.set(x) str(x) elif operator "/": float((var2.split("/")[1])) messagebox.showerror("Division Allowed.") the_data.set(var) else: float(A/a) the_data.set(x) str(x) Explanation: above snippet code, have defined different functions append required value operator string. values ranging from have used global keyword along with variable append required digit final string. operators like have used global keywords along with var, operator variable append required operator final string. last, have defined function calculate result. Within this function, have again used global keyword modify values operator, variable. have then declared initialized variable setting value var. have then used if-elif-else conditional statements operate requirement stored result. Creating window Calculator will create window using Tk() class Tkinter library. This window will consist title other decorations. root window main application window programs. must created before other widgets. This window consists title borders. These decorations offered window manager. geometry method Tk() class allows programmers size window position screen. first parameters this method width height window, whereas last parameters coordinates locate window screen. resizable method Tk() class allows users change size window their needs. will parameters this method disabling resizing option from window. better utilize resizable(0, method will make calculator look proper place. consider following snippet code demonstrating same. File: guiCalci.py creating object Tk() class guiWindow tkinter.Tk() setting size window guiWindow.geometry("320x600+400+400") disabling resize option better guiWindow.resizable(0, setting title Calculator window guiWindow.title("GUI Calculator Javatpoint.com") Explanation: above snippet code, have created object Tk() class. have then size window using geometry() method. have also used resizable() method parameters order disable resize option better User Interface. last, have used title() method added title calculator. Setting label formatting Label widget allows create display where place text images. This widget allows update text displayed time requirement. also possible emphasize part text (like identifying keyboard shortcut) limit text across multiple lines. parent label root which means won't limited single frame however, entire root window. Then will place simple text that will dynamically alter throughout code until number buttons click displayed label. Tkinter StringVar allows manage value widget like Label Entry more efficiently. container widget that StringVar object related skip container, defaults root window, value initial value that defaults empty string. anchor:This parameter controls where text located widget consists more space than text requires. default anchor (the widget will located bottom right corner frame). textvariable:This parameter should object StringVar class that retrieve current text from entry widget. File: guiCalci.py creating label window the_data StringVar() guiLabel Label( guiWindow, text "Label", anchor font ("Cambria Math", 20), textvariable the_data, background "#ffffff", "#000000" using pack() method guiLabel.pack(expand True, fill "both") Explanation: above snippet code, have created object StringVar class. have then created label window using Label widget specifying some parameters like object Tk() class, text, anchor, font style size, textvariable, background color, foreground color. have then used pack() method with Label's object value expand parameter True. expand parameter responsible expansion parent widget. Packing buttons window Tkinter offers widget called Frame. This widget great significance grouping arranging other widgets another friendly manner. Frames work like containers, which accountable organizing position other widgets. utilizes rectangular areas screen organize layout offer padding these widgets. also frame foundation class implement complex widgets. syntax frame shown below: Syntax: variableName Frame(parentWindow, options?) Parameters: parentWindow: This parameter represents parent window. options: This parameter consists list most commonly utilized options code. These options considered key-value pairs separated commas. This parameter displays background color behind label indicator. consider following snippet code demonstrating implementation frames calculator project. File: guiCalci.py creating frames buttons first frame frameOne Frame(guiWindow, "#000000") frameOne.pack(expand True, fill "both") frame expand gets some space second frame frameTwo Frame(guiWindow, "#000000") frameTwo.pack(expand True, fill "both") third frame frameThree Frame(guiWindow, "#000000") frameThree.pack(expand True, fill "both") fourth frame frameFour Frame(guiWindow, "#000000") frameFour.pack(expand True, fill "both") Explanation: above snippet code, have used Frame() widget create frame window. have also included parameter beautify frame background color. have then used pack() method with Frame's object that frame expand gets some space. have then repeated same procedure other three frames. Adding Buttons Calculator Tkinter library Python provides widget known Button. This widget will allow buttons calculator. These buttons display text images that carry objective buttons. also attach function method button called automatically when click button. consider following snippet code illustrating implementation Button widgets. File: guiCalci.py creating buttons each frame buttons first frame button buttonONE Button( frameOne, text "1", font ("Cambria", 22), relief GROOVE, border command button_1_is_Clicked placing buttons side side buttonONE.pack(side LEFT, expand True, fill "both") button buttonTWO Button( frameOne, text "2", font ("Cambria", 22), relief GROOVE, border command button_2_is_Clicked placing buttons side side buttonTWO.pack(side LEFT, expand True, fill "both") button buttonTHREE Button( frameOne, text "3", font ("Cambria", 22), relief GROOVE, border command button_3_is_Clicked placing buttons side side buttonTHREE.pack(side LEFT, expand True, fill "both") button buttonC Button( frameOne, text "C", font ("Cambria", 22), relief GROOVE, border command button_C_is_Clicked placing buttons side side buttonC.pack(side LEFT, expand True, fill "both") buttons second frame button buttonFOUR Button( frameTwo, text "4", font ("Cambria", 22), relief GROOVE, border command button_4_is_Clicked placing buttons side side buttonFOUR.pack(side LEFT, expand True, fill "both") button buttonFIVE Button( frameTwo, text "5", font ("Cambria", 22), relief GROOVE, border command button_5_is_Clicked placing buttons side side buttonFIVE.pack(side LEFT, expand True, fill "both") button buttonSIX Button( frameTwo, text "6", font ("Cambria", 22), relief GROOVE, border command button_6_is_Clicked placing buttons side side buttonSIX.pack(side LEFT, expand True, fill "both") button buttonADD Button( frameTwo, text "+", font ("Cambria", 22), relief GROOVE, border command button_Add_is_Clicked placing buttons side side buttonADD.pack(side LEFT, expand True, fill "both") buttons third frame button buttonSEVEN Button( frameThree, text "7", font ("Cambria", 22), relief GROOVE, border command button_7_is_Clicked placing buttons side side buttonSEVEN.pack(side LEFT, expand True, fill "both") button buttonEIGHT Button( frameThree, text "8", font ("Cambria", 22), relief GROOVE, border command button_8_is_Clicked placing buttons side side buttonEIGHT.pack(side LEFT, expand True, fill "both") button buttonNINE Button( frameThree, text "9", font ("Cambria", 22), relief GROOVE, border command button_9_is_Clicked placing buttons side side buttonNINE.pack(side LEFT, expand True, fill "both") button buttonSUB Button( frameThree, text "-", font ("Cambria", 22), relief GROOVE, border command button_Sub_is_Clicked placing buttons side side buttonSUB.pack(side LEFT, expand True, fill "both") buttons fourth frame button buttonZERO Button( frameFour, text "0", font ("Cambria", 22), relief GROOVE, border command button_0_is_Clicked placing buttons side side buttonZERO.pack(side LEFT, expand True, fill "both") button buttonMUL Button( frameFour, text "*", font ("Cambria", 22), relief GROOVE, border command button_Mul_is_Clicked placing buttons side side buttonMUL.pack(side LEFT, expand True, fill "both") button buttonDIV Button( frameFour, text "/", font ("Cambria", 22), relief GROOVE, border command button_Div_is_Clicked placing buttons side side buttonDIV.pack(side LEFT, expand True, fill "both") button buttonEQUAL Button( frameFour, text "=", font ("Cambria", 22), relief GROOVE, border command placing buttons side side buttonEQUAL.pack(side LEFT, expand True, fill "both") Explanation: above snippet code, have created different buttons using Button() widgets. each button, have specified destined Frame's object, text displayed, font style size, relief, border, command. have then used pack() method place each button side side. last, will include mainloop() method window. File: guiCalci.py running guiWindow.mainloop() Explanation: above snippet code, have used mainloop() method along with object Tk() class window. coding 'GUI Calculator' project finally completed. save file program works. program, type following command command-line shell terminal: Command: python guiCalci.py before output, here complete project code. Complete Project Code following program file complete code 'GUI Calculator' project. File: guiCalci.py importing required libraries import tkinter from tkinter import from tkinter import messagebox setting initial values some variables operator defining function Button button_1_is_Clicked(): global the_data.set(var) defining function Button button_2_is_Clicked(): global the_data.set(var) defining function Button button_3_is_Clicked(): global the_data.set(var) defining function Button button_4_is_Clicked(): global the_data.set(var) defining function Button button_5_is_Clicked(): global the_data.set(var) defining function Button button_6_is_Clicked(): global the_data.set(var) defining function Button button_7_is_Clicked(): global the_data.set(var) defining function Button button_8_is_Clicked(): global the_data.set(var) defining function Button button_9_is_Clicked(): global the_data.set(var) defining function Button button_0_is_Clicked(): global the_data.set(var) defining function Button button_Add_is_Clicked(): global global global operator float(var) operator the_data.set(var) defining function Button button_Sub_is_Clicked(): global global global operator float(var) operator the_data.set(var) defining function Button button_Mul_is_Clicked(): global global global operator float(var) operator the_data.set(var) defining function Button button_Div_is_Clicked(): global global global operator float(var) operator the_data.set(var) defining function Button button_Equal_is_Clicked(): global global global operator float(var) operator the_data.set(var) defining function Button button_C_is_Clicked(): global global global operator operator the_data.set(var) defining function display result res(): global global operator global var2 operator "+": float((var2.split("+")[1])) the_data.set(x) str(x) elif operator "-": float((var2.split("-")[1])) the_data.set(x) str(x) elif operator "*": float((var2.split("*")[1])) the_data.set(x) str(x) elif operator "/": float((var2.split("/")[1])) messagebox.showerror("Division Allowed.") the_data.set(var) else: float(A/a) the_data.set(x) str(x) creating object Tk() class guiWindow tkinter.Tk() setting size window guiWindow.geometry("320x500+400+400") disabling resize option better guiWindow.resizable(0, setting title Calculator window guiWindow.title("GUI Calculator Javatpoint.com") creating label window the_data StringVar() guiLabel Label( guiWindow, text "Label", anchor font ("Cambria Math", 20), textvariable the_data, background "#ffffff", "#000000" using pack() method guiLabel.pack(expand True, fill "both") creating frames buttons first frame frameOne Frame(guiWindow, "#000000") frameOne.pack(expand True, fill "both") frame expand gets some space second frame frameTwo Frame(guiWindow, "#000000") frameTwo.pack(expand True, fill "both") third frame frameThree Frame(guiWindow, "#000000") frameThree.pack(expand True, fill "both") fourth frame frameFour Frame(guiWindow, "#000000") frameFour.pack(expand True, fill "both") creating buttons each frame buttons first frame button buttonONE Button( frameOne, text "1", font ("Cambria", 22), relief GROOVE, border command button_1_is_Clicked placing buttons side side buttonONE.pack(side LEFT, expand True, fill "both") button buttonTWO Button( frameOne, text "2", font ("Cambria", 22), relief GROOVE, border command button_2_is_Clicked placing buttons side side buttonTWO.pack(side LEFT, expand True, fill "both") button buttonTHREE Button( frameOne, text "3", font ("Cambria", 22), relief GROOVE, border command button_3_is_Clicked placing buttons side side buttonTHREE.pack(side LEFT, expand True, fill "both") button buttonC Button( frameOne, text "C", font ("Cambria", 22), relief GROOVE, border command button_C_is_Clicked placing buttons side side buttonC.pack(side LEFT, expand True, fill "both") buttons second frame button buttonFOUR Button( frameTwo, text "4", font ("Cambria", 22), relief GROOVE, border command button_4_is_Clicked placing buttons side side buttonFOUR.pack(side LEFT, expand True, fill "both") button buttonFIVE Button( frameTwo, text "5", font ("Cambria", 22), relief GROOVE, border command button_5_is_Clicked placing buttons side side buttonFIVE.pack(side LEFT, expand True, fill "both") button buttonSIX Button( frameTwo, text "6", font ("Cambria", 22), relief GROOVE, border command button_6_is_Clicked placing buttons side side buttonSIX.pack(side LEFT, expand True, fill "both") button buttonADD Button( frameTwo, text "+", font ("Cambria", 22), relief GROOVE, border command button_Add_is_Clicked placing buttons side side buttonADD.pack(side LEFT, expand True, fill "both") buttons third frame button buttonSEVEN Button( frameThree, text "7", font ("Cambria", 22), relief GROOVE, border command button_7_is_Clicked placing buttons side side buttonSEVEN.pack(side LEFT, expand True, fill "both") button buttonEIGHT Button( frameThree, text "8", font ("Cambria", 22), relief GROOVE, border command button_8_is_Clicked placing buttons side side buttonEIGHT.pack(side LEFT, expand True, fill "both") button buttonNINE Button( frameThree, text "9", font ("Cambria", 22), relief GROOVE, border command button_9_is_Clicked placing buttons side side buttonNINE.pack(side LEFT, expand True, fill "both") button buttonSUB Button( frameThree, text "-", font ("Cambria", 22), relief GROOVE, border command button_Sub_is_Clicked placing buttons side side buttonSUB.pack(side LEFT, expand True, fill "both") buttons fourth frame button buttonZERO Button( frameFour, text "0", font ("Cambria", 22), relief GROOVE, border command button_0_is_Clicked placing buttons side side buttonZERO.pack(side LEFT, expand True, fill "both") button buttonMUL Button( frameFour, text "*", font ("Cambria", 22), relief GROOVE, border command button_Mul_is_Clicked placing buttons side side buttonMUL.pack(side LEFT, expand True, fill "both") button buttonDIV Button( frameFour, text "/", font ("Cambria", 22), relief GROOVE, border command button_Div_is_Clicked placing buttons side side buttonDIV.pack(side LEFT, expand True, fill "both") button buttonEQUAL Button( frameFour, text "=", font ("Cambria", 22), relief GROOVE, border command placing buttons side side buttonEQUAL.pack(side LEFT, expand True, fill "both") running guiWindow.mainloop() Output: Next TopicSympy module python prev next