next prev Python functions int(bit_length,to_bytes from_bytes) What functions? Functions which applied each individual instead complete number called functions. represent each number terms binary bits, which represent number binary format, apply functions there some functions which applied integer data types. integer data type implements Integral sub-class numbers class Python. main functions are: bit_length to_bytes from_bytes bit_length() bit_length function returns number bits required represent number binary format. Although represent number with maximum number bits want adding leading zeros, returns number after excluding leading zeros. also ignores used sign representation. Example1: #bit function bit_length examples integer variables var1 print(var1.bit_length()) var2 print(var2.bit_length()) var3 print(var3.bit_length()) Output: Explanation: above code, have used three integer variables. each variable, have applied function bit_length(), which will return number bits required represent that particular number. have first number five, which represented 0000000 00000000 00000000 00000101 bits. this function removes leading zeros, represents number 101, which means will require only bits represent have second number which represented 0000000 00000000 00000000 00010000 bits, represent 10000, requires only bits. same way, represent using 1000000, requires only bits. Example2: bit_length() function negative numbers: #bit function bit_length examples negative integer variables var1 print(var1.bit_length()) var2 print(var2.bit_length()) Output: Explanation: above code, have taken integers positive, second negative. first number five, which represented 101, function will return second number which represented complement form 11111111 11111111 11111111 11111011 bits. Here initial bits represent sign number called sign next bits represent number. this function removes signed will return three answer 011. to_bytes() This function returns array bytes representing given integer number: Syntax: integerVariable.to_bytes(length,byteorder,signed=False) length: represents length bytes returned this function. byteorder: This defines which type representation want. 'big', then most significant byte will beginning array, 'little', then most significant byte will array. signed: This Boolean parameter, true, represents number using complement form. Example Returns byte representation big-endian form print((69).to_bytes(10, byteorder ='big')) Output: Explanation: above code, have used number integer, applied to_bytes() function big-endian representation this, size byte array took Example Returns byte representation little-endian form print((18).to_bytes(4, byteorder ='little')) Output: Explanation: above code, took number represented little-endian machine with byte array size from_bytes() This function just reverse to_bytes() function, which takes array bytes input returns equivalent integer number. Syntax: integerVariable.to_bytes(byteArray,byteorder,signed=False) Example Represent integer value '\x00\x11' big-endian machine. print(int.from_bytes(b'\x00\x11', byteorder ='big')) Output: Explanation: above code, have used from_bytes() function, array bytes parameter representation big-endian. Hence, returns answer because, hexadecimal, represents Example negative numbers, have make signed parameter true. print(int.from_bytes(b'\xf0\xff', byteorder 'big', signed True)) Output: Explanation: above code, have true signed parameter that byte array will considered signed number, returns negative number -3841. Next TopicCheck String Character Python prev next