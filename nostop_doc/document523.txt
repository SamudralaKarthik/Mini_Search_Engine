next prev Problem: Python Solution problem Given List this tutorial, will implement problem using Python code. This basic problem array, found this Leetcode. will solve using different approach using Python programming language. Let's understand problem statement. Problem Statement this problem, need find pair elements from given list whose equal given target value. assume that array only pair integers that target sum. Note given list array must sorted increasing manner. Example list target Output: Example array target Output: Let's solve this problem using Brute Force approach. Approach Brute Force Approach brute force approach commonly used solve problem. this approach, primary goal solve problem, efficiently. check every possible pair number possible pairs array. will loop, values, compare target value. equal target value, return indices pairs integer. Algorithm first loop point first index solution array. another loop point second index solution every first integer. both elements equal target value, return both indices values Let's implement algorithm using Python code. Implementation Problem Example class TwoSum: __init__(self, list1, target): self.list1 list1 self.target target solution(self): length len(list1) range(length-1): range(i+1, length): list1[i]+list1[j] self.target: new_list return list(new_list) return list1 target TwoSum(list1, target) print(obj.solution()) Output: Explanation above program, have created TwoSum class initialized variables list1 target. Then, declare solution() method where first checked length list applied loops. first loop maintain first index, second loop maintain second index. checked both values; true; assigned list returned indices elements. Example list1 target TwoSum(list1, target) print(obj.solution()) Output: Approach Using Dictionary class Solution: twoSum(self, nums, target): #declaring dictionary keep track values visited_numbers dict() iterating over entire array index, enumerate(nums): #subtracting from target search pair number_to_be_search target pair found, return index both numbers number_to_be_search visited_numbers: return [index, visited_numbers[number_to_be_search]] #otherwise simply dictionary future lookup else: visited_numbers[num] index list1 target Solution() print(obj.twoSum(list1, target)) Output: Explanation this approach, created TwoSum class, inside declare solution() method. this method, declared dictionary keep track values seen value index. Now, iterate given list using enumerated. Then, subtract value from target value search pair. pair found, return index both numbers. Otherwise, dictionary future visit. Time Complexity Number Sums (Brute Force Approach) need loops. first loop visits numbers elements second loop visits n-1. Hence, check possible total number pair are: N*(N-1)/2, time-complexity will O(N*N) N2. Space Complexity 0(1): Only constant space variable used. Using dictionary, takes only loop time complexity will O(N). Approach Using Pointers this approach, will binary search algorithm where given list array must sorted. need first index then required value fulfill target found list. will pointers: left right; left denotes first element, right denotes last element list. Then compare pointer's value target value; some value target equal, return pointers index pairs. value more than target, decrement right pointer. Otherwise, some value less than target; need increase left pointer check same conditions. Let's understand following example. Example class Solution: twoSum(self, list1, target): left right len(list1) temSum while (left<right): tempSum list1[left] list1[right] tempSum target: return list((left, right)) elif tempSum>target: right elif tempSum<target: left return list((-1, -1)) list1 target Solution() print(obj.twoSum(list1, target)) Output: Time Complexity using time complexity will O(n) even worst case, visit elements array only once. Space complexity 0(1): Only constant space variable used. Using dictionary, takes only loop that time complexity will O(n). Conclusion basic commonly asked programming question interview. this tutorial, have covered three approaches solving problem. recommend implementing above approaches independently practicing such questions crack coding interviews. Next TopicWrite Python Program Check List Contains Duplicate Element prev next