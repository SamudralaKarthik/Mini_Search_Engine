next prev Decision Tree Python Sklearn Using machine learning algorithm called decision tree, represent choices potential consequences those decisions, covering outputs, input costs, utilities. supervised learning methods group includes decision-making algorithm. works with output parameters that categorized continuous. Decision Tree Algorithm decision tree, which resembles flowchart, inner node represents variable feature) dataset, tree branch indicates decision rule, every leaf node indicates outcome specific decision. first node from decision tree diagram root node. split data based attribute values that correspond independent characteristics. recursive partitioning method division tree into distinct elements. Making decisions aided this decision tree's comprehensive structure, which looks like flowchart. offers diagrammatic model that exactly mirrors individuals reason choose. Because this property flowchart, decision trees easy understand comprehend. Decision Tree Algorithm: Does Operate? Every decision tree algorithm's fundamental principle follows: divide data based target variables, choose best feature employing Attribute Selection Measures (ASM). Then will divide dataset into smaller sub-datasets designate that feature decision node that branch. Once conditions matches, procedure repeated recursively every child node begin creating tree. identical property value applies each tuples. There aren't more qualities left. There aren't more occurrences. Decision Tree Regression predict future events using decision tree algorithm generate insightful output continuous data type, decision tree regression algorithm analyses object's attributes trains this machine learning model tree. Since predetermined discrete numbers does entirely define output outcome discrete. This model illustrates discrete output cricket match prediction that predicts whether certain team will lose match. sales forecasting machine learning model that forecasts firm's profit ranges will increase throughout fiscal year depending company's preliminary figures illustrates continuous output. decision tree regression algorithm utilized this instance forecast continuous values. After talking about sklearn decision trees, let's look they implemented step-by-step. Code Python program implement decision tree algorithm plot tree Importing required libraries import pandas import numpy import matplotlib.pyplot from sklearn import metrics import seaborn from sklearn.datasets import load_iris from sklearn.model_selection import train_test_split from sklearn import tree Loading dataset iris load_iris() #converting data pandas dataframe data pd.DataFrame(data iris.data, columns iris.feature_names) #creating separate column target variable iris dataset data['Species'] iris.target #replacing categories target variable with actual names species target np.unique(iris.target) target_n np.unique(iris.target_names) target_dict dict(zip(target, target_n)) data['Species'] data['Species'].replace(target_dict) Separating independent dependent variables dataset data.drop(columns "Species") data["Species"] names_features x.columns target_labels y.unique() Splitting dataset into training testing datasets x_train, x_test, y_train, y_test train_test_split(x, test_size 0.3, random_state Importing Decision Tree classifier class from sklearn from sklearn.tree import DecisionTreeClassifier Creating instance classifier class DecisionTreeClassifier(max_depth random_state Fitting training dataset model dtc.fit(x_train, y_train) Plotting Decision Tree plt.figure(figsize (30, 10), facecolor 'b') Tree tree.plot_tree(dtc, feature_names names_features, class_names target_labels, rounded True, filled True, fontsize plt.show() y_pred dtc.predict(x_test) Finding confusion matrix confusion_matrix metrics.confusion_matrix(y_test, y_pred) matrix pd.DataFrame(confusion_matrix) axis plt.axes() sns.set(font_scale 1.3) plt.figure(figsize (10,7)) Plotting heatmap sns.heatmap(matrix, annot True, "g", axis, cmap "magma") axis.set_title('Confusion Matrix') axis.set_xlabel("Predicted Values", fontsize axis.set_xticklabels([''] target_labels) axis.set_ylabel( "True Labels", fontsize axis.set_yticklabels(list(target_labels), rotation plt.show() Output: Next TopicPython Books Data Structures Algorithms prev next