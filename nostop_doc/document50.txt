next prev Python Stack Queue Data structure organizes storage computers that easily access change data. Stacks Queues earliest data structure defined computer science. simple Python list queue stack well. queue follows FIFO rule (First First Out) used programming sorting. common stacks queues implemented with array linked list. Stack Stack data structure that follows LIFO(Last First Out) principle. implement stack, need simple operations: push adds element stack. removes element from stack. Operations: Adding adds items stack increases stack size. addition takes place stack. Deletion consists conditions, first, element present stack, then underflow occurs stack, second, stack contains some elements, then topmost element gets removed. reduces stack size. Traversing involves visiting each element stack. Characteristics: Insertion order stack preserved. Useful parsing operations. Duplicacy allowed. Code Code demonstrate Implementation stack using list ["Python", "C", "Android"] x.push("Java") x.push("C++") print(x) print(x.pop()) print(x) print(x.pop()) print(x) Output: ['Python', 'C', 'Android', 'Java', 'C++'] ['Python', 'C', 'Android', 'Java'] Java ['Python', 'C', 'Android'] Queue Queue follows First-in-First-Out (FIFO) principle. opened from both ends hence easily elements back remove elements from front. implement queue, need simple operations: enqueue adds element queue. dequeue removes element from beginning queue. Operations Queue Addition adds element queue takes place rear end, i.e., back queue. Deletion consists conditions element present queue, Underflow occurs queue, stack contains some elements then element present front gets deleted. Traversing involves visit each element queue. Characteristics Insertion order queue preserved. Duplicacy allowed. Useful parsing task operations. Note: implementation queue little different. queue follows "First-In-First-Out". Time plays important factor here. Stack fast because insert elements from list, whereas queue, insertion pops made from beginning list, becomes slow. cause this time difference properties list, which fast operation slow beginning operations because other elements have shifted one. Code import queue Queue created object queue.Queue(maxsize=10) Data inserted using put() L.put(9) L.put(6) L.put(7) L.put(4) get() takes data from from head Queue print(L.get()) print(L.get()) print(L.get()) print(L.get()) Output: Next TopicPython Tutorial prev next