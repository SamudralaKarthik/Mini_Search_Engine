next prev Create REST using Django REST Framework Django REST Framework Tutorial this tutorial, will learn about popular widely used industry-standard data interchange formats, REST API. most used technique data exchange. will explain create REST APIs Python using Django. Before diving deep into this topic, let's understand concept REST different from conventional formats. Understanding REST will help into better way. Let's have brief introduction REST API. What REST API? REST acronym name Representational State Transfer, standardized provide data other applications. other words, used building communicating with services. best transfer data across applications used application. mandates resources represented JSON, HTML, XML. Sometimes APIs used other application change data. acronym Application Programming Interface, interface that defines interaction between different software components. APIs determine what exactly request made component. example define endpoint list students particular branch. also used make request their expected responses. Following important REST request methods. most common method some data from component. returns some data from based endpoint parameter pass. POST creates records updates created record database. takes records given URI. record exists, update record. record available, create record. PATCH takes more fields given URI. used update more data fields. record exists, update record. record available, create record. DELETE deletes records given URI. Typically, window into database. responsible fetching updating records based database queries. receive static response JSON format. REST APIs commonly used software development that most demanded essential skill developer. APIs applications communicate with another even within themselves. Many applications rely REST APIs. example REST allows front communicate with backend. instance, deploy application using Django backend, will need allow react consume information from database. will learn more about REST doing practical. let's have introduction Django REST Framework. What Django Rest Framework? Django Rest Framework (DRF) package built Django create APIs. provides most extensive features Django, Object Relational Mapper (ORM), which allows interaction databases Pythonic way. Hence Python object can't sent over network, need translate Django models into other formats like JSON, XML, vice-versa. This process known serialization, which Django REST framework made super easy. allows represent their functionality Django application form REST APIs. quite easy like in-depth knowledge DRF, read about create REST with core Django framework. Getting Started with Django Rest Framework know that Django framework popular rapid development secure scalable services. first step create virtual environment install dependencies Let's create virtual environment. python3 venv myenv need activate going into scripts directory inside environment below command. Linux myenv/bin/activate Window myenv\scripts\activate Now, install django command install django ready create Django Project app. have created project app; must registered settings.py file. Also, rest_framework list applications Django know will using Django REST Framework. INSTALLED_APPS 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'rest_framework', 'sample_api', Once register application, migrate (initialize database) create superuser keep track database. initialize database python manage.py migrate open prompt python manage.py createsuperuser Now, enter required details create superuser. ready start server that accept requests. python manage.py runserver Creating REST Django Using with Django project; now, start developing domain model business logic. First, create model simple model Students represent student details. sample_app/model.py file, define model. sample_app/models.py from django.db import models Create your models here. class Students(models.Model): first_name models.CharField(max_length=200) last_name models.CharField(max_length=200) address models.CharField(max_length=200) roll_number models.IntegerField() mobile models.CharField(max_length=10) __str__(self): return self.first_name self.last_name created model will register this model with Django. visible this into admin panel, will following line sample_app/admin.py. from django.contrib import admin from .models import Students Register your models here. admin.site.register(Students) model registered. will need makemigration reflect Student table into database. following commands terminal. python3 manage.py makemigrations python3 manage.py migrate Here model. apps frequently transfer model data from another. implement most useful features DRF, serializers. Let's have basic understanding serializers. What serializers? Serializers used represent model data JSON format convert object instances more transferable format. makes process parsing data from easy. other hand, Deserializers convert JSON data into model object instance. will create serializers.py file sample_app, converting model object into JSON format before sending response. serializers.py from rest_framework import serializers from .models import Students class StudentSerializer(serializers.ModelSerializer): first_name serializers.CharField(max_length=200, required=True) last_name serializers.CharField(max_length=200, required=True) address serializers.CharField(max_length=200, required=True) roll_number serializers.IntegerField() mobile serializers.CharField(max_length=10, required=True) class Meta: model Students fields ('__all__') serializers.py very similar Form class file Django, including validation flags various fields, such required, max_length default. above code, specified fields required, field provided user, will throw error. avoid error, pass default value. have used Modelserializer class, same ModelForm class Django. serializers also created using Serializers class. from rest_framework import serializers from .models import Students class StudentSerializer(serializers.ModelSerializer): first_name serializers.CharField(max_length=200, required=True) last_name serializers.CharField(max_length=200, required=True) address serializers.CharField(max_length=200, required=True) roll_number serializers.IntegerField() mobile serializers.CharField(max_length=10, required=True) create(self, validated_data): Create return `Students` instance, given validated data. return Students.objects.create(**validated_data) update(self, instance, validated_data): Update return existing `Students` instance, given validated data. instance.first_name validated_data.get('first_name', instance.first_name) instance.last_name validated_data.get('last_name', instance.last_name) instance.address validated_data.get('address', instance.address) instance.roll_number validated_data.get('roll_number', instance.roll_number) instance.mobile validated_data.get('mobile', instance.mobile) instance.save() return instance see, there methods create() update() methods define fully fledge instances created modified when calling .save() method. method create serializers. Create Views allows create both class-based function-based views API. will create class-based view. will APIView class, subclass Django's View class. define get(), post(), patch(), delete() methods that perform CRUD operations. sample_app/views.py from django.shortcuts import render from rest_framework.views import APIView from rest_framework.response import Response from rest_framework import status from .models import Students from .serializers import StudentSerializer Create your views here. class StudentView(APIView): get(self, request, *args, **kwargs): result Students.objects.all() serializers StudentSerializer(result, many=True) return Response({'status': 'success', "students":serializers.data}, status=200) post(self, request): serializer StudentSerializer(data=request.data) serializer.is_valid(): serializer.save() return Response({"status": "success", "data": serializer.data}, status=status.HTTP_200_OK) else: return Response({"status": "error", "data": serializer.errors}, status=status.HTTP_400_BAD_REQUEST) see, first, have taken records from database serialized them using StudentSerializers. post() method, created serialized object from request.data using StudentSeriliazer. post request sends data server enclosed request body. used create record database. is_valid() method returns True requested data valid call save() method create record. returns False, throws error. response must initialized with data returned. This data instance type Python object like bool, str, dict, etc. Setup Endpoints View First, need initialize endpoints project urls.py using following code. config/urls.py from django.contrib import admin from django.urls import path, include urlpatterns path('admin/', admin.site.urls), path('api/', include('sample_app.urls')) register StudentView class view user. purpose adding this implement it's request handler. Let's create endpoints get() post() method. requires create urls.py file sample_app folder. will following code sample_app/urls.py file. sample_app/urls.py from .views import StudentView from django.urls import path urlpattern path('basic/', StudentView.as_view()) above code, path()'s first argument represents subpath where views should accessible, second argument class name that created views.py file. ready play with API. Running Runserver Now, server created api/basic/ endpoint. python manage.py runserver When visit local server http://127.0.0.1:8000/ will show endpoints where check defined endpoints. http://127.0.0.1:8000/api/basic/ actual path test get() post() method. First verify get() method. "status": "success", "students": "id": "first_name": "Rohit", "last_name": "Sharma", "address": "Agra", "roll_number": 101, "mobile": "1234567" "id": "first_name": "Sachin", "last_name": "Malhotra", "address": "Agra", "roll_number": 102, "mobile": "7672573" "id": "first_name": "Arun", "last_name": "Tiwari", "address": "Jamshedpur", "roll_number": 103, "mobile": "67654678" "id": "first_name": "Tusar", "last_name": "Srivastava", "address": "Varanasi", "roll_number": 104, "mobile": "87975890" view processes get() request returns available data client JSON format. Let's test POST endpoint. post() will take data from users into database record. generates auto-generated browsable API. Here will pass input field that will allow send POST request endpoint. "status": "success", "data": "id": "first_name": "Divya", "last_name": "Saxsena", "address": "Noida", "roll_number": 105, "mobile": "87975812" data added database, which means POST method working fine. fetch data; will show entire result browser. HTTP Allow: GET, POST, HEAD, OPTIONS Content-Type: application/json Vary: Accept "status": "success", "students": "id": "first_name": "Rohit", "last_name": "Sharma", "address": "Agra", "roll_number": 101, "mobile": "1234567" "id": "first_name": "Sachin", "last_name": "Malhotra", "address": "Agra", "roll_number": 102, "mobile": "7672573" "id": "first_name": "Arun", "last_name": "Tiwari", "address": "Jamshedpur", "roll_number": 103, "mobile": "67654678" "id": "first_name": "Tusar", "last_name": "Srivastava", "address": "Varanasi", "roll_number": 104, "mobile": "87975890" "id": "first_name": "Divya", "last_name": "Saxsena", "address": "Noida", "roll_number": 105, "mobile": "87975812" Request Data Validation What miss required data enter wrong entries? example roll number, this been defined integer. Let's following example. Input "first_name": "Divankar", "last_name": "Saxsena", "address": "Noida", "roll_number": "105", "mobile": "87975812" Output: "status": "error", "data": "roll_number": valid integer required" throws error, because passed wrong type value roll_number. automatic data validation excellent features DRF. throws error because passed wrong value type roll_number. miss fields, will show following error. "status": "error", "data": "address": "This field required." However, also define custom validation rule custom validators. Modifying Request Handler previous request example, fetched records that present table. also retrieve particular entity from table passing parameter. single record pass StudentSerializer() this time will pass many=True because passing single record. will change code below. sample_app/views.py class StudentView(APIView): get(self, request, id): result Students.objects.get(id=id) serializers StudentSerializer(result) return Response({'success': 'success', "students":serializers.data}, status=200) result Students.objects.all() serializers StudentSerializer(result, many=True) return Response({'status': 'success', "students":serializers.data}, status=200) observe, StudentSerializer(result, many=True) returned serialized data JSON format list objects. Alternatively, pass argument through http://127.0.0.1:8000/api/basic/1/. Here pass process request need modify urls.py. path below. sample_app/urls.py from .views import StudentView from django.urls import path urlpatterns path('basic/', StudentView.as_view()), path('basic/<int:id>/', StudentView.as_view()) When http://127.0.0.1:8000/api/basic/1/, will show following result. "success": "success", "students": "id": "first_name": "Rohit", "last_name": "Sharma", "address": "Agra", "roll_number": 101, "mobile": "1234567" only JSON response instead list objects. Updating Values Patch Request Handler far, have implemented functionality fetching adding records. Now, will create endpoint updating records already present database. POST requests targeting certain update record. Then retrieve object, update values save under same persisting change. APIView class provides patch() method which handles PATCH requests updates data. Let's update views.py file below. Class StudentView(APIView): patch(self, request, id): result Students.objects.get(id=id) serializer StudentSerializer(result, data request.data, partial=True) serializer.is_valid(): serializer.save() return Response({"status": "success", "data": serializer.data}) else: return Response({"status": "error", "data": serializer.errors}) line want emphasize serializer StudentSerializer(result, data request.data, partial=True) Let's understand above line Fetch given record that update. Pass StudentSerializer convert into JSON. data received from request. partial=True indicates that this contains fields Student model. need pass actual instance, will have get() function first retrieve resources then update Now, will send patch request http://127.0.0.1:8000/api/basic/1/, update item. changed last_name "Sharma" "Yadav". "id": "first_name": "Rohit", "last_name": "Yadav", "address": "Agra", "roll_number": 101, "mobile": "1234567" response shows updated last_name. verify visiting http://127.0.0.1:8000/api/basic/1/update endpoint. "success": "success", "students": "id": "first_name": "Rohit", "last_name": "Yadav", "address": "Agra", "roll_number": 101, "mobile": "1234567" Here, that data successfully updated. Deleting Entities DELETE Request Handler user also wants record some entries from database. APIView class provides delete() method that remove record corresponding given won't need serializers this purpose there conversion between data concrete objects. Here, instead using Students.objects.get() get_object_or_404() function that will automatically return error given present. Let's understand following implementation delete() method. sample_app/views.py from django.shortcuts import get_object_or_404 class StudentAPI(APIView): delete(self, request, id=None): result get_object_or_404(Students, id=id) result.delete() return Response({"status": "success", "data": "Record Deleted"}) When restart server, will show DELETE button browser. When click DELETE button, will delete that particular record from database. After deleting record http://127.0.0.1:8000/api/basic/1/ following response will shown. "status": "success", "data": "Record Deleted" When visit http://127.0.0.1:8000/api/basic/ this record longer present there. have implemented CRUD using DRF. CRUD Complete Code Following complete code CRUD operations that have implement this tutorial. from django.shortcuts import render from rest_framework.views import APIView from rest_framework.response import Response from rest_framework import status from .models import Students from .serializers import StudentSerializer from django.shortcuts import get_object_or_404 Create your views here. class StudentView(APIView): get(self, request, id): result Students.objects.get(id=id) serializers StudentSerializer(result) return Response({'success': 'success', "students":serializers.data}, status=200) result Students.objects.all() serializers StudentSerializer(result, many=True) return Response({'status': 'success', "students":serializers.data}, status=200) post(self, request): serializer StudentSerializer(data=request.data) serializer.is_valid(): serializer.save() return Response({"status": "success", "data": serializer.data}, status=status.HTTP_200_OK) else: return Response({"status": "error", "data": serializer.errors}, status=status.HTTP_400_BAD_REQUEST) patch(self, request, id): result Students.objects.get(id=id) serializer StudentSerializer(result, data request.data, partial=True) serializer.is_valid(): serializer.save() return Response({"status": "success", "data": serializer.data}) else: return Response({"status": "error", "data": serializer.errors}) delete(self, request, id=None): result get_object_or_404(Students, id=id) result.delete() return Response({"status": "success", "data": "Record Deleted"}) sample_app/urls.py from .views import StudentView from django.urls import path urlpatterns path('basic/', StudentView.as_view()), path('basic/<int:id>/', StudentView.as_view()), path('basic/<int:id>/update/', StudentView.as_view()) Conclusion This tutorial described detailed idea build RESTful Django. this tutorial, created project added sample_app application. created Student model StudentSerializer handle serialization deserialization model. CRUD where have important request handlers get(), post(), patch(), delete(). taking idea from this, create CRUD APIs shopping site practice purpose. Next TopicMemoization using Decorators Python prev next