next prev Gmail Python this tutorial, going learn about Gmail Python, will also learn Gmail APIs Python perform many Gmail operations such sending email, searching email, deleting email, etc. this, will learn Gmail Python script. First, have brief Gmail basic introduction. Gmail APIs Gmail most popular mail service today's world, used almost many organizations. Over past years, many Gmail features enhanced with including suggestions while composing emails security features (detecting fraud spam emails). Gmail APIs based RESTful APIs that allow users interact with Gmail account, helps features using Python script. Prerequisites Using Gmail APIs Python must fulfil following requirements using Gmail APIs Python script: should have Python version higher equal 2.6. must have google account with Gmail service enabled system must installed BeautifulSoup library not, then should 'pip install bsp' syntax command terminal install device). should have basic knowledge Google OAuth libraries Google client. Installation Required libraries: Before enabling Gmail APIs them Python script, let's first install pre-required libraries system. install pre-required libraries enabling Gmail APIs, should follow following steps: Step Open command prompt terminal system make sure that device active internet connection. Step Write down following command terminal: install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib Now, press enter start installation libraries. that, pre-required libraries enabling Gmail APIs successfully installed system. Now, proceed with enabling Gmail APIs part this tutorial. Enabling Gmail APIs device have follow following given steps enable Gmail APIs device that these APIs Python script: Step Creating Project Google Cloud console: this step, first, have login into Google cloud console (https://console.cloud.google.com/?pli=1) with Google account, then have click 'New Project' create project. already have existing project, then also continue with existing project. Step Now, have services option from Project menu that have created. Step Now, option 'Enable Gmail services,' have choose this option enable Gmail APIs project. Step Configuration Consent screen: Now, this step, will configure consent screen project created clicking 'OAuth Consent Screen' option given menu. only this option consent screen already configured. Step Now, have enter application name choice save project. Step Now, click credentials option credentials. Step Creating OAuth Client Now, click 'create credentials' option OAuth Client create perform this following below sequential procedure create OAuth Client project: First, choose application type desktop application project. After that, enter application name (can same have above steps different) click create button. Now, OAuth client will created project, download save with 'credentials.json' name format future references. Now, done with steps enabling Gmail APIs, start using Gmail APIs Python script. Note: have save client password that them future references required. Importing Necessary Modules Now, have necessary APIs should forward with importing necessary modules. Let's below example importing modules. Example Importing pickle module program import import pickle Creating utils Gmail APIs from googleapiclient.discovery import build from google_auth_oauthlib.flow import InstalledAppFlow from google.auth.transport.requests import Request Importing libraries encoding/decoding messages base64 from base64 import urlsafe_b64decode, urlsafe_b64encode Importing libraries dealing with attachment MIME types Gmail from email.mime.text import MIMEText from email.mime.multipart import MIMEMultipart from email.mime.image import MIMEImage from email.mime.audio import MIMEAudio from email.mime.base import MIMEBase from email.mime.multipart import MIMEMultipart from mimetypes import guess_type guess_mime_type Request access from Gmail APIs project SCOPES ['https://mail.google.com/'] OurEmailID 'OurMail@gmail.com' giving Gmail using default function authenticate Gmail APIs authenticateGmailAPIs(): creds None Authorizing Gmail APIs with tokens pickles os.path.exists("token.pickle"): using else statement with open("token.pickle", "rb") token: creds pickle.load(token) there valid credentials available device, will user sign manually creds creds.valid: creds creds.expired creds.refresh_token: creds.refresh(Request()) else: flow InstalledAppFlow.from_client_secrets_file('client_secret_107196167488-dh4b2pmpivffe011kic4em9a4ugrcooi.apps.googleusercontent.com.json', SCOPES) downloaded credential name creds flow.run_local_server(port=0) running credentials Save credentials next with open("token.pickle", "wb") token: pickle.dump(creds, token) return build('Gmail', 'v1', credentials=creds) using Gmail authenticate Gmail service calling function service authenticateGmailAPIs() Output: Please visit this authorize this application: https://accounts.google.com/o/oauth2/auth?response_type=code&client_id=107196167488-dh4b2pmpivffe011kic4em9a4ugrcooi.apps.googleusercontent.com&redirect_uri=http%3A%2F%2Flocalhost%3A55991%2F&scope=https%3A%2F%2Fmail.google.com%2F&state=kfXlNyjvbKetyUK0op7OF9WY7shrKS&access_type=offline Explanation When above given program, will option choose browser, above image, don't option like this, need click link given output. Then, select browser choice default browser system continue process. Now, when select browser, will redirected browser following opened Now, tick checkbox option shown dialogue give required permissions, then, will have click continue option. After clicking continue, following window will open same tab: window showing, authentication part enabling Gmail completed, have linked Gmail account with project Gmail APIs created. Note: course, have mail that connect Gmail APIs future references working with Gmail APIs, place '[emailÂ protected]' provided above program. Performing Actions using Gmail APIs Python Now, have completely enabled Gmail APIs project with Python script. Now, perform many actions from Gmail account with Python program. perform following Gmail actions with Python script using Gmail APIs Sending email Searching email Deleting email entire emails history Reading email Marking read/unread email etc. this tutorial, will only about sending email using Gmail APIs Python program, will learn write code perform this action with Python script. Sending email simply write send email writing Python program using enabled Gmail APIs Here, this section, will write Python program which send emails from Gmail account just running program. Look following Python program better understanding Example importing pickle module program import import pickle Creating utils Gmail APIs from googleapiclient.discovery import build from google_auth_oauthlib.flow import InstalledAppFlow from google.auth.transport.requests import Request Importing libraries encoding/decoding messages base64 from base64 import urlsafe_b64decode, urlsafe_b64encode Importing libraries dealing with attachment MIME types Gmail from email.mime.text import MIMEText from email.mime.multipart import MIMEMultipart from email.mime.image import MIMEImage from email.mime.audio import MIMEAudio from email.mime.base import MIMEBase from email.mime.multipart import MIMEMultipart from mimetypes import guess_type guess_mime_type Request access from Gmail APIs project SCOPES ['https://mail.google.com/'] providing scope Gmail APIs OurEmailID 'OurMail@gmail.com' giving Gmail using default function authenticate Gmail APIs authenticateGmailAPIs(): creds None authorizing Gmail APIs with tokens pickles os.path.exists("token.pickle"): using else statement with open("token.pickle", "rb") token: creds pickle.load(token) there valid credentials available device, will user sign manually creds creds.valid: creds creds.expired creds.refresh_token: creds.refresh(Request()) else: flow InstalledAppFlow.from_client_secrets_file('client_secret_107196167488-dh4b2pmpivffe011kic4em9a4ugrcooi.apps.googleusercontent.com.json', SCOPES) downloaded credential name creds flow.run_local_server(port=0) running credentials save credentials next with open("token.pickle", "wb") token: pickle.dump(creds, token) return build('gmail', 'v1', credentials=creds) using Gmail authenticate Gmail service calling function ServicesGA authenticateGmailAPIs() Using default funnction attachments Mail AddAttachment(mail, NameofFile): content_type, encoding guess_mime_type(NameofFile) content_type None encoding None: defining none file type attachment content_type 'application/octet-stream' main_type, sub_type content_type.split('/', main_type 'text': defining text file type attachment open(NameofFile, 'rb') opening file MIMEText(fp.read().decode(), _subtype sub_type) fp.close() elif main_type 'image': defining image file type attachment open(NameofFile, 'rb') MIMEImage(fp.read(), _subtype sub_type) fp.close() elif main_type 'audio': defining audio file type attachment open(NameofFile, 'rb') MIMEAudio(fp.read(), _subtype sub_type) reading file fp.close() else: open(NameofFile, 'rb') MIMEBase(main_type, sub_type) msg.set_payload(fp.read()) fp.close() closing file NameofFile os.path.basename(NameofFile) msg.add_header('Content-Disposition', 'attachment', NameofFile NameofFile) mail.attach(msg) composing mail with given attachment Creating mail with default function CreateMail(RecieverMail, SubofMail, BodyofMail, attachments=[]): various import content mail function's parameter Using else check there attachment mail attachments: attachment given mail mail MIMEText(BodyofMail) Body Mail mail['to'] RecieverMail mail Reciever mail['from'] OurEmailID mail mail['subject'] SubofMail Subject Mail else: attachment given mail mail MIMEMultipart() mail['to'] RecieverMail mail['from'] OurEmailID mail['subject'] SubofMail mail.attach(MIMEText(BodyofMail)) NameofFile attachments: AddAttachment(mail, NameofFile) return {'raw': urlsafe_b64encode(mail.as_bytes()).decode()} Creating default function send mail SendMail(ServicesGA, RecieverMail, SubofMail, BodyofMail, attachments=[]): return ServicesGA.users().messages().send( userId "me", body CreateMail(RecieverMail, SubofMail, BodyofMail, attachments) ).execute() Body mail with execute() function Sending email adding important content, i.e., Reciever's mail, Subject, Body, etc. SendMail(ServicesGA, "Reciever@gmail.com", "Python Project i.e., This subject Mail sendimg!", "Now, this body email writing only written text here!", ["test.txt", "client_secret_107196167488-dh4b2pmpivffe011kic4em9a4ugrcooi.apps.googleusercontent.com.json"]) calling default SendMail() function Output: mail place receiver's mail, i.e., [emailÂ protected], will find that mail actually sent mail entered receiver's mail when program, same what above output image. Conclusion Gmail APIs with Python script simply Python, first, have enable them, create Project Google cloud with Gmail account. also perform many other actions like reading, deleting, etc., using Gmail APIs Python program like sending emails. also modify many things into Gmail account that authenticated with Gmail APIs project, just running Python scripts (enabled with Gmail APIs). Next TopicHow Plot Google using folium package Python prev next