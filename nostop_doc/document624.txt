next prev Class Decorator Python Decorators important useful tool Python. allows modify behavior function class. far, have learned make decorators using function, here will discuss defining class decorator. this tutorial, will learn make class decorator. familiar with decorators; not, then have detailed understanding decorator from decorator Python tutorial. decorator allows wrap another function extend wrapped function's behavior without permanently changing Let's following example. Example pattern(n): decorate(fn): wrapper(*args, **kwargs): print(n*'*') result fn(*args, **kwargs) print(result) print(n*'*') return result return wrapper return decorate @pattern(10) add(a, return print(add(20, 30)) Output: ********** ********** Explanation above code, have created star() decorator, which takes integer argument returns callable. callable takes function func argument, function that will decorated. Also, callable access from decorator factory. will implement this decorator using Python class. Python Class Decorator define class decorator, need __call__() method classes. When need create object that behaves like function, function decorator must return object that behaves like function. Let's understand following example. Example class NewDocorator: 	def __init__(self, function): 		self.function function 	def __call__(self): some more code 		self.function() @NewDocorator function(): 	print("WelCome JavaTpoint") function() Output: WelCome JavaTpoint Explanation have created simple decorator using class decorator using __call__ method. modify want. Now, rewrite above code using class decorator. Example class Pattern: __init__(self, self.n __call__(self, fn): wrapper(*args, **kwargs): print(self.n*'*') result fn(*args, **kwargs) print(result) print(self.n*'*') return result return wrapper @Pattern(5) add(a, return add(20, Output: ***** ***** Explanation pattern(5) returns instance Pattern that instance callable will work like below. Pattern(5)(add) Class Decorator with Return Statement return statement class decorator. previous example, didn't return anything, there issue. sometimes, need return value. below. Example class CubeDecorator: 	def __init__(self, function): 		self.function function 	def __call__(self, *args, **kwargs): before function 		result self.function(*args, **kwargs) after function 		return result adding class decorator function @CubeDecorator get_cube(n): 	print("given number is:", 	return print("Cube number is:", get_cube(25)) Output: Given number Cube number 15625 Explanation above code, have created CubeDecorataor class decorator called __call__() method. __call__() called caller function return result. Using Class Decorator Print Execution Time Program time module with __call__ method execution time program. Let's understand following example. Example from time import time from time import sleep class Timer: 	def __init__(self, func): 		self.function func 	def __call__(self, *args, **kwargs): 		start_time 		result self.function(*args, **kwargs) 		end_time 		print("Execution took seconds".format(end_time-start_time)) 		return result adding decorator function @Timer some_function(delay): 	sleep(delay) some_function(4) Output: Execution took 4.004076242446899 seconds Explanation have imported time method from time module above code. Then created ExecutionTimer class decorator, where start time when program started execution time when ended. subtracted start time from time program execution time. Conclusion this tutorial, have covered class decorator with some examples. Decorators important tool Python, which change another function's behavior without changing actual implementation. Most time, Python functions define decorators, class decorators also useful enhance readability code. class decorators extended either taking arguments falling back default argument passed. Next TopicCustomizing Parser Behaviour Python Module ?configparser.' prev next