next prev _name_ _main_ Python main() function required programmes developed family languages (C, C++, Java, etc.) designate where execution should begin. However, because Python interpreter-based language that also used interactive shell, there such thing main() method Multiple statements found extension Python programme file. first statement Python programme file where execution begins. Python interpreter analyses source file defines some special variables/global variables before running code. Python interpreter special __name__ variable have value "__main__" that module (the source file) being executed main application. __name__ will name module same file being fetched from another module. __name__ global variable accepts module name value. file containing definitions statements Python known module. module name with extension becomes file name. Example Python program demonstrate execution main directly print ("Executed Always") __name__ "__main__": 	print ("It executed when it's invoked directly") else: 	print ("It Executed when it's imported") Output: Executed Always executed when it's invoked directly Explanation This whole block code indented level [Block run. Although specified functions classes well defined, none their code actually executes. followed instructions here. __main__ variable will used directly Python. result, code this block [Block will only executed that module serves your program's entry point. checking __name__ variable, determine your script getting executed manually whether being imported another programme. script imported another module that moment, module name will __name__. required? usually required when want execute function directly. instance, creating script that will utilised module: Example Python program demonstrate execution function directly this_function(): 	print ("I'm inside this function") test this function calling this_function() Output: inside this function Advantages using _name_ _main_ Every Python module specified __name__ this '__main__', indicates that module being executed independently user, allowing take necessary action. __name__ assigned name script/module acquire this script module another script. Python files function independent applications reusable modules. file executed directly, without being imported, then statement __name__ "main" used some code. this designed this way? Naturally, might ponder rationale behind design. Well, there instances when wish create file that used both module other programmes and/or modules main application itself. This behaviour helps test improve code more quickly. Since enables unit tests directly script mode, also aids debugging. Additionally, fact that setting single variable takes launch module Python directly elegant. Conclusion __name__ variable particularly excellent case, whether need file that imported other modules launched primary programme. When modules imported, allow disallow running specific sections code using __name__ "__main__" block. __name__ variable name imported module __main__ module being launched whenever Python interpreter reads file. top-level code executed when reading file, functions classes they will only imported). employing top-level scope __main__ special variable __name__, reusability increased. Both independently when imported module, Python script file from command line terminal. Next Topic8 Puzzle problem Python prev next