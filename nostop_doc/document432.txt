next prev Nested Dictionary Python Python programming language, have concept dictionaries. dictionaries mutable, easily delete items from dictionary. collection unordered data items. dictionary consists parts first data second corresponding value. also does allow duplicates Here nested dictionary refers dictionary inside dictionary. simple words, refers dictionary, which consists multiple dictionaries. used store data values key-value pairs. Nesting Dictionary means putting dictionary inside another dictionary. Nesting great kind information model programs expanded greatly. nested dictionary contains unordered collection various dictionaries. Compared with normal dictionary, also contains value pairs. access dictionary using key. Nested dictionary created Python placing comma-separated dictionaries enclosed within braces. Slicing Nested Dictionary possible. shrink grow nested dictionaries needed. Syntax Nested dictionary adding various dictionaries into particular one: Adding elements nested Dictionary done multiple ways. dictionary Nested dictionary values one, Nesteddict[dict][key] 'value'. Another whole dictionary Nesteddict[dict] 'key': 'value'}. Examples Nested Dictionary understand with help some examples: Example first create normal dictionary that contains data items with their corresponding key-value pairs python programming language. contains integer with corresponding string values dict 'Rina', 'Gita', 'Sita'} print("\n Printing dictionary that contains integer keys with their corresponding values") print(dict) Explanation: above example, created dictionary containing integer values with corresponding string values. Here have symbolized with student's data class having roll number with corresponding name each student. Further, will perform nested operation inside this dictionary. Output following Program Printing dictionary that contains integer keys with their corresponding values 'Rina', 'Gita', 'Sita'} Example example will create simple empty dictionary using python programming language dict print("Simple empty Dictionary: print(dict) Explanation: have created dictionary that does contain keys with corresponding values. Further, will perform nested operation inside this dictionary. Output following Program Simple empty dictionary: Example Python program print Empty nested dictionary dict 'dict1': Nested dictionary syntax 		'dict2': 'dict3': print("Nested dictionary follows print(dict) Explanation: have created nested dictionary, which contains empty data set, empty dictionary that does contain data item with their corresponding values. Output following Program Nested dictionary follows {'dict1': 'dict2': 'dict3': Example first create normal dictionary that contains data items with their corresponding value pairs python programming language. contains string with corresponding values dict {'A': 'B': 'C': 'D':4, 'E':5} print("\n Printing dictionary that contains string keys with their corresponding integer values") print(dict) Explanation: above example, created dictionary containing string values corresponding integer values. Here have symbolized with student's data class having Grade with corresponding roll number each student. Further, will perform nested operation inside this dictionary. Output following Program Printing dictionary that contains string keys with their corresponding integer values {'A': 'B': 'C': 'D': 'E': Example first create normal dictionary that contains data items with their corresponding key-value pairs python programming language. Here, each item formed pair Dict dict([(1, 'silk'), 'one')]) print("\nDictionary with each item pair: print(Dict) Explanation: have created dictionary containing data items form pairs. have created list paired items made them dictionary. Output following Program Dictionary with each item pair: 'silk', 'one'} Example first create dictionary that contains data items with their corresponding value pairs, here would assign values keys separately python programming language. Dict={} Dict[1] 'Java' Dict[2] 'Tpoint' Dict[3] print("\nDictionary after adding elements: print(Dict) Explanation: have created three separate dictionaries assigned elements corresponding values one. This dictionary contains integer values with corresponding string values. Still, have created separately, after that, have added these dictionaries. Thus, perform addition operation dictionary. will also perform nested operation inside this dictionary. Output following Program Dictionary after adding elements: 'Java', 'Tpoint', Example first create dictionary that contains data items with their corresponding value pairs python programming language. Here, would perform addition update operation nested dictionary single Dict['Value'] print("\nDictionary after adding elements: print(Dict) Updating existing Key's Value Dict[2] 'JavaTpoint' print("\nUpdated value: print(Dict) Adding Nested value Dictionary Dict[5] {'Nested' :{'5' 'Java', 'T'}} print("\n Adding Nested Key: print(Dict) Explanation: have created dictionary, which contains integer values with corresponding string values. Here, have performed update adding operation dictionary. have also made some changes converted into nested dictionary. Output following Program Dictionary after adding elements: {'Name': 'JavaTpoint', [11, 13], 'Value': Updated value: {'Name': 'JavaTpoint', [11, 13], 'Value': 'JavaTpoint'} Adding Nested Key: {'Name': 'JavaTpoint', [11, 13], 'Value': 'JavaTpoint', {'Nested': {'5': 'Java', '3': 'T'}}} Example first create nested dictionary that contains data items with their corresponding key-value pairs python programming language. Nested dictionary having mixed keys Dict {'Name': 'JavaTpoint', [11, 13]} print("\nDictionary with Mixed Keys: print(Dict) Explanation: have created nested dictionary that contains values with corresponding values. Here, have used concept mixed keys, which keys same. will extend make nested dictionary with same keys different values. Output following Program Dictionary with Mixed Keys: {'Name': 'JavaTpoint', [11, 13]} Example first create nested dictionary that contains data items with their corresponding key-value pairs python programming language. Nested dictionary having same keys Dict 'Dict1': {'Name': 'Reena', 'age': '22'}, 		'Dict2': {'Name': 'Jatin', 'age': '19'}} print("\n Nested dictionary 2-") print(Dict) Explanation: above example, have created nested dictionary that contains values with corresponding values, here have used concept same keys, which keys same, corresponding data values different. Output following Program Nested dictionary {'Dict1': {'Name': 'Reena', 'age': '22'}, 'Dict2': {'Name': 'Jatin', 'age': '19'}} Example first create nested dictionary that contains data items with their corresponding key-value pairs python programming language. Nested dictionary having mixed keys Dict 'Dict1': 'J', 'T', 'P'}, 		'Dict2': {'Name': 'JTP', 2]} print("\n Nested dictionary 3-") print(Dict) Dict3 print("Initial nested dictionary:-") print(Dict3) Dict3['Dict1'] Adding elements time Dict3['Dict1']['name'] 'Boby' Dict3['Dict1']['age'] print("\n After adding dictionary Dict1") print(Dict3) Explanation: have created nested dictionary that contains integer values with corresponding string values. Here, have first printed nested dictionary empty nested dictionary. have made some changes placed nested dictionary inside empty dictionary. have also added nested dictionaries. Output following Program Nested dictionary {'Dict1': 'J', 'T', 'P'}, 'Dict2': {'Name': 'JTP', 2]}} Initial nested dictionary:- After adding dictionary Dict1 {'Dict1': {'name': 'Boby', 'age': 21}} take example then some variations that easily understand easily: Example creating nested dictionary named student student {'name': 'Shivam', 'age': '22', 'Id': 10023}, {'name': 'Anjali', 'age': '20', 'Id': 10024}} print(student) Explanation: Here have created simple nested dictionary; further, will make some changes. Output following Program {'name': 'Shivam', 'age': '22', 'Id': 10023}, {'name': 'Anjali', 'age': '20', 'Id': 10024}} Example creating nested dictionary named student accesing elements using syntax student {'name': 'Shivam', 'age': '22', 'Id': 10023}, {'name': 'Anjali', 'age': '20', 'Id': 10024}} print(student[1]['name']) print(student[1]['age']) print(student[1]['Id']) Explanation: Here have created nested dictionary syntax access elements from dictionary, here used when supply name dictionary than this square brackets position element want fetch, after than additional square brackets supply attribute value that want fetch particular element. Output following Program Shivam 10023 Example creating nested dictionary named student here adding more element dictionary student {'name': 'Shivam', 'age': '22', 'Id': 10053}, {'name': 'Anjali', 'age': '20', 'Id': 10004}} student[3] student[3]['name'] 'Tina' student[3]['age'] '19' student[3]['Id'] '10034' print(student[3]) Explanation: Here have created nested dictionary, want more elements that dictionary. done using square brackets syntax, firstly have created empty position dictionary, after than have filled data into here used when supply name dictionary then this square brackets position element want after than additional square brackets supply attribute value that want assign particular element using equals sign. Output following Program {'name': 'Tina', 'age': '19', 'Id': '10034'} Example creating nested dictionary named student here adding more element dictionary, after than want perform delete operation into deleting particular elements from particular dictionary indide nested dictionary. student {'name': 'Shivam', 'age': '22', 'Id': 10053}, {'name': 'Anjali', 'age': '20', 'Id': 10004}} student[3] student[3]['name'] 'Tina' student[3]['age'] '19' student[3]['Id'] '10034' print(student[3]) student[3][ 'Id'] print(student[3]) Explanation: Here have created nested dictionary, want more elements that dictionary. done using square brackets syntax. first, have created empty position dictionary, after that have filled data into Here, used when supply name dictionary then this square brackets position element want after than additional square brackets supply attribute value that want assign particular element using equals sign. deleting particular element, student from nested dictionary; have keyword using easily delete particular value that want. Output following Program {'name': 'Tina', 'age': '19', 'Id': '10034'} {'name': 'Tina', 'age': '19'} Example creating nested dictionary named student here adding more element dictionary, after than want perform delete operation into deleting particular elements from particular dictionary inside nested dictionary. student {'name': 'Shivam', 'age': '22', 'Id': 10053}, {'name': 'Anjali', 'age': '20', 'Id': 10004}} student[3] student[3]['name'] 'Tina' student[3]['age'] '19' student[3]['Id'] '10034' print(student[3]) student[3] print(student) Explanation: Here have created nested dictionary, want more elements that dictionary. done using square brackets syntax. first, have created empty position dictionary, after that have filled data into here used when supply name dictionary then this square brackets position element want after than additional square brackets supply attribute value that want assign particular element using equals sign. deleting particular dictionary inside nested dictionary, have used keyword deleted whole dictionary student from student nested dictionary. Output following Program {'name': 'Tina', 'age': '19', 'Id': '10034'} {'name': 'Shivam', 'age': '22', 'Id': 10053}, {'name': 'Anjali', 'age': '20', 'Id': 10004}} Next TopicCollections.UserString Python prev next