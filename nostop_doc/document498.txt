next prev Counters Python Initialize Update this tutorial, will discuss Counter that included collection module. will also explain solve problems. First, let's have brief introduction Counter. What Counter? Counters referred container that holds count each elements that available container. They allow access stored object. dictionary class holds Counter sub-class. Counter helps count key-value pairs object. They also known hash table objects. list, tuple, dictionary examples built-in container, many included collection module. considered multiset other languages. Below syntax Counter. Syntax: class collections.Counter([iterable-or-mapping]) Initialization call constructor counter called following ways: call with sequence items. With dictionary containing keys counts. With string. With keyword arguments mapping string names counts. Counter? Following main reasons using Counter Python program. counter used store data unordered collection, same hashtable objects. elements represented key, counts values. provides facility count items iterable list. perform basic arithmetic operations such addition, subtraction, interaction, union Counter. counter also capable counting elements from another counter. Implementation Counters Python takes iterable objects like list, dictionary, tuple, string argument returns count each element. Consider following list that contains several elements. List1 f] list duplicate element. will count values that show many times these elements present. Let's below example. Example from collections import Counter List1 ['a', 'b', 'a', 'a', 'c', 'd', 'e', 'c', 'd', 'f'] Print count variable print(Counter(List1)) Output: Counter({'a': 'c': 'd': 'b': 'e': 'f': have count Example from collections import Counter With list print(Counter(['X','Y','X','Y','Z','X','Y','Y','X','Z'])) with dictionary print(Counter({'X':5, 'Y':2, 'Z':4})) with keyword arguments print(Counter(A=3, B=5, C=2)) Output: Counter({'X': 'Y': 'Z': Counter({'X': 'Z': 'Y': Counter({'B': 'A': 'C': Updating Counter collection module provides update() method which allows update value. syntax following _count.update('Welcome JavaTpoint Tutorials!') Let's understand following example. Example from collections import Counter count_num Counter() count_num.update('Welcome JavaTpoint Tutorials!') print(count_num) Output: Counter({'o': 't': 'a': 'e': 'l': 'T': 'i': 'W': 'c': 'm': 'J': 'v': 'p': 'n': 'u': 'r': 's': '!': Accessing Counter access values from Counter. Let's understand following example. Example from collections import Counter count_num Counter() count_num.update('Welcome JavaTpoint Tutorials!') print('%s ('u', count_num['T'])) print('\n') char 'Tutorials': print('%s (char, count_num[char])) Output: Deleting Element from Counter keyword used delete element from counter. Let's understand following example. Example from collections import Counter dict1 {'a': 'b': 'c': dict1["c"] print("Dictionary After Deletion:", Counter(dict1)) Output: Dictionary After Deletion: Counter({'a': 'b': Perform Arithmetic Operation Python Counter mentioned above, perform various arithmetic operations such addition, subtraction, interaction union. Let's understand following example. Example from collections import Counter counter_1 Counter({'a': 'b': 'c': 'd': 7}) counter_2 Counter({'a1': -10, 'b': 'c':14 #Addition counter_3 counter_1 counter_2 print(counter_3) #Subtraction counter_4 counter_1 counter_2 print(counter_4) #Intersection counter_5 counter_1 counter_2 print(counter_5) #Union counter_6 counter_1 counter_2 print(counter_6) Output: Counter({'b': 'c': 'd': 'a': Counter({'a1': 'd': 'a': Counter({'b': Counter({'c': 'b': 'd': 'a': Counter with String know, everything Python object, string object well. Strings enclosed character characters double quotes. Python doesn't have character type. following example, will pass string Counter, which will return character dictionary with key/value pair. element, value count. Example from collections import Counter str1 "Welcome JavaTpoint Tutorial" print(Counter(str1)) Output: Counter({'o': 't': 'a': 'e': 'l': 'T': 'i': 'W': 'c': 'm': 'J': 'v': 'p': 'n': 'u': 'r': Counter with Dictionary dictionary stores elements key-value pair define inside curly brackets. When pass dictionary into Counter, will return hashtable object element. element will become keys, vale will counted element from dictionary given. Let's understand following example. Example from collections import Counter dict1 {'a': 'b': 'c': 'c': print(Counter(dict1)) Output: Counter({'b': 'a': 'c': Counter with Tuple Tuples immutable data-structure where elements stored separated commas inside round brackets. tuple converted into hashtable object. counter will provide count each element tuple given. element will become keys, vale will counted element from dictionary given. Let's understand following example. Example from collections import Counter tup1 ('x','y','z','x','x','x','y','z') print(Counter(tup1)) Output: Counter({'x': 'y': 'z': Some Important Methods Python Counter following some commonly used methods Counter. elements() method This method returns count element which greater than elements with will completely omitted. Example from collections import Counter counter1 Counter({'a': 'b': 'c': 'd':0}) new_elements counter1.elements() new_elements: print(i) Output: most_common(value) returns most common elements from Counter list. sorts dictionary most common element first followed next element. won't pass value most_common() method, sorts first element most commonly used last element least commonly used element. Let's following example. Example from collections import Counter counter1 Counter({'a': 'b': 'c': 'd':0}) new_elements counter1.most_common(2) new_elements1 counter1.most_common() print(new_elements) print(new_elements1) Output: [('a', ('b', [('a', ('b', ('d', ('c', -2)] subtract() method returns Counter object after performing subtraction. Let's understand following example. Example from collections import Counter counter1 Counter({'x': 'y': 'z': counter2 Counter({'x': 'y':5, 'z': counter1.subtract(counter2) print(counter1) Output: Counter({'z': 'x': 'y': -2}) Conclusion this tutorial, have covered almost every important concept Python Counter. counter kind container that stores count each elements available container. Counters allow count items iterable list, other iterable. Next TopicPython pyautogui Library Automation Testing Using prev next