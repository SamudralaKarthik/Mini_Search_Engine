next prev Getter Setter Python Getters setters Python different from those other OOPs languages. primary getters setters ensure data encapsulation object-oriented programs. contrast other object-oriented languages, private variables Python hidden fields. Some OOPs languages getters setter's methods data encapsulation. want conceal object class's attributes from other classes that methods other classes don't accidentally modify data. OOPs languages, getters setters used retrieve update data. getter retrieves object's current attribute value, whereas setter changes object's attribute value. this article, going discuss getter setter Python with examples. What Getter Python? Getters methods that used Object-Oriented Programming (OOPS) access class's private attributes. setattr() function Python corresponds getattr() function Python. alters object's attribute values. What Setter Python? setter method that used property's value. very useful object-oriented programming value private attributes class. Generally, getters setters mainly used ensure data encapsulation OOPs. Using normal function achieve getters setter behavior: There will special implementation specify normal get() set() methods achieve getters setters property. Example: Let's take example understand normal function achieve getters setter function. class Javatpoint: __init__(self, self._age using getter method get_age(self): return self._age using setter method set_age(self, self._age John Javatpoint() #using setter function John.set_age(19) using getter function print(John.get_age()) print(John._age) Output: After executing this above code, will output shown below: output Explanation: achieve such functionality, functions age() age() above code operate standard functions affect getters setters. Python unique function property Using property() function achieve getters setter behavior Python, property() built-in function creating returning property object. There three methods property object: getter(), setter(), delete(). Python, property() function takes four arguments: property(fget, fset, fdel, doc). fget function used retrieving attribute value. fset function used setting value attribute. fdel function used delete value attribute. attribute given docstring doc. Example: Let's take example understand property() function achieve getters setters behavior. class Javatpoint: __init__(self): self._age using function get_age(self): print("getter method") return self._age using function set_age(self, print("setter method") self._age using function del_age(self): self._age property(get_age, set_age, del_age) John Javatpoint() John.age print(John.age) Output: After executing this above code, will output shown below: output setter method getter method Explanation: above program, there only single print statement. output consists three lines setter method age() being called, getter method age() being called. result, property object that aids security private variable access. Using @property decorators achieve getters setter behavior: used property() function previous method achieve getters setters behavior. However, previously mentioned this article, getters setters also used validate getting setting attribute values. Another method enforcing property function decorator. @property Python's built-in decorators. primary goal decorator modify class methods attributes that class user does need change their code. Example: Let's take example understand @property decorators achieve getters setter behavior. class Javatpoint: __init__(self): self._age using getter function @property age(self): print("getter method") return self._age #now, using setter function @age.setter age(self, if(x 20): raise ValueError("the below eligibility criteria") print("setter method") self._age John Javatpoint() John.age print(John.age) Output: After executing above code, will output shown below: output setter method called getter method called Explanation: preceding code demonstrates @property decorator build pythonic getters setters. above example serves validation code, raising ValueError attempt initialize with value less than Making attributes private Now, we'll render methods private that external calling functions can't manipulate variables within them. They could only manipulated functions that defined within class. They made private prefixing them with underscores. Example: Let's take example understand make attributes private program. class Javatpoint: __init__(self, age=49): self._age make getter method get_age(self): return self.__age make setter method set_age(self, self.__age grad_obj Javatpoint() print(grad_obj._age) Before using setter print(grad_obj.get_age()) After using setter grad_obj.set_age(2020) print(grad_obj._age) Output: After executing this above code, will output shown below: Reading values from private methods read value from private methods, have getter method. Without using getter method, can't property method access private attribute values. Let's take example understand this method. Example: program read value from private method class Javatpoint: __init__(self, year=27): self._year year @property Aboutyear(self): return self.__year @Aboutyear.setter Aboutyear(self, self.__year grad_obj Javatpoint() print(grad_obj._year) grad_obj.year 2020 print(grad_obj.year) Output: After executing this above code, will output shown below: output 2020 Example: Let's take another example create class with properties. From that class several objects. class Javatpoint: __init__(self): self.emp "None" Mark Friend() John Friend() property (Emp) these objects. could directly, that good method. construct methods instead: getEmp() setEmp(). class Javatpoint: __init__(self): self.emp "None" getEmp(self): return self.emp setEmp(self, emp): self.emp Mark Javatpoint() John Javatpoint() Mark.setEmp("Developer") John.setEmp("Designer") print(John.emp) print(Mark.emp) Output: After executing this above code, will output shown below: output Designer Developer Next TopicEnum class Python prev next