next prev Metacharacters Python Metacharacters very important concept regular expression that helps solve programming tasks using Python regex module. this tutorial, will learn about metacharacters Python them. will explain each metacharacter along with their short simple example. prerequisite learning metacharacters that should familiar with Python regular expression. not, visit Python regular expression tutorial. What Metacharacters Python? Metacharacters part regular expression special characters that symbolize regex patterns formats. Every character either metacharacter regular character regular expression. However, metacharacters have special meaning. They used match patterns define some rules find specific pattern statement. Metacharacters also known operators, signs, symbols. Below list regex metacharacters that Python. Metacharacter Description Example represents characters. "[a-z]" represents special sequence. "\r" signals that character present some specific place. "Ja.v." represents pattern present beginning string. "^Java" represents pattern present string. "point" represents zero more occurrences pattern string. "hello*" represents more occurrences pattern string. "hello+" specified number occurrences pattern string. "java{2}" represents either this that character present. "java|point" Capture group (javatpoint) Below explanation each metacharacter along with code. Square Brackets Metacharacters square brackets represent characters. example Suppose want occurrence letters inside target string. want match words that inside square bracket target string. [abc] match such pattern. [abc] will match contains also specify range characters using dash. [0-5] same [012345]. [A-E] same [ABCDE]. [a-d] same [abcd]. Let's understand following example. Example import str1 "Python most popular programming language. Javatpoint best resource learn it." re.findall(r"[jtp]", str1) print(res) Output: ['t', 't', 'p', 'p', 'p', 'J', 't', 'p', 't', 't', 't', 't'] Explanation above program returned list containing occurrences given pattern square bracket. This metacharacter beneficial case searching several characters same time target string. Backslash Metacharacter backslash used escape various characters including metacharacters. also represent special sequence. example used find digit from 0-9. Let's another example Suppose want search match #a, where characters followed special character. Below table some special characters which used with Characters Description \s used match white space character. \S used match non-white space character. \0 used match NULL character. used match bell alarm. used match decimal digit, which means from \D used match non-decimal digit. helps user match line. used match alphanumeric [0-9a-zA-Z] characters. \W used match non-word character used match word boundary. Let's following example. Example Take previous string using backslash. import str1 "Python most popular programming language. Javatpoint best resource learn it." re.findall(r"\.", str1) print(res) Output: ['.', '.'] that, returned list containing dot. Metacharacter metacharacter represents string character apart from newline character (\n). consist letters uppercase lowercase, symbols such dollar ($), pound (#), mark (!), question mark (?) colons (:), digits including whitespace. Let's understand following example. Example import given_string "Peter likes roam road night" dot(.) metacharacter match character result_match re.search(r'.', given_string) print(result_match.group()) .+ match string except newline result_match re.search(r'.*', given_string print(result_match.group()) given_string1 "Peter's mobile number 4564\n67" result_match1 re.search(r'.+', given_string1 print(result_match1.group()) Output: Peter likes Peter's mobile number 4564 Carrot Character carrot character returns matching characters from beginning. example want first five words from string, would caret (^) metacharacter. Let's understand following example. Example import given_string "Peter likes roam road night" dot(.) metacharacter match character result_match re.search(r'^\w{5}', given_string) print(result_match.group()) Output: Peter above code, used special sequence which matches lowercase uppercase, numbers, underscore character. five inside curly braces specify alphanumeric character should occurring precisely five times. caret match pattern beginning each line caret metacharacter only beginning string single line used multiline matching. However, with help re.M flag, caret with each line. Let's understand following example. Example import given_string "Peter likes \nroam road night \nalso likes ice-creame" dot(.) metacharacter match character result_match re.search(r"^\w{5}", given_string, re.M) print(result_match.group()) Dollor Metacharacter This metacharacter just opposite dollor ($) metacharacter. matches string. following example, will match ice-cream, which present last string. Example import given_string "Peter likes \nroam road night \nalso likes ice-cream" dot(.) metacharacter match character result_match re.search(r"\w{6}$", given_string, re.M) print(result_match.group()) Output: cream asterisk/star Metacharacter most popular widely used metacharacters regular expression patterns. asterisk represents repetition more times possible, meaning greedy repetition. following example demonstrates match numbers using asterisk metacharacter. given_string "Numbers 1234, 8061,14567, 70453" pattern match \d\d* Observe that need match consecutive (represent digit). thing should remembered that pattern means zero more repetitions preceding expression. this case, preceding expression with last \d, them. upper limit want. However, lower limit zero. Let's understand following example. Example import given_string "Numbers 1234, 8061,14567, 70453" dot(.) metacharacter match character result_match re.findall(r"\d\d*", given_string) print(result_match) Output: ['1234', '8061', '14567', '70453'] Plus Metacharacter another popular widely used metacharacter regular expression patterns. represents repetition more times with many repetitions. means greedy repetition. other words, there more repetitions preceding expression. Here pattern matched \d\d+. following possible pattern match. repetition two-digit number. three-digit number repetition last \d. have four-digit number well. Let's understand following example. Example import given_string "Numbers 1234, 8061,14567, 70453" dot(.) metacharacter match character result_match re.findall(r"\d\d+", given_string) print(result_match) Output: ['34', '1234', '8061', '14567', '70453'] list match result. Question mark Metacharacter question mark metacharacter shows preceding character expression repeat either zero time only. repetition restricted both ends. following example, will compare with metacharacter. pattern matched /d/d/d/d?. include four which means match should having least four digits. Let's understand following example. Example import given_string "Numbers 1234, 8061,14567, 70453" dot(.) metacharacter match character result_match re.findall(r"\d\d\d\d?", given_string) print(result_match) Output: ['1234', '8061', '1456', '7045'] Pipe Metacharacter pipe metacharacter represents alternative option matching characters. Let's understand following example. Example given_string "This number." dot(.) metacharacter match character result_match re.search(r"i|n", given_string) print(result_match) utility alternation groups stems from their ability used units repetitions. Conclusion Metacharacters plays significant role solving Python regex real-world problem, they come wide range. this tutorial, have included almost every metacharacters with proper explanation coding example. Next TopicWrite Python Program Print Possible Combination Integers prev next