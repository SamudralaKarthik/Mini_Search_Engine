next prev Tree view widgets Tree view scrollbar Tkinter-Python stands Graphical User Interface graphical design interface like icons, menus using which user interact with application. Tkinter Python module designed develop project, from website. most widely used modules create faster. functionality module makes work designer easier. function module, need import Tkinter: import tkinter Using Tkinter, display information hierarchical representation using Treeview. This tutorial explains following contents: Tree view Tree view widgets Tree view scrollbar break words down; we'll learn about each them after other: Tree view, also known "Outline view," graphical visualization hierarchical representation data with every item having more sub-items. Tree view widget interaction user browse with represented hierarchical representation. There types Tree view widgets Tkinter: Tree table widget: Displaying structures data tabular format rows columns where rows represent items/ entities columns represent attributes items. Hierarchical widget: representation data level-wise. There number top-level nodes, only click extension will sub-nodes appear. node have second-level third-level nodes also. Here example Tree view hierarchical representation data: Tree view scrollbar regular scrollbar using Tree view widgets. First, cover foundation Tree view widgets: creating Tree view widget, need import tkinter.ttk module. Tkinter types widgets-classic themed. themed widgets, need class tkinter module. Tabular representation: #modules needed classes import tkinter from tkinter import from tkinter.messagebox import showinfo #Creating root window root_window t.Tk() root_window.title('Treeview widget') root_window.geometry('600x330') #Identifiers columns descriptions ('SNo', 'Name', 'Phone number') tree ttk.Treeview(root_window, columns descriptions, show 'headings') tree.heading('SNo', text 'Serial Number') #Headings tree.heading('Name', text 'Name person') tree.heading('Phone number', text 'Phone number') data range(1, 50): data.append((f'{i}', f'Name {i}', f'Phone number')) #list tuples #Inserting elements data: tree.insert('', t.END, values ("1", "Raghav", "9999999999")) tree.insert('', t.END, values ("2", "Gayathri", "8888888888")) #function handle event <<Treeviewselect>> selection(event): tree.selection(): item tree.item(i) record item['values'] showinfo(title 'Data', message '.join(str(record))) tree.bind('<<TreeviewSelect>>', selection) tree.grid(row column sticky 'nsew') #Treeview widget root window Output: First, imported Tkinter module, sub-module, needed features(show info). created root window called root_window, gave name, gave dimensions Using ttk.Treeview(), created Table Tree view widget with root_window columns, specifying 'headings' show, telling function show header table. Now, create tabular representation, specify names columns tuple. Finally, assigned headings columns, inserted data into them, created function handle event (When clicked table, displays message). configuring table window. Hierarchical Representation: Here program with example Hierarchical representation discussed above with courses engineering: #Importing modules classes import tkinter from tkinter import from tkinter.messagebox import showinfo #Root window creation root_window t.Tk() root_window.title('Hierarchical representation') root_window.geometry('600x370') #grid layout root_window.rowconfigure(0, weight=1) root_window.columnconfigure(0, weight=1) #Tree view tree ttk.Treeview(root_window) tree.heading('#0', text 'Courses', anchor=t.W) #Inserting more data tree.insert('', t.END, text 'Engineering', iid=0, open=False) tree.insert('', t.END, text 'Mechanical engineering', iid=1, open=False) tree.insert('', t.END, text 'Electrical engineering', iid=2, open=False) tree.insert('', t.END, text 'Electronic computer engineering', iid=3, open=False) tree.insert('', t.END, text 'Information Technology', iid=4, open=False) tree.insert('', t.END, text 'Computer science engineering', iid=5, open=False) tree.insert('', t.END, text 'Artificial Intelligence Machine Learning', iid=6, open=False) tree.insert('', t.END, text 'Data Science', iid=7, open=False) tree.insert('', t.END, text 'Cyber Security', iid=8, open=False) tree.insert('', t.END, text 'Internet Things', iid=9, open=False) #Assinging sub-data into Engineering tree.move(1, tree.move(2, tree.move(3, tree.move(4, tree.move(5, #Assigning sub-data Computer science engineering tree.move(6, tree.move(7, tree.move(8, tree.move(9, #Positioning tree.grid(row column sticky t.NSEW) #Execution root_window.mainloop() Output: followed same steps from tabular representation till creating Tree view widget. After creating widget, insert elements into widget with iid, this identifies every item individually. After inserting items, move() function specify sub-items making changes indentation observe that only click hierarchy contents will displayed. Treeview Scrollbar: regular scrollbar Treeview widgets, which called "Treeview scrollbar". that learned about Treeview widgets, create Treeview scrollbar: #Importing modules classes from tkinter import import tkinter #Creating window root_window t.Tk() root_window.resizable(width height #Treeview widget tree ttk.Treeview(root_window, selectmode 'browse') tree.pack(side 'left') #scrollbar scrollbar ttk.Scrollbar(root_window, orient "vertical", command tree.yview) scrollbar.pack(side 'left', fill 'x') tree.configure(xscrollcommand scrollbar.set) #Number columns tree["columns"] ("1", "2") Headings tree['show'] 'headings' #Columns configuration tree.column("1", width anchor ='c') tree.column("2", width anchor ='se') #Headings tree.heading("1", text "Name") tree.heading("2", text "Age") #Data tree.insert("", 'end', text ="L1", values =("Harry Styles", "28")) tree.insert("", 'end', text ="L2", values =("Zayn Malik", "29")) tree.insert("", 'end', text ="L3", values =("Liam Payne", "29")) tree.insert("", 'end', text ="L4", values =("Louis Tomlinson", "30")) tree.insert("", 'end', text ="L5", values =("Niall Horan", "29")) tree.insert("", 'end', text ="L6", values =("Adam Levine", "43")) tree.insert("", 'end', text ="L7", values =("Selena Gomez", "30")) tree.insert("", 'end', text ="L8", values =("Shawn Mendes", "24")) tree.insert("", 'end', text ="L10", values =("Taylor Swift", "32")) tree.insert("", 'end', text ="L11", values =("Justin Beiber", "28")) tree.insert("", 'end', text ="L12", values =("Demi Lovato", "30")) tree.insert("", 'end', text ="L13", values =("Conan Gray", "23")) Calling main loop root_window.mainloop() Output: Next Topic__getitem__() Python prev next