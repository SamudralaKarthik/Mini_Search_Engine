next prev Python Peewee Library Peewee Python library based (Object-Relational Mapping), which supports SQLite, MySQL, PostgreSQL, Cockroach databases. following tutorial, will learning insert record, delete record, create index, more using Peewee library Python programming language. Moreover, will also understand connection management, text binary fields, subqueries, filters, more with respect Peewee. let's started. Understanding Peewee library Python Peewee Python Object Relational Mapping (also known ORM) library developed US-based software engineer Charles Leifer October 2010. latest version this library 3.14.8. This library supports databases SQLite, MySQL, PostgreSQL, Cockroach. Object Relational Mapping programming method that allows programmers convert data between incompatible type systems Object-Oriented Programming languages. Classes considered non-scalar they defined Object-Oriented Programming language (OOPs) such Python. can't expressed Primitive data types like Integers Strings. contrast, databases such SQLite, MySQL, Oracle, others only store manipulate scalar values like Integers Strings arranged within tables. programmer should either transform values objects into collections scalar data types storing database transform them back upon retrieval only utilize simple scalar values inside program. system, each class maps table underlying database. replacement writing tedious database interfacing code own, takes care these problems while focus programming logic system. Setting Environment install latest version Peewee hosted PyPI (short Python Package Index), using installer shown below: Syntax: pip3 install Peewee There other dependencies this library work. works with SQLite without installing other package since sqlite3 module bundled with standard library. However, order work with MySQL PostgreSQL, have install DB-API compatible driver modules pymysql pyscopg2, respectively. cockroach database handled through playhouse extension that installed default together with Peewee library. Understanding mapping using Peewee Model maps database table, Field table column, instance table row. Peewee utilizes MySQLDatabase MySQL, PostgresqlDatabase PostgreSQL, SqliteDatabase SQLite. following tutorial, will working with SQLite database. Understanding Field Types Peewee Field types Peewee model define storage type model. They translated corresponding database column types. S.NO Field Type SQLite PostgreSQL MySQL CharField Varchar Varchar Varchar TextField Text Text Longtext DateTimeField Datetime Timestamp Datetime IntegerField Integer Integer Integer BooleanField Smallint Boolean Bool FloatField Real Real Real DoubleField Real Double Precision Double Precision BigIntegerField Integer Bigint Bigint DecimalField Decimal Numeric Numeric PrimaryKeyField Integer Serial Integer ForeignKeyField Integer Integer Integer DateField Date Date Date TimeField Time Time Time above table lists Peewee field types corresponding SQLite, PostgreSQL, MySQL column types. Defining model using Peewee first example, will creating simple database table. Example: importing required libraries import peewee import datetime creating database peewee.SqliteDatabase('testSpace.db') defining class Notes class Notes(peewee.Model): text peewee.CharField() created peewee.DateField(default datetime.date.today) class Meta: database db_table 'notes' creating table Notes.create_table() noteOne Notes.create(text 'Went Gym') noteOne.save() noteTwo Notes.create(text 'Went Cinema', created datetime.date(2021, noteTwo.save() noteThree Notes.create(text 'Watered plants', created datetime.date(2021, noteThree.save() noteFour Notes.create(text 'Listened music') noteFour.save() Output: sqlite> select from notes; 1|Went Gym|2021-12-09 2|Went Cinema|2021-12-08 3|Watered plants|2021-12-08 4|Listened music|2021-12-09 Explanation: above snippet code, have imported required library. have then created database 'testSpace.db'. have then created class Peewee model added some fields created database table database created table. last, have inserted entries table saved database. Dropping table using Peewee drop table using drop_table() function. consider following example demonstrating same. Example: importing required libraries import peewee import datetime creating database dBase peewee.SqliteDatabase('testSpace.db') defining class Notes class Notes(peewee.Model): text peewee.CharField() created peewee.DateField(default datetime.date.today) class Meta: database dBase db_table 'notes' using drop_table() function drop table Notes.drop_table() Explanation: above snippet code, have imported required libraries. have then created database 'testSpace.db'. have then defined class 'Notes' Peewee model created table. have then used drop_table() function drop table. Peewee insert_many() method insert_many() method Peewee library used perform bulk creates operation. consider following example demonstrating same. Example: importing required libraries import peewee import datetime creating database dBase peewee.SqliteDatabase('testSpace.db') defining class Notes class Notes(peewee.Model): text peewee.CharField() created peewee.DateField(default datetime.date.today) class Meta: database dBase db_table 'notes' creating table Notes.create_table() defining data the_data 'text': 'Visited friends morning', 'created': datetime.date(2021, 'text': 'Worked Project', 'created': datetime.date(2021, 'text': 'Went Shopping mall', 'created': datetime.date(2021, 'text': 'Listened songs', 'created': datetime.date(2021, 'text': 'Watched series day', 'created': datetime.date(2021, 'text': 'Watered plants', 'created': datetime.date(2021, 'text': 'Walked half hour', 'created': datetime.date(2021, with dBase.atomic(): using insert_many() function entries bulk the_query Notes.insert_many(the_data) the_query.execute() Output: sqlite> select from notes; 1|Went Gym|2021-12-10 2|Went Cinema|2021-12-08 3|Watered plants|2021-12-08 4|Listened music|2021-12-10 5|Visited friends morning|2021-12-07 6|Worked Project|2021-12-10 7|Went Shopping mall|2021-12-06 8|Listened songs|2021-12-02 9|Watched series day|2021-12-04 10|Watered plants|2021-12-02 11|Walked half hour|2021-12-08 Explanation: above snippet code, have imported required libraries. have then created database table. Later, defined data list dictionaries that need filled table. have then executed bulk operation used atomic method bulk operation transaction. Selecting instances using Peewee select method Peewee used retrieve instances defined models. consider following example illustrating same: Example: importing required libraries import peewee import datetime creating database dBase peewee.SqliteDatabase('testSpace.db') defining class Notes class Notes(peewee.Model): text peewee.CharField() created peewee.DateField(default datetime.date.today) class Meta: database dBase db_table 'notes' using select() function notes Notes.select() print(notes) iterating through each table note notes: print('{} {}'.format(note.text, note.created)) Output: python fetch_data.py SELECT "t1"."id", "t1"."text", "t1"."created" FROM "notes" "t1" Went 2021-12-10 Went Cinema 2021-12-08 Watered plants 2021-12-08 Listened music 2021-12-10 Visited friends morning 2021-12-07 Worked Project 2021-12-10 Went Shopping mall 2021-12-06 Listened songs 2021-12-02 Watched series 2021-12-04 Watered plants 2021-12-02 Walked half hour 2021-12-08 Explanation: above snippet code, have imported required libraries. have then created database table. have then used select() function select columns from tables. have then used for-loop iterate through each table print them users. result, program returned entries users. Filtering data using Peewee where method where method Peewee allows programmers filter data based specified condition. consider following example understand same: Example: importing required libraries import peewee import datetime creating database dBase peewee.SqliteDatabase('testSpace.db') defining class Notes class Notes(peewee.Model): text peewee.CharField() created peewee.DateField(default datetime.date.today) class Meta: database dBase db_table 'notes' using where method filter data notes Notes.select().where(Notes.id iterating through each table note notes: print('{} {}'.format(note.id, note.text, note.created)) Output: Visited friends morning 2021-12-07 Worked Project 2021-12-10 Went Shopping mall 2021-12-06 Listened songs 2021-12-02 Watched series 2021-12-04 Watered plants 2021-12-02 Walked half hour 2021-12-08 Explanation: above snippet code, have imported required libraries created database table. have then used where method along with select() function filter data table. have then used for-loop iterate through each table print data users. Peewee multiple where expressions where method multiple times combine them produce expression precise filtration process. consider following example demonstrating same: Example: importing required libraries import peewee import datetime creating database dBase peewee.SqliteDatabase('testSpace.db') defining class Notes class Notes(peewee.Model): text peewee.CharField() created peewee.DateField(default datetime.date.today) class Meta: database dBase db_table 'notes' using where method filter data notes Notes.select().where((Notes.id (Notes.id 10)) iterating through each rows table note notes: print('{} {}'.format(note.id, note.text, note.created)) Output: Listened music 2021-12-10 Visited friends morning 2021-12-07 Worked Project 2021-12-10 Went Shopping mall 2021-12-06 Listened songs 2021-12-02 Watched series 2021-12-04 Explanation: have imported required libraries created database table above snippet code. have used where method specifying limits order filter data specific manner. have then used for-loop iterate through rows print them users. Retrieving Single instance using Peewee There methods that select single instance; each them utilizes get() function. consider following example understand working same: Example: importing required libraries import peewee import datetime creating database dBase peewee.SqliteDatabase('testSpace.db') defining class Notes class Notes(peewee.Model): text peewee.CharField() created peewee.DateField(default datetime.date.today) class Meta: database dBase db_table 'notes' first method noteOne Notes.select().where(Notes.text 'Went Gym').get() print(noteOne.id) print(noteOne.text) print(noteOne.created) second method noteTwo Notes.get(Notes.text 'Worked Project') print(noteTwo.id) print(noteTwo.text) print(noteTwo.created) Output: Went 2021-12-10 Worked Project 2021-12-10 Explanation: have imported required libraries created database table above snippet code. order retrieve single instance, either first way, where where method along with get() function, second using get() function. Both methods shown above example. Selecting column using Peewee specify names columns inside select method that included within query. Here example that demonstrates same: Example: importing required libraries import peewee import datetime creating database dBase peewee.SqliteDatabase('testSpace.db') defining class Notes class Notes(peewee.Model): text peewee.CharField() created peewee.DateField(default datetime.date.today) class Meta: database dBase db_table 'notes' using select() function notes Notes.select(Notes.text, Notes.created).limit(3) output [e notes.tuples()] print(output) Output: [('Went Gym', datetime.date(2021, 10)), ('Went Cinema', datetime.date(2021, 8)), ('Watered plants', datetime.date(2021, 8))] Explanation: have imported required libraries created database table above snippet code. have then used select() function specifying names columns that have selected. have also included limit function limit number entries printed. Counting Instances using Peewee count method order calculate number model instances table. consider following example that illustrates same: Example: importing required libraries import peewee import datetime creating database dBase peewee.SqliteDatabase('testSpace.db') defining class Notes class Notes(peewee.Model): text peewee.CharField() created peewee.DateField(default datetime.date.today) class Meta: database dBase db_table 'notes' using count() function count1 Notes.select().count() print(count1) count2 Notes.select().where(Notes.created datetime.date(2021, 7)).count() print(count2) Output: Explanation: above snippet code, have imported required libraries created database table. have then used count() function count total number entries. have then used where() function specifying limits selection entries used count() function again print number selected entries only. Displaying statements using Peewee Peewee library offers method that allows programmers generate statements. consider following example that illustrates same: Example: importing required libraries import peewee import datetime creating database dBase peewee.SqliteDatabase('testSpace.db') defining class Notes class Notes(peewee.Model): text peewee.CharField() created peewee.DateField(default datetime.date.today) class Meta: database dBase db_table 'notes' selecting specific entry noteFour Notes.select().where(Notes.id using function print(noteFour.sql()) Output: ('SELECT "t1"."id", "t1"."text", "t1"."created" FROM "notes" "t1" WHERE ("t1"."id" ?)', [4]) Explanation: have imported required libraries created database table above snippet code. then used select() function where() select entry with have then used function print statement that selection operation. Peewee offset limit attributes Peewee also provides several attributes like offset limit that allow programmers define initial skip instances number instances included select function. consider following example demonstrating same: Example: importing required libraries import peewee import datetime creating database dBase peewee.SqliteDatabase('testSpace.db') defining class Notes class Notes(peewee.Model): text peewee.CharField() created peewee.DateField(default datetime.date.today) class Meta: database dBase db_table 'notes' using offset limit attributes the_notes Notes.select().offset(3).limit(4) iterating through entries table note the_notes: print(note.id, note.text, note.created) Output: Listened music 2021-12-10 Visited friends morning 2021-12-07 Worked Project 2021-12-10 Went Shopping mall 2021-12-06 Explanation: have imported required libraries created database table above snippet code. have then used offset limit attributes with select() function order select entries ranging from entry next three entries. Ordering using Peewee Peewee order_by function order retrieve instances. consider following example demonstrating same: Example: importing required libraries import peewee import datetime creating database dBase peewee.SqliteDatabase('testSpace.db') defining class Notes class Notes(peewee.Model): text peewee.CharField() created peewee.DateField(default datetime.date.today) class Meta: database dBase db_table 'notes' print('Ascending order') print('********************************') using order_by function. default Ascending order the_notes Notes.select(Notes.text, Notes.created).order_by(Notes.created) note the_notes: print(note.text, note.created) print() print('Descending order') print('********************************') using order_by function along with desc() function descending order the_notes Notes.select(Notes.text, Notes.created).order_by(Notes.created.desc()) note the_notes: print(note.text, note.created) Output: Ascending order ******************************** Listened songs 2021-12-02 Watered plants 2021-12-02 Watched series 2021-12-04 Went Shopping mall 2021-12-06 Visited friends morning 2021-12-07 Went Cinema 2021-12-08 Watered plants 2021-12-08 Walked half hour 2021-12-08 Went 2021-12-10 Listened music 2021-12-10 Worked Project 2021-12-10 Descending order ******************************** Went 2021-12-10 Listened music 2021-12-10 Worked Project 2021-12-10 Went Cinema 2021-12-08 Watered plants 2021-12-08 Walked half hour 2021-12-08 Visited friends morning 2021-12-07 Went Shopping mall 2021-12-06 Watched series 2021-12-04 Listened songs 2021-12-02 Watered plants 2021-12-02 Explanation: have imported required libraries created database table above snippet code. then used select function order_by method select entries table arrange them ascending order. have then used for-loop iterate through each print them. have then used select function along with order_by method again. However, have added desc() function order arrange entries descending order print them users with help for-loop. Deleting instance using Peewee Peewee library provides delete_by_id method that allows programmers delete instance identified This function returns number deleted instances. consider following example demonstrating same: Example: importing required libraries import peewee import datetime creating database dBase peewee.SqliteDatabase('testSpace.db') defining class Notes class Notes(peewee.Model): text peewee.CharField() created peewee.DateField(default datetime.date.today) class Meta: database dBase db_table 'notes' deleting entry using noteThree Notes.delete_by_id(3) using select() function notes Notes.select() iterating through each table note notes: print('{} {}'.format(note.id, note.text, note.created)) Output: Went 2021-12-10 Went Cinema 2021-12-08 Listened music 2021-12-10 Visited friends morning 2021-12-07 Worked Project 2021-12-10 Went Shopping mall 2021-12-06 Listened songs 2021-12-02 Watched series 2021-12-04 Watered plants 2021-12-02 Walked half hour 2021-12-08 Explanation: have imported required libraries created database table above snippet code. have then used delete_by_id() function delete entry have then printed entire table users. result, entry been deleted from table successfully. Deleting multiple instances using Peewee order delete more than instance, call Peewee delete method. This method will return number successfully deleted instances. consider following example illustrating same: Example: importing required libraries import peewee import datetime creating database dBase peewee.SqliteDatabase('testSpace.db') defining class Notes class Notes(peewee.Model): text peewee.CharField() created peewee.DateField(default datetime.date.today) class Meta: database dBase db_table 'notes' deleting multiple instances the_query Notes.delete().where(Notes.id the_query.execute() print('{} instances deleted'.format(num)) Output: instances deleted Explanation: have imported required libraries created database table above snippet code. have then used delete() method where() method delete instances with above result, seven instances deleted from table. Updating instance using Peewee Peewee update method order update instance. returns number successfully updated instances. Here example demonstrating same: Example: importing required libraries import peewee import datetime creating database dBase peewee.SqliteDatabase('testSpace.db') defining class Notes class Notes(peewee.Model): text peewee.CharField() created peewee.DateField(default datetime.date.today) class Meta: database dBase db_table 'notes' updating instance the_query Notes.update(created=datetime.date(2021, 27)).where(Notes.id the_query.execute() print('No. rows updated: {}'.format(num)) Output: rows updated: Explanation: have imported required libraries created database table above snippet code. have then used update() function update date instance Next TopicSome Cryptocurrency Libraries Python prev next