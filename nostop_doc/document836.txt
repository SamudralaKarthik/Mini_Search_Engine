next prev Building Notepad using PyQt5 Python Notepad does require much introduction. generic text editor that allows users open, read, create, edit plaintext files. been part Microsoft Windows since beginning, similar applications exist every desktop ever developed. following tutorial, will create replica Notepad Python programming language with help PyQt5 library. before started, have brief introduction PyQt5 library. brief overview PyQt5 PyQt5 Graphical User Interface (GUI) toolkit, Python bindings compatible with many operating systems like Windows, Unix, Linux, macOS, Android, iOS. PyQt5 library allows easily develop interactive desktop application because tools simplicity. application comprises Frontend Backend. PyQt5 offers tool known 'QtDesigner' that uses drag drop method order design Frontend that development become faster, give more time backend stuff. Installing PyQt5 using order install Python module, need 'pip', framework manage packages required install modules from trusted public repositories. Once have 'pip', install pyqt5 module using command from Windows command prompt (CMD) terminal shown below: Syntax: python.exe install pyqt5 Verifying Installation Once module installed, verify creating empty Python program file writing import statement follows: File: verify.py import pyqt5 Now, save above file execute using following command terminal: Syntax: python verify.py above Python program file does return error, module installed properly. However, case where exception raised, reinstalling module, also recommended refer official documentation module. start building project. Prerequisites Project order start building Notepad using PyQt5 Python, basic knowledge language's syntax functions required. Since Python High-level Interpreted Object-Oriented Programming language, will also concept Classes Objects. Moreover, following modules will using throughout Project: PyQt5: This module will allow create application's Graphical User Interface. sys: This module will provide different functions variables manipulate different parts Python runtime environment. This module will provide functions interact with operating system. Building Notepad application Python will start creating folder Notepad'. Inside this folder, will create another folder 'icons' that will contain icons require project Python program file 'main.py', where will write source code project. icons optional used make application look attractive. either icons their choice download file containing icons which have used this project from following link: Click here download that have structure application, time open 'main.py' file start coding part. keep concept clear understandable, have divided complete project code into different segments. followings steps that will work project. Step First all, will import required modules project. Step Secondly, will create main window application. Step will then text editor container window. Step After that, will create Menus Toolbars. Step last, will define necessary functions event triggers. understand these functions detail. Importing required modules project will start importing necessary modules like will also import various classes from different modules PyQt5 module. consider following snippet code illustrating same. File: main.py importing required modules import import importing required classes from PyQt5 module from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QPushButton, QLabel, QPlainTextEdit, QStatusBar, QToolBar, QVBoxLayout, QAction, QFileDialog, QMessageBox from PyQt5.QtGui import QFontDatabase, QIcon, QKeySequence from PyQt5.QtCore import QSize from PyQt5.QtPrintSupport import QPrintDialog Explanation: above snippet code, have imported modules. have then imported necessary classes from QtWidgets, QtGui, QtCore, QtPrintSupport modules PyQt5 module. Creating main window application that have successfully imported required modules classes project, time create main window application. will create QMainWindow subclass define initializing function configure window's title, geometry, icon. File: main.py creating subclass QMainWindow class class Application(QMainWindow): defining initializing function __init__(self): super().__init__() configuring title window self.setWindowTitle("My Notepad JAVATPOINT") configuring width height window self.window_width, self.window_height self.geometry().width(), self.geometry().height() setting Icon window self.setWindowIcon(QIcon('./icons/notepad.ico')) using resize() function size application self.resize(self.window_width self.window_height creating object QApplication class the_app QApplication(sys.argv) creating object Application class notepad_app Application() using show() method display window notepad_app.show() using exit() function module close application sys.exit(the_app.exec_()) Explanation: above snippet code, have defined subclass QMainWindow class. Within this class, have defined initializing function initialize some variables with their default values. have also inherited methods from parent class. Within this function, have configured application's title defined initial width height application. then window icon used resize() function geometry application. have then instantiated class created used show() method display resulting window. have also used exit() function module operate closing application. Adding Text Edition Container Application will some filter types, default destinations, display font style size. will also create main layout where will Text Editor other necessary widgets. will also create container enclose main layout application. consider following snippet code illustrating same. File: main.py defining some filter types self.filter_types 'Text Document (*.txt);; Python (*.py);; Mardown (*.md)' defining default location directory self.destination None defining font style size fixed_fonts QFontDatabase.systemFont(QFontDatabase.FixedFont) fixed_fonts.setPointSize(11) creating object QVBoxLayout class main_layout QVBoxLayout() Text Editor creating object QPlainTextEdit class self.text_editor QPlainTextEdit() setting font style editor self.text_editor.setFont(fixed_fonts) adding text editor object main layout window main_layout.addWidget(self.text_editor) Status creating status using statusBar() method self.status_bar self.statusBar() Container creating object QWidget class app_container QWidget() using setLayout() method main layout container app_container.setLayout(main_layout) self.setCentralWidget(app_container) Explanation: above code snippet, have defined some filter types editor. have also initialized default path directory font style. then created object QVBoxLayout class. then created text editor, font style initialized font, added this editor object main layout window. then created status using statusBar() method. have also created container using QWidget class setLayout() method main layout container. Creating menus toolbars will create menus toolbars. These menus toolbars will help perform different operations text. keep things simple, will create 'File' menu with file handling operations 'Edit' menu with editor handling operations their respective toolbars. will include operations such Open, Save, Save Print 'File' menu, whereas operations like Undo, Redo, Clear, Cut, Copy, Paste, Select All, Wrap text 'Edit' menu. File Menu toolbar start creating File menu toolbar consisting operations perform file handling. File: main.py 	#-------------------------------------- Creating File Menu 	#-------------------------------------- 	filemenu self.menuBar().addMenu('&File') 	#-------------------------------------- Creating File Toolbar 	#-------------------------------------- 	filetoolbar QToolBar('File') 	filetoolbar.setIconSize(QSize(30, 30)) 	self.addToolBar(Qt.ToolBarArea.TopToolBarArea, filetoolbar) creating menu options like open, save, save print calling user-defined make_action() function create action open file... 	open_doc_opt self.make_action(self, './icons/open_document.ico', 'Open File...', 'Open File...', self.fileOpen) using setShortcut() method shortcut execute 'open' command 	open_doc_opt.setShortcut(QKeySequence.Open) calling user-defined make_action() function create action save file 	save_doc_opt self.make_action(self, './icons/save.ico', 'Save', 'Save', self.fileSave) using setShortcut() method shortcut execute 'save' command 	save_doc_opt.setShortcut(QKeySequence.Save) calling user-defined make_action() function create action save file as... 	save_doc_as_opt self.make_action(self, './icons/save_as.ico', 'Save As...', 'Save As...', self.fileSaveAs) using setShortcut() method shortcut execute 'save command 	save_doc_as_opt.setShortcut(QKeySequence('Ctrl+Shift+S')) calling user-defined make_action() function create action print file 	print_opt self.make_action(self, './icons/printer.ico', 'Print', 'Print', self.printFile) using setShortcut() method shortcut execute 'print' command 	print_opt.setShortcut(QKeySequence.Print) using addActions() method created actions 'File' menu toolbar 	filemenu.addActions([open_doc_opt, save_doc_opt, save_doc_as_opt, print_opt]) 	filetoolbar.addActions([open_doc_opt, save_doc_opt, save_doc_as_opt, print_opt]) Explanation: above snippet code, have created 'File' menu using addMenu() function toolbar using QToolBar() method. have then used setIconSize() function primary size icons displayed toolbar this toolbar top. have then created different actions like open, save, save print using user-defined make_action() function will define later this tutorial. have also used setShortcut() method shortcut actions. last, have used addAction() method created actions 'File' menu toolbar. Edit Menu toolbar start creating Edit menu toolbar consisting operations edit text. File: main.py #-------------------------------------- Creating Edit Menu #-------------------------------------- editmenu self.menuBar().addMenu('&Edit') #-------------------------------------- Creating Edit Tool #-------------------------------------- edittoolbar QToolBar('Edit') edittoolbar.setIconSize(QSize(30, 30)) self.addToolBar(Qt.ToolBarArea.TopToolBarArea, edittoolbar) calling user-defined make_action() function create action undo current operation undo_opt self.make_action(self, './icons/undo.ico', 'Undo', 'Undo', self.text_editor.undo) using setShortcut() method shortcut execute 'undo' command undo_opt.setShortcut(QKeySequence.Undo) calling user-defined make_action() function create action redo current operation redo_opt self.make_action(self, './icons/redo.ico', 'Redo', 'Redo', self.text_editor.redo) using setShortcut() method shortcut execute 'redo' command redo_opt.setShortcut(QKeySequence.Redo) calling user-defined make_action() function create action clear text clear_opt self.make_action(self, './icons/clear.ico', 'Clear', 'Clear', self.resetContent) using addActions() method created actions 'Edit' menu toolbar editmenu.addActions([undo_opt, redo_opt, clear_opt]) edittoolbar.addActions([undo_opt, redo_opt, clear_opt]) adding separator editmenu.addSeparator() edittoolbar.addSeparator() calling user-defined make_action() function create action selected text cut_opt self.make_action(self, './icons/cut.ico', 'Cut', 'Cut', self.text_editor.cut) using setShortcut() method shortcut execute 'cut' command cut_opt.setShortcut(QKeySequence.Cut) calling user-defined make_action() function create action copy selected text copy_opt self.make_action(self, './icons/copy.ico', 'Copy', 'Copy', self.text_editor.copy) using setShortcut() method shortcut execute 'copy' command copy_opt.setShortcut(QKeySequence.Copy) calling user-defined make_action() function create action paste copied text paste_opt self.make_action(self, './icons/paste.ico', 'Paste', 'Paste', self.text_editor.paste) using setShortcut() method shortcut execute 'paste' command paste_opt.setShortcut(QKeySequence.Paste) calling user-defined make_action() function create action select entire text select_all_opt self.make_action(self, './icons/select_all.ico', 'Select All', 'Select all', self.text_editor.selectAll) using setShortcut() method shortcut execute 'select all' command select_all_opt.setShortcut(QKeySequence.SelectAll) using addActions() method created actions 'Edit' menu toolbar editmenu.addActions([cut_opt, copy_opt, paste_opt, select_all_opt]) edittoolbar.addActions([cut_opt, copy_opt, paste_opt, select_all_opt]) adding separator editmenu.addSeparator() edittoolbar.addSeparator() calling user-defined make_action() function create action wrap text next line wraptext_opt self.make_action(self, './icons/text_wrap.ico', 'Wrap Text', 'Wrap text', self.toggleWrapText) using setShortcut() method shortcut execute 'wrap text' command wraptext_opt.setShortcut('Ctrl+Shift+W') using addActions() method above created action 'Edit' menu toolbar editmenu.addActions([wraptext_opt]) edittoolbar.addActions([wraptext_opt]) calling user-defined updateTitle() function self.updateTitle() Explanation: above snippet code, have created 'Edit' menu using addMenu() function toolbar using QToolBar() class. have then used setIconSize() function primary size icons displayed toolbar this toolbar top. have then created different actions like undo, redo, clear, cut, copy, paste, select all, wrap text using user-defined make_action() function. have also used setShortcut() method shortcut actions. last, have used addAction() method created actions 'Edit' menu toolbar. last, have called user-defined updateTitle() function will defined later this tutorial. Defining necessary functions setting event triggers will define necessary functions order implement different operations such opening file, saving file directory, printing file, toggling wrap text command, clearing content file, opening dialog displaying message, updating title window, creating actions menu toolbar. understand implementation these functions detail. Function Toggle Wrap Text operation first function will allow toggle wrap text operation. will setLineWrapMode() method. consider following snippet code illustrating same. File: main.py defining function toggle wrap text operation toggleWrapText(self): toggling wrap text operation using setLineWrapMode() method self.text_editor.setLineWrapMode(not self.text_editor.lineWrapMode()) Explanation: above snippet code, have defined function toggleWrapText(). Within this function, have used setLineWrapMode() method toggled current state editor. Function clear content file second function define will allow reset clear content file. will setPlainText() method complete text empty string. consider following snippet code illustrating same. File: main.py defining function reset content resetContent(self): setting entire content empty string self.text_editor.setPlainText('') Explanation: above snippet code, have defined function resetContent(). Within this function, have used setPlainText() method with empty string clear entire content file. Function open file will define function open file. first, will select file from directory that requires opened. will then check destination empty reading content file. consider following snippet code illustrating same. File: main.py defining function open file fileOpen(self): selecting file from directory that requires opened destination, QFileDialog.getOpenFileName( parent self, caption 'Open File...', directory filter self.filter_types reading content file using try-except method destination: try: with open(destination, 'r') text f.read() f.close() except Exception self.dialogMessage(str(e)) else: self.path destination self.text_editor.setPlainText(text) self.updateTitle() Explanation: above snippet code, have defined function fileOpen(). Within this function, have used getOpenFileName() method QFileDialog() class retrieve file's path. have then checked selected path empty string used try-except method open read file. have also updated window title calling updateTitle() function. Function save file will define function save file. first, will check whether user working existing file. user working file, will call fileSaveAs() function order save However, user working some already existing file, file will saved previous name using write() method. consider following snippet code illustrating same. File: main.py defining function save file fileSave(self): calling fileSaveAs() function, path None self.destination None: self.fileSaveAs() else save file given path using try-except method else: try: text self.text_editor.toPlainText() with open(self.destination, 'w') f.write(text) f.close() except Exception self.dialogMessage(str(e)) Explanation: above snippet code, have defined function fileSave(). Within this function, have checked path file unspecified called fileSaveAs() function same. file path provided, try-except method save file with previous name using write() method. Function save file with another name will define another function save file name. Firstly, will select path from directory where want save file. Then will write() method save file that path. consider following snippet code illustrating same. File: main.py defining function save file as... directory fileSaveAs(self): setting destination where file will saved destination, QFileDialog.getSaveFileName( self, 'Save File as...', self.filter_types text self.text_editor.toPlainText() saving file using try-except method destination: return else: try: with open(destination, 'w') f.write(text) f.close() except Exception self.dialogMessage(str(e)) else: self.destination destination self.updateTitle() Explanation: above snippet code, have defined function fileSaveAs(). Within this function, have selected path from directory where file will saved using getSaveFileName() method QFileDialog() class. then check selected path empty string. have then used open() method open file write() method write content from text editor that file. last, have updated title calling updateTitle() function. Function print file will define function print file. accomplish this, will create object QPrintDialog() class. consider following snippet code illustrating same. File: main.py defining function print file printFile(self): creating object QPrintDialog() class print_dialog QPrintDialog() printing file print_dialog.exec_(): self.text_editor.print_(print_dialog.printer()) Explanation: above snippet code, have defined function printFile(). Within this function, have instantiated QPrintDialog() class. then used if-conditional statement execute print command calling printer() method. Function open dialog displaying messages will define function order display message showing certain messages. This function will object QMessageBox() class create dialog box. consider following snippet code illustrating same. File: main.py defining function open dialog displaying message dialogMessage(self, msg): creating object QMessageBox() class dialog QMessageBox(self) setting message dialog dialog.setText(msg) setting icon dialog dialog.setIcon(QMessageBox.Critical) displaying dialog dialog.show() Explanation: above snippet code, have defined function dialogMessage(). Within function, have instantiated QMessageBox() class. then used setText() method message dialog box. have then icon showing 'Critical' mark using setIcon() method. last, have used show() method display final dialog box. Function update title window will define function that frequently updates title window file name every file-handling operation. consider following snippet code demonstrating same. File: main.py defining function update title file updateTitle(self): setting window title self.setWindowTitle('{0} Notepad JAVATPOINT'.format(os.path.basename(self.destination) self.destination else 'Untitled')) Explanation: above snippet code, have defined function updateTitle(). Within this function, have used setWindowTitle() method format window's title. have defined variable field where file name will displayed title along with initial value 'Untitled'. Function create actions menu toolbar will define last function that will allow create different actions handle files text editor. consider following snippet code demonstrating same. File: main.py defining function create actions menu toolbar make_action(self, parent_obj, icon_destination, name_of_action, status_tip, triggered_method): creating object QAction() class QAction(QIcon(icon_destination), name_of_action, parent_obj) updating message status act.setStatusTip(status_tip) calling different functions designated different actions act.triggered.connect(triggered_method) returning action return Explanation: above snippet code, have defined function make_action() that accepts multiple parameters like object parent class, path where action icon located, name action, message displayed status bar, function call. Inside function, have instantiated QAction() class order create action. then used setStatusTip() method display message designated each action status bar. have then used triggered.connect() method call functions associated with different actions. last, have returned object QAction() class. Hence, project code completed. save file following command command shell terminal output. Syntax: python main.py Before output, consider complete code "Notepad using PyQt5" project Python. Complete Project Code following snippet code "Notepad using PyQt5" project Python programming language. File: main.py importing required modules import import importing required classes from PyQt5 module from PyQt5.QtWidgets import QApplication, QMainWindow, QWidget, QPushButton, QLabel, QPlainTextEdit, QStatusBar, QToolBar, QVBoxLayout, QAction, QFileDialog, QMessageBox from PyQt5.QtGui import QFontDatabase, QIcon, QKeySequence from PyQt5.QtCore import QSize from PyQt5.QtPrintSupport import QPrintDialog creating subclass QMainWindow class class Application(QMainWindow): defining initializing function __init__(self): super().__init__() configuring title window self.setWindowTitle("My Notepad JAVATPOINT") configuring width height window self.window_width, self.window_height self.geometry().width(), self.geometry().height() setting Icon window self.setWindowIcon(QIcon('./icons/notepad.ico')) using resize() size application self.resize(self.window_width self.window_height defining some filter types self.filter_types 'Text Document (*.txt);; Python (*.py);; Mardown (*.md)' defining default location directory self.destination None defining font style size fixed_fonts QFontDatabase.systemFont(QFontDatabase.FixedFont) fixed_fonts.setPointSize(11) creating object QVBoxLayout class main_layout QVBoxLayout() Text Editor creating object QPlainTextEdit class self.text_editor QPlainTextEdit() setting font style editor self.text_editor.setFont(fixed_fonts) adding text text_editor object main layout window main_layout.addWidget(self.text_editor) Status creating status using statusBar() method self.status_bar self.statusBar() Container creating object QWidget class app_container QWidget() using setLayout() method main layout container app_container.setLayout(main_layout) self.setCentralWidget(app_container) #-------------------------------------- Creating File Menu #-------------------------------------- filemenu self.menuBar().addMenu('&File') #-------------------------------------- Creating File ToolBar #-------------------------------------- filetoolbar QToolBar('File') filetoolbar.setIconSize(QSize(30, 30)) self.addToolBar(Qt.ToolBarArea.TopToolBarArea, filetoolbar) creating menu options like open, save, save print calling user-defined make_action() function create action open file... open_doc_opt self.make_action(self, './icons/open_document.ico', 'Open File...', 'Open File...', self.fileOpen) using setShortcut() method shortcut execute 'open' command open_doc_opt.setShortcut(QKeySequence.Open) calling user-defined make_action() function create action save file save_doc_opt self.make_action(self, './icons/save.ico', 'Save', 'Save', self.fileSave) using setShortcut() method shortcut execute 'save' command save_doc_opt.setShortcut(QKeySequence.Save) calling user-defined make_action() function create action save file as... save_doc_as_opt self.make_action(self, './icons/save_as.ico', 'Save As...', 'Save As...', self.fileSaveAs) using setShortcut() method shortcut execute 'save command save_doc_as_opt.setShortcut(QKeySequence('Ctrl+Shift+S')) calling user-defined make_action() function create action print file print_opt self.make_action(self, './icons/printer.ico', 'Print', 'Print', self.printFile) using setShortcut() method shortcut execute 'print' command print_opt.setShortcut(QKeySequence.Print) using addActions() method created actions 'File' menu toolbar filemenu.addActions([open_doc_opt, save_doc_opt, save_doc_as_opt, print_opt]) filetoolbar.addActions([open_doc_opt, save_doc_opt, save_doc_as_opt, print_opt]) #-------------------------------------- Creating Edit Menu #-------------------------------------- editmenu self.menuBar().addMenu('&Edit') #-------------------------------------- Creating Edit Tool #-------------------------------------- edittoolbar QToolBar('Edit') edittoolbar.setIconSize(QSize(30, 30)) self.addToolBar(Qt.ToolBarArea.TopToolBarArea, edittoolbar) calling user-defined make_action() function create action undo current operation undo_opt self.make_action(self, './icons/undo.ico', 'Undo', 'Undo', self.text_editor.undo) using setShortcut() method shortcut execute 'undo' command undo_opt.setShortcut(QKeySequence.Undo) calling user-defined make_action() function create action redo current operation redo_opt self.make_action(self, './icons/redo.ico', 'Redo', 'Redo', self.text_editor.redo) using setShortcut() method shortcut execute 'redo' command redo_opt.setShortcut(QKeySequence.Redo) calling user-defined make_action() function create action clear text clear_opt self.make_action(self, './icons/clear.ico', 'Clear', 'Clear', self.resetContent) using addActions() method created actions 'Edit' menu toolbar editmenu.addActions([undo_opt, redo_opt, clear_opt]) edittoolbar.addActions([undo_opt, redo_opt, clear_opt]) adding separator editmenu.addSeparator() edittoolbar.addSeparator() calling user-defined make_action() function create action selected text cut_opt self.make_action(self, './icons/cut.ico', 'Cut', 'Cut', self.text_editor.cut) using setShortcut() method shortcut execute 'cut' command cut_opt.setShortcut(QKeySequence.Cut) calling user-defined make_action() function create action copy selected text copy_opt self.make_action(self, './icons/copy.ico', 'Copy', 'Copy', self.text_editor.copy) using setShortcut() method shortcut execute 'copy' command copy_opt.setShortcut(QKeySequence.Copy) calling user-defined make_action() function create action paste copied text paste_opt self.make_action(self, './icons/paste.ico', 'Paste', 'Paste', self.text_editor.paste) using setShortcut() method shortcut execute 'paste' command paste_opt.setShortcut(QKeySequence.Paste) calling user-defined make_action() function create action select entire text select_all_opt self.make_action(self, './icons/select_all.ico', 'Select All', 'Select all', self.text_editor.selectAll) using setShortcut() method shortcut execute 'select all' command select_all_opt.setShortcut(QKeySequence.SelectAll) using addActions() method created actions 'Edit' menu toolbar editmenu.addActions([cut_opt, copy_opt, paste_opt, select_all_opt]) edittoolbar.addActions([cut_opt, copy_opt, paste_opt, select_all_opt]) adding separator editmenu.addSeparator() edittoolbar.addSeparator() calling user-defined make_action() function create action wrap text next line wraptext_opt self.make_action(self, './icons/text_wrap.ico', 'Wrap Text', 'Wrap text', self.toggleWrapText) using setShortcut() method shortcut execute 'wrap text' command wraptext_opt.setShortcut('Ctrl+Shift+W') using addActions() method above created action 'Edit' menu toolbar editmenu.addActions([wraptext_opt]) edittoolbar.addActions([wraptext_opt]) calling user-defined updateTitle() function self.updateTitle() defining function toggle wrap text operation toggleWrapText(self): toggling wrap text operation using setLineWrapMode() method self.text_editor.setLineWrapMode(not self.text_editor.lineWrapMode()) defining function reset content resetContent(self): setting entire content empty string self.text_editor.setPlainText('') defining function open file fileOpen(self): selecting file from directory that requires opened destination, QFileDialog.getOpenFileName( parent self, caption 'Open File...', directory filter self.filter_types reading content file using try-except method destination: try: with open(destination, 'r') text f.read() f.close() except Exception self.dialogMessage(str(e)) else: self.path destination self.text_editor.setPlainText(text) self.updateTitle() defining function save file fileSave(self): calling fileSaveAs() function, path None self.destination None: self.fileSaveAs() else save file given path using try-except method else: try: text self.text_editor.toPlainText() with open(self.destination, 'w') f.write(text) f.close() except Exception self.dialogMessage(str(e)) defining function save file as... directory fileSaveAs(self): setting destination where file will saved destination, QFileDialog.getSaveFileName( self, 'Save File as...', self.filter_types text self.text_editor.toPlainText() saving file using try-except method destination: return else: try: with open(destination, 'w') f.write(text) f.close() except Exception self.dialogMessage(str(e)) else: self.destination destination self.updateTitle() defining function print file printFile(self): creating object QPrintDialog() class print_dialog QPrintDialog() printing file print_dialog.exec_(): self.text_editor.print_(print_dialog.printer()) defining function open dialog displaying message dialogMessage(self, msg): creating object QMessageBox() class dialog QMessageBox(self) setting message dialog dialog.setText(msg) setting icon dialog dialog.setIcon(QMessageBox.Critical) displaying dialog dialog.show() defining function update title file updateTitle(self): setting window title self.setWindowTitle('{0} Notepad JAVATPOINT'.format(os.path.basename(self.destination) self.destination else 'Untitled')) defining function create actions menu toolbar make_action(self, parent_obj, icon_destination, name_of_action, status_tip, triggered_method): creating object QAction() class QAction(QIcon(icon_destination), name_of_action, parent_obj) updating message status act.setStatusTip(status_tip) calling different functions designated different actions act.triggered.connect(triggered_method) returning action return creating object QApplication class the_app QApplication(sys.argv) creating object Application class notepad_app Application() using show() method display window notepad_app.show() using exit() function module close application sys.exit(the_app.exec_()) Output: Next TopicSimple Registration form using PyQt5 Python prev next