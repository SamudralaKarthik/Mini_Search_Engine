next prev Weather Django Weather Report City Wise this tutorial, will create weather using Django; this will display weather searched cities. simple Django project helps beginners understand basic concepts Django. will also Weather fetch data. Before move further this tutorial, make sure that have installed Python Django. Django installed, install using command. suggest first creating virtual environment then install Django. Prerequisites Familiar with Python Familiar with fundamentals Django system should have installed Python Install (Pycharm, VSCode, Atom, Sublime) Installation Django First, open terminal create virtual environment. Here, using visual studio. virtual environment created using following ways. Using pipenv shell command Using venv create virtual command using pipenv shell command Using this command, don't need activate virtual environment. automatically activated. Now, will install Django using command. install django check whether django installed not, type django-admin -version enter. means have installed latest version Django. Create Project Django project consist many apps. Here create project using following command. django-admin startproject project_name created project named WeatherProject, will create using python manage.py startapp MyWeatherApp. Note Observe that have used (dot) after project name while running create project command. makes separate project Directory. don't need jump project access manage.py file. create name MyWeatherApp using below command. python manage.py startapp MyWeatherAPP included project consider have name INSTALLED_APP. open settings.py file newly created app. this point, step forward create application. server using following command. python manage.py runserver Click given link will show Django application environment. Logging Admin Panel Next, will built-in Django Dashboard. need migrate database, which means Django will create pre-defined tables needed default apps. Type following command terminal press enter key. python manage.py migrate This will create SQLite database project. default database provides django, added several tables database. There will user table admin panel, which will store user app. admin panel, need create admin using below command. python manage.py createsuperuser After running command, will user information such username, email address, password. Once done this, start server again. python manage.py runserver Open given link visit http://127.0.0.1:8000/admin page because admin urls.py. Adding Template View Now, will template make layout application. template HTML file that allows Jinja syntax makes template dynamic. Create folder named template Weather Project directory. <!DOCTYPE html> <html lang="en"> load static <head> <meta charset="UTF-8" <meta name="viewport" content="width=device-width, initial-scale=1.0" <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootswatch/4.5.3/cerulean/bootstrap.min.css" integrity="sha512-dQLT/B7byn2LjN/DN4zeBKpwGV6qbidV0XiMRWQOL7TGrV7FkZFldkGG+DGMU+CQnMTcRZlUI7GMWt1j6akNew==" crossorigin="anonymous" <title>Weather </title> </head> <body> <br /><br <br> <div id="jumbotron" class="jumbotron" style="text-align: center; margin-top:-50px"> <h1 class="display-4">Weather Desktop </h1> <h5>Using Python Language Django Framework</h5> </div> <nav class="navbar navbar-expand-lg navbar-dark bg-primary"> <form method="post" class="col-md""> csrf_token <div class=" input-group"> <input type="text" class="form-control" name="city" placeholder="Choose Your City"> <div class="input-group-btn"> <button type="submit" class="btn btn-primary">Search</button> </div> </div> <form> </nav> <br> <br> <div class="row"> country_code coordinate temp pressure humidity <div class="col d-flex justify-content-center" <div class=" card text-white bg-light mb-6"> <div class=" card-body"> <h4><span class="badge badge-primary">City :</span> </h4> <h4><span class="badge badge-primary">Country Code :</span> </h4> <h4><span class="badge badge-primary">Coordinates [X,Y] :</span> </h4> <h4><span class="badge badge-primary">Temperature :</span> {{temp}}</h4> <h4><span class="badge badge-primary">Pressure :</span> </h4> <h4><span class="badge badge-primary">Humidity </span> </h4> </div> endif </div> </body> </html> have created index.html file. will fetch data from weather render template, will create VIEW URL. below function view.py. View.py from django.shortcuts import render Create your views here. home(request): return render(request, 'index.html') urls.py from django.urls import path from .views import home urlpatterns path('', home, name 'home') Django will match without endpoint route view function created. Using Weather real-time weather report, need sign Open Weather API. will return real-time weather cities that enter app. Visit site create account then keys their dashboard. Note should secret prevent them from used other parties. city, city_weather, import requests module. Views.py import json from django.shortcuts import render import urllib.request import json Create your views here. home(request): request.method 'POST': city name from user http://api.openweathermap.org/data/2.5/weather city request.POST.get('city', 'True') retreive information using source urllib.request.urlopen('http://api.openweathermap.org/data/2.5/weather?q=' city '&units=imperial&appid=164fec96a27b97680ee442e489ce3f06').read() convert json data file into python dictionary list_of_data json.loads(source) create dictionary convert value string context 'city': city, "country_code": str(list_of_data['sys']['country']), "coordinate": str(list_of_data['coord']['lon']) str(list_of_data['coord']['lat']), "temp": str(list_of_data['main']['temp']) 'k', "pressure": str(list_of_data['main']['pressure']), "humidity": str(list_of_data['main']['humidity']), else: context send dictionary index.html return render(request, 'index.html', context) Explanation above view, check method POST then city name from form. Then read data specific city using urllib.request.urlopen().We pass source variable json.loads() that will convert data into Python dictionary. Using this, easily access required data save context dictionary. When user enters city, will display attributes that have stored context dictionary. Note will take time activate. activated then after minutes. will make change html file. <div class="row"> country_code coordinate temp pressure humidity <div class="col d-flex justify-content-center" <div class=" card text-white bg-light mb-6"> <div class=" card-body"> <h4><span class="badge badge-primary">City :</span> {{city}}</h4> <h4><span class="badge badge-primary">Country Code :</span> {{country_code}}</h4> <h4><span class="badge badge-primary">Coordinates [X,Y] :</span> {{coordinate}}</h4> <h4><span class="badge badge-primary">Temperature :</span> {{temp}}</h4> <h4><span class="badge badge-primary">Pressure :</span> {{pressure}} </h4> <h4><span class="badge badge-primary">Humidity </span> {{humidity}}</h4> </div> endif </div> server click given link. will look like below. Enter city name search box, click search button weather data. enter Noida weather data. above snapshot, have successfully created weather using Django framework. far, have learned about some commands, creating virtual environment most important learned about API. have also discussed calling getting different weather fields' country code, humidity, temperature, etc. make more attractive this project. have used bootstrap classes HTML. Next TopicMissing Data Conundrum: Exploration Imputation Techniques prev next