next prev Convert Column Type from String Datetime Format Pandas DataFrame When work with data Pandas DataFrame Python, pretty usual encounter time series data. Panday strong tool that handle time-series data Python, might need convert string into Datetime format given dataset. this tutorial, will learn convert DataFrame column string into datetime format, "dd/mm/yy". user cannot execute time-series based operations dates they required format. deal with this, need convert dates into required date-time format. Different Approaches Converting Datatype Format Python: this section, will discuss different approaches changing datatype Pandas DataFrame column from string datetime: Approach Using pandas.to_datetime() Function this approach, will "pandas.to_datetime()" function converting datatype Pandas DataFrame column. Example: import pandas Creating dataframe data_frame pnd.DataFrame({'Date':['12/05/2021', '11/21/2018', '01/12/2020'], 'Event':['Music- Dance', 'Poetry- Songs', 'Theatre- Drama'], 'Cost':[15400, 7000, 25000]}) Print dataframe print ("The data print (data_frame) Here, checking data type 'Date' column data_frame.info() Output: data Date Event Cost 12/05/2021 Music- Dance 15400 11/21/2018 Poetry- Songs 7000 01/12/2020 Theatre- Drama 25000 RangeIndex: entries, Data columns (total columns): Column Non-Null Count Dtype ------ -------------- ----- Date non-null object Event non-null object Cost non-null int64 dtypes: int64(1), object(2) memory usage: 200.0+ bytes Here, output, that Datatype "Date" column DataFrame "object", which means string. Now, will convert Datatype into datetime format using "pnd.to_datetime()" function: import pandas Creating dataframe data_frame pnd.DataFrame({'Date':['12/05/2021', '11/21/2018', '01/12/2020'], 'Event':['Music- Dance', 'Poetry- Songs', 'Theatre- Drama'], 'Cost':[15400, 7000, 25000]}) Print dataframe print ("The data print (data_frame) converting 'Date' column DataFrame into datetime format data_frame['Date'] pnd.to_datetime(data_frame['Date']) Here, checking data type 'Date' column data_frame.info() Output: data Date Event Cost 12/05/2021 Music- Dance 15400 11/21/2018 Poetry- Songs 7000 01/12/2020 Theatre- Drama 25000 <class 'pandas.core.frame.DataFrame'> RangeIndex: entries, Data columns (total columns): Column Non-Null Count Dtype ------ -------------- ----- Date non-null datetime64[ns] Event non-null object Cost non-null int64 dtypes: datetime64[ns](1), int64(1), object(1) memory usage: 200.0+ bytes Now, that format "Data" column DataFrame been changed datetime format. Approach Using DataFrame.astype() Function. this approach, will "DataFrame.astype()" function converting datatype Pandas DataFrame column. Example: import pandas Creating dataframe data_frame pnd.DataFrame({'Date':['12/05/2021', '11/21/2018', '01/12/2020'], 'Event':['Music- Dance', 'Poetry- Songs', 'Theatre- Drama'], 'Cost':[15400, 7000, 25000]}) Print dataframe print ("The data print (data_frame) Here, checking data type 'Date' column data_frame.info() Output: data Date Event Cost 12/05/2021 Music- Dance 15400 11/21/2018 Poetry- Songs 7000 01/12/2020 Theatre- Drama 25000 <class 'pandas.core.frame.DataFrame'> RangeIndex: entries, Data columns (total columns): Column Non-Null Count Dtype ------ -------------- ----- Date non-null object Event non-null object Cost non-null int64 dtypes: int64(1), object(2) memory usage: 200.0+ bytes Here, output, that Datatype "Date" column DataFrame "object", which means string. Now, will convert datatype into datetime format using "Data_Frame.astype()" function: import pandas Creating dataframe data_frame pnd.DataFrame({'Date':['12/05/2021', '11/21/2018', '01/12/2020'], 'Event':['Music- Dance', 'Poetry- Songs', 'Theatre- Drama'], 'Cost':[15400, 7000, 25000]}) Print dataframe print ("The data print (data_frame) converting 'Date' column DataFrame into datetime format data_frame['Date'] data_frame['Date'].astype('datetime64[ns]') Here, checking data type 'Date' column data_frame.info() Output: data Date Event Cost 12/05/2021 Music- Dance 15400 11/21/2018 Poetry- Songs 7000 01/12/2020 Theatre- Drama 25000 <class 'pandas.core.frame.DataFrame'> RangeIndex: entries, Data columns (total columns): Column Non-Null Count Dtype ------ -------------- ----- Date non-null datetime64[ns] Event non-null object Cost non-null int64 dtypes: datetime64[ns](1), int64(1), object(1) memory usage: 200.0+ bytes Now, that format "Data" column DataFrame been changed datetime format using data_frame['Date'].astype('datetime64[ns]'. Approach Suppose have date "yymmdd" format DataFrame column, have convert from string datetime format. Example: import pandas Now, will initialize nested list with Dataset play_list [['210302', 67000], ['210901', 62000], ['210706', 61900], ['210402', 59000], ['210802', 74000], ['210804', 54050], ['210109', 57650], ['210509', 67300], ['210209', 76600]] Creating pandas DataFrame data_frame pnd.DataFrame(play_list,columns ['Date','Patient Number']) Print dataframe print ("The data print (data_frame) Here, checking data type 'Date' column print (data_frame.dtypes) Output: data Date Patient Number 210302 67000 210901 62000 210706 61900 210402 59000 210802 74000 210804 54050 210109 57650 210509 67300 210209 76600 Date object Patient Number int64 dtype: object Here, output that Datatype "Date" column DataFrame "object", that means, string. Now, will convert datatype into datetime format using "data_frame['Date'] pnd.to_datetime(data_frame['Date'], format '%y%m%d')" function. import pandas Now, will initialize nested list with Dataset play_list [['210302', 67000], ['210901', 62000], ['210706', 61900], ['210402', 59000], ['210802', 74000], ['210804', 54050], ['210109', 57650], ['210509', 67300], ['210209', 76600]] creating pandas dataframe data_frame pnd.DataFrame(play_list,columns ['Date','Patient Number']) Print dataframe print ("The data print (data_frame) converting 'Date' column DataFrame into datetime format data_frame['Date'] pnd.to_datetime(data_frame['Date'], format '%y%m%d') Here, checking data type 'Date' column print (data_frame.dtypes) Output: data Date Patient Number 210302 67000 210901 62000 210706 61900 210402 59000 210802 74000 210804 54050 210109 57650 210509 67300 210209 76600 Date datetime64[ns] Patient Number int64 dtype: object above code, have changed datatype column "Date" from "object" "datetime64[ns]" using "pnd.to_datetime(data_frame['Date'], format '%y%m%d')" function. Approach convert multiple columns from "string" "datetime" format, which means "YYYYMMDD" format, using "pandas.to_datetime()" function. Initializing nested list with Data Dataset_list [['20210612', 54000, '20210812'], ['20210814', 65000, '20210614'], ['20210316', 71500, '20210316'], ['20210519', 45000, '20210119'], ['20210221', 98000, '20210221'], ['20210124', 23000, '20210724'], ['20210929', 12000, '20210924']] creating pandas dataframe data_frame pnd.DataFrame( Dataset_list, columns ['Treatment_starting_Date', 'Patients Number', 'Treatment_ending_Date']) Print dataframe print ("The data print (data_frame) Here, checking data type 'Date' column print (data_frame.dtypes) Output: data Treatment_starting_Date Patients Number Treatment_ending_Date 20210612 54000 20210812 20210814 65000 20210614 20210316 71500 20210316 20210519 45000 20210119 20210221 98000 20210221 20210124 23000 20210724 20210929 12000 20210924 Treatment_starting_Date object Patients Number int64 Treatment_ending_Date object dtype: object Here, output, that Datatype "Date" column DataFrame "object", which means string. Now, will convert datatype "Date" column into datetime format using "pnd.to_datetime(data_frame[''], format '%y%m%d')" function. import pandas Initializing nested list with Data Dataset_list [['20210612', 54000, '20210812'], ['20210814', 65000, '20210614'], ['20210316', 71500, '20210316'], ['20210519', 45000, '20210119'], ['20210221', 98000, '20210221'], ['20210124', 23000, '20210724'], ['20210929', 12000, '20210924']] creating pandas dataframe data_frame pnd.DataFrame( Dataset_list, columns ['Treatment_starting_Date', 'Patients Number', 'Treatment_ending_Date']) Print dataframe print ("The data print (data_frame) converting multiple columns DataFrame into datetime format data_frame['Treatment_starting_Date'] pnd.to_datetime( data_frame['Treatment_starting_Date'], format '%Y%m%d' data_frame['Treatment_ending_Date'] pnd.to_datetime( data_frame['Treatment_ending_Date'], format '%Y%m%d' Here, checking data type 'Date' column print (data_frame.dtypes) Output: data Treatment_starting_Date Patients Number Treatment_ending_Date 20210612 54000 20210812 20210814 65000 20210614 20210316 71500 20210316 20210519 45000 20210119 20210221 98000 20210221 20210124 23000 20210724 20210929 12000 20210924 Treatment_starting_Date datetime64[ns] Patients Number int64 Treatment_ending_Date datetime64[ns] dtype: object above output, datatype "Treatment_starting_Date" "Treatment_ending_Date" been changed datetime format using "pnd.to_datetime()" function. Conclusion this tutorial, learned different methods converting column type Pandas DataFrame from string datetime Python. Next TopicPython wxPython Module prev next