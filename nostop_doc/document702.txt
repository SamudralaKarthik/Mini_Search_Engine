next prev Arguments Parameters Python programming language, Arguments Parameters words that cause confusion programmers. Sometimes, these words used interchangeably, actually, they have different similar meanings. This tutorial explains differences between these words dives deep into concepts with examples. Both arguments parameters variables/ constants passed into function. difference that: Arguments variables passed function function call. Parameters variables used function definition. number arguments parameters should always equal except variable length argument list. Example: add_func(a,b): return num1 int(input("Enter value first number: num2 int(input("Enter value second number: print("Sum numbers: ",add_func(num1, num2)) Output: Enter value first number: Enter value second number: numbers: Points grasp from Example: (num1, num2) function call, function definition. (num1, num2) arguments parameters. Mechanism: Observe that above example, num1 num2 values function call with which called function. When function invoked, replaced with num1 num2, operation performed arguments, result returned. Functions written avoid writing frequently used logic again again. write general logic, some variables, which parameters. They belong function definition. When need function while writing program, need apply function logic variables used program, called arguments. then call function with arguments. Types Arguments: Based pass arguments parameters, arguments types: Positional arguments Keyword arguments Given some parameters, respective arguments passed order after other, those arguments called "Positional arguments." arguments passed assigning them their respective parameters function call with significance passing order, they called "Keyword arguments". Example: details(name, age, grade): print("Details student:", name) print("age: age) print("grade: grade) details("Raghav", details("Santhosh", grade Output: Details student: Raghav age: grade: Details student: Santhosh age: grade: Points grasp from Example: First Function Call: function three parameters-name, grade. accepts three arguments. first function call: details("Raghav", arguments passed position-wise parameters, which mean according passed order: name replaced with "Raghav." replaced with grade replaced with first function call, order passing arguments matter. parameters accept arguments given order only. Second Function Call: details("Santhosh", grade Here, first argument, "Santhosh", passed based position name, next arguments passed assignment their respective parameters. observe, here, position didn't matter. Important Point: Keyword arguments must always follow positional arguments. not, Python will raise syntax error: write: details("Santhosh", details("Santhosh", SyntaxError: positional argument follows keyword argument Call Value Call Reference: This most important concept arguments parameters. Based type arguments passed parameters, there methods invoking/ calling functions-Call value Call reference. When values arguments passed into parameters function, values copied into parameters. This method called "Call value". this method, arguments parameters different stored different memory locations. Changes done parameters inside function affect arguments program vice versa. Java functions/ methods follow only Call value. When addresses arguments passed into parameters instead values, this method invoking function called "Call Reference". Both arguments parameters refer same memory location. Changes parameters (pointers) will affect values arguments program. default, language follows Call value, using indirection operator pointers; simulate Call reference. Which Method does Python Follow? Python doesn't Call value Call reference. follows method called "Call assignment". Python, every single entity object. Objects divided into Mutable Immutable objects. What happens Python when assign value variable different from other low-level languages like Java. Suppose, statement: variable, value assigned. Here memory location, saved, name we're giving reference we're making memory location. Now, say: name stops referring memory location with starts refer another memory location with other languages like variables memory locations that store values. Example: #include<stdio.h> main() 	int 	printf("%p", (void*)&a); 	printf("\n%p", (void*)&a); Output: 000000000062FE1C 000000000062FE1C Python: print(id(a)) print(id(a)) Output: 140714950863232 140714950863264 observe: after reassigning value, variable still same memory location, while Python, refers different memory location. (id address Python). that's all. There other types objects too. comes concept Mutable Immutable objects Python. Mutable Immutable Objects Python: Mutable objects those objects/ data types Python that modify after creating them Lists, Dictionaries, Sets Immutable objects, other hand, objects that can't modified once created. int, float, strings, tuples Example: Mutable Objects: [23, print(id(a)) a.append(49) print(id(a)) Output: 2253724439168 2253724439168 Understanding: list immutable, which means alter modify after creating observe, when created with name saved address "2253724439168". Using append(), altered appending another value. still same memory location, meaning same object modified. Immutable Objects: print(id(a)) print(id(a)) Output: 140714950863232 140714950863968 Understanding: This case discussed before tutorial. object immutable, meaning can't modify once created. might wonder still added above code. Observe that object when created same object after adding. Both different memory locations which means they different objects. arguments passed parameters when function invoked? With knowledge about assignment operation Python: passing like "Call Reference" arguments mutable. passing like "Call Value" arguments immutable. Example: details(name, age, grade, marks): marks.append(26) name Styles" print("Details student: print("name: ",name) print("age: ",age) print("grade: grade) print("marks: marks) name "Harry" grade marks [25, details (name, age, grade, marks) print(grade) print(marks) Output: Details student: name: Harry Styles age: grade: marks: [25, 2F1, [25, Understanding: function accepts arguments. Notice arguments grade marks. grade integer value which means immutable. Hence, once created, can't modify follows "Call Value". discussed earlier tutorial, when following Call reference, "Changes done parameters (pointers) will affect values arguments program". Hence, original value grade program modified after concatenating string function definition. case marks, list mutable. follows "Call Reference," which means, "Changes done parameters (pointers) will affect values arguments program". Hence, change reflected original program after appending list function definition. Next TopicAttributes Meaning Python prev next