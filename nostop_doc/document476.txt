next prev Python Queue Module have heard about data structures Python they help programming development work. simple words, that data structure particular which data organized device system effectively later Therefore, data structures become very important while doing programming development-related work. And, want work with data structures, must first understand concepts data structures they work. should also noted that data structures present same, they different types. Therefore, working with two, three, more data structures, possible that they different types. These different types data structures arrange data different format, helpful handle different types data. implement these different types data structures arranging different data types according convenience system working arrange data many forms, such linear form data structures others. most common examples linear data structures that study programming development stack queue. These most famous linear types data structures that arrange data linear form. said that both stack queue linear data structures, actually, they follow different approaches which data inserted removed from them. This approach inserting removing data from given data structure makes stack queue different from each other. There many approaches, programs, libraries, packages that deal with these linear data structures. Many programming languages have different methods work with these data structures arranging data, basic approach these data structures same throughout different methods. talk specifically about Python only, which also strongest programming languages, provides with multiple packages modules which Python programs work with these types data structures. these data structure approaches using Python's in-built module-based functions program handle given data. queue module such Python modules, which implement stack queue data structure approaches programs. Python's queue module helps both Queue, Stack data structure approaches Python programs providing many useful functions. Therefore, will study this queue module Python this tutorial work with learn this module's functions queue stack data structure approaches. Introduction Queue Module Python Python provides queue class functions form package module named queue module. queue Python module that provides multiple in-built functions that performing queue stack data structures operations Python program. have access these functions Queue module Python simply importing queue module given Python program. these functions queue module perform multiple operations related queue stack data structure. also store elements data structure take them FIFO (First First Out) LIFO (Last First Out) manner. These queue data structure functions Python were originally created class functions many other object-oriented programming languages such C++, Java, later these functions were also introduced Python form module. This queue class module created Python that work with queue data structures Python using functions this module. Therefore, becomes very important understand this module this module's functions Python program work with queue stack data structures. will understand implementation this module creating queue stack data structure objects then inserting taking elements from these data structures. Queue Module Python: Installation latest versions Python, queue module comes in-built module, which means this module comes pre-installed with installation Python. Therefore, using latest versions Python, don't need perform kind installation process installing this queue module, directly start working with this module. using latest version Python this tutorial, therefore, will perform installation process this module directly start working with functions this module understand their working. only have following import statement functions queue module given Python program: Importing queue module import queue Therefore, directly proceed with implementation part this module understand implementation functions this module. Queue Module Python: Implementation will understand implementation queue module understand working functions this module using them example programs this part. will perform multiple operations using functions this module, will categorize them under following three categories that will become easy understand implementation part this module: Creating FIFO queue Understanding Overflow Underflow Working with Stack data structure Now, will example program under each category understand working functioning different functions this module. will perform multiple operations under each category using different functions queue module. Look following category-wise operational implementation queue module: Creating Queue FIFO Pattern: this category, will perform following three types functions that associated with creation FIFO queue using functions queue module: Creating Queue Object: want create FIFO queue using queue module function, Queue() function this module. Following syntax using Queue() function this module create FIFO queue object example program: queue.Queue(SizeOfQueue) see, queue module's queue function takes only argument, which maximum size queue. This mandatory argument this function that created queue object fixed size. provide argument inside this function, function will create queue object infinite size. Putting elements queue: After creating queue object (representing queue data structure), next operation perform inserting elements inside queue object. queue module provides with put() function, which elements inside program's created queue object. Following syntax using put() function queue module inserting elements queue object: QueueObject.put('element') see, put() function queue module also takes only argument, this argument element want insert queue object. Getting elements from queue: will also perform operation getting elements from queue object this category. will get() function queue module elements from created queue FIFO manner, should also note that this function also removes element from queue, along with getting elements result. Following syntax using this get() function queue module example programs: QueueObject.get() see, get() function queue module doesn't take mandatory argument returns elements from queue object FIFO pattern. understand implementation three Operations under this category mentioned above, will these functions example program. Look following example program understand implementation these operations that using functions queue module: Example Look following Python program where have created worked with queue object: Importing in-built queue module import queue Creating queue object with maxsize argument queueObject qu.Queue(maxsize Inserting five elements queue integer data type queueObject.put(6) queueObject.put(31) queueObject.put(26) queueObject.put(18) queueObject.put(24) getting elements output print('The first element inserted queue object created: queueObject.get()) print('The second element inserted queue object: queueObject.get()) print('The third element inserted queue object: queueObject.get()) print('The fourth element inserted queue object: queueObject.get()) print('The fifth element inserted queue object: queueObject.get()) Output: first element inserted queue object created: second element inserted queue object: third element inserted queue object: fourth element inserted queue object: fifth element inserted queue object: see, elements from queue object printed output order which they inserted into queue object. That's these three functions queue module create queue object work with Python program. Explanation: First, have imported in-built queue module Python 'qu' example program given above that access work with functions this module. After that, used Queue() module create queue object with name 'queueObject', insert remove elements from this queue object. have defined maximum size queue means this queue object only take elements. After that, used put() function insert elements inside queue object created. Lastly, elements queue object output FIFO pattern using get() function. Along with getting elements from queue object, get() function also removes elements from queue object. Understanding Overflow Underflow this implementation category, will understand overflow Underflow terms related queue data structure Python. name suggests, overflow term referred condition when queue object maximum elements, still, trying insert more element queue. term underflow referred condition when queue object empty still trying remove element from both cases, error will displayed output, therefore, have careful while getting inserting elements into given queue object. Apart from these operations, will also learn maximum size queue object output. understand these operations, will functions queue module example program. Look following example program understand implementation these operations that using functions queue module: Example Look following Python program where checked both underflow overflow condition queue object: Importing in-built queue module import queue Creating queue object with maxsize argument quObject qu.Queue(maxsize Inserting elements queue integer data type quObject.put(6) quObject.put(31) quObject.put(26) quObject.put(18) Checking queue full print('Is given queue object full according maximum size it?: quObject.full()) Inserting more element quObject.put(24) Again, checking that queue full print('Is given queue object full maximum size?: quObject.full()) Checking size queue object quSize quObject.qsize() print('The maximum size created queue object quSize) getting elements from queue object print('The first element inserted queue object created: quObject.get()) print('The second element inserted queue object: quObject.get()) print('The third element inserted queue object: quObject.get()) Checking empty queue object print('Is given queue object empty?: quObject.empty()) Getting more elements from queue print('The fourth element inserted queue object: quObject.get()) print('The fifth element inserted queue object: quObject.get()) Again, Checking empty queue object print('Is given queue object empty now?: quObject.empty()) Output: given queue object full according maximum size it?: False maximum size created queue object given queue object full maximum size?: True first element inserted queue object created: second element inserted queue object: third element inserted queue object: given queue object empty?: False fourth element inserted queue object: fifth element inserted queue object: given queue object empty now?: True see, have checked both Underflow overflow conditions queue object have created program that don't have face error during execution this program. That's these functions queue module work with queue data structures Python programs without having errors. Explanation: After importing queue module 'qu' program, have created queue object with maximum size After that, added three elements queue object verified using full() function whether queue object full not. This will help preventing overflow condition. After that, entered more elements queue object using put() function, again checked queue object full not. Then, used size() function queue module print maximum size queue object. size() function will return total number elements present queue object. After that, removed elements from queue printed them output using get() function. also checked queue object empty not, using empty() function queue class. This function helps check prevent from Underflow condition. Working with Stack Data Structure: Till now, have worked with queue data structure that works FIFO pattern, will work with queue data structures that follow LIFO (Last First Out) pattern storing elements. LIFO pattern queue data structure commonly known stack data structure. things remain same stack data structure have worked FIFO queue data structure. First, have create stack object (LIFO queue object) using lifoqueue() function queue module. Following syntax using lifoqueue() function queue module defining stack data structure object: queue.LifoQueue('Size data structure object') LifoQueue() function program with argument inside function. This function works very similarly Queue() function, which define queue data structure. argument have provide inside this function maximum size stack data structure object. And, don't define size data structure object equal '0', then program will define stack data structure object infinite. will work same manner with stack data structure have worked with FIFO data structure using functions queue module. Using functions this module example program, will perform operations stack data structure object that have performed FIFO queue object. will also check overflow Underflow conditions stack object using same functions queue module. Look following example program understand functions with respect stack data structure object: Example Look following Python program where have performed queue object operations stack data structure: Importing in-built queue module import queue Creating stack data structure object with maxsize argument equal stackObj qu.LifoQueue(maxsize Inserting elements integer data type stack object stackObj.put(12) stackObj.put(5) stackObj.put(23) stackObj.put(6) stackObj.put(31) Checking stack object full overflow condition prevention print('Is given queue object full according maximum size it?: stackObj.full()) Inserting some more elements inside stack object stackObj.put(26) stackObj.put(18) stackObj.put(24) Again, checking that stack object full print('Is given stack object full according maximum size?: stackObj.full()) Checking maximum size stack object after Inserting elements stackSize stackObj.qsize() print('The maximum size stack object created program stackSize) getting elements from stack object LIFO manner print('The last element inserted stack object: stackObj.get()) print('The last second element inserted stack object: stackObj.get()) print('The sixth element inserted stack object: stackObj.get()) print('The fifth element inserted stack object: stackObj.get()) Checking that stack object become empty print('Is given stack object have become empty?: stackObj.empty()) Getting more elements from stack object print('The fourth element inserted stack object: stackObj.get()) print('The third element inserted stack object: stackObj.get()) print('The second element inserted stack object: stackObj.get()) print('The first element inserted stack object created: stackObj.get()) Again Checking empty stack object print('Is given stack object program empty now?: stackObj.empty()) Output: given queue object full according maximum size it?: False given stack object full according maximum size?: True maximum size stack object created program last element inserted stack object: last-second element inserted stack object: sixth element inserted stack object: fifth element inserted stack object: given stack object have become empty?: False fourth element inserted stack object: third element inserted stack object: second element inserted stack object: first element inserted stack object created: given stack object program empty now?: True see, operations performed queue object successfully performed stack object, which have also performed example program given above. have performed these operations using same functions that have used examples That's work with queue stack data structures Python program using functions module class queue. Next TopicPython YAML Parser prev next