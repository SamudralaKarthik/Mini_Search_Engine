next prev Nested Decorators Python Python functions first-class objects Python programming language. means that function assigned variable, return another function, and, most importantly, take another function argument. concept Python decorator based these features functions. assumed that have basic understanding Python decorators. aren't familiar with decorators, learn from decorators Python tutorial. this tutorial, will learn about nested decorators chaining decorators. Nested Decorators Python Everything Python object, each object associated class Python. Python decorators used modifying function's behavior without changing actual value. decorator same suggesting itself which decorates something. Nested decorators simple normal decorators. Nesting means placing storing inside other. Therefore, Nested decorators mean applying more than decorator inside function. Python provides facility implement more than decorator function. makes decorators useful reusable building blocks consists several features together. Nested Decorators used? function decorated multiple times. nested decorators also known chaining decorators. create nested decorator, first, need define decorator that want wrap output string with apply them function using syntax (@ sign). Let's understand following syntax. Syntax @function1 @function2 function(name): print(f"{name}") above syntax, there decorators particular approach. These decorators will executed bottom approach i.e. reverse order. take reference construction building where start construction from ground then build floors. Let's understand following example. Example lower(func): wrapper(): return func().lower() return wrapper upper(func): wrapper(): return func().upper() NESTED DECORATORS.' return wrapper @lower @upper message(): return 'This Basic program' print(introduction()) Output: this basic program nested decorator. Explanation above code, have defined decorator functions first, which used wrap output string decorator function 'lower()' 'upper()' function string. have applied decorators message() function using '@' function name. this program, using @upper @lower. executed bottom top. Therefore, string wrapped with 'FOR DECORATOR' first then converted strings into lowercase. Example decorator1(func): wrap(): print("$ func() print("$ return wrap decorator2(func): wrap(): print("# func() print("# return wrap @decorator1 @decorator2 message(): print("Hello") message() Output: Hello Nesting Parameterized Decorators Now, let's implement nested parameterized decorator where method takes arguments. Here, will create parameterized decorators will perform multiplication parameters, second will perform divide. Let's following example. Example multiply(num): mul(func): _mul_method(a, return func(a, return _mul_method return divide(num): div(func): _div_method(a, return func(a, return _div_method return @divide(3) @multiply(3) add(a, return print(add(1, Output: Explanation Let's understand what have done above code have defined multiply decorator that will multiply resulting value given number. same have done with divide decorator. When call add(1, method, goes multiply decorator multiply with here value add(1, 6*3 goes divide decorator; performs divide 18/3 answer. order execution decorators important. change order, answer could different. case because dividing multiplying with same value. Bonus Program multiply(num): mul(func): _mul_method(a, return func(a, return _mul_method return divide(num): div(func): _div_method(a, return func(a, return _div_method return add_multiply_divide(a, @divide(d) @multiply(c) add(m, return return add(a, print(add_multiply_divide(1, Output: above code works same previous examples; decorator could applied inside method well. Conclusion Decorators best features Python programming language. this tutorial, have covered advanced concept decorators. have explained simple parameterized decorators both. Next TopicPython Program Find Difference between Strings prev next