next prev Spinner Widget kivy Library Python Kivy Graphical User Interface tool Python, which platform independent. applications developed using Kivy used IOS, Windows, Linux, Android operating systems. basic Kivy tool developing applications Android operating system also used developing desktop applications. Spinner Widget: users import spinner widget kivy library using following command: from kivy.uix.spinner import Spinner spinner widget used selecting value from set. default state, spinner shows currently selected value. When user clicks spinner, displays dropdown menu that shows other available values from which user select. Like combo-box, spinner widget also used giving multiple-choice option user selecting anyone menu. user also attach callback spinner widget receiving notifications selection value from widget menu. Approach: Step will import kivy Step will import kivyApp Step will import label Step will import Spinner Step will import FLoatlayout Step will minimum version (this step optional) Step will create class: First, will create spinner Then, will attach labels spinners Then, will attach callback Step will return layout/ widget/ class requirements) Step will instance class. Example: from kivy.config import Config this code: means means Here, also True False Config.set('graphics', 'resizable', True) Here, writing program Showing create switch first, will import kivy module import kivy the, base Class Application inherited from class. will refers instance application from kivy.app import app1 this will limit kivy version that means below this kivy version cannot application software kivy.require('1.9.0') Label widget rendering text. from kivy.uix.label import Label Now, will import spinner widget from kivy.uix.spinner import Spinner spin This module consist float layout working with FloatLayout have import first from kivy.uix.floatlayout import FloatLayout Now, will create Application deriving from class class Spinner_example(app1): will define build build_1(self): here, will create floatlayout layout fl() then, will create spinner first, will configure spinner object then layout self.spinnerObject spin(text "Option values ("Option "Option "Option "Option "Option "Option 6"), background_color =(0.784, 0.443, 0.216, self.spinnerObject.size_hint (0.3, 0.2) self.spinnerObject.pos_hint ={'x': .35, 'y':.75} layout.add_widget(self.spinnerObject) return layout return layout; for, Running application __name__ '__main__': Spinner_example().run() Output: Image Image Now, have display which option menu list selected currently. display label just beside spinner widget. Example from kivy.config import Config this code: means means Here, also True False Config.set('graphics', 'resizable', True) Here, writing program Showing create switch first, will import kivy module import kivy the, base Class Application inherited from class. will refers instance application from kivy.app import app1 this will limit kivy version that means below this kivy version cannot application software kivy.require('1.9.0') Label widget rendering text. from kivy.uix.label import Label Now, will import spinner widget from kivy.uix.spinner import Spinner spin This module consist float layout working with FloatLayout have import first from kivy.uix.floatlayout import FloatLayout Now, will create Application deriving from class class Spinner_example(app1): will define build build_1(self): here, will create floatlayout layout fl() then, will create spinner first, will configure spinner object then layout self.spinObject spin(text "Option values ("Option "Option "Option "Option "Option "Option 6"), background_color =(0.784, 0.443, 0.216, self.spinObject.size_hint (0.3, 0.2) self.spinObject.pos_hint ={'x': .35, 'y':.75} layout.add_widget(self.spinObject) self.spinObject.bind(text self.on_spinner_select) will change label information well will label displaying selection from spinner self.spinSelection Label(text "Selected value spinner widegt %self.spinObject.text) layout.add_widget(self.spinSelection) self.spinSelection.pos_hint ={'x': .1, 'y':.3} return layout; call back selection spinner object on_spinner_select(self, spin, text): self.spinSelection.text ("Selected value spinner widget %self.spinObject.text) print('The spinner widget', spin, 'have text', text) __name__ '__main__': Spinner_example().run() Output: Image Image Conclusion this tutorial, have discussed implementing spinner widget kivy library Python application giving option selecting element from menu users. Next TopicNumber Plate Recognition using Python prev next