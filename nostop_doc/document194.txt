next prev Monkey Patching Python Monkey Patching exciting topic Python. Monkey-patching term that refers modifying class module time. simple words, class module's work changed runtime. Let's understand this concept real-life example. When work large project, encounter situation where third-party library working well. attempt revise change) from project. This process known monkey patching Python. Generally, avoided developer. However, part development process. monkey patching, reopen class modify behavior will learn monkey-patching using Python code. know that Python dynamic language; classes mutable, alter them when want. Let's understand following example. Example import inspect class MonkeyPatch: __init__(self, n1): self.n1 add(self, other): return (self.n1 other) obj1 MonkeyPatch(10) obj1.add(20) print(inspect.getmembers(obj1, predicate=inspect.ismethod)) Output: [('__init__', ('add', above code, there methods above class __init__ addition. called add() method passed argument. retuned have defined MultiPatch class with add() method. Suppose method MonkeyPatch class. divide(self, n2): 	return(self.n1 self.n2) divide() method MonkeyPatch class, simply assign divide function MonkeyPatch. MonkeyPatch.divide divide newly created function would available MonkeyPatch class. Let's following example. inspect.getmembers(obj, predicate=inspect.ismethod) Output: [('__init__', ('subtraction', Dynamic Behavior Function Let's another example understand dynamic behavior better way. Example new_monk.py class hello(self): print hello() function being called") have created module which will below code change behavior hello() function runtime. import new_monk monkey_f(self): print ("monkey_f() being called") replacing address "func" with "monkey_f" new_monk.A.hello monkey_f new_monk.A() calling function "func" whose address replaced with function "monkey_f()" obj.hello() Output: monkey_f() being called Memory Address Changing Python provides ctype module, which used change value object memory address management. recommended direct memory manipulation unsafe consistent. Possibly, work with value another. Conclusion have discussed achieve monkey-patching Python. consists disadvantages should used carefully. good application design because distinguishes source code disk observed behavior. Developer confused while debugging. Next TopicPython __call__ method prev next