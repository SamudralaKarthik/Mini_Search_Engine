next prev Python Time Module With help practical examples, will study Python time module different functions supplied this module this tutorial. name suggests, Python time module enables working with time Python. provides features like obtaining current datetime functionality delay programme's execution. must import this module before begin using functionality. Importing time module necessary install Python time module outside because included standard utility module Python. Using import command, import quickly. import time Python Time Seconds Floating Point Number first thing that time.time() function returns number passed seconds since epoch. time returned this function floating data type account fractional seconds. Code Python program using time() function time module return seconds passed after epoch Importing time module from time import time print(time()) Output: 1659877305.6220002 reference point determine epoch vary considerably your machine. Therefore, might different answer. There several benefits measuring time seconds: floating point compute time separation between points. float kept data transfer readily serialised, which means will stay unchanged other side. However, there situations when would wish view current time displayed string object. achieve this feeding number seconds returned time() function into time.ctime() function. time.ctime() functionality time module accepts time seconds input calculates time those seconds before returning 24-character time string object. Time computed until current moment there argument. Code Python program time string object from seconds passed function Importing module import time getting current time using ctime function passed with number seconds since epoch current time.ctime(1659877305.6220002) print("Current time: current) Output: Current time: 18:31:45 2022 Epoch discovered last section that could datetime Python floating point object that indicates amount time that passed from start epoch. describe epoch specific moment time acts reference point calculate time future. method chronological notation that uses specific date foundation Here, it's crucial understand that, while working with Python datetime, you're thinking about time period denoted reference point. This reference point referred epoch computing. Therefore, epoch serves baseline gauging progression time. instance, depict midnight April 2022, epoch. Then 86400 seconds must have passed since epoch find time midnight April 2022 There seconds minute, minutes hour, hours day. Therefore, manually calculate seconds passed between times. Code print(60 Output: 86400 Remembering that still depict time before epoch crucial, result will negative this case. Using epoch April 2022, might depict midnight April 2022, -86400 seconds. Generally, January 1970, frequently used epoch, only one. Various filesystems, operating systems, APIs occasionally employ various epochs. UNIX systems specify epoch January 1970. other hand, Win32 defines epoch January 1601. determine epoch your system, time.gmtime() function time module: Code Python program know epoch your system Importing module import time from datetime import datetime epoch time.gmtime(0) print(epoch) Converting struct_time object standard datetime print(datetime.fromtimestamp(time.mktime(epoch))) Output: time.struct_time(tm_year=1970, tm_mon=1, tm_mday=1, tm_hour=0, tm_min=0, tm_sec=0, tm_wday=3, tm_yday=1, tm_isdst=0) 1970-01-01 00:00:00 from above program that epoch displayed using gmtime() function January 1970 system there 86400 seconds day, this implies that date January 1970 represented 86400 seconds since system's epoch. Note: Although will negative, still express time before epoch seconds. instance, will -86400 seconds represent December 1969. Delaying Execution Programs Execution delayed using time.sleep() method. this function halt execution program time specified arguments. Code Python program Delay execution time program using sleep() function Python time module. Importing time module import time time.ctime() print(b) range(5): using sleep() function halt execution time.sleep(6) print(i*2) time.ctime() print(e, flush True) Output: 07:32:46 2022 07:33:16 2022 time.struct_time Class According description struct time class time module Python, aids accessing local time, mostly non-epochal timestamps. output often namedtuple object, where values determined name index attributes. following list includes many characteristics linked struct_time object: Index Attribute Name Values Attributes tm_year 0000, ..., 9999 tm_mon ..., tm_mday ..., tm_hour ..., tm_min ..., tm_sec ..., tm_wday ..., where Monday tm_yday ..., 364, 365, tm_isdst This class provides many functions; look some them. time.localtime() Method struct time object returned localtime() function representing local time. accepts parameter number seconds that have passed since epoch. current time seconds using time() function, which passed localtime() function. gave struct_time object which converted into standard datetime. Code Python program local time importing time module import time from datetime import datetime This function will convert current time represented seconds that have passed since epoch struct_time object Local time current time.localtime( time.time() print(current) Converting struct_time object standard datetime print(datetime.fromtimestamp(time.mktime(current))) Output: time.struct_time(tm_year=2022, tm_mon=8, tm_mday=7, tm_hour=23, tm_min=0, tm_sec=57, tm_wday=6, tm_yday=219, tm_isdst=0) 2022-08-07 23:00:57 time.mktime() Method inverse time.localtime() function time.mktime() function. time represented time.struct_time object localtime() function converted into number seconds passed since epoch using time.mktime() function. OverflowError ValueError will generated input time cannot interpreted valid time (this depends whether invalid time value passed function underlying libraries). Platform-specific limitations apply oldest date which function produce time. Code Python program convert struct_time object into numbers seconds passed since epoch using time module Importing time module import time Constructing struct_time object struct_time time.gmtime( time.time() print("Struct_time object: \n", struct_time) Converting struct_time object into local time will expressed number seconds passed since epoch using time.mktime() function time_seconds time.mktime(struct_time) Printing local time number seconds passed since epoch print("Local time seconds): \n", time_seconds) Output: Struct_time object: time.struct_time(tm_year=2022, tm_mon=8, tm_mday=7, tm_hour=17, tm_min=38, tm_sec=29, tm_wday=6, tm_yday=219, tm_isdst=0) Local time seconds): 1659874109. time.strftime() Method function time.strftime() converts namedtuple struct time object representing time provided gmtime() localtime() function into string object format specified argument. specified, localtime() value current time used. format argument must string. element outside acceptable range, ValueError raised. Code Python program convert time.struct_time object into string object using strftime() function Importing time module from time import strftime, gmtime, time using standard format showing time string strftime("%a, %H:%M:%S",gmtime(time())) print(string) Output: Sun, 17:48:21s format string contain following commands. strftime() output replaces them with specified characters displays them. Directive Meaning This directive will return locale weekday abbreviated form. This directive will return locale weekday complete form. This directive will return locale month shortened form. This directive will return locale month full form. This format will return appropriate locale date time. This format represents month form corresponding decimal number 31]. This format represents time form 24-hour format decimal number [01, 24]. This format means time 12-hour format decimal number [01, 12]. This format represents year's decimal numbers [01, 366]. This will represent month decimal number [01, 12]. This will represent minutes decimal number [00, 59]. This format will give corresponding locale This represents seconds decimal number [00, 61]. This format will return year's week decimal number ranging from [00, 53]. convention uses Sunday first week, every year that comes before first Sunday regarded being week This format returns locale week decimal number ranging from convention uses Sunday week. This format returns year's week number decimal number ranging from [00, 53]. convention uses Monday first week, week year defined days before first Monday. This will return correct date representation according locale date. This will return proper time representation according locale used. This format will return year decimal number ranging from [00,99]. This format returns year decimal century. This format represents time zone offset, where stands hour digits decimal number stands minutes decimal number [-23:59, +23:59]. range signifies positive negative difference time from UTC/GMT. This format returns name time zone. will return actual symbol. time.asctime() Method convert tuple struct time object expressing time returned functions time.gmtime() time.localtime() string object following format, time.asctime() function: Month Date Hour:Mid:Second Year Code Python program convert tuple time.struct_time object into string object representing time standard form importing time module import time seconds time.time() Getting epoch form struct_time object object_ time.gmtime(seconds) print("Struct_time object: object_) Converting struct_time object into string object Function will represent time form 'Day Month Date Hour:Min:Sec Year' using time.asctime() function time_string time.asctime(object_) print("Time string: time_string) Getting local time struct_time object using localtime() function object_ time.localtime(seconds) print("Struct_time object: object_) Converting struct_time object into string object time_string time.asctime(object_) print("Time string: time_string) Output: Struct_time object: time.struct_time(tm_year=2022, tm_mon=8, tm_mday=8, tm_hour=12, tm_min=24, tm_sec=37, tm_wday=0, tm_yday=220, tm_isdst=0) Time string: 12:24:37 2022 Struct_time object: time.struct_time(tm_year=2022, tm_mon=8, tm_mday=8, tm_hour=17, tm_min=54, tm_sec=37, tm_wday=0, tm_yday=220, tm_isdst=0) Time string: 17:54:37 2022 this tutorial, learned functions time module Python provides. need remember these functionalities. need first import library into program. More information about module obtained from documentation module. Next TopicSklearn Linear Regression Example prev next