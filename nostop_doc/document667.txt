next prev Calculator using Tkinter Python following tutorial, will learn build calculator with help Tkinter library Python programming language. before started, understand what Calculator works. What Calculator? calculator tool that allows users calculate person's specific based their given date birth. There various methods calculating person's depending upon culture they belong However, most western cultures utilize system wherein person lived years months, their will years. This statement implies that person's increased year their birthday. Understanding working Calculator definition from Oxford dictionary says that "Age" length time that person lived, thing existed. calculation method includes comparing date birth person with date which required calculated. Thus, person's equal date birth subtracted from given date. following equation states same. Person' Given Date Date Birth (D.O.B.) following steps that allow calculate someone's from their date birth given date: Step Firstly, will find difference between specified year birth year, i.e., Specified Year Birth Year. Note that fully completed year considered. Step Secondly, will estimate number remaining months. Since only consider fully completed year, certain number months will left that require estimated. Step Lastly, will consider remaining days. This provides with final person. expressed years, months, days. Python Program Calculate create Python program calculate current date. will define function that will calculate given data. will later modify this function application build later this tutorial with help Python Tkinter library. Example: importing date module from datetime package from datetime import date defining function calculate calculate_age(birthday): using today() retrieve today's date stored variable today date.today() bool representing today's day, month precedes birth day, month day_check ((today.month, today.day) (birthday.month, birthday.day)) calculating difference between current year birth year year_diff today.year birthday.year difference years enough. must subtract based today precedes birthday's month/day from year difference correct. will subtract 'day_check' boolean from 'year_diff'. boolean value will converted from True False under hood. age_in_years year_diff day_check calculating remaining months remaining_months abs(today.month birthday.month) calculating remaining days remaining_days abs(today.day birthday.day) printing users print("Age:", age_in_years, "Years", remaining_months, "Months and", remaining_days, "days") main function __name__ "__main__": printing opening statement print("Simple Calculator") asking user enter birth year, birth month, birth date birthYear int(input("Enter birth year: birthMonth int(input("Enter birth month: birthDay int(input("Enter birth day: converting integer values date format using date() method dateOfBirth date(birthYear, birthMonth, birthDay) calling function calculate person calculate_age(dateOfBirth) Output: Simple Calculator Enter birth year: 2003 Enter birth month: Enter birth day: Age: Years Months days Explanation: have imported date module from datetime library above code snippet. have then defined function calculate_age() that accepts argument 'birthday'. Within this function, have retrieved current date using today() method date module. have then checked whether current month less than month birth stored Boolean result variable day_check. have then calculated difference between current year birth year. However, this difference enough. correct, must subtract based whether today precedes birthday month from year difference. This done subtracting Boolean value stored day_check from value stored year_diff variable. Note that Boolean value will converted from True False under operation. have also calculated remaining months subtracting birth month from current month stored absolute value variable. have done same calculate remaining days. have then printed calculated user. have then defined main function. Within this function, have printed opening statement user. have then asked user input year, month, day. have then stored input data date format using date() method. last, have called function calculate person. start building calculator using Tkinter Python programming language. Project Prerequisites order start building GUI-based Calculator project Python, will require following libraries. Tkinter This library will allow create window. Datetime This library will allow work with dates. Since these libraries come pre-installed with Python, there need install them separately. Building Calculator using Tkinter Python procedure building Calculator Python divided into several steps better understanding. steps will need execute follows: Step will start importing required modules. Step will then define some functions manipulate data application modify function calculate that defined earlier. Step will then create main window application. Step will widgets window event triggers. understand these steps detail. Importing required modules First, will import necessary modules help build this project. These modules include tkinter module graphical user interface application date class from datetime module work with dates. consider following snippet code illustrating same. File: ageCalci.py importing required modules from tkinter import importing widgets methods from tkinter from tkinter import messagebox importing messagebox module from tkinter from datetime import date importing date module from datetime Explanation: above code snippet, have imported widgets modules from tkinter module. have then imported messagebox module from tkinter. last, imported date class from datetime module. Defining Functions manipulate date application Once have imported required modules project, time start defining some necessary functions that will allow manipulate data provided entry fields calculate resultant age. These functions include setting different date, setting current date, resetting entries, checking errors, calculating age. understand what exactly these functions will code their implementation. Function Different Date This function will allow configure disabled entry fields' state normal given date that user manually enter date their preferences calculate that particular period. consider following snippet illustrating same. File: ageCalci.py --------------------- Defining Functions --------------------- function different date other than current different_date(): configuring state entry fields normal given date given_year_field.config(state "normal") given_month_field.config(state "normal") given_day_field.config(state "normal") temporarily disabling different date button different_date_button.config(state "disabled") configuring state current date button normal current_date_button.config(state "normal") Explanation: above code snippet, have defined function different_date(). Within this function, have used config() method state parameter entry fields given date along with state current_date_button button normal different_date_button disabled. This will allow user enter data these fields manually. Function Current Date This function will allow temporarily disable state entry fields back normal given date row, setting current date fields that user calculate current age. consider following snippet illustrating same. File: ageCalci.py function current date entry field current_date(): temporarily disabling entry fields given date given_year_field.config(state "disabled") given_month_field.config(state "disabled") given_day_field.config(state "disabled") configuring state different date button normal different_date_button.config(state "normal") temporarily disabling current date button current_date_button.config(state "disabled") setting values objects StringVar() class current date given date given_year_var.set(current_year) given_month_var.set(current_month) given_day_var.set(current_day) Explanation: above code snippet, have defined function different_date(). Within this function, have used config() method state parameter entry fields given date along with state current_date_button button disabled different_date_button normal. have used set() method current date these fields. Function Reset Entries This function will allow user delete input data calculated result configurations back normal. consider following snippet code illustrating same. File: ageCalci.py function reset entries reset_entries(): using delete() method delete entries date birth birth_year_field.delete(0, END) birth_month_field.delete(0, END) birth_day_field.delete(0, END) temporarily disabling entries given date given_year_field.config(state "disabled") given_month_field.config(state "disabled") given_day_field.config(state "disabled") configuring state different date button normal different_date_button.config(state "normal") disabling current date button current_date_button.config(state "disabled") setting values objects StringVar() class current date given date given_year_var.set(current_year) given_month_var.set(current_month) given_day_var.set(current_day) setting value object StringVar() class empty result age_var.set("") setting focus birth year field birth_year_field.focus_set() Explanation: above code snippet, have used delete() method delete input data entries fields date birth row. have then used config() method value state parameters entry fields given date along with current_date_button button disabled different_date_button button normal. have then values objects StringVar() class current date displayed them entry fields given date row. have also value another object StringVar() class, displaying result empty string result row. have then used focus_set() method focus birth_year_field field. Reset Function will define another function called when user clicks RESET button. This function will reset entries display message showing success message. consider following snippet code illustrating same. File: ageCalci.py reset function reset(): calling reset_entries() function reset_entries() displaying message display success message mb.showinfo("Reset Entries", "All Entries reset successfully!") Explanation: above snippet code, have defined function reset(). Within function, have called reset_entries() function. have also displayed message showing success message using showinfo() method messagebox module. Function Check Errors This function will check whether entry field empty returns message displaying error. following snippet code demonstrating same. File: ageCalci.py function check errors entering data check_for_errors(): field empty return message display error (birth_year_field.get() birth_month_field.get() birth_day_field.get() given_year_field.get() given_month_field.get() given_day_field.get() ""): displaying message display error mb.showerror("Input Error", "Invalid Format! Please Again.") calling reset_entries() function reset_entries() returning return Explanation: above code snippet, have defined function check_for_errors(). Within this function, have used if-conditional statement check entry field empty. have used showerror() method messagebox module display error. then called reset_entries() method reset entry fields returned Function Calculate This function will allow user calculate person. This function will retrieve information from filled entry field check whether input data date and, calculate same. consider following snippet code illustrating same. File: ageCalci.py function calculate calculate_age(): calling check_for_errors() function storing result variable check_for_errors() checking value variable equal return value return else: retrieving values stored objects StringVar() class integer data types birth_year int(year_var.get()) birth_month int(month_var.get()) birth_day int(day_var.get()) given_year int(given_year_var.get()) given_month int(given_month_var.get()) given_day int(given_day_var.get()) using try-except method try: using date() method check whether input data actual date format birth_date date(birth_year, birth_month, birth_day) given_date date(given_year, given_month, given_day) checking birth date less than equal given date (birth_date given_date): calculating days subtracting birth date from given date days_left given_date birth_date calculate years int(abs((days_left.total_seconds()) (365.242 3600))) setting result string value object StringVar() class age_var.set(str(age) Years Old") else: displaying error birth date exceeds given date mb.showerror("Input Error", "Birth Date exceeds Given Date.") calling reset_entries() function reset data reset_entries() raising exception ValueError except ValueError: displaying error entered date range mb.showerror("Out Range", "Entered Date range.") calling reset_entries() function reset data reset_entries() Explanation: above code snippet, have defined function calculate_age(). Within this function, have called check_for_errors() function stored returned value variable, val. then check value equal using if-else conditional statement. not, have retrieved entered data using get() method stored values integer data type. then used try-except method check entered dates were correct. have also checked birth date less than equal given date calculated same. calculate age, subtracted birth date from given date stored days between time variable, days_left. have then divided total seconds time (365.242 3600) stored resultant value integer data type. have then used set() method String value object StringVar() class. birth date exceeds given date, have displayed error using showerror() method messagebox module called reset_entries() function reset filled entries. birth date given date date format, have raised exception where have displayed showerror() method messagebox module display error entered date range called reset_entries() function again. Creating main window application will create main window application. This window will display widgets will create later this tutorial allow interact with them that calculate anyone's with help graphical user interface. easily create such window using Tk() class. will also title, size, position, background color using some methods offered this class. consider following snippet code illustrating implementation Tk() class. File: ageCalci.py main function __name__ "__main__": creating object Tk() class gui_root Tk() setting title application gui_root.title("Age Calculator JAVATPOINT") setting geometry application gui_root.geometry("600x450+650+250") disabling resizable option gui_root.resizable(0, configuring background color application gui_root.config(bg "#FEECCF") setting icon application gui_root.iconbitmap('calendar_img.ico') Explanation: above code snippet, have created object Tk() class tkinter module gui_root. then used title() method with gui_root application title. have also used geometry() method size position application. have then used resizable() method values parameters zeroes disable resizable option better have utilized configured background color application using config() method value parameter "#FEECF". last, have used iconbitmap() method icon application. Adding Widgets main window setting event triggers Once main window created, time different widgets perform different functions defined earlier. These widgets include different labels, entry fields, buttons. will also some frames provide well-defined structures widgets mentioned above. implementation these widgets following snippet code. Adding Frames First, will start adding some frames application since these frames will provide structure other widgets. will Frame() widget create frames place them window with help pack() method. consider following snippet code demonstrating same. File: ageCalci.py creating frames provide better structure other widgets header_frame Frame(gui_root, "#FEECCF") entry_frame Frame(gui_root, "#FEECCF") result_frame Frame(gui_root, "#FEECCF") using pack() method position these frames window header_frame.pack(pady entry_frame.pack(pady result_frame.pack(pady Explanation: above code snippet, have created several frames using Frame() widget tkinter module. have value their master parameters gui_root, object Tk() class, main window. have also background color #FEECCF specifying values their parameters. last, have used pack() method specifying padding y-axis start adding widgets these frames. Adding widgets First Frame header_frame will label this frame display heading application. will Label() widget create label position frame with help pack() method. consider following snippet code demonstrating same. File: ageCalci.py --------------------- Frame --------------------- creating label display heading application header_label Label( header_frame, text "AGE CALCULATOR", font ("verdana", "20", "bold"), "#FEECCF", "#C8871E" using pack() method position label window header_label.pack(fill "both", pady Explanation: above snippet code, created label using Label() widget value master parameter header_frame frame created earlier. have also text, font, background, foreground color. last, used pack() method position label window. Adding widgets Second Frame entry_frame will widgets second frame. These widgets will include labels display important texts, entry fields enter data, some buttons manipulate these entry fields. will Label() widget create labels, Entry() widget create entry fields, Button() widget create buttons. will also grid() method these widgets grid format window. consider following snippet code illustrating same. File: ageCalci.py --------------------- Frame --------------------- creating labels display information like year, month, day, date birth given date year_label Label( entry_frame, text "Year", font ("verdana", "10"), "#FEECCF", "#000000" month_label Label( entry_frame, text "Month", font ("verdana", "10"), "#FEECCF", "#000000" day_label Label( entry_frame, text "Day", font ("verdana", "10"), "#FEECCF", "#000000" dob_label Label( entry_frame, text "Date Birth:", font ("verdana", "10", "bold"), "#FEECCF", "#000000" given_date_label Label( entry_frame, text "Given Date:", font ("verdana", "10", "bold"), "#FEECCF", "#000000" using grid() method position these labels grid format window year_label.grid(row column padx pady month_label.grid(row column padx pady day_label.grid(row column padx pady dob_label.grid(row column padx pady sticky given_date_label.grid(row column padx pady sticky storing current date details like year, month, current_year date.today().year current_month date.today().month current_day date.today().day creating objects StringVar() class year_var StringVar(entry_frame) month_var StringVar(entry_frame) day_var StringVar(entry_frame) given_year_var StringVar(entry_frame) given_month_var StringVar(entry_frame) given_day_var StringVar(entry_frame) setting initial values object year_var.set("") month_var.set("") day_var.set("") given_year_var.set(current_year) given_month_var.set(current_month) given_day_var.set(current_day) creating some entry fields user input data birth_year_field Entry( entry_frame, width font ("verdana", "10"), textvariable year_var, justify CENTER, relief GROOVE birth_month_field Entry( entry_frame, width font ("verdana", "10"), textvariable month_var, justify CENTER, relief GROOVE birth_day_field Entry( entry_frame, width font ("verdana", "10"), textvariable day_var, justify CENTER, relief GROOVE given_year_field Entry( entry_frame, width font ("verdana", "10"), textvariable given_year_var, justify CENTER, relief GROOVE, state "disabled" given_month_field Entry( entry_frame, width font ("verdana", "10"), textvariable given_month_var, justify CENTER, relief GROOVE, state "disabled" given_day_field Entry( entry_frame, width font ("verdana", "10"), textvariable given_day_var, justify CENTER, relief GROOVE, state "disabled" using grid() method positions these entries fields grid manner window birth_year_field.grid(row column padx pady birth_month_field.grid(row column padx pady birth_day_field.grid(row column padx pady given_year_field.grid(row column padx pady given_month_field.grid(row column padx pady given_day_field.grid(row column padx pady creating buttons manipulate entry fields data different_date_button Button( entry_frame, text "Different Date?", width font ("verdana", "10"), relief GROOVE, command different_date, "#FFB84B", "#000000", disabledforeground "#907957" current_date_button Button( entry_frame, text "Current Date", width font ("verdana", "10"), relief GROOVE, state "disabled", command current_date, "#FFB84B", "#000000", disabledforeground "#907957" using grid() method position these buttons grid format window different_date_button.grid(row column padx pady current_date_button.grid(row column padx pady Explanation: above snippet code, have created some labels displaying details like year, month, day, date birth, given date using Label() widget. have value master parameters these widgets entry_frame, frame created earlier. have then used grid() method position labels grid manner window. then used today() method date module stored year, month, different variables. have then created some objects StringVar() class setting master parameters entry_frame frame, used set() method initial values display entry fields. then used Entry() widget create entry fields users could enter requested information. have again master parameters these widgets entry_frame textvariable parameters objects StringVar() class. have then used grid() method positions these entry fields window grid format. then used Button() widget created buttons allow manipulate entry fields. have again values master parameters these widgets entry_frame command parameters functions defined earlier. last, have used grid() method positions these buttons grid format window. have also configured these widgets' font style size, background, foreground color. Adding widgets Third Frame result_frame will widgets third frame. These widgets will include labels display result, some buttons call functions reset entries calculate age. will Label() widget create labels, Button() widget create buttons. will also grid() method these widgets grid format window. consider following snippet code illustrating same. File: ageCalci.py --------------------- Frame --------------------- creating object IntVar() class age_var StringVar(result_frame) setting initial value object age_var.set("") creating label display result statements footer_label Label( result_frame, text "The Calculated is:", font ("verdana", "10", "bold"), "#FEECCF", "#C8871E" age_label Label( result_frame, textvariable age_var, font ("verdana", "10", "bold"), "#FEECCF", "#1FA73B" using grid() method position these labels grid manner window footer_label.grid(row column padx pady sticky age_label.grid(row column padx pady sticky creating buttons reset entries yield result reset_button Button( result_frame, text "Reset Entries", width font ("verdana", "10"), relief GROOVE, command reset, "#FF0000", "#FFFFFF" calculate_button Button( result_frame, text "Calculate Age", width font ("verdana", "10"), relief GROOVE, command calculate_age, "#00FF00", "#000000" using grid() method position these buttons grid manner window reset_button.grid(row column padx pady calculate_button.grid(row column padx pady Explanation: above snippet code, have created object StringVar() class used set() method initial value empty string display label. have then created labels display result statement, resultant with help Label() widget their master parameters result_frame, frame defined earlier. have then used grid() method position these labels window grid format. have also textvariable parameter label object StringVar() class display result. have then created buttons using Button() widget call functions reset entries calculate age. last, have used grid() method positions these buttons grid format window. have also configured these widgets' font style size, background, foreground color. Running application will mainloop() method Tk() class application. following snippet code illustrating same. File: ageCalci.py using mainloop() method application gui_root.mainloop() Explanation: above code snippet, have used mainloop() method application. that project code complete, time save file following command execute project program. Syntax: python ageCalci.py Before result, consider complete project code 'Age Calculator using Tkinter' program. Complete Project Code following complete project code 'Age Calculator with GUI' program. File: ageCalci.py importing required modules from tkinter import importing widgets methods from tkinter from tkinter import messagebox importing messagebox module from tkinter from datetime import date importing date module from datetime --------------------- Defining Functions --------------------- function different date other than current different_date(): configuring state entry fields normal given date given_year_field.config(state "normal") given_month_field.config(state "normal") given_day_field.config(state "normal") temporarily disabling different date button different_date_button.config(state "disabled") configuring state current date button normal current_date_button.config(state "normal") function current date entry field current_date(): temporarily disabling entry fields given date given_year_field.config(state "disabled") given_month_field.config(state "disabled") given_day_field.config(state "disabled") configuring state different date button normal different_date_button.config(state "normal") temporarily disabling current date button current_date_button.config(state "disabled") setting values objects StringVar() class current date given date given_year_var.set(current_year) given_month_var.set(current_month) given_day_var.set(current_day) function reset entries reset_entries(): using delete() method delete entries date birth birth_year_field.delete(0, END) birth_month_field.delete(0, END) birth_day_field.delete(0, END) temporarily disabling entries given date given_year_field.config(state "disabled") given_month_field.config(state "disabled") given_day_field.config(state "disabled") configuring state different date button normal different_date_button.config(state "normal") disabling current date button current_date_button.config(state "disabled") setting values objects StringVar() class current date given date given_year_var.set(current_year) given_month_var.set(current_month) given_day_var.set(current_day) setting value object StringVar() class empty result age_var.set("") setting focus birth year field birth_year_field.focus_set() reset function reset(): calling reset_entries() function reset_entries() displaying message display success message mb.showinfo("Reset Entries", "All Entries reset successfully!") function check errors entering data check_for_errors(): field empty return message display error (birth_year_field.get() birth_month_field.get() birth_day_field.get() given_year_field.get() given_month_field.get() given_day_field.get() ""): displaying message display error mb.showerror("Input Error", "Invalid Format! Please Again.") calling reset_entries() function reset_entries() returning return function calculate calculate_age(): calling check_for_errors() function storing result variable check_for_errors() checking value variable equal return value return else: retrieving values stored objects StringVar() class integer data types birth_year int(year_var.get()) birth_month int(month_var.get()) birth_day int(day_var.get()) given_year int(given_year_var.get()) given_month int(given_month_var.get()) given_day int(given_day_var.get()) using try-except method try: using date() method check whether input data actual date format birth_date date(birth_year, birth_month, birth_day) given_date date(given_year, given_month, given_day) checking birth date less than equal given date (birth_date given_date): calculating days subtracting birth date from given date days_left given_date birth_date calculate years int(abs((days_left.total_seconds()) (365.242 3600))) setting result string value object StringVar() class age_var.set(str(age) Years Old") else: displaying error birth date exceeds given date mb.showerror("Input Error", "Birth Date exceeds Given Date.") calling reset_entries() function reset data reset_entries() raising exception ValueError except ValueError: displaying error entered date range mb.showerror("Out Range", "Entered Date range.") calling reset_entries() function reset data reset_entries() main function __name__ "__main__": creating object Tk() class gui_root Tk() setting title application gui_root.title("Age Calculator JAVATPOINT") setting geometry application gui_root.geometry("600x450+650+250") disabling resizable option gui_root.resizable(0, configuring background color application gui_root.config(bg "#FEECCF") setting icon application gui_root.iconbitmap('calendar_img.ico') creating frames provide better structure other widgets header_frame Frame(gui_root, "#FEECCF") entry_frame Frame(gui_root, "#FEECCF") result_frame Frame(gui_root, "#FEECCF") using pack() method position these frames window header_frame.pack(pady entry_frame.pack(pady result_frame.pack(pady --------------------- Frame --------------------- creating label display heading application header_label Label( header_frame, text "AGE CALCULATOR", font ("verdana", "20", "bold"), "#FEECCF", "#C8871E" using pack() method position label window header_label.pack(fill "both", pady --------------------- Frame --------------------- creating labels display information like year, month, day, date birth given date year_label Label( entry_frame, text "Year", font ("verdana", "10"), "#FEECCF", "#000000" month_label Label( entry_frame, text "Month", font ("verdana", "10"), "#FEECCF", "#000000" day_label Label( entry_frame, text "Day", font ("verdana", "10"), "#FEECCF", "#000000" dob_label Label( entry_frame, text "Date Birth:", font ("verdana", "10", "bold"), "#FEECCF", "#000000" given_date_label Label( entry_frame, text "Given Date:", font ("verdana", "10", "bold"), "#FEECCF", "#000000" using grid() method position these labels grid format window year_label.grid(row column padx pady month_label.grid(row column padx pady day_label.grid(row column padx pady dob_label.grid(row column padx pady sticky given_date_label.grid(row column padx pady sticky storing current date details like year, month, current_year date.today().year current_month date.today().month current_day date.today().day creating objects StringVar() class year_var StringVar(entry_frame) month_var StringVar(entry_frame) day_var StringVar(entry_frame) given_year_var StringVar(entry_frame) given_month_var StringVar(entry_frame) given_day_var StringVar(entry_frame) setting initial values object year_var.set("") month_var.set("") day_var.set("") given_year_var.set(current_year) given_month_var.set(current_month) given_day_var.set(current_day) creating some entry fields user input data birth_year_field Entry( entry_frame, width font ("verdana", "10"), textvariable year_var, justify CENTER, relief GROOVE birth_month_field Entry( entry_frame, width font ("verdana", "10"), textvariable month_var, justify CENTER, relief GROOVE birth_day_field Entry( entry_frame, width font ("verdana", "10"), textvariable day_var, justify CENTER, relief GROOVE given_year_field Entry( entry_frame, width font ("verdana", "10"), textvariable given_year_var, justify CENTER, relief GROOVE, state "disabled" given_month_field Entry( entry_frame, width font ("verdana", "10"), textvariable given_month_var, justify CENTER, relief GROOVE, state "disabled" given_day_field Entry( entry_frame, width font ("verdana", "10"), textvariable given_day_var, justify CENTER, relief GROOVE, state "disabled" using grid() method positions these entries fields grid manner window birth_year_field.grid(row column padx pady birth_month_field.grid(row column padx pady birth_day_field.grid(row column padx pady given_year_field.grid(row column padx pady given_month_field.grid(row column padx pady given_day_field.grid(row column padx pady creating buttons manipulate entry fields data different_date_button Button( entry_frame, text "Different Date?", width font ("verdana", "10"), relief GROOVE, command different_date, "#FFB84B", "#000000", disabledforeground "#907957" current_date_button Button( entry_frame, text "Current Date", width font ("verdana", "10"), relief GROOVE, state "disabled", command current_date, "#FFB84B", "#000000", disabledforeground "#907957" using grid() method position these buttons grid format window different_date_button.grid(row column padx pady current_date_button.grid(row column padx pady --------------------- Frame --------------------- creating object IntVar() class age_var StringVar(result_frame) setting initial value object age_var.set("") creating label display result statements footer_label Label( result_frame, text "The Calculated is:", font ("verdana", "10", "bold"), "#FEECCF", "#C8871E" age_label Label( result_frame, textvariable age_var, font ("verdana", "10", "bold"), "#FEECCF", "#1FA73B" using grid() method position these labels grid manner window footer_label.grid(row column padx pady sticky age_label.grid(row column padx pady sticky creating buttons reset entries yield result reset_button Button( result_frame, text "Reset Entries", width font ("verdana", "10"), relief GROOVE, command reset, "#FF0000", "#FFFFFF" calculate_button Button( result_frame, text "Calculate Age", width font ("verdana", "10"), relief GROOVE, command calculate_age, "#00FF00", "#000000" using grid() method position these buttons grid manner window reset_button.grid(row column padx pady calculate_button.grid(row column padx pady using mainloop() method application gui_root.mainloop() Output: Next TopicHow Iterate Dictionary Python prev next