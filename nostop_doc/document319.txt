next prev Defaultdict Python dictionary unordered collection data values Python used storing data values such maps. dictionary holds key-value pairs instead holding single value element like other data types. implemented dictionary must unique immutable. That Python tuple key, Python list cannot dictionary. create dictionary placing sequence elements inside curly brackets comma separate values. Example Dict_1 'A', 'B', 'C', 'D'} print ("Dictionary: print (Dict_1) print ("key pair Dict_1[1]) print ("key pair Dict_1[3]) Output: Dictionary: 'A', 'B', 'C', 'D'} pair pair print value then, will error because "Dict_1" does contain value. Example Dict_1 'A', 'B', 'C', 'D'} print ("Dictionary: print (Dict_1) print ("key pair Dict_1[5]) Output: Dictionary: 'A', 'B', 'C', 'D'} --------------------------------------------------------------------------- KeyError Traceback (most recent call last) print ("Dictionary: print (Dict_1) ----> print ("key pair Dict_1[5]) KeyError: Whenever keyError raised, become problem users. overcome this error using another dictionary Python, which like container known Defaultdict. users find this dictionary inside 'collections' module. defaultdict defaultdict dictionary Python, which like container present inside 'collections' module. sub-class dictionary class which used returning dictionary-like object. Both defaultdict dictionary have same functionality, except defaultdict never raise KeyError provides default value Key, which does exist dictionary created user. Syntax: defaultdict(default_factory) Parameters: default_factory: default_factory() function returns default value user dictionary defined them. this argument absent, then dictionary will raise KeyError. Example: from collections import defaultdict Function returning default values keys which present dictionary default_value(): return "This present" Now, will define dict dict_1 DD(default_value) dict_1["ABC"] dict_1["DEF"] dict_1["GHI"] dict_1["JKL"] print ("Dictionary: print (dict_1) print ("key pair dict_1["ABC"]) print ("key pair dict_1["GHI"]) print ("key pair dict_1["MNO"]) Output: Dictionary: defaultdict(, {'ABC': 'DEF': 'GHI': 'JKL': pair pair pair This present Inner Working defaultdict When defaultdict, additional writable instance variable method addition standard dictionary operations. writable instance variable default_factory parameter __missing__ method. default_factory: default_factory() function returns default value user dictionary defined them. Example: from collections import defaultdict dict_1 DD(lambda: "This present") dict_1["ABC"] dict_1["DEF"] dict_1["GHI"] dict_1["JKL"] print ("Dictionary: print (dict_1) print ("key value dict_1["ABC"]) print ("key value dict_1["GHI"]) print ("key value dict_1["MNO"]) Output: Dictionary: defaultdict( 0x0000019EFC4B58B0>, {'ABC': 'DEF': 'GHI': 'JKL': value value value This present __missing__(): __missing__() function used providing default value dictionary. __missing__() function takes default_factory argument, argument None, KeyError will raise; otherwise, will provide default value given key. This method essentially called __getitem__() function dict class when requested found. __getitem__() function raise return value which present __missing__() function. Example: from collections import defaultdict dict_1 DD(lambda: "This present") dict_1["ABC"] dict_1["DEF"] dict_1["GHI"] dict_1["JKL"] print ("Dictionary: print (dict_1) print ("key value dict_1.__missing__('ABC')) print ("key value dict_1["JKL"]) print ("key value dict_1.__missing__('MNO')) Output: Dictionary: defaultdict( 0x0000019EFC4B5670>, {'ABC': 'DEF': 'GHI': 'JKL': value This present value value This present "List" default_factory pass list class default_factory argument, will create defaultdict with values that list format. Example: from collections import defaultdict Defining dictionary dict_1 DD(list) range(7, 12): dict_1[k].append(k) print ("Dictionary with values list:") print (dict_1) Output: Dictionary with values list: defaultdict(<class 'list'>, {7: [7], [8], [9], [10], [11]}) "int" default_factory pass class default_factory argument, will create defaultdict with default value zero. Example: from collections import defaultdict Defining dict dict_1 DD(int) Now, will iterate through list "J" keeping count default value need enter first dict_1[k] print(dict_1) Output: defaultdict(<class 'int'>, Conclusion this tutorial, have discussed defaultdict Python perform different operations defaultdict using default_factory parameter. Next TopicOperator Module Python prev next