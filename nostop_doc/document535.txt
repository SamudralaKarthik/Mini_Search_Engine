next prev Namespace Python this tutorial, will learn about namespace Python, structure used organize symbolic names assigned objects Python program, namespace important, them Python program. Let's have brief introduction namespace. What Namespace? namespace providing unique name each object Python. Everything Python object, i.e., variable method. other words, collection defined symbolic names along with information about object that each name references. namespace understood dictionary where name represents objects values. Let's understand with real-life example namespace like surname. "Peter" name might difficult find class there multiple "Peter," when particularly "Peter Warner" "Peter Cummins,". might rare find same name surname class multiple students. namespace helps Python interpreter understand what exact method variable trying point code. name gives more information Name (which means name, unique identifier) Space (related scope). Python, there four types namespaces which given below. Built-in Global Enclosing Local these namespace various have lifetimes, Python interpreter creates namespaces necessary deletes them when they longer needed. Let's understand various types namespace Python. Built-in Namespace name suggests, contains pre-defined names Python's built-in objects already available Python. Let's list these names with following command. Open Python terminal type following command. Command dir(__builtins__) Output: ['ArithmeticError', 'AssertionError', 'AttributeError', 'BaseException', 'BlockingIOError', 'BrokenPipeError', 'BufferError', 'BytesWarning', 'ChildProcessError', 'ConnectionAbortedError', 'ConnectionError', 'ConnectionRefusedError', 'ConnectionResetError', 'DeprecationWarning', 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', 'False', 'FileExistsError', 'FileNotFoundError', 'FloatingPointError', 'FutureWarning', 'GeneratorExit', 'IOError', 'ImportError', 'ImportWarning', 'IndentationError', 'IndexError', 'InterruptedError', 'IsADirectoryError', 'KeyError', 'KeyboardInterrupt', 'LookupError', 'MemoryError', 'ModuleNotFoundError', 'NameError', 'None', 'NotADirectoryError', 'NotImplemented', 'NotImplementedError', 'OSError', 'OverflowError', 'PendingDeprecationWarning', 'PermissionError', 'ProcessLookupError', 'RecursionError', 'ReferenceError', 'ResourceWarning', 'RuntimeError', 'RuntimeWarning', 'StopAsyncIteration', 'StopIteration', 'SyntaxError', 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', 'TimeoutError', 'True', 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError', 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError', 'UnicodeWarning', 'UserWarning', 'ValueError', 'Warning', 'WindowsError', 'ZeroDivisionError', '__build_class__', '__debug__', '__doc__', '__import__', '__loader__', '__name__', '__package__', '__spec__', 'abs', 'all', 'any', 'ascii', 'bin', 'bool', 'breakpoint', 'bytearray', 'bytes', 'callable', 'chr', 'classmethod', 'compile', 'complex', 'copyright', 'credits', 'delattr', 'dict', 'dir', 'divmod', 'enumerate', 'eval', 'exec', 'exit', 'filter', 'float', 'format', 'frozenset', 'getattr', 'globals', 'hasattr', 'hash', 'help', 'hex', 'id', 'input', 'int', 'isinstance', 'issubclass', 'iter', 'len', 'license', 'list', 'locals', 'map', 'max', 'memoryview', 'min', 'next', 'object', 'oct', 'open', 'ord', 'pow', 'print', 'property', 'quit', 'range', 'repr', 'reversed', 'round', 'set', 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super', 'tuple', 'type', 'vars', 'zip'] built-in namespace creates Python interpreter when starts These terminated when Python interpreter terminates. Global Namespace global namespace consists names Python level main program. created when main body executes remains existence until interpreter terminates. Python interpreter creates global namespace module that Python loads with import statement. more information, visit Python Module. Local Enclosing Namespaces function uses local namespaces; Python interpreter creates namespace when function executed. local namespaces remain existence until function terminates. function also consist another function. define function inside another below. Example f(): print('Initiate f()') g(): print('Initiate g()') print('End g()') return print('Initiate f()') return above example, function defined within body f(). Inside called called main function. Let's understand working above function When calls f(), Python creates namespace f(). Similarly, calls g(), gets separate namespace. Here local namespace created enclosing namespace. Each these namespace terminated when function terminated. Scope Object/Variable scope term which defines coding region from particular Python object accessible. Every object/variable scope where access that particular variable program. example variable function only access inside function. Let's understand following example Example scope_func(): print("Inside scope_func") scope_inner_func(): print("Inside inner function, value var:",var) scope_inner_func() print("Try printing from outer function: ",var) scope_func() Output: Inside scope_func Inside inner function, value var: Traceback (most recent call last): File "d:/Python Project/listproblems.py", line 343, scope_func() File "d:/Python Project/listproblems.py", line 342, scope_func print("Try printing from outer function: ",var) NameError: name 'var' defined Python Namespace Dictionaries earlier tutorial, have discussed that namespaces dictionaries which keys object names values objects themselves. Python implements global local namespaces dictionaries. Python comes with globals() locals() methods that allow access global local namespace dictionaries. globals() Method globals() method returns reference current global namespace dictionary. access objects global namespace. Let's below example. Example type(globals()) <class 'dict'> globals() {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': None, '__annotations__': '__builtins__': <module 'builtins' (built-in)>} that, there many built-in entries globals() method. differ according your operating system Python version. let's define global variable observe differences. globals() {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': None, '__annotations__': '__builtins__': <module 'builtins' (built-in)>, 'a': After assignment global variable assigned global namespace dictionary. access values access dictionaries. Let's below example. globals() {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': None, '__annotations__': '__builtins__': <module 'builtins' (built-in)>, 'a': globals()['a'] modify dictionary value using globals() function. globals()['a'] value will appeared global dictionaries. locals() Function Python also provides locals() method similar globals() accesses objects local namespace instead. Let's following example. Example func(a, str1 "Hello" locals() print(loc) func(10, {'a': 'b': 'str1': 'Hello'} When call func(10, 20), locals() return dictionary representing function's local namespace. function scope, defined local variable str1; local namespace included function arguments since they local func(). However, when call locals() function, behaves same globals() function. There small difference between globals() locals() function. globals() save return value subsequently define additional variables. variables will show dictionary along with their value. Let's below example. Example glob_var globals() glob_var {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': None, '__annotations__': '__builtins__': <module 'builtins' (built-in)>, 'a': 100, 'func': <function func 0x000001670FB85160>, 'glob_var': {...}, 'x': 100, 'y': 'JavaTpoint'} glob_var {'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <class '_frozen_importlib.BuiltinImporter'>, '__spec__': None, '__annotations__': '__builtins__': <module 'builtins' (built-in)>, 'a': 100, 'func': <function func 0x000001670FB85160>, 'glob_var': {...}, 'x': 100, 'y': 'JavaTpoint'} Here glob_var reference global namespace dictionary. assignment statements appeared glob_var dictionary. Changing Variables Scope function change argument calling environment passing different value sometimes can't change value. function cannot modify immutable argument. mutable argument cannot redefined wholesale, modified place. Let's understand following scenario. Example func(): print(x) func() print(x) Output: define global variable also function with same name. When func() execute, creates local variable reference integer object whose value Inside func() body, assignment statement won't affect global object. However, function modify object mutable type outside local scope. Let's understand below example. Example my_list ['Hello', 'From', 'JavaTpoint'] func(): my_list[1] 'Welcome return my_list print(func()) my_list list mutable type. func() modify inside my_list even though outside local scope. But, reassigned my_list, will create local object won't modify global my_list. Let's below example. Example my_list ['Hello', 'from', 'JavaTpoint'] func(): my_list ['A', 'B', 'C', 'D', 'E', return my_list print(func()) Output: ['A', 'B', 'C', 'D', 'E'] Conclusion have covered namespace, variable's scope. short Python program will create many different objects. complex Python program, this number thousand. Python namespace helps interpreter keep track these objects their names. Next TopicPython Program return Sign product Array prev next